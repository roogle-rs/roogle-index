{"root":"0:0:1596","crate_version":"1.1.0","includes_private":false,"index":{"1:2938:174":{"id":"1:2938:174","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2940:984","1:2941:813","1:2942:779","1:2943:701","1:2944:684"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8330:3228":{"id":"1:8330:3228","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8332:3671"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:7798:4252":{"id":"5:7798:4252","crate_id":5,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:7799:59321"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:54:1855":{"id":"0:54:1855","crate_id":0,"name":"get_i16","span":{"filename":"src/buf/buf_impl.rs","begin":[373,4],"end":[375,5]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_i16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3075:4400":{"id":"1:3075:4400","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3074:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3218:115":{"id":"1:3218:115","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3219:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3360:3186":{"id":"1:3360:3186","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3361:171","1:3362:939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8376:2844":{"id":"1:8376:2844","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8378:2815","1:8380:3624","1:8381:3625"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13472:56784":{"id":"1:13472:56784","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1596":{"id":"0:0:1596","crate_id":0,"name":"bytes","span":{"filename":"src/lib.rs","begin":[1,0],"end":[116,1]},"visibility":"public","docs":"Provides abstractions for working with bytes.\n\nThe `bytes` crate provides an efficient byte buffer structure\n([`Bytes`](struct.Bytes.html)) and traits for working with buffer\nimplementations ([`Buf`], [`BufMut`]).\n\n[`Buf`]: trait.Buf.html\n[`BufMut`]: trait.BufMut.html\n\n# `Bytes`\n\n`Bytes` is an efficient container for storing and operating on contiguous\nslices of memory. It is intended for use primarily in networking code, but\ncould have applications elsewhere as well.\n\n`Bytes` values facilitate zero-copy network programming by allowing multiple\n`Bytes` objects to point to the same underlying memory. This is managed by\nusing a reference count to track when the memory is no longer needed and can\nbe freed.\n\nA `Bytes` handle can be created directly from an existing byte store (such as `&[u8]`\nor `Vec<u8>`), but usually a `BytesMut` is used first and written to. For\nexample:\n\n```rust\nuse bytes::{BytesMut, BufMut};\n\nlet mut buf = BytesMut::with_capacity(1024);\nbuf.put(&b\"hello world\"[..]);\nbuf.put_u16(1234);\n\nlet a = buf.split();\nassert_eq!(a, b\"hello world\\x04\\xD2\"[..]);\n\nbuf.put(&b\"goodbye world\"[..]);\n\nlet b = buf.split();\nassert_eq!(b, b\"goodbye world\"[..]);\n\nassert_eq!(buf.capacity(), 998);\n```\n\nIn the above example, only a single buffer of 1024 is allocated. The handles\n`a` and `b` will share the underlying buffer and maintain indices tracking\nthe view into the buffer represented by the handle.\n\nSee the [struct docs] for more details.\n\n[struct docs]: struct.Bytes.html\n\n# `Buf`, `BufMut`\n\nThese two traits provide read and write access to buffers. The underlying\nstorage may or may not be in contiguous memory. For example, `Bytes` is a\nbuffer that guarantees contiguous memory, but a [rope] stores the bytes in\ndisjoint chunks. `Buf` and `BufMut` maintain cursors tracking the current\nposition in the underlying byte storage. When bytes are read or written, the\ncursor is advanced.\n\n[rope]: https://en.wikipedia.org/wiki/Rope_(data_structure)\n\n## Relation with `Read` and `Write`\n\nAt first glance, it may seem that `Buf` and `BufMut` overlap in\nfunctionality with `std::io::Read` and `std::io::Write`. However, they\nserve different purposes. A buffer is the value that is provided as an\nargument to `Read::read` and `Write::write`. `Read` and `Write` may then\nperform a syscall, which has the potential of failing. Operations on `Buf`\nand `BufMut` are infallible.","links":{},"attrs":["#![warn(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:6:1593","0:452","0:455","0:1070","0:1073"],"is_stripped":false}},"0:1233:1719":{"id":"0:1233:1719","crate_id":0,"name":"Chain","span":{"filename":"src/buf/chain.rs","begin":[32,0],"end":[35,1]},"visibility":"public","docs":"A `Chain` sequences two buffers.\n\n`Chain` is an adapter that links two underlying buffers and provides a\ncontinuous view across both buffers. It is able to sequence either immutable\nbuffers ([`Buf`] values) or mutable buffers ([`BufMut`] values).\n\nThis struct is generally created by calling [`Buf::chain`]. Please see that\nfunction's documentation for more detail.\n\n# Examples\n\n```\nuse bytes::{Bytes, Buf};\n\nlet mut buf = (&b\"hello \"[..])\n    .chain(&b\"world\"[..]);\n\nlet full: Bytes = buf.copy_to_bytes(11);\nassert_eq!(full[..], b\"hello world\"[..]);\n```\n\n[`Buf::chain`]: trait.Buf.html#method.chain\n[`Buf`]: trait.Buf.html\n[`BufMut`]: trait.BufMut.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:174:2181":{"id":"0:174:2181","crate_id":0,"name":"put_f64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[869,4],"end":[871,5]},"visibility":"default","docs":"Writes  an IEEE754 double-precision (8 bytes) floating point number to\n`self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f64_le(1.2f64);\nassert_eq!(buf, b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1903":{"id":"0:67:1903","crate_id":0,"name":"get_i128_le","span":{"filename":"src/buf/buf_impl.rs","begin":[633,4],"end":[635,5]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3252:209":{"id":"1:3252:209","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13364:56757":{"id":"1:13364:56757","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6101:57450":{"id":"4:6101:57450","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"5:15862:2909"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3742:3091":{"id":"1:3742:3091","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:983:648":{"id":"0:983:648","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[1,0],"end":[5,30]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"1:13372:1833":{"id":"1:13372:1833","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:15873:2918"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13481:56786":{"id":"1:13481:56786","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70:1916":{"id":"0:70:1916","crate_id":0,"name":"get_int","span":{"filename":"src/buf/buf_impl.rs","begin":[693,4],"end":[695,5]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_int(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154:2109":{"id":"0:154:2109","crate_id":0,"name":"put_i16_le","span":{"filename":"src/buf/buf_mut.rs","begin":[425,4],"end":[427,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i16_le(0x0809);\nassert_eq!(buf, b\"\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4711:2317":{"id":"5:4711:2317","crate_id":5,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4712:2318","5:4713:2319","5:4714:3854","5:4716:3042","5:4717:3855","5:4719:2736","5:4720:3856"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"5:4629:2315","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:171:2170":{"id":"0:171:2170","crate_id":0,"name":"put_f32","span":{"filename":"src/buf/buf_mut.rs","begin":[800,4],"end":[802,5]},"visibility":"default","docs":"Writes  an IEEE754 single-precision (4 bytes) floating point number to\n`self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f32(1.2f32);\nassert_eq!(buf, b\"\\x3F\\x99\\x99\\x9A\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5650:4887":{"id":"5:5650:4887","crate_id":5,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5651:2680","5:5652:2610"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10562:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13399:56764":{"id":"1:13399:56764","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:15856:2904","self::pattern":"1:12997:3288"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13373:1738":{"id":"1:13373:1738","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:374:1723":{"id":"0:374:1723","crate_id":0,"name":"UninitSlice","span":{"filename":"src/buf/uninit_slice.rs","begin":[22,0],"end":[22,42]},"visibility":"public","docs":"Uninitialized byte slice.\n\nReturned by `BufMut::chunk_mut()`, the referenced byte slice may be\nuninitialized. The wrapper provides safe access without introducing\nundefined behavior.\n\nThe safety invariants of this wrapper are:\n\n 1. Reading from an `UninitSlice` is undefined behavior.\n 2. Writing uninitialized bytes to an `UninitSlice` is undefined behavior.\n\nThe difference between `&mut UninitSlice` and `&mut [MaybeUninit<u8>]` is\nthat it is possible in safe code to write uninitialized bytes to an\n`&mut [MaybeUninit<u8>]`, which this type prohibits.","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"5:5738:4894":{"id":"5:5738:4894","crate_id":5,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5739:6570","5:5740:7721"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13396:56763":{"id":"1:13396:56763","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:177:2205":{"id":"0:177:2205","crate_id":0,"name":"chain_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[943,4],"end":[948,5]},"visibility":"default","docs":"Creates an adapter which will chain this buffer with another.\n\nThe returned `BufMut` instance will first write to all bytes from\n`self`. Afterwards, it will write to `next`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut a = [0u8; 5];\nlet mut b = [0u8; 6];\n\nlet mut chain = (&mut a[..]).chain_mut(&mut b[..]);\n\nchain.put_slice(b\"hello world\");\n\nassert_eq!(&a[..], b\"hello\");\nassert_eq!(&b[..], b\" world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["next",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"0:1233:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"BufMut","id":"0:140:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:458:1596":{"id":"0:458:1596","crate_id":0,"name":"bytes","span":{"filename":"src/bytes.rs","begin":[1,0],"end":[1144,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:526:1599"],"is_stripped":true}},"1:13406:3623":{"id":"1:13406:3623","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904","`None`":"1:47356:166"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:267:1713":{"id":"0:267:1713","crate_id":0,"name":"limit","span":{"filename":"src/buf/limit.rs","begin":[1,0],"end":[75,1]},"visibility":{"restricted":{"parent":"0:6:1593","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1248:1721"],"is_stripped":true}},"1:3411:3193":{"id":"1:3411:3193","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3413:1216"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10276:3330":{"id":"1:10276:3330","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10277:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:1079:4914":{"id":"5:1079:4914","crate_id":5,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:1080:3276","5:1081:4739","5:1082:57450","5:1083:57451","5:1084:56786","5:1085:56787","5:1086:56788"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1298:1725":{"id":"0:1298:1725","crate_id":0,"name":"Writer","span":{"filename":"src/buf/writer.rs","begin":[11,0],"end":[13,1]},"visibility":"public","docs":"A `BufMut` adapter which implements `io::Write` for the inner value.\n\nThis struct is generally created by calling `writer()` on `BufMut`. See\ndocumentation of [`writer()`](trait.BufMut.html#method.writer) for more\ndetails.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:168:2159":{"id":"0:168:2159","crate_id":0,"name":"put_uint_le","span":{"filename":"src/buf/buf_mut.rs","begin":[733,4],"end":[735,5]},"visibility":"default","docs":"Writes an unsigned n-byte integer to `self` in the little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_uint_le(0x010203, 3);\nassert_eq!(buf, b\"\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13446:56774":{"id":"1:13446:56774","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"5:15856:2904","self::pattern":"1:12997:3288","`DoubleEndedIterator`":"1:8411:120","str::match_indices":"5:15862:2909"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49488:4587","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3459:116":{"id":"1:3459:116","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3460:210","1:3461:532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:176:1718":{"id":"0:176:1718","crate_id":0,"name":"writer","span":{"filename":"src/buf/buf_mut.rs","begin":[916,4],"end":[921,5]},"visibility":"default","docs":"Creates an adaptor which implements the `Write` trait for `self`.\n\nThis function returns a new value which implements `Write` by adapting\nthe `Write` trait functions to the `BufMut` trait functions. Given that\n`BufMut` operations are infallible, none of the `Write` functions will\nreturn with `Err`.\n\n# Examples\n\n```\nuse bytes::BufMut;\nuse std::io::Write;\n\nlet mut buf = vec![].writer();\n\nlet num = buf.write(&b\"hello world\"[..]).unwrap();\nassert_eq!(11, num);\n\nlet buf = buf.into_inner();\n\nassert_eq!(*buf, b\"hello world\"[..]);\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Writer","id":"0:1298:1725","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:153:2106":{"id":"0:153:2106","crate_id":0,"name":"put_i16","span":{"filename":"src/buf/buf_mut.rs","begin":[403,4],"end":[405,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i16(0x0809);\nassert_eq!(buf, b\"\\x08\\x09\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3153:216":{"id":"1:3153:216","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3155:127","1:3156:1394"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:44:1737":{"id":"0:44:1737","crate_id":0,"name":"chunk","span":{"filename":"src/buf/buf_impl.rs","begin":[133,4],"end":[133,29]},"visibility":"default","docs":"Returns a slice starting at the current position and of length between 0\nand `Buf::remaining()`. Note that this *can* return shorter slice (this allows\nnon-continuous internal representation).\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Implementer notes\n\nThis function should never panic. Once the end of the buffer is reached,\ni.e., `Buf::remaining` returns 0, calls to `chunk()` should return an\nempty slice.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:52:1848":{"id":"0:52:1848","crate_id":0,"name":"get_u16","span":{"filename":"src/buf/buf_impl.rs","begin":[333,4],"end":[335,5]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_u16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5828:4743":{"id":"4:5828:4743","crate_id":4,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5830:171","4:5831:421"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13402:3657":{"id":"1:13402:3657","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:47356:166","prim@char":"5:15856:2904","self::pattern":"1:12997:3288"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4704:3040":{"id":"5:4704:3040","crate_id":5,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4705:60366","5:4706:40139","5:4707:60367","5:4708:60368"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6099:57449":{"id":"4:6099:57449","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"4:8354:205","`Box<str>`":"4:432:1730"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"4:432:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8092:3101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:1852":{"id":"0:53:1852","crate_id":0,"name":"get_u16_le","span":{"filename":"src/buf/buf_impl.rs","begin":[353,4],"end":[355,5]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_u16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13387:1596":{"id":"1:13387:1596","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49306:1599","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4629:2315":{"id":"5:4629:2315","crate_id":5,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4630:2316","5:4631:3848","5:4633:3849","5:4634:3850","5:4635:3038","5:4636:3851","5:4637:3852","5:4639:3853","5:4640:3646","5:4641:1596","5:4642:1712","5:4644:1715"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7891:3214":{"id":"1:7891:3214","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7892:56164","1:7893:56165","1:7894:56162","1:7895:56160","1:7896:56166","1:7897:56163","1:7898:56161"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3347:3180":{"id":"1:3347:3180","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3349:880"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:163:2141":{"id":"0:163:2141","crate_id":0,"name":"put_u128","span":{"filename":"src/buf/buf_mut.rs","begin":[623,4],"end":[625,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u128(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10264:3327":{"id":"1:10264:3327","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10265:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3483:1604":{"id":"1:3483:1604","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3484:567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:166:2151":{"id":"0:166:2151","crate_id":0,"name":"put_i128_le","span":{"filename":"src/buf/buf_mut.rs","begin":[689,4],"end":[691,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i128_le(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5730:4892":{"id":"5:5730:4892","crate_id":5,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5731:6570","5:5732:59110","5:5733:59111"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13363:56756":{"id":"1:13363:56756","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6793:4858":{"id":"5:6793:4858","crate_id":5,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6794:7716"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10562:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3335:3175":{"id":"1:3335:3175","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3336:171","1:3337:900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3146:135":{"id":"1:3146:135","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3148:669"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13710:138":{"id":"1:13710:138","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13711:171","1:13712:1000"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9222:3461":{"id":"1:9222:3461","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13463:38553":{"id":"1:13463:38553","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:15856:2904","self::pattern":"1:12997:3288"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13457:56780":{"id":"1:13457:56780","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:13027:4335","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3615:2407":{"id":"1:3615:2407","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3617:2500","1:3618:2504","1:3619:3931"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13386:4360":{"id":"1:13386:4360","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:15856:2904"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49296:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13379:55623":{"id":"1:13379:55623","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8846:3226":{"id":"1:8846:3226","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10268:2879":{"id":"1:10268:2879","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10269:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:169:2163":{"id":"0:169:2163","crate_id":0,"name":"put_int","span":{"filename":"src/buf/buf_mut.rs","begin":[755,4],"end":[757,5]},"visibility":"default","docs":"Writes low `nbytes` of a signed integer to `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_int(0x0504010203, 3);\nassert_eq!(buf, b\"\\x01\\x02\\x03\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self` or if `nbytes` is greater than 8.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50:1839":{"id":"0:50:1839","crate_id":0,"name":"get_u8","span":{"filename":"src/buf/buf_impl.rs","begin":[287,4],"end":[292,5]},"visibility":"default","docs":"Gets an unsigned 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_u8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10274:3329":{"id":"1:10274:3329","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10275:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3377:3185":{"id":"1:3377:3185","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3379:171","1:3380:345"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1255:1724":{"id":"0:1255:1724","crate_id":0,"name":"Reader","span":{"filename":"src/buf/reader.rs","begin":[11,0],"end":[13,1]},"visibility":"public","docs":"A `Buf` adapter which implements `io::Read` for the inner value.\n\nThis struct is generally created by calling `reader()` on `Buf`. See\ndocumentation of [`reader()`](trait.Buf.html#method.reader) for more\ndetails.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:13487:56790":{"id":"1:13487:56790","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"5:15856:2904"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49637:4597","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4686:2405":{"id":"5:4686:2405","crate_id":5,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4687:2372","5:4688:3927","5:4690:3928","5:4691:2406","5:4692:3929","5:4693:3930","5:4694:2843","5:4703:3646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13466:56782":{"id":"1:13466:56782","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:159:2127":{"id":"0:159:2127","crate_id":0,"name":"put_u64","span":{"filename":"src/buf/buf_mut.rs","begin":[535,4],"end":[537,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u64(0x0102030405060708);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1242:1720":{"id":"0:1242:1720","crate_id":0,"name":"IntoIter","span":{"filename":"src/buf/iter.rs","begin":[26,0],"end":[28,1]},"visibility":"public","docs":"Iterator over the bytes contained by the buffer.\n\nThis struct is created by the [`iter`] method on [`Buf`].\n\n# Examples\n\nBasic usage:\n\n```\nuse bytes::Bytes;\n\nlet buf = Bytes::from(&b\"abc\"[..]);\nlet mut iter = buf.into_iter();\n\nassert_eq!(iter.next(), Some(b'a'));\nassert_eq!(iter.next(), Some(b'b'));\nassert_eq!(iter.next(), Some(b'c'));\nassert_eq!(iter.next(), None);\n```\n\n[`iter`]: trait.Buf.html#method.iter\n[`Buf`]: trait.Buf.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:9223:3460":{"id":"1:9223:3460","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13362:1806":{"id":"1:13362:1806","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3544:2342":{"id":"1:3544:2342","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3546:171","1:3547:740"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13469:56783":{"id":"1:13469:56783","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:15856:2904","self::pattern":"1:12997:3288"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1261:1722":{"id":"0:1261:1722","crate_id":0,"name":"Take","span":{"filename":"src/buf/take.rs","begin":[10,0],"end":[13,1]},"visibility":"public","docs":"A `Buf` adapter which limits the bytes read from an underlying buffer.\n\nThis struct is generally created by calling `take()` on `Buf`. See\ndocumentation of [`take()`](trait.Buf.html#method.take) for more details.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:13369:2574":{"id":"1:13369:2574","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12468:4707"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6078":{"id":"4:6078","crate_id":4,"name":null,"span":null,"visibility":{"restricted":{"parent":"4:5898:1319","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["4:6079:57445","4:6080:2208","4:6083:57446","4:6086:57447","4:6098:57448","4:6099:57449","4:6100:3065","4:6101:57450","4:6102:57451"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:167:2155":{"id":"0:167:2155","crate_id":0,"name":"put_uint","span":{"filename":"src/buf/buf_mut.rs","begin":[711,4],"end":[713,5]},"visibility":"default","docs":"Writes an unsigned n-byte integer to `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_uint(0x010203, 3);\nassert_eq!(buf, b\"\\x01\\x02\\x03\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6864:4862":{"id":"5:6864:4862","crate_id":5,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6865:59141"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6079:57445":{"id":"4:6079:57445","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"4:432:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8092:3101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"4:432:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8092:3101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3526:3093":{"id":"1:3526:3093","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3528:226","1:3529:196","1:3530:55517"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13484:56789":{"id":"1:13484:56789","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"5:15856:2904"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49619:4595","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:1863":{"id":"0:56:1863","crate_id":0,"name":"get_u32","span":{"filename":"src/buf/buf_impl.rs","begin":[413,4],"end":[415,5]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:161:2134":{"id":"0:161:2134","crate_id":0,"name":"put_i64","span":{"filename":"src/buf/buf_mut.rs","begin":[579,4],"end":[581,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i64(0x0102030405060708);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6440:4858":{"id":"5:6440:4858","crate_id":5,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6441:5126","5:6442:5127","5:6443:7715","5:6444:59590","5:6446:59594","5:6448:59591","5:6449:59592","5:6451:59593"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10562:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23006:4421":{"id":"1:23006:4421","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23655:4415","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22997:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5788:4897":{"id":"5:5788:4897","crate_id":5,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5789:59346"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13381:4930":{"id":"1:13381:4930","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:15862:2909","str::slice_mut_unchecked":"5:15862:2909","crate::ops::Index":"1:3544:2342"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1929":{"id":"0:73:1929","crate_id":0,"name":"get_f32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[755,4],"end":[757,5]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x9A\\x99\\x99\\x3F hello\"[..];\nassert_eq!(1.2f32, buf.get_f32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164:2145":{"id":"0:164:2145","crate_id":0,"name":"put_u128_le","span":{"filename":"src/buf/buf_mut.rs","begin":[645,4],"end":[647,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u128_le(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3548:2343":{"id":"1:3548:2343","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3550:741"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3544:2342","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3318:3174":{"id":"1:3318:3174","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3320:171","1:3321:879"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6086:57447":{"id":"4:6086:57447","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2862:104":{"id":"1:2862:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2863:397","1:2864:399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13382:56760":{"id":"1:13382:56760","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:15862:2909","crate::ops::IndexMut":"1:3548:2343","str::slice_unchecked":"5:15862:2909"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:438":{"id":"0:438","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[37,0],"end":[37,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::take::Take","name":"Take","id":"0:1261:1722","glob":false}},"1:3489:131":{"id":"1:3489:131","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3491:366"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3492:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3967:68":{"id":"1:3967:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3968:1408"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:3323:3173":{"id":"1:3323:3173","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3325:171","1:3326:547"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:342:1716":{"id":"0:342:1716","crate_id":0,"name":"uninit_slice","span":{"filename":"src/buf/uninit_slice.rs","begin":[1,0],"end":[183,2]},"visibility":{"restricted":{"parent":"0:6:1593","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:374:1723"],"is_stripped":true}},"1:23655:4415":{"id":"1:23655:4415","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23656:4420"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23651:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:62:1885":{"id":"0:62:1885","crate_id":0,"name":"get_i64","span":{"filename":"src/buf/buf_impl.rs","begin":[533,4],"end":[535,5]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:786:1600":{"id":"0:786:1600","crate_id":0,"name":"BytesMut","span":{"filename":"src/bytes_mut.rs","begin":[60,0],"end":[65,1]},"visibility":"public","docs":"A unique reference to a contiguous slice of memory.\n\n`BytesMut` represents a unique view into a potentially shared memory region.\nGiven the uniqueness guarantee, owners of `BytesMut` handles are able to\nmutate the memory.\n\n`BytesMut` can be thought of as containing a `buf: Arc<Vec<u8>>`, an offset\ninto `buf`, a slice length, and a guarantee that no other `BytesMut` for the\nsame `buf` overlaps with its slice. That guarantee means that a write lock\nis not required.\n\n# Growth\n\n`BytesMut`'s `BufMut` implementation will implicitly grow its buffer as\nnecessary. However, explicitly reserving the required space up-front before\na series of inserts will be more efficient.\n\n# Examples\n\n```\nuse bytes::{BytesMut, BufMut};\n\nlet mut buf = BytesMut::with_capacity(64);\n\nbuf.put_u8(b'h');\nbuf.put_u8(b'e');\nbuf.put(&b\"llo\"[..]);\n\nassert_eq!(&buf[..], b\"hello\");\n\n// Freeze the buffer so that it can be shared\nlet a = buf.freeze();\n\n// This does not allocate, instead `b` points to the same memory.\nlet b = a.clone();\n\nassert_eq!(&a[..], b\"hello\");\nassert_eq!(&b[..], b\"hello\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:49:1741":{"id":"0:49:1741","crate_id":0,"name":"copy_to_slice","span":{"filename":"src/buf/buf_impl.rs","begin":[250,4],"end":[269,5]},"visibility":"default","docs":"Copies bytes from `self` into `dst`.\n\nThe cursor is advanced by the number of bytes copied. `self` must have\nenough remaining bytes to fill `dst`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\nlet mut dst = [0; 5];\n\nbuf.copy_to_slice(&mut dst);\nassert_eq!(&b\"hello\"[..], &dst);\nassert_eq!(6, buf.remaining());\n```\n\n# Panics\n\nThis function panics if `self.remaining() < dst.len()`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3137:75":{"id":"1:3137:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3139:294"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:8411:120":{"id":"1:8411:120","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8412:3618","1:8413:3619","1:8414:3620","1:8415:3621","1:8419:3622","1:8422:3623"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:448":{"id":"0:448","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[41,31],"end":[41,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::writer::Writer","name":"Writer","id":"0:1298:1725","glob":false}},"1:13390:3856":{"id":"1:13390:3856","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49574:3045","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2840:2635":{"id":"1:2840:2635","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2842:2842"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13434:56771":{"id":"1:13434:56771","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8436:2287":{"id":"1:8436:2287","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8437:780","1:8438:1806"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:143:2038":{"id":"0:143:2038","crate_id":0,"name":"has_remaining_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[120,4],"end":[122,5]},"visibility":"default","docs":"Returns true if there is space in `self` for more bytes.\n\nThis is equivalent to `self.remaining_mut() != 0`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 5];\nlet mut buf = &mut dst[..];\n\nassert!(buf.has_remaining_mut());\n\nbuf.put(&b\"hello\"[..]);\n\nassert!(!buf.has_remaining_mut());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:429":{"id":"0:429","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[34,0],"end":[34,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::chain::Chain","name":"Chain","id":"0:1233:1719","glob":false}},"1:10270:2880":{"id":"1:10270:2880","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10271:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:432":{"id":"0:432","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[35,0],"end":[35,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::iter::IntoIter","name":"IntoIter","id":"0:1242:1720","glob":false}},"1:13480:4739":{"id":"1:13480:4739","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14109:141":{"id":"1:14109:141","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14110:266","1:14111:507","1:14112:269","1:14113:1066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13391:56762":{"id":"1:13391:56762","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49584:4591","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3701:137":{"id":"1:3701:137","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3703:675"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3245:1959":{"id":"1:3245:1959","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13437:2929":{"id":"1:13437:2929","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12997:3288","str::matches":"5:15862:2909","`DoubleEndedIterator`":"1:8411:120","prim@char":"5:15856:2904"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49524:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:2576:127":{"id":"5:2576:127","crate_id":5,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:2577:8011","5:2579:2964","5:2580:59690","5:2581:59691","5:2582:59692"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13375:2285":{"id":"1:13375:2285","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13410:2736":{"id":"1:13410:2736","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"5:15862:2909","`DoubleEndedIterator`":"1:8411:120","prim@char":"5:15856:2904","self::pattern":"1:12997:3288","str::split_whitespace":"5:15862:2909"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49320:3044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8326:3229":{"id":"1:8326:3229","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8328:3670"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13455:56778":{"id":"1:13455:56778","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,26],"end":[84,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::buf::BufMut","name":"BufMut","id":"0:140:1595","glob":false}},"4:783:211":{"id":"4:783:211","crate_id":4,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:784:3276","4:785:54665","4:786:54666"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13413:18042":{"id":"1:13413:18042","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12789:3888","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64:1893":{"id":"0:64:1893","crate_id":0,"name":"get_u128","span":{"filename":"src/buf/buf_impl.rs","begin":[573,4],"end":[575,5]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5722:4893":{"id":"5:5722:4893","crate_id":5,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5723:60451","5:5724:60453","5:5725:60452","5:5726:60454"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13361:780":{"id":"1:13361:780","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:15856:2904"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:199:1712":{"id":"0:199:1712","crate_id":0,"name":"chain","span":{"filename":"src/buf/chain.rs","begin":[1,0],"end":[243,1]},"visibility":{"restricted":{"parent":"0:6:1593","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1233:1719"],"is_stripped":true}},"1:13425:56768":{"id":"1:13425:56768","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"5:15862:2909","self::pattern":"1:12997:3288","prim@char":"5:15856:2904"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49424:3873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6560:4910":{"id":"5:6560:4910","crate_id":5,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6561:59287","5:6562:59288"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:165:2148":{"id":"0:165:2148","crate_id":0,"name":"put_i128","span":{"filename":"src/buf/buf_mut.rs","begin":[667,4],"end":[669,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i128(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1045:1339":{"id":"0:1045:1339","crate_id":0,"name":"sync","span":{"filename":"src/loom.rs","begin":[2,0],"end":[2,19]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(not(all(test, loom)))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:151:2097":{"id":"0:151:2097","crate_id":0,"name":"put_u16","span":{"filename":"src/buf/buf_mut.rs","begin":[359,4],"end":[361,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u16(0x0809);\nassert_eq!(buf, b\"\\x08\\x09\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3339:3178":{"id":"1:3339:3178","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3341:255"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3248:207":{"id":"1:3248:207","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13388:18353":{"id":"1:13388:18353","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"5:15862:2909"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49594:4592","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45:1803":{"id":"0:45:1803","crate_id":0,"name":"chunks_vectored","span":{"filename":"src/buf/buf_impl.rs","begin":[163,4],"end":[174,5]},"visibility":"default","docs":"Fills `dst` with potentially multiple slices starting at `self`'s\ncurrent position.\n\nIf the `Buf` is backed by disjoint slices of bytes, `chunk_vectored` enables\nfetching more than one slice at once. `dst` is a slice of `IoSlice`\nreferences, enabling the slice to be directly used with [`writev`]\nwithout any further conversion. The sum of the lengths of all the\nbuffers in `dst` will be less than or equal to `Buf::remaining()`.\n\nThe entries in `dst` will be overwritten, but the data **contained** by\nthe slices **will not** be modified. If `chunk_vectored` does not fill every\nentry in `dst`, then `dst` is guaranteed to contain all remaining slices\nin `self.\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Implementer notes\n\nThis function should never panic. Once the end of the buffer is reached,\ni.e., `Buf::remaining` returns 0, calls to `chunk_vectored` must return 0\nwithout mutating `dst`.\n\nImplementations should also take care to properly handle being called\nwith `dst` being a zero length slice.\n\n[`writev`]: http://man7.org/linux/man-pages/man2/readv.2.html","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"5:11065:1728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:2117":{"id":"0:156:2117","crate_id":0,"name":"put_u32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[469,4],"end":[471,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u32_le(0x0809A0A1);\nassert_eq!(buf, b\"\\xA1\\xA0\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13416:56765":{"id":"1:13416:56765","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904","str::split":"5:15862:2909","`DoubleEndedIterator`":"1:8411:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49338:3875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1740":{"id":"0:47:1740","crate_id":0,"name":"advance","span":{"filename":"src/buf/buf_impl.rs","begin":[206,4],"end":[206,38]},"visibility":"default","docs":"Advance the internal cursor of the Buf\n\nThe next call to `chunk()` will return a slice starting `cnt` bytes\nfurther into the underlying buffer.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Panics\n\nThis function **may** panic if `cnt > self.remaining()`.\n\n# Implementer notes\n\nIt is recommended for implementations of `advance` to panic if `cnt >\nself.remaining()`. If the implementation does not panic, the call must\nbehave as if `cnt == self.remaining()`.\n\nA call with `cnt == 0` should never panic and be a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"4:6080:2208":{"id":"4:6080:2208","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:526:1599":{"id":"0:526:1599","crate_id":0,"name":"Bytes","span":{"filename":"src/bytes.rs","begin":[94,0],"end":[100,1]},"visibility":"public","docs":"A cheaply cloneable and sliceable chunk of contiguous memory.\n\n`Bytes` is an efficient container for storing and operating on contiguous\nslices of memory. It is intended for use primarily in networking code, but\ncould have applications elsewhere as well.\n\n`Bytes` values facilitate zero-copy network programming by allowing multiple\n`Bytes` objects to point to the same underlying memory.\n\n`Bytes` does not have a single implementation. It is an interface, whose\nexact behavior is implemented through dynamic dispatch in several underlying\nimplementations of `Bytes`.\n\nAll `Bytes` implementations must fulfill the following requirements:\n- They are cheaply cloneable and thereby shareable between an unlimited amount\n  of components, for example by modifying a reference count.\n- Instances can be sliced to refer to a subset of the the original buffer.\n\n```\nuse bytes::Bytes;\n\nlet mut mem = Bytes::from(\"Hello world\");\nlet a = mem.slice(0..5);\n\nassert_eq!(a, \"Hello\");\n\nlet b = mem.split_to(6);\n\nassert_eq!(mem, \"world\");\nassert_eq!(b, \"Hello \");\n```\n\n# Memory layout\n\nThe `Bytes` struct itself is fairly small, limited to 4 `usize` fields used\nto track information about which segment of the underlying memory the\n`Bytes` handle has access to.\n\n`Bytes` keeps both a pointer to the shared state containing the full memory\nslice and a pointer to the start of the region visible by the handle.\n`Bytes` also tracks the length of its view into the memory.\n\n# Sharing\n\n`Bytes` contains a vtable, which allows implementations of `Bytes` to define\nhow sharing/cloneing is implemented in detail.\nWhen `Bytes::clone()` is called, `Bytes` will call the vtable function for\ncloning the backing storage in order to share it behind between multiple\n`Bytes` instances.\n\nFor `Bytes` implementations which refer to constant memory (e.g. created\nvia `Bytes::from_static()`) the cloning implementation will be a no-op.\n\nFor `Bytes` implementations which point to a reference counted shared storage\n(e.g. an `Arc<[u8]>`), sharing will be implemented by increasing the\nthe reference count.\n\nDue to this mechanism, multiple `Bytes` instances may point to the same\nshared memory region.\nEach `Bytes` instance can point to different sections within that\nmemory region, and `Bytes` instances may or may not have overlapping views\ninto the memory.\n\nThe following diagram visualizes a scenario where 2 `Bytes` instances make\nuse of an `Arc`-based backing storage, and provide access to different views:\n\n```text\n\n   Arc ptrs                   +---------+\n   ________________________ / | Bytes 2 |\n  /                           +---------+\n /          +-----------+     |         |\n|_________/ |  Bytes 1  |     |         |\n|           +-----------+     |         |\n|           |           | ___/ data     | tail\n|      data |      tail |/              |\nv           v           v               v\n+-----+---------------------------------+-----+\n| Arc |     |           |               |     |\n+-----+---------------------------------+-----+\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:61:1882":{"id":"0:61:1882","crate_id":0,"name":"get_u64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[513,4],"end":[515,5]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:1913":{"id":"0:69:1913","crate_id":0,"name":"get_uint_le","span":{"filename":"src/buf/buf_impl.rs","begin":[673,4],"end":[675,5]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_uint_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13370:56759":{"id":"1:13370:56759","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:6102:57451":{"id":"4:6102:57451","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"5:15862:2909"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:1858":{"id":"0:55:1858","crate_id":0,"name":"get_i16_le","span":{"filename":"src/buf/buf_impl.rs","begin":[393,4],"end":[395,5]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_i16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:160:2131":{"id":"0:160:2131","crate_id":0,"name":"put_u64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[557,4],"end":[559,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u64_le(0x0102030405060708);\nassert_eq!(buf, b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:401:1718":{"id":"0:401:1718","crate_id":0,"name":"writer","span":{"filename":"src/buf/writer.rs","begin":[1,0],"end":[88,1]},"visibility":{"restricted":{"parent":"0:6:1593","path":"::buf"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1298:1725"],"is_stripped":true}},"1:3367:3183":{"id":"1:3367:3183","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3369:171","1:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:141:2015":{"id":"0:141:2015","crate_id":0,"name":"remaining_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[59,4],"end":[59,37]},"visibility":"default","docs":"Returns the number of bytes that can be written from the current\nposition until the end of the buffer is reached.\n\nThis value is greater than or equal to the length of the slice returned\nby `chunk_mut()`.\n\nWriting to a `BufMut` may involve allocating more memory on the fly.\nImplementations may fail before reaching the number of bytes indicated\nby this method if they encounter an allocation failure.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 10];\nlet mut buf = &mut dst[..];\n\nlet original_remaining = buf.remaining_mut();\nbuf.put(&b\"hello\"[..]);\n\nassert_eq!(original_remaining - 5, buf.remaining_mut());\n```\n\n# Implementer notes\n\nImplementations of `remaining_mut` should ensure that the return value\ndoes not change unless a call is made to `advance_mut` or any other\nfunction that is documented to change the `BufMut`'s current position.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:170:2166":{"id":"0:170:2166","crate_id":0,"name":"put_int_le","span":{"filename":"src/buf/buf_mut.rs","begin":[777,4],"end":[779,5]},"visibility":"default","docs":"Writes low `nbytes` of a signed integer to `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_int_le(0x0504010203, 3);\nassert_eq!(buf, b\"\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self` or if `nbytes` is greater than 8.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:316:1715":{"id":"0:316:1715","crate_id":0,"name":"take","span":{"filename":"src/buf/take.rs","begin":[1,0],"end":[155,1]},"visibility":{"restricted":{"parent":"0:6:1593","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1261:1722"],"is_stripped":true}},"1:13371:293":{"id":"1:13371:293","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"5:15873:2918","str::as_mut_ptr":"5:15862:2909"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6962:4859":{"id":"5:6962:4859","crate_id":5,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6963:59213"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:81:1712":{"id":"0:81:1712","crate_id":0,"name":"chain","span":{"filename":"src/buf/buf_impl.rs","begin":[869,4],"end":[874,5]},"visibility":"default","docs":"Creates an adaptor which will chain this buffer with another.\n\nThe returned `Buf` instance will first consume all bytes from `self`.\nAfterwards the output is equivalent to the output of next.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut chain = b\"hello \"[..].chain(&b\"world\"[..]);\n\nlet full = chain.copy_to_bytes(11);\nassert_eq!(full.chunk(), b\"hello world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["next",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"0:1233:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"0:42:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:140:1595":{"id":"0:140:1595","crate_id":0,"name":"BufMut","span":{"filename":"src/buf/buf_mut.rs","begin":[29,0],"end":[949,1]},"visibility":"public","docs":"A trait for values that provide sequential write access to bytes.\n\nWrite bytes to a buffer\n\nA buffer stores bytes in memory such that write operations are infallible.\nThe underlying storage may or may not be in contiguous memory. A `BufMut`\nvalue is a cursor into the buffer. Writing to `BufMut` advances the cursor\nposition.\n\nThe simplest `BufMut` is a `Vec<u8>`.\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\n\nbuf.put(&b\"hello world\"[..]);\n\nassert_eq!(buf, b\"hello world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:141:2015","0:142:2033","0:143:2038","0:144:2060","0:145:1947","0:147:2075","0:148:2085","0:149:2086","0:150:2093","0:151:2097","0:152:2102","0:153:2106","0:154:2109","0:155:2113","0:156:2117","0:157:2120","0:158:2123","0:159:2127","0:160:2131","0:161:2134","0:162:2137","0:163:2141","0:164:2145","0:165:2148","0:166:2151","0:167:2155","0:168:2159","0:169:2163","0:170:2166","0:171:2170","0:172:2174","0:173:2178","0:174:2181","0:175:1713","0:176:1718","0:177:2205"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:149:2086":{"id":"0:149:2086","crate_id":0,"name":"put_u8","span":{"filename":"src/buf/buf_mut.rs","begin":[313,4],"end":[316,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u8(0x01);\nassert_eq!(buf, b\"\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6790:4856":{"id":"5:6790:4856","crate_id":5,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6791:59295","5:6792:60828"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10562:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:71:1919":{"id":"0:71:1919","crate_id":0,"name":"get_int_le","span":{"filename":"src/buf/buf_impl.rs","begin":[713,4],"end":[715,5]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_int_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3308:3172":{"id":"1:3308:3172","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3310:171","1:3311:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:145:1947":{"id":"0:145:1947","crate_id":0,"name":"put","span":{"filename":"src/buf/buf_mut.rs","begin":[193,4],"end":[215,5]},"visibility":"default","docs":"Transfer bytes into `self` from `src` and advance the cursor by the\nnumber of bytes written.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\n\nbuf.put_u8(b'h');\nbuf.put(&b\"ello\"[..]);\nbuf.put(&b\" world\"[..]);\n\nassert_eq!(buf, b\"hello world\");\n```\n\n# Panics\n\nPanics if `self` does not have enough capacity to contain `src`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["src",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"super::Buf","id":"0:42:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6:1593":{"id":"0:6:1593","crate_id":0,"name":"buf","span":{"filename":"src/buf/mod.rs","begin":[1,0],"end":[41,47]},"visibility":"public","docs":"Utilities for working with buffers.\n\nA buffer is any structure that contains a sequence of bytes. The bytes may\nor may not be stored in contiguous memory. This module contains traits used\nto abstract over buffers as well as utilities for working with buffer types.\n\n# `Buf`, `BufMut`\n\nThese are the two foundational traits for abstractly working with buffers.\nThey can be thought as iterators for byte structures. They offer additional\nperformance over `Iterator` by providing an API optimized for byte slices.\n\nSee [`Buf`] and [`BufMut`] for more details.\n\n[rope]: https://en.wikipedia.org/wiki/Rope_(data_structure)\n[`Buf`]: trait.Buf.html\n[`BufMut`]: trait.BufMut.html","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:423","0:426","0:429","0:432","0:435","0:438","0:441","0:445","0:448"],"is_stripped":false}},"1:3329:3176":{"id":"1:3329:3176","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3331:171","1:3332:1089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3355:3181":{"id":"1:3355:3181","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3357:1090"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3472:2633":{"id":"1:3472:2633","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3473:534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13389:18391":{"id":"1:13389:18391","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"5:15862:2909"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49603:4593","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10205:2405":{"id":"1:10205:2405","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10206:1509","1:10207:4227","1:10209:2843"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:250:766":{"id":"0:250:766","crate_id":0,"name":"iter","span":{"filename":"src/buf/iter.rs","begin":[1,0],"end":[132,49]},"visibility":{"restricted":{"parent":"0:6:1593","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1242:1720"],"is_stripped":true}},"1:12936:3287":{"id":"1:12936:3287","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12937:126","1:12938:55346"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3343:3182":{"id":"1:3343:3182","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3345:1335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6866:4863":{"id":"5:6866:4863","crate_id":5,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6867:59554"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13456:56779":{"id":"1:13456:56779","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10538:4007":{"id":"1:10538:4007","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10539:146","1:10540:17841","1:10541:55712"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3388:3188":{"id":"1:3388:3188","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3390:171","1:3391:1215"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13419:56766":{"id":"1:13419:56766","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"5:15862:2909","str::rsplit_terminator":"5:15862:2909","prim@char":"5:15856:2904","self::pattern":"1:12997:3288","`DoubleEndedIterator`":"1:8411:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49370:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13366:56758":{"id":"1:13366:56758","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"5:15862:2909"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:80:1715":{"id":"0:80:1715","crate_id":0,"name":"take","span":{"filename":"src/buf/buf_impl.rs","begin":[847,4],"end":[852,5]},"visibility":"default","docs":"Creates an adaptor which will read at most `limit` bytes from `self`.\n\nThis function returns a new instance of `Buf` which will read at most\n`limit` bytes.\n\n# Examples\n\n```\nuse bytes::{Buf, BufMut};\n\nlet mut buf = b\"hello world\"[..].take(5);\nlet mut dst = vec![];\n\ndst.put(&mut buf);\nassert_eq!(dst, b\"hello\");\n\nlet mut buf = buf.into_inner();\ndst.clear();\ndst.put(&mut buf);\nassert_eq!(dst, b\" world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["limit",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Take","id":"0:1261:1722","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5832:4745":{"id":"4:5832:4745","crate_id":4,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5834:171","4:5835:2631"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13478:4527":{"id":"1:13478:4527","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:12936:3287","FromStr::Err":"1:12936:3287"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12936:3287","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12936:3287","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162:2137":{"id":"0:162:2137","crate_id":0,"name":"put_i64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[601,4],"end":[603,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i64_le(0x0102030405060708);\nassert_eq!(buf, b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3143:149":{"id":"1:3143:149","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3145:2487"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:435":{"id":"0:435","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[36,0],"end":[36,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::limit::Limit","name":"Limit","id":"0:1248:1721","glob":false}},"1:10262:119":{"id":"1:10262:119","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10263:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13449:56775":{"id":"1:13449:56775","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1248:1721":{"id":"0:1248:1721","crate_id":0,"name":"Limit","span":{"filename":"src/buf/limit.rs","begin":[9,0],"end":[12,1]},"visibility":"public","docs":"A `BufMut` adapter which limits the amount of bytes that can be written\nto an underlying buffer.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:48:1807":{"id":"0:48:1807","crate_id":0,"name":"has_remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[225,4],"end":[227,5]},"visibility":"default","docs":"Returns true if there are any more bytes to consume\n\nThis is equivalent to `self.remaining() != 0`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"a\"[..];\n\nassert!(buf.has_remaining());\n\nbuf.get_u8();\n\nassert!(!buf.has_remaining());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13428:56769":{"id":"1:13428:56769","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904","str::splitn":"5:15862:2909"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49442:3870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3250:106":{"id":"1:3250:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4750:3086":{"id":"1:4750:3086","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4751:2259","1:4752:56064","1:4753:2286"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[32,0],"end":[32,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::buf_impl::Buf","name":"Buf","id":"0:42:1594","glob":false}},"0:152:2102":{"id":"0:152:2102","crate_id":0,"name":"put_u16_le","span":{"filename":"src/buf/buf_mut.rs","begin":[381,4],"end":[383,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u16_le(0x0809);\nassert_eq!(buf, b\"\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13725:150":{"id":"1:13725:150","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13726:171","1:13727:150","1:13728:754"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6083:57446":{"id":"4:6083:57446","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6862:4860":{"id":"5:6862:4860","crate_id":5,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6863:60496"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3382:3187":{"id":"1:3382:3187","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3384:171","1:3385:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2928:167":{"id":"1:2928:167","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2929:404","1:2930:2807","1:2931:1832","1:2932:3617"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6098:57448":{"id":"4:6098:57448","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6462:4888":{"id":"5:6462:4888","crate_id":5,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6463:2596","5:6464:9262","5:6465:59168","5:6466:59169","5:6467:59170","5:6468:2576"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10562:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:14183:3100":{"id":"1:14183:3100","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14184:56277","1:14185:56278","1:14186:56279","1:14187:56280","1:14188:56281","1:14189:56282","1:14190:3646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:9340:4907":{"id":"5:9340:4907","crate_id":5,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:9341:59301","5:9342:59302","5:9343:59303","5:9344:59304","5:9345:4626","5:9346:32707","5:9347:59300"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10562:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3684:3194":{"id":"1:3684:3194","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3615:2407","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8850:3227":{"id":"1:8850:3227","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7891:3214","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13022:4334":{"id":"1:13022:4334","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13024:3618","1:13025:55487","1:13026:55488"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:13016:4333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1044:1598":{"id":"0:1044:1598","crate_id":0,"name":"loom","span":{"filename":"src/loom.rs","begin":[1,0],"end":[30,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"1:13422:56767":{"id":"1:13422:56767","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904","str::split":"5:15862:2909","str::split_terminator":"5:15862:2909"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49388:4583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7:1710":{"id":"0:7:1710","crate_id":0,"name":"buf_impl","span":{"filename":"src/buf/buf_impl.rs","begin":[1,0],"end":[1074,40]},"visibility":{"restricted":{"parent":"0:6:1593","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:42:1594"],"is_stripped":true}},"1:10272:179":{"id":"1:10272:179","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10273:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:445":{"id":"0:445","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[41,15],"end":[41,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::reader::Reader","name":"Reader","id":"0:1255:1724","glob":false}},"0:155:2113":{"id":"0:155:2113","crate_id":0,"name":"put_u32","span":{"filename":"src/buf/buf_mut.rs","begin":[447,4],"end":[449,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u32(0x0809A0A1);\nassert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8363:136":{"id":"1:8363:136","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8365:672"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3240:200":{"id":"1:3240:200","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3281:3089":{"id":"1:3281:3089","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1073":{"id":"0:1073","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[91,0],"end":[91,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::bytes_mut::BytesMut","name":"BytesMut","id":"0:786:1600","glob":false}},"0:42:1594":{"id":"0:42:1594","crate_id":0,"name":"Buf","span":{"filename":"src/buf/buf_impl.rs","begin":[76,0],"end":[906,1]},"visibility":"public","docs":"Read bytes from a buffer.\n\nA buffer stores bytes in memory such that read operations are infallible.\nThe underlying storage may or may not be in contiguous memory. A `Buf` value\nis a cursor into the buffer. Reading from `Buf` advances the cursor\nposition. It can be thought of as an efficient `Iterator` for collections of\nbytes.\n\nThe simplest `Buf` is a `&[u8]`.\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(b'h', buf.get_u8());\nassert_eq!(b'e', buf.get_u8());\nassert_eq!(b'l', buf.get_u8());\n\nlet mut rest = [0; 8];\nbuf.copy_to_slice(&mut rest);\n\nassert_eq!(&rest[..], &b\"lo world\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:43:1774","0:44:1737","0:45:1803","0:47:1740","0:48:1807","0:49:1741","0:50:1839","0:51:1842","0:52:1848","0:53:1852","0:54:1855","0:55:1858","0:56:1863","0:57:1867","0:58:1870","0:59:1873","0:60:1878","0:61:1882","0:62:1885","0:63:1888","0:64:1893","0:65:1897","0:66:1900","0:67:1903","0:68:1908","0:69:1913","0:70:1916","0:71:1919","0:72:1924","0:73:1929","0:74:1933","0:75:1936","0:76:1944","0:80:1715","0:81:1712","0:83:1714"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:59:1873":{"id":"0:59:1873","crate_id":0,"name":"get_i32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[473,4],"end":[475,5]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:2120":{"id":"0:157:2120","crate_id":0,"name":"put_i32","span":{"filename":"src/buf/buf_mut.rs","begin":[491,4],"end":[493,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i32(0x0809A0A1);\nassert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13385:4615":{"id":"1:13385:4615","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:15856:2904"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49290:3285","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13486:4916":{"id":"1:13486:4916","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"5:15856:2904"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49628:4596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13440:56772":{"id":"1:13440:56772","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"5:15856:2904","self::pattern":"1:12997:3288","str::matches":"5:15862:2909","`DoubleEndedIterator`":"1:8411:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49542:4590","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3696:213":{"id":"1:3696:213","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3697:171","1:3698:3196","1:3699:674","1:3700:358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3701:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13384:2209":{"id":"1:13384:2209","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"5:15862:2909"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2892:173":{"id":"1:2892:173","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2894:593","1:2895:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:60:1878":{"id":"0:60:1878","crate_id":0,"name":"get_u64","span":{"filename":"src/buf/buf_impl.rs","begin":[493,4],"end":[495,5]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:150:2093":{"id":"0:150:2093","crate_id":0,"name":"put_i8","span":{"filename":"src/buf/buf_mut.rs","begin":[336,4],"end":[339,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i8(0x01);\nassert_eq!(buf, b\"\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13392:18382":{"id":"1:13392:18382","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49612:4594","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13453:56777":{"id":"1:13453:56777","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3313:3177":{"id":"1:3313:3177","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3315:171","1:3316:1334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3402:3191":{"id":"1:3402:3191","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3404:346"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13393:3931":{"id":"1:13393:3931","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:158:2123":{"id":"0:158:2123","crate_id":0,"name":"put_i32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[513,4],"end":[515,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i32_le(0x0809A0A1);\nassert_eq!(buf, b\"\\xA1\\xA0\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13007:3284":{"id":"1:13007:3284","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13009:4333","1:13010:55842","1:13011:55843","1:13012:55844","1:13013:55846","1:13014:55845","1:13015:55847"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13360":{"id":"1:13360","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12457:1319","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13361:780","1:13362:1806","1:13363:56756","1:13364:56757","1:13366:56758","1:13369:2574","1:13370:56759","1:13371:293","1:13372:1833","1:13373:1738","1:13375:2285","1:13377:55622","1:13379:55623","1:13381:4930","1:13382:56760","1:13383:56761","1:13384:2209","1:13385:4615","1:13386:4360","1:13387:1596","1:13388:18353","1:13389:18391","1:13390:3856","1:13391:56762","1:13392:18382","1:13393:3931","1:13396:56763","1:13399:56764","1:13402:3657","1:13406:3623","1:13410:2736","1:13413:18042","1:13416:56765","1:13419:56766","1:13422:56767","1:13425:56768","1:13428:56769","1:13431:56770","1:13434:56771","1:13437:2929","1:13440:56772","1:13443:56773","1:13446:56774","1:13449:56775","1:13451:56776","1:13453:56777","1:13455:56778","1:13456:56779","1:13457:56780","1:13460:56781","1:13463:38553","1:13466:56782","1:13469:56783","1:13472:56784","1:13475:56785","1:13478:4527","1:13480:4739","1:13481:56786","1:13482:56787","1:13483:56788","1:13484:56789","1:13486:4916","1:13487:56790"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13482:56787":{"id":"1:13482:56787","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1842":{"id":"0:51:1842","crate_id":0,"name":"get_i8","span":{"filename":"src/buf/buf_impl.rs","begin":[310,4],"end":[315,5]},"visibility":"default","docs":"Gets a signed 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_i8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2897:124":{"id":"1:2897:124","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[33,0],"end":[33,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::buf_mut::BufMut","name":"BufMut","id":"0:140:1595","glob":false}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[38,0],"end":[38,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::uninit_slice::UninitSlice","name":"UninitSlice","id":"0:374:1723","glob":false}},"0:291:1714":{"id":"0:291:1714","crate_id":0,"name":"reader","span":{"filename":"src/buf/reader.rs","begin":[1,0],"end":[81,1]},"visibility":{"restricted":{"parent":"0:6:1593","path":"::buf"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1255:1724"],"is_stripped":true}},"1:13483:56788":{"id":"1:13483:56788","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1888":{"id":"0:63:1888","crate_id":0,"name":"get_i64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[553,4],"end":[555,5]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:147:2075":{"id":"0:147:2075","crate_id":0,"name":"put_slice","span":{"filename":"src/buf/buf_mut.rs","begin":[236,4],"end":[262,5]},"visibility":"default","docs":"Transfer bytes into `self` from `src` and advance the cursor by the\nnumber of bytes written.\n\n`self` must have enough remaining capacity to contain all of `src`.\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 6];\n\n{\n    let mut buf = &mut dst[..];\n    buf.put_slice(b\"hello\");\n\n    assert_eq!(1, buf.remaining_mut());\n}\n\nassert_eq!(b\"hello\\0\", &dst);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,21],"end":[84,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::buf::Buf","name":"Buf","id":"0:42:1594","glob":false}},"0:142:2033":{"id":"0:142:2033","crate_id":0,"name":"advance_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[100,4],"end":[100,49]},"visibility":"default","docs":"Advance the internal cursor of the BufMut\n\nThe next call to `chunk_mut` will return a slice starting `cnt` bytes\nfurther into the underlying buffer.\n\nThis function is unsafe because there is no guarantee that the bytes\nbeing advanced past have been initialized.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = Vec::with_capacity(16);\n\n// Write some data\nbuf.chunk_mut()[0..2].copy_from_slice(b\"he\");\nunsafe { buf.advance_mut(2) };\n\n// write more bytes\nbuf.chunk_mut()[0..3].copy_from_slice(b\"llo\");\n\nunsafe { buf.advance_mut(3); }\n\nassert_eq!(5, buf.len());\nassert_eq!(buf, b\"hello\");\n```\n\n# Panics\n\nThis function **may** panic if `cnt > self.remaining_mut()`.\n\n# Implementer notes\n\nIt is recommended for implementations of `advance_mut` to panic if\n`cnt > self.remaining_mut()`. If the implementation does not panic,\nthe call must behave as if `cnt == self.remaining_mut()`.\n\nA call with `cnt == 0` should never panic and be a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"5:5800:4900":{"id":"5:5800:4900","crate_id":5,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5801:6570"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:99:1711":{"id":"0:99:1711","crate_id":0,"name":"buf_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1,0],"end":[1142,43]},"visibility":{"restricted":{"parent":"0:6:1593","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:140:1595"],"is_stripped":true}},"0:65:1897":{"id":"0:65:1897","crate_id":0,"name":"get_u128_le","span":{"filename":"src/buf/buf_impl.rs","begin":[593,4],"end":[595,5]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13475:56785":{"id":"1:13475:56785","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5744:4895":{"id":"5:5744:4895","crate_id":5,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5745:8843","5:5746:59346","5:5747:6570","5:5748:59347","5:5749:5126","5:5750:5127","5:5751:59348","5:5752:1283","5:5753:59349","5:5754:59350","5:5755:59351","5:5756:59352","5:5757:59353","5:5758:59354","5:5759:59355","5:5760:59356"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10503:146":{"id":"1:10503:146","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10504:640","1:10505:2372","1:10506:55114","1:10507:55115","1:10508:55116","1:10509:55117","1:10510:55118","1:10511:55119","1:10512:55120","1:10513:55121","1:10514:55122","1:10515:55123","1:10516:55124","1:10517:55125","1:10518:55126","1:10519:1509"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:148:2085":{"id":"0:148:2085","crate_id":0,"name":"put_bytes","span":{"filename":"src/buf/buf_mut.rs","begin":[289,4],"end":[293,5]},"visibility":"default","docs":"Put `cnt` bytes `val` into `self`.\n\nLogically equivalent to calling `self.put_u8(val)` `cnt` times, but may work faster.\n\n`self` must have at least `cnt` remaining capacity.\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 6];\n\n{\n    let mut buf = &mut dst[..];\n    buf.put_bytes(b'a', 4);\n\n    assert_eq!(2, buf.remaining_mut());\n}\n\nassert_eq!(b\"aaaa\\0\\0\", &dst);\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["val",{"kind":"primitive","inner":"u8"}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5778:4896":{"id":"5:5778:4896","crate_id":5,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5779:60805","5:5780:60806","5:5781:60807","5:5782:60808"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:685:1597":{"id":"0:685:1597","crate_id":0,"name":"bytes_mut","span":{"filename":"src/bytes_mut.rs","begin":[1,0],"end":[1598,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:786:1600"],"is_stripped":true}},"5:5792:4898":{"id":"5:5792:4898","crate_id":5,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5793:59227"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10562:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:66:1900":{"id":"0:66:1900","crate_id":0,"name":"get_i128","span":{"filename":"src/buf/buf_impl.rs","begin":[613,4],"end":[615,5]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3249:206":{"id":"1:3249:206","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13027:4335":{"id":"1:13027:4335","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13022:4334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3394:3189":{"id":"1:3394:3189","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3396:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:144:2060":{"id":"0:144:2060","crate_id":0,"name":"chunk_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[171,4],"end":[171,48]},"visibility":"default","docs":"Returns a mutable slice starting at the current BufMut position and of\nlength between 0 and `BufMut::remaining_mut()`. Note that this *can* be shorter than the\nwhole remainder of the buffer (this allows non-continuous implementation).\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\nThe returned byte slice may represent uninitialized memory.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = Vec::with_capacity(16);\n\nunsafe {\n    // MaybeUninit::as_mut_ptr\n    buf.chunk_mut()[0..].as_mut_ptr().write(b'h');\n    buf.chunk_mut()[1..].as_mut_ptr().write(b'e');\n\n    buf.advance_mut(2);\n\n    buf.chunk_mut()[0..].as_mut_ptr().write(b'l');\n    buf.chunk_mut()[1..].as_mut_ptr().write(b'l');\n    buf.chunk_mut()[2..].as_mut_ptr().write(b'o');\n\n    buf.advance_mut(3);\n}\n\nassert_eq!(5, buf.len());\nassert_eq!(buf, b\"hello\");\n```\n\n# Implementer notes\n\nThis function should never panic. `chunk_mut` should return an empty\nslice **if and only if** `remaining_mut()` returns 0. In other words,\n`chunk_mut()` returning an empty slice implies that `remaining_mut()` will\nreturn 0 and `remaining_mut()` returning 0 implies that `chunk_mut()` will\nreturn an empty slice.\n\nThis function may trigger an out-of-memory abort if it tries to allocate\nmemory and fails to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"UninitSlice","id":"0:374:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3486:130":{"id":"1:3486:130","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3488:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3489:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10266:3328":{"id":"1:10266:3328","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10267:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8367:151":{"id":"1:8367:151","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8368:2259","1:8369:1720","1:8370:755"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2837:97":{"id":"1:2837:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2839:2408"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13377:55622":{"id":"1:13377:55622","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:76:1944":{"id":"0:76:1944","crate_id":0,"name":"copy_to_bytes","span":{"filename":"src/buf/buf_impl.rs","begin":[816,4],"end":[824,5]},"visibility":"default","docs":"Consumes `len` bytes inside self and returns new instance of `Bytes`\nwith this data.\n\nThis function may be optimized by the underlying type to avoid actual\ncopies. For example, `Bytes` implementation will do a shallow copy\n(ref-count increment).\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet bytes = (&b\"hello world\"[..]).copy_to_bytes(5);\nassert_eq!(&bytes[..], &b\"hello\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"crate::Bytes","id":"0:526:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74:1933":{"id":"0:74:1933","crate_id":0,"name":"get_f64","span":{"filename":"src/buf/buf_impl.rs","begin":[776,4],"end":[778,5]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33 hello\"[..];\nassert_eq!(1.2f64, buf.get_f64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3140:74":{"id":"1:3140:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3142:2841"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:12444:3863":{"id":"1:12444:3863","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12445:2259","1:12446:2567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3351:3179":{"id":"1:3351:3179","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3353:548"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10255:109":{"id":"1:10255:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10256:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13443:56773":{"id":"1:13443:56773","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12997:3288","prim@char":"5:15856:2904","`DoubleEndedIterator`":"1:8411:120","str::rmatch_indices":"5:15862:2909"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49470:4586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43:1774":{"id":"0:43:1774","crate_id":0,"name":"remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[102,4],"end":[102,33]},"visibility":"default","docs":"Returns the number of bytes between the current position and the end of\nthe buffer.\n\nThis value is greater than or equal to the length of the slice returned\nby `chunk()`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.remaining(), 11);\n\nbuf.get_u8();\n\nassert_eq!(buf.remaining(), 10);\n```\n\n# Implementer notes\n\nImplementations of `remaining` should ensure that the return value does\nnot change unless a call is made to `advance` or any other function that\nis documented to change the `Buf`'s current position.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:172:2174":{"id":"0:172:2174","crate_id":0,"name":"put_f32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[823,4],"end":[825,5]},"visibility":"default","docs":"Writes  an IEEE754 single-precision (4 bytes) floating point number to\n`self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f32_le(1.2f32);\nassert_eq!(buf, b\"\\x9A\\x99\\x99\\x3F\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68:1908":{"id":"0:68:1908","crate_id":0,"name":"get_uint","span":{"filename":"src/buf/buf_impl.rs","begin":[653,4],"end":[655,5]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_uint(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4018:4385":{"id":"1:4018:4385","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4019:59692"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10493:142":{"id":"1:10493:142","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10494:703","1:10496:4012"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13016:4333":{"id":"1:13016:4333","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13018:4353","1:13019:909","1:13020:56098","1:13021:56099"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13383:56761":{"id":"1:13383:56761","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"5:15862:2909"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3707:3196":{"id":"1:3707:3196","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3709:54082"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3492:132":{"id":"1:3492:132","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3494:171","1:3495:367"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22961:32375":{"id":"1:22961:32375","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:22962:7942","1:22963:54712","1:22964:54713"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22954:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5656:4885":{"id":"5:5656:4885","crate_id":5,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5657:5837","5:5658:2574"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10562:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13431:56770":{"id":"1:13431:56770","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:83:1714":{"id":"0:83:1714","crate_id":0,"name":"reader","span":{"filename":"src/buf/buf_impl.rs","begin":[900,4],"end":[905,5]},"visibility":"default","docs":"Creates an adaptor which implements the `Read` trait for `self`.\n\nThis function returns a new value which implements `Read` by adapting\nthe `Read` trait functions to the `Buf` trait functions. Given that\n`Buf` operations are infallible, none of the `Read` functions will\nreturn with `Err`.\n\n# Examples\n\n```\nuse bytes::{Bytes, Buf};\nuse std::io::Read;\n\nlet buf = Bytes::from(\"hello world\");\n\nlet mut reader = buf.reader();\nlet mut dst = [0; 1024];\n\nlet num = reader.read(&mut dst).unwrap();\n\nassert_eq!(11, num);\nassert_eq!(&dst[..11], &b\"hello world\"[..]);\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Reader","id":"0:1255:1724","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22812:4416":{"id":"1:22812:4416","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22802:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13451:56776":{"id":"1:13451:56776","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1936":{"id":"0:75:1936","crate_id":0,"name":"get_f64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[797,4],"end":[799,5]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F hello\"[..];\nassert_eq!(1.2f64, buf.get_f64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58:1870":{"id":"0:58:1870","crate_id":0,"name":"get_i32","span":{"filename":"src/buf/buf_impl.rs","begin":[453,4],"end":[455,5]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10897:203":{"id":"1:10897:203","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10899:171","1:10900:1738","1:10901:2285","1:10902:55622","1:10903:55623","1:10904:740","1:10905:741"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10888:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3372:3184":{"id":"1:3372:3184","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3374:171","1:3375:342"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:175:1713":{"id":"0:175:1713","crate_id":0,"name":"limit","span":{"filename":"src/buf/buf_mut.rs","begin":[886,4],"end":[891,5]},"visibility":"default","docs":"Creates an adaptor which can write at most `limit` bytes to `self`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet arr = &mut [0u8; 128][..];\nassert_eq!(arr.remaining_mut(), 128);\n\nlet dst = arr.limit(10);\nassert_eq!(dst.remaining_mut(), 10);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["limit",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Limit","id":"0:1248:1721","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3245:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8565:157":{"id":"1:8565:157","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8566:2259","1:8567:909","1:8568:3626","1:8571:2286","1:8572:484","1:8574:3627","1:8577:3628","1:8578:3629","1:8579:3630","1:8580:1712","1:8582:3230","1:8584:3631","1:8585:3632","1:8587:828","1:8590:3633","1:8597:3634","1:8599:3635","1:8602:3636","1:8603:3637","1:8604:3638","1:8606:3639","1:8608:3640","1:8611:1287","1:8612:1715","1:8613:3641","1:8617:3642","1:8620:3643","1:8621:3644","1:8622:3645","1:8624:3646","1:8625:3105","1:8627:3647","1:8630:3648","1:8632:3649","1:8642:3650","1:8657:3651","1:8659:3652","1:8663:3653","1:8672:3654","1:8675:3655","1:8677:3656","1:8680:265","1:8687:283","1:8694:3657","1:8701:3658","1:8710:3659","1:8720:1001","1:8727:3660","1:8734:2807","1:8735:1832","1:8736:3661","1:8748:3662","1:8755:3663","1:8767:3664","1:8774:3665","1:8775:3666","1:8780:3667","1:8783:3668","1:8786:3669","1:8787:3670","1:8789:3671","1:8791:404","1:8794:3672","1:8797:984","1:8800:3673","1:8803:593","1:8806:3674","1:8809:894","1:8811:813","1:8813:779","1:8815:701","1:8817:684","1:8819:3675","1:8820:3676","1:8828:3677"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13460:56781":{"id":"1:13460:56781","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:15856:2904","self::pattern":"1:12997:3288"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13007:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4989:4870":{"id":"5:4989:4870","crate_id":5,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4990:2573","5:4991:59577"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6100:3065":{"id":"4:6100:3065","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57:1867":{"id":"0:57:1867","crate_id":0,"name":"get_u32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[433,4],"end":[435,5]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3406:3192":{"id":"1:3406:3192","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8843:3087":{"id":"1:8843:3087","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6688:4895":{"id":"5:6688:4895","crate_id":5,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6689:59238","5:6690:9186","5:6691:9187","5:6692:9189","5:6693:9188","5:6694:9190","5:6695:9191","5:6696:9193","5:6697:6612","5:6698:9196","5:6699:9197","5:6700:9198","5:6701:9199","5:6702:9200","5:6703:9201","5:6704:9194","5:6705:9195"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3779:3092":{"id":"1:3779:3092","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:173:2178":{"id":"0:173:2178","crate_id":0,"name":"put_f64","span":{"filename":"src/buf/buf_mut.rs","begin":[846,4],"end":[848,5]},"visibility":"default","docs":"Writes  an IEEE754 double-precision (8 bytes) floating point number to\n`self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f64(1.2f64);\nassert_eq!(buf, b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3398:3190":{"id":"1:3398:3190","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3400:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3149:217":{"id":"1:3149:217","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3151:127","1:3152:1395"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:72:1924":{"id":"0:72:1924","crate_id":0,"name":"get_f32","span":{"filename":"src/buf/buf_impl.rs","begin":[734,4],"end":[736,5]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];\nassert_eq!(1.2f32, buf.get_f32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6406:212":{"id":"4:6406:212","crate_id":4,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6407:1376"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1070":{"id":"0:1070","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::bytes::Bytes","name":"Bytes","id":"0:526:1599","glob":false}}},"paths":{"17:10071:5853":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13429:7060":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:3355:3181":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:3018:5679":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:22954:4422":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:11981:6694":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:2816:5694":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13098:6991":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:3250:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:2543:5780":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13620:7113":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:4386:7258":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:5531:4766":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"6:3905:8680":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:10363:6373":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:10650:35726":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12275:6740":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:8189:1720":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:1161:35727":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:14929:9333":{"crate_id":5,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:22565:55838":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10224:6482":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5001:4554":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:23891:7751":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"5:3995:5007":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:10656:4935":{"crate_id":5,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:2794:5430":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:3331:5069":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"16:7843:5583":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:1584:8541":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"9:692:5192":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:10635:35724":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"12:925:4815":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11696:6635":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:46834:3216":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12507:6794":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:11065:1728":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"17:13842:7197":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7823:5516":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13506:7083":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:11122:3044":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"5:903:5030":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:4955:7275":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:24513:4644":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:10558:6491":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:5377:5105":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:4:966":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:11099:1719":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"17:10041:6473":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:9759:6463":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:1658:8595":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9719:6462":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11539:6603":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12287:6741":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:6759:3030":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:2192:4757":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12234:6734":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10160:6478":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5632:5407":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:8162:4742":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:15871:2916":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"12:2005:2573":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:6893:9312":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:50909:7813":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:9882:648":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"14:231:3280":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"14:47:7533":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13609:7112":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:23971:4529":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:47398:2573":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:9551:5801":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:11388:3874":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7856:5584":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12118:6719":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:11502:4987":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"6:4183:8812":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:3645:3046":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:47871:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:3336:4753":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:48672:4009":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:51579:4424":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:4008:6377":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:4762:7269":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13540:7096":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:6744:5714":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11001:6549":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:9034:46963":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:7360:184":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"12:463:8001":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:13499:8007":{"crate_id":5,"path":["std","sys","unix","os","Env"],"kind":"struct"},"4:1648:4815":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:3611:3051":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:50957:4453":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:46868:3222":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"12:853:4814":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:3972:8723":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"7:0:1459":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:3245:1959":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:12444:3863":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:3145:5690":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:3862:8652":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:48703:7803":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:49370:4582":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12010:6699":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:11118:46969":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:51350:4455":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:11109:1722":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"1:9829:628":{"crate_id":1,"path":["core","sync","atomic","fence"],"kind":"function"},"4:2213:4760":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:15862:2909":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"17:12028:6700":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:3137:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:10814:5830":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9224:3459":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6166:5550":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:46451:1719":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"15:0:2960":{"crate_id":15,"path":["addr2line"],"kind":"module"},"4:3043:8270":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:14012:3096":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:2060:3030":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:1511:4940":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:5736:5412":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:5722:4893":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4358:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:2793:4918":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"5:1021:5052":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"16:3320:5739":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:374:3104":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:13698:4256":{"crate_id":5,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10599:6496":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:49612:4594":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:49278:4484":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:3149:217":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"18:660:5879":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:46422:7792":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:48377:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:10215:134":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7378:5509":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:10699:1719":{"crate_id":5,"path":["std","error","Chain"],"kind":"struct"},"1:9726:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:5744:4895":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:52987:4441":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:7042:5724":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"12:976:4943":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:24547:3864":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:11809:6664":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:1236:6374":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:14897:4248":{"crate_id":5,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:7680:4244":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"5:12332:7625":{"crate_id":5,"path":["std","sys","unix","args","Args"],"kind":"struct"},"4:3965:6260":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:12936:3287":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:3343:5075":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"5:14516:1728":{"crate_id":5,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:48496:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:45892:4386":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:10028:6472":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:50297:3207":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:51602:4427":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8846:3226":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:50060:4605":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12771:6564":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:45920:4398":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:2938:174":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:7236:5578":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:4360:5090":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:10272:179":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:46214:4731":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9849:60856":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:11361:5125":{"crate_id":5,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:45762:185":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:2305:4848":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:49637:4597":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:13480:7624":{"crate_id":5,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:1572:8532":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10912:6539":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:5273:5433":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:12169:5021":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:48693:4987":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:22865:4420":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:47414:1720":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:3240:200":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:6051:9204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12712:6831":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:46274:4595":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:11246:3889":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13898:7205":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:2175:4755":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:7632:4241":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"1:49906:4348":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:51627:4428":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:10274:3329":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:783:211":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"9:900:8423":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11100:5806":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"12:2303:8418":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:3684:3194":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:2170:3131":{"crate_id":5,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:3377:3185":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"18:636:6344":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:3218:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"12:866:3133":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:5730:4892":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:0:1310":{"crate_id":5,"path":["std"],"kind":"module"},"1:2892:173":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12610:6812":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:49584:4591":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:4230:7255":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7205:5575":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13119:6996":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:3526:3093":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:3522:6379":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:32218:3166":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:13240:7017":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:48907:3895":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4364:8873":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:13873:4246":{"crate_id":5,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:48664:7798":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:11572:6609":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:5414:9093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:9763:6247":{"crate_id":5,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"4:6406:212":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"4:7766:223":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"18:766:6356":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6644:5564":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"14:11:7533":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:9063:5139":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:5375:3282":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7477:5527":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3459:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:51143:4446":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:786:6249":{"crate_id":5,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:47466:3510":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13564:7101":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:11950:4247":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"1:46252:4596":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6101:5500":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4066:8768":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:1011:2573":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:6852:9303":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"13:0:2953":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:3118:5691":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:9943:60851":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:744:60860":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:12671:6254":{"crate_id":5,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:9631:6246":{"crate_id":5,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:13154:6997":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13685:7157":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:88:40033":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:5255:9015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:15870:2915":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"6:5953:9157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:4694:6264":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13520:7090":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:0:2957":{"crate_id":11,"path":["adler"],"kind":"module"},"1:32177:2632":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:46563:3247":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5191:8983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:3287:5686":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:52908:4457":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:45829:189":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:3398:3190":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:5310:190":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"16:4448:7260":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:46364:4672":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:53286:7874":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10403:5783":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:823:6249":{"crate_id":5,"path":["std","thread","local","os","Key"],"kind":"struct"},"5:15876:2921":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"9:234:5216":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:13760:56061":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:543:8449":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12917:6850":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:13851:8265":{"crate_id":5,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:11056:3069":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"17:8954:5777":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:13946:4245":{"crate_id":5,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:3696:213":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:46482:3240":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:15606:6259":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:2169:567":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:563:8466":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:1432:3869":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:11129:3045":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"16:6554:5561":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4164:8811":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12307:6747":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:15867:2912":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"6:5969:9169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11640:6622":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:6636:9299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10236:5753":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:6269:5555":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6949:5720":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6424:5558":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:6462:4888":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:4157:5834":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:50982:4445":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:46347:4671":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:1497:4816":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:578:8475":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10656:6501":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:1665:8599":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:9440:6365":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:5828:4743":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"16:7738:5581":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:1637:4829":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10529:6487":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:2176:3163":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"6:5282:9022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11726:6639":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:15042:4924":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:8391:4987":{"crate_id":5,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:3707:3196":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:47661:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:510:6370":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12467:6789":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7467:5506":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:53199:4464":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:45783:188":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4095:8784":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:2462:7626":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"17:2484:47052":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:9066:5016":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4459:8911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:5132:3342":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:7978:6232":{"crate_id":5,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:23556:3865":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:8354:205":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"17:10477:5781":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:14152:3060":{"crate_id":5,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:13532:7093":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13402:7056":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:50309:3099":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:4750:3086":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:57312:7891":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:12051:4962":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:15881:2926":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"4:8449:3132":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:7628:3138":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:13027:4335":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:22806:4414":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:9142:5011":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:14183:3100":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4695:4471":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:8929:46961":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:23913:4534":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:9332:5770":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"9:0:2955":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:7810:6272":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:610:8491":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:2840:2635":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:6812:9302":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:11267:7692":{"crate_id":5,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:9809:60853":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:49929:7806":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:5595:5406":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:15866:2911":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"5:11135:4871":{"crate_id":5,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"6:4073:8771":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2862:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"18:667:5880":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6636:5521":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10081:5763":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:50044:4611":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:5984:5178":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:4350:7257":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9649:6461":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:45721:186":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:24377:4640":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:12247:6736":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:11186:6558":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:3800:7253":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:46281:4727":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"16:5456:5396":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:12059:1720":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12494:6793":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:2843:5675":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11159:6557":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:3064:5737":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:620:6343":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:1736:8637":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10140:5784":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:6068:9206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11077:2573":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"9:722:5193":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"4:1441:4828":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11015:6550":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:49442:3870":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:8146:1720":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:11208:3872":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:10837:118":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:2366:589":{"crate_id":5,"path":["std","env"],"kind":"module"},"4:1592:2573":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:10788:4908":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"1:8363:136":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5292:9029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6718:5712":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:5488:5400":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:3335:3175":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:2751:4917":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"1:8436:2287":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:4594:6263":{"crate_id":4,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:49881:4346":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9729:60850":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:47619:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:14669:7641":{"crate_id":5,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"9:686:5190":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:46879:3224":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10253:5744":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:12098:4967":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:5386:9080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:53312:7876":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12373:6772":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:14492:129":{"crate_id":5,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:13836:7749":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:3990:8735":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:7406:5508":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:12997:3288":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:11434:6572":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:24445:4642":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4046:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:46600:3250":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:1534:4943":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:9942:4564":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:3549:7250":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7420:5526":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"16:2773:5701":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:4043:127":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"1:3394:3189":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:10936:5005":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"5:13835:4244":{"crate_id":5,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:4041:195":{"crate_id":5,"path":["std","io","error","Result"],"kind":"typedef"},"16:4922:7274":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:50028:4603":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:46189:4516":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:11904:3887":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:4473:3058":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:49844:4345":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10117:5849":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:8976:4949":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:3075:4400":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:14801:6256":{"crate_id":5,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:9065:46964":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:3218:5683":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11847:6672":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6569:5709":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10988:6548":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:5231:7278":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7295:5522":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:13334:5119":{"crate_id":5,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:9659:60857":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:47577:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13205:7013":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:5228:8995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:12662:128":{"crate_id":5,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:47535:3869":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:12209:4952":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"1:46643:1722":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:10493:142":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:50265:4619":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:12408:6783":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7453:5505":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:46520:7793":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:3365:5427":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:11355:5106":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:11159:4872":{"crate_id":5,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"6:4133:8801":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13963:7223":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:4436:3063":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:161:40100":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:3486:130":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"5:15191:4880":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12456:6788":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:55990:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:49603:4593":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:1528:4942":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:11714:6636":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13331:7039":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:57291:7890":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:4734:7268":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:9591:6245":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:5855:5419":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10584:5833":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"12:1235:5324":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:1492:4815":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12095:6713":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:0:2962":{"crate_id":17,"path":["object"],"kind":"module"},"18:896:5874":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:15838:59189":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:9177:7632":{"crate_id":5,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:10574:59752":{"crate_id":5,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:14158:3058":{"crate_id":5,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:4686:2405":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"1:53391:7881":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:51759:7824":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:3035:8268":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:14526:59235":{"crate_id":5,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:6200:9277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:51783:7825":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:3483:3131":{"crate_id":4,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:8741:5142":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:2163:1720":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:4013:8744":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:50256:4618":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:11341:5176":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:1622:8565":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:3258:3129":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"16:5960:5424":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:3621:6229":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:46151:7781":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:5433:5395":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:4641:7265":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:10061:6475":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7174:5572":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:607:6372":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:5410:3030":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:1680:184":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"9:996:5257":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:0:2961":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:3699:3053":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"12:1180:5322":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:5987:9176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:21:660":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:5360:5391":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7279:5725":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11126:3044":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4494:8924":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13258:7025":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:3767:3869":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13547:7097":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:12114:4968":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:11937:171":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"17:12327:6748":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:46543:3246":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5241:9004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:3743:5827":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:1311:5854":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:3868:8653":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:48392:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:1501:4817":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9344:3284":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10489:5785":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11970:6691":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"12:429:5326":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:774:6344":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:49817:4344":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11653:6624":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"7:85:44940":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:3033:3276":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:792:108":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:519:8438":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5407:9092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:46173:4514":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:7928:4397":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:49198:3884":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:23999:7758":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5159:8965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6176:5551":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4395:8885":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:432:1730":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"5:9730:5099":{"crate_id":5,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:9210:46967":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4371:8875":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:12754:4588":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:22584:55939":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:51554:4442":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:2912:5677":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12480:6791":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:4695:10315":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4331:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:4638:6264":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:47829:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13318:7034":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:12003:59101":{"crate_id":5,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"5:3522:3050":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"9:157:5208":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:10179:6479":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:849:5870":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10516:5786":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:8330:3228":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7571:5501":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"12:396:5327":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6208:5552":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:53277:7873":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13180:7003":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:53257:7871":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9574:5778":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:2460:7625":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"1:55897:4410":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10926:6543":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:48903:4737":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10788:6533":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:1522:4941":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:6252:3137":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:10584:5034":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"16:5672:5408":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:10562:4422":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"5:14233:5036":{"crate_id":5,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:12738:4585":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:4363:5091":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:22603:55938":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:15868:2913":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"5:14949:4951":{"crate_id":5,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"7:38:44933":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:14461:9331":{"crate_id":5,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:49229:3880":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:32378:55963":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:542:5438":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:6401:3244":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:10276:3330":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4419:8895":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:7633:3230":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:537:8446":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:45806:187":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:4475:3059":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4306:8841":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:50086:4680":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:11231:5804":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"12:1200:5323":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:5501:5112":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:7258:7630":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:3506:5687":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:4018:4385":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:13465:7074":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:1486:3131":{"crate_id":5,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:12195:6729":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6072:5523":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:1079:4914":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:56029:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6620:5707":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:790:5865":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7250:5579":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"0:0:1596":{"crate_id":0,"path":["bytes"],"kind":"module"},"1:3308:3172":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"5:11595:2573":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"16:6357:5556":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:51236:4423":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:12184:5013":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:11374:3870":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:3966:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:4995:7276":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"9:27:5240":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"5:6698:9196":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:13725:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:4237:6260":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:10589:5050":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"16:7024:5723":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:24615:4646":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:6647:69":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"4:5870:6268":{"crate_id":4,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"5:1505:4939":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:4707:4472":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:7158:5571":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:13554:7098":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:14817:6257":{"crate_id":5,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:1533:8513":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:53266:7872":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:45852:2498":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:6887:9311":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:23984:4530":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:6560:4910":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6870:9306":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:3331:4752":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:9340:4907":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4325:8851":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12598:6810":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:14000:7230":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:11162:4873":{"crate_id":5,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:4888:4553":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:53050:4461":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13884:7203":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:9528:1599":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:8842:7632":{"crate_id":5,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"13:232:8417":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:15335:59757":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"1:5123:4561":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:11932:6680":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:5996:5547":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6964:3457":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:8377:3278":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:15092:4932":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13054:6960":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:49239:3881":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:10931:5004":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:15875:2920":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"16:5790:5417":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:24581:4645":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:49916:4349":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:2187:4754":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:24115:4663":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4203:8814":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4317:8847":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:50052:4610":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:10897:203":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:52296:4425":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4281:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:4704:7267":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:24479:4643":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:13760:7170":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:6219:5553":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:11319:3876":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1476:3133":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4347:8862":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:13016:4333":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:6221:9289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:12385:6774":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:10426:703":{"crate_id":1,"path":["core","hash"],"kind":"module"},"16:7549:5513":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5459:9106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:53160:4444":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:1463:4814":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:46492:3241":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:22582:55936":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:8135:5052":{"crate_id":5,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"5:7735:4246":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"17:13041:6953":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:38669:4253":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:3946:3131":{"crate_id":4,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:4511:8932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4425:8896":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:23749:4634":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:1689:4818":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:6518:5560":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:7444:175":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"5:15873:2918":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"1:51005:4433":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:10255:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:52021:4463":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10200:6480":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11458:6586":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"13:120:45281":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:11169:3888":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:3323:3173":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:11947:6684":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"12:2009:1720":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11962:6689":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3779:3092":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:7821:4482":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:15879:2924":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"1:13073:4338":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7264:5520":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:46227:4597":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:5766:5416":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:11988:9327":{"crate_id":5,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:3604:6383":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11337:5773":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10407:5811":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:897:5029":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11519:6602":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:4410:8889":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"12:0:2958":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"4:3743:160":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:46511:3243":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:47483:195":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:46622:3252":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:7930:5051":{"crate_id":5,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"9:41:5241":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:46145:4596":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11604:6615":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:3615:2407":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:10941:3054":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13192:7008":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11406:6568":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"9:963:5256":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:3889:4785":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:8330:4782":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:48444:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:4215:8815":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13819:7184":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:1156:7617":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:3382:3187":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:49296:4578":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:1522:8508":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:46859:3068":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11628:6619":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:69:3102":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:9961:6467":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:1091:6260":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:37512:3682":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:53323:7877":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:48480:3326":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:4647:3039":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:3544:2342":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:3957:8716":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:37488:168":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:24100:4700":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:8154:184":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10262:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"16:7884:5512":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:50056:4604":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:5374:5104":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:14:2372":{"crate_id":1,"path":["core","write"],"kind":"macro"},"5:1623:4828":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4387:8881":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:52230:4440":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13356:7047":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:23930:9338":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"9:1075:5259":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:3742:3091":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:1563:8526":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:49061:4577":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:820:5868":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:15857:2905":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"1:51255:7816":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"12:469:8002":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:9245:5748":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:1669:4817":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:5963:5175":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:12678:4581":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:5941:179":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:8642:5130":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:10448:5755":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5269:9016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:9624:8326":{"crate_id":5,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:3351:3179":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:1630:8570":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5371:9078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12343:6753":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10001:47014":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:4341:8859":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:11992:59190":{"crate_id":5,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:71:760":{"crate_id":1,"path":["core","isize"],"kind":"module"},"17:11378:5771":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:10690:7641":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:48359:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:10607:5036":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"1:13227:8010":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"5:8383:5052":{"crate_id":5,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"5:6962:4859":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:9368:6363":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:5068:4560":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:49424:3873":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:48656:4010":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6614:9298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:8484:4963":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:3295:95":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:46473:3233":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4227:8816":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:48681:146":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:1676:8607":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9133:46966":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:729:60859":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"10:0:2956":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"4:4623:224":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:6028:9203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:3041:5680":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:4272:8825":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:3324:2573":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:53338:7878":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:12179:5012":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:51197:4438":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10331:5784":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:11116:1599":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"4:3039:8269":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:10819:129":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"1:8850:3227":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:2937:169":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:50040:4607":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:22550:55838":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"4:1613:1720":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5428:9098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:47389:2259":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:8070:3067":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:6667:4766":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"12:377:5328":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11822:6668":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:49574:3045":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:3249:206":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:14073:191":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"6:6005:9185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:5933:5172":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:11402:3871":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12946:6870":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:1690:8618":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:885:5873":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4501:8927":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13377:7051":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:15073:4926":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7073:5569":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4523:8937":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13933:7218":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:7894:5541":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:8127:8009":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:9162:5803":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:3140:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:157:40099":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:5379:9079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:7891:3214":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:10975:6547":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"12:761:3869":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:3483:1604":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6110:5543":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12521:6797":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:1442:1720":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:4263:3070":{"crate_id":5,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:2201:1037":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"5:11931:4245":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"5:15213:5104":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"9:749:5194":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:9404:6364":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:3713:3198":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:3548:2343":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:5580:5405":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:0:477":{"crate_id":1,"path":["core"],"kind":"module"},"17:13574:7104":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:2945:5700":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12040:6702":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:9476:6366":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"8:0:2954":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:15854:2902":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"5:14466:4905":{"crate_id":5,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:52654:4469":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:51500:4435":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:47356:166":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"16:7146:5570":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12795:6848":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:624:8499":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4449:8910":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11794:6658":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"12:1651:5334":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:7795:4250":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"17:13062:6962":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"9:809:4987":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:49112:3868":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:8124:4808":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12685:6827":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:1655:4830":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:51727:7823":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:46314:4518":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6464:5517":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:8902:46960":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:7439:6260":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:9768:6248":{"crate_id":5,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:51404:4462":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1729:5118":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:7618:4240":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"17:13978:7224":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:47552:168":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13746:7164":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:49628:4596":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:2381:2634":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12982:6901":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7342:5538":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:3488:5688":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:8849:5800":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:7798:4252":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"5:14884:4247":{"crate_id":5,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:584:8478":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:46552:3255":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:1306:143":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:49388:4583":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6691:5565":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:6702:9200":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:50048:4609":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:4033:4391":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"6:3892:8670":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:1457:4831":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:3945:8713":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:681:6373":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:6474:3234":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:3317:5065":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:6413:5340":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7870:5511":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:10502:6486":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:8413:4784":{"crate_id":5,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"18:720:6346":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:2512:5812":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:48126:3327":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:10611:6497":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10888:4422":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:10563:5026":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:6780:5566":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4023:8749":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:23008:4420":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:7786:5515":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:49263:3286":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6032:5435":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"18:712:3682":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4535:7263":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:5832:4745":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"17:13272:7028":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:4434:3062":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6238:5507":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:14019:6255":{"crate_id":5,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"14:216:10314":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:3358:1727":{"crate_id":5,"path":["std","io"],"kind":"module"},"17:10211:6481":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:4570:3068":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"1:1942:1726":{"crate_id":1,"path":["core","mem"],"kind":"module"},"5:6085:5114":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:49220:3882":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:15861:2908":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"17:13394:7054":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:4210:3133":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:49121:3866":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:56016:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4033:8752":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"9:776:5238":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:49290:3285":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2274:3317":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:10861:1983":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:3997:8739":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:3190:128":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"5:12043:2573":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:48383:133":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"5:6440:4858":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11835:6669":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:11049:3067":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"17:9971:60848":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:8249:3206":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:547:5413":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:6087:5502":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:47997:3362":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3246:3090":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:9731:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"12:2045:4757":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:56055:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:1560:94":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12568:6804":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12208:6731":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5330:6454":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:1194:8324":{"crate_id":5,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:605:8489":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:3392:5692":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:3834:6260":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:829:5869":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:4193:8813":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:2772:4825":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11026:6551":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13446:7067":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:6014:5548":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:4357:5089":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:14509:118":{"crate_id":5,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:2181:4752":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:14022:4620":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:15350:5352":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:12189:4951":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"5:11292:5108":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"17:12537:6799":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:49542:4590":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:704:6344":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:6856:3256":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10435:6484":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:2897:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:12229:4953":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:11281:3875":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:8843:3087":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:2195:6262":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:23655:4415":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:50934:4465":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:7106:6272":{"crate_id":4,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"12:774:1720":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:6793:4858":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13637:7120":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13282:7029":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:3370:4756":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:811:5867":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:9088:46965":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:8911:3218":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"6:6124:9227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"12:2039:4754":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:10468:5782":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12155:6724":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:10793:5061":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13598:7108":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:3318:3174":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:13942:7220":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12725:6832":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6152:5504":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:10052:6474":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:5738:4894":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:9464:60534":{"crate_id":5,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:1045:4913":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:782:6344":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:2251:3318":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:46581:3248":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:5421:5394":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:6899:9313":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"14:194:45309":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:2325:4822":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:2934:170":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:8565:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:24411:4641":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:616:8494":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"12:2331:3130":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:15827:35728":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:13348:7044":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:9886:6465":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:52183:4436":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8367:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:45927:3340":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"4:1195:8008":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12783:6841":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:9186:5775":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4262:8818":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:9896:60854":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:8183:1720":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:1760:8646":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:3146:135":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:5561:5404":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4112:8792":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10623:6498":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:3315:3291":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"6:4401:8886":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:3333:5070":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"1:2890:404":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"1:45673:3094":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:3492:132":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:46612:3251":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:5505:5401":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:10827:5831":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:1717:8631":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:599:8486":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7226:5577":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:47475:178":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"12:2323:8420":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:4377:8878":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:11189:4878":{"crate_id":5,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"5:8030:5052":{"crate_id":5,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:9839:5784":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:47955:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6252:5554":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"12:112:7997":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:4704:3040":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"6:5420:9096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"12:181:5329":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"12:2315:60841":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:3198:3038":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"5:15878:2923":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"1:23820:4637":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:6322:5123":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:45737:184":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:1908:41403":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:5346:5503":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:12065:4965":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:6940:4864":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:1136:4919":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:15860:2907":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"17:12142:6721":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:5753:5415":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:32278:55964":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"5:15872:2917":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"17:12699:6830":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:5312:9045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"12:1762:6226":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:650:5875":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6864:9305":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6591:5563":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:7804:5514":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:11601:4992":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"1:10609:1288":{"crate_id":1,"path":["core","slice"],"kind":"module"},"1:24128:4662":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:10420:5810":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:49470:4586":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:11542:4989":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"6:3951:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:45645:3199":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:53361:7879":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:52104:4448":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:8316:4781":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:49488:4587":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:10266:3328":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"5:5800:4900":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:3472:2633":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:49149:3878":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:13022:4334":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3248:207":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:23651:4422":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:8236:3130":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10106:5848":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:50202:191":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:51092:4458":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:49159:3885":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:6683:4776":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5274:9017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:6391:5557":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"14:189:7533":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10317:5769":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"12:784:4816":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:3701:137":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:801:5866":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:8101:1720":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10353:5815":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:511:8005":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:1472:4829":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:10666:4944":{"crate_id":5,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:6176:9267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:1646:4831":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:14686:4249":{"crate_id":5,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12582:6806":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:694:5881":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:38732:4301":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:1602:8551":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4241:8817":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:51531:4439":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:49738:4339":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:49723:4336":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:4506:7262":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:8928:5152":{"crate_id":5,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"5:6864:4862":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:10845:5082":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6366:5341":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:2159:2573":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:49895:4347":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:46:8422":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13582:7105":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:8107:4807":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"15:269:5348":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"12:812:4817":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:24025:10955":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:4602:3030":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"4:8284:4780":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11665:6625":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"14:56:6587":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:10938:6544":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5210:8985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:8348:9336":{"crate_id":4,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"5:15058:4925":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13590:7107":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8376:2844":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:754:60861":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:5384:5392":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11779:6652":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:3268:4300":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"12:160:5325":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3411:3193":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4101:8787":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"9:469:10019":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:7333:5524":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:3241:5684":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:8266:101":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:4417:7259":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:51864:4468":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:10538:4007":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13163:7001":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:15251:5105":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:5788:4897":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4637:3030":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:49752:4342":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10149:6465":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11254:5802":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:50220:180":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5522:9119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:9937:4563":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"15:248:5344":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:11384:9185":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:3192:5062":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13780:7176":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:699:5025":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11588:6614":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:8649:5132":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10095:5847":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:1540:8516":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:14155:3062":{"crate_id":5,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:15856:2904":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"18:739:6351":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:15855:2903":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"4:7606:3137":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:9799:6464":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13924:7214":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11277:6561":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:24007:7759":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3406:3192":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6021:5674":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:2314:5814":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:22997:4422":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"12:747:2573":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"9:1020:5258":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1596:8549":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:49130:3867":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:531:8444":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:22802:4422":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12442:6786":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9600:60852":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:4145:8810":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:13801:177":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:49320:3044":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:5548:9134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:14910:4952":{"crate_id":5,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:5469:9108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7335:176":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"1:51679:7822":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11199:6560":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:46502:3242":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6605:5519":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:3881:8662":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:6862:4860":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:14479:7722":{"crate_id":5,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:12431:6784":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:5568:4405":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:8196:6232":{"crate_id":5,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"16:4790:7270":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:13912:7212":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:9005:46962":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:4127:8799":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:11871:3886":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:9769:60855":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:5861:5169":{"crate_id":5,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"16:2754:5428":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10205:2405":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:12168:6506":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5221:8993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13497:7082":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:10258:109":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:15086:4931":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:5197:8984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:3264:5685":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:6106:9217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:14987:4258":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:13906:56012":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:13799:7181":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:7119:5436":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12051:6703":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"15:230:5343":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:11281:5106":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4719:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:6577:5562":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"14:0:2959":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:4671:7266":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:12221:6732":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:10805:4906":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"5:14823:6258":{"crate_id":5,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:46160:4513":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:10694:4833":{"crate_id":5,"path":["std","error","private","Internal"],"kind":"struct"},"5:11347:5117":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:51069:4454":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:0:266":{"crate_id":4,"path":["alloc"],"kind":"module"},"17:11482:6587":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:1419:2573":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:51990:4460":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:7368:1720":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11738:6640":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11616:6618":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:3877:1983":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:7666:4243":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6491:5559":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:3357:4754":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:22537:3682":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:5314:6453":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:52447:4449":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:5945:9152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5400:9091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:12004:6285":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:13453:7068":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:994:4806":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:15869:2914":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"6:525:8441":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:670:40431":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:11380:4857":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:6910:9317":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10128:5850":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:7835:6277":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:11336:5173":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:4304:7256":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13370:7049":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:51216:7815":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:920:96":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"0:6:1593":{"crate_id":0,"path":["bytes","buf"],"kind":"module"},"1:32226:55962":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:48133:2879":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:53238:4429":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:15874:2919":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"1:53113:4426":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:53414:7882":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13221:7016":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10962:6546":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:48422:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"5:6790:4856":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:610:5876":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:52797:4437":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11678:6626":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7761:5582":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:3343:3182":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:1658:4816":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:11224:9325":{"crate_id":5,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"4:1215:4820":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:2968:5678":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:10503:146":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:5152:3344":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:15877:2922":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"6:5359:9071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:10374:7727":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:5185:8980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9264:6453":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:49306:1599":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:3143:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:3402:3191":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:49211:3879":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:5717:5411":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3339:3178":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:12154:5138":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:15859:2906":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"1:22812:4416":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"12:840:4759":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:152:7992":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:299:6369":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:6688:4895":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:294:6368":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:24683:4647":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:6155:9253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12182:6728":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10887:6537":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5998:9181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:3772:7252":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:3347:3180":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:23946:7753":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:53376:7880":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12262:6739":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13627:7115":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:11433:38278":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:4989:4870":{"crate_id":5,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"18:0:2963":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:9223:3460":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:14673:1594":{"crate_id":5,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:11045:46968":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"12:2013:3133":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:6597:56063":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"5:8806:162":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:45913:4397":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"16:3338:5426":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:7195:5574":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:50036:4608":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9933:6466":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:32037:4695":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:48711:7804":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:3725:4303":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:8411:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:0:419":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"3:0:2950":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"5:8477:192":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:47913:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13810:7182":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:4932:3339":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:12645:6824":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:14109:141":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4439:8904":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:13007:3284":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:4478:8919":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:11612:4993":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:5978:9175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5436:9100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:4510:4796":{"crate_id":4,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:3489:131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4470:8917":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:2401:7623":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"16:4614:7264":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:1527:8510":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:53453:7883":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:5975:5546":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"12:2025:4755":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:51174:4434":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:3195:2316":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"1:7719:3239":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11767:6649":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:22605:55934":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:9689:60849":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:3313:3177":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:12085:4966":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:50888:7812":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:47543:1720":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:3281:3089":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:10673:47152":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:15863:2910":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"4:3754:2573":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:3365:4755":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:52261:4443":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:13865:7198":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"12:2032:4752":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4060:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:5078:3340":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"12:354:7998":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"12:1688:5336":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:2257:4823":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:11077:3041":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"5:7120:38277":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"5:11980:4249":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"6:1554:8521":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3153:216":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:51381:4459":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"12:1144:4831":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:46258:4726":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:3172:5681":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:4345:1720":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:569:8469":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:3195:5682":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13477:7075":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:24649:4254":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4293:8837":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:12669:5061":{"crate_id":5,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:49700:4332":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6185:9270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:49769:4343":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:46334:4670":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:7935:8260":{"crate_id":5,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"6:6239:9292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:15361:5352":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:10801:6535":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:5006:4555":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:55977:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12715:4584":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:2166:3133":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:48119:3328":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:46632:3237":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:10798:4905":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:6866:4863":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"9:1056:5251":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:46412:6279":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:4852:7272":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"12:949:4941":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6214:9286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:47745:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:1235:4821":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:46235:4725":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:12130:4969":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6768:5716":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10950:6545":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"9:927:45037":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:48410:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"12:937:4940":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:3329:3176":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6731:5713":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:8116:3133":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:1838:6260":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:47787:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:5175:3343":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:46663:3254":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"12:1159:5321":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:1723:8634":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10543:6488":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:6858:9304":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:8693:5133":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:4477:7261":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5407:5393":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:13710:138":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:4823:7271":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:5778:4896":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5815:5418":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:12174:5144":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:2866:5676":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:8326:3229":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"12:1100:4828":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:13571:4976":{"crate_id":5,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"4:5783:6260":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:10377:5813":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:1630:4759":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:4997:3341":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"5:12010:9328":{"crate_id":5,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"5:9715:5098":{"crate_id":5,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:10204:195":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"17:10864:6536":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:49139:3877":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:2265:4402":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:25121:4503":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:49185:3883":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13788:7177":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:4301:3869":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:47527:2573":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:3074:4422":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:51303:4467":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:24047:10947":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:5656:4885":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:2753:568":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"12:1253:4830":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:49619:4595":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:11192:4879":{"crate_id":5,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:46572:3235":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:7207:3133":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11555:6607":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10458:6415":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:6881:9310":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:11451:4977":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"1:3388:3188":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2492:3095":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:49524:4589":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:51453:4447":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:3091:5738":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:46329:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:10853:3052":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10279:5763":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7216:5576":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:2576:127":{"crate_id":5,"path":["std","error","Error"],"kind":"trait"},"19:0:981":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:24717:4648":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:9858:6249":{"crate_id":5,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:12741:6834":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:27932:4479":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13386:7052":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:54:5311":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:50279:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:1153:7615":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2733:5429":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3372:3184":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:47457:3458":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10266:5747":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:136:7991":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9280:6454":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"12:968:4942":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:5295:45385":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:13222:7747":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:45885:3195":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:12468:4707":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:8132:56426":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:3939:7254":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:11244:59099":{"crate_id":5,"path":["std","net","parser","AddrKind"],"kind":"enum"},"18:857:5871":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:46442:3231":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:6091:9213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:3391:4757":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"12:892:5313":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:4890:7273":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:4438:2573":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:3714:7251":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13733:7158":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10543:4008":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6126:5549":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11147:6556":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:51038:4466":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:5884:6270":{"crate_id":4,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:4120:8797":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5528:9120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4005:8741":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:4711:2317":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"18:866:5872":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7185:5573":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:5792:4898":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:644:5878":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:1602:3869":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:4629:2315":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"6:1708:8625":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:5707:5409":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:47406:3869":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"14:244:7538":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:1744:8641":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:6949:4749":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"5:10424:6250":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"19:117:8369":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"5:6700:9198":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:32212:2341":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:5650:4887":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:45972:4543":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:46591:3249":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:50212:7811":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:14441:4866":{"crate_id":5,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"9:603:10029":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:5522:5402":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:923:4805":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:6470:3133":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"6:5347:9066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:15880:2925":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"6:632:8504":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12671:6826":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:11406:4861":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"12:930:4939":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:53297:7875":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:15272:5112":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:8491:4964":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:10268:2879":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:50032:4606":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6085:9211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:10410:7746":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:4517:8934":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:9296:6362":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"12:877:3131":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:46534:3245":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:46841:3218":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:2928:167":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:11328:6564":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:7652:4242":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13488:7079":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10571:6494":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4052:8760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:5547:15514":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:11101:3869":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:46850:3220":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:9636:8327":{"crate_id":5,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"16:6136:5544":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:15822:10037":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"12:1118:4829":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5472:5399":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:1486:4830":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:2548:4826":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:0:785":{"crate_id":6,"path":["libc"],"kind":"module"},"1:46288:4728":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:46204:4730":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:2437:7624":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"5:5971:5177":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:8292:5052":{"crate_id":5,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:2837:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:46653:3253":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"14:250:7540":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6100:9216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:3367:3183":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:2889:5695":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:11965:4248":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12632:6823":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:3978:8726":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13306:7031":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:5130:8941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1547:8518":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:1934:3131":{"crate_id":4,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:3918:8690":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:8365:3277":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"12:2309:7942":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6807:5567":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4255:5124":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:4395:3060":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:5927:5422":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:6935:9320":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:11195:5008":{"crate_id":5,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"5:14456:9329":{"crate_id":5,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:11525:4988":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6682:5518":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:3429:5431":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"12:1667:5335":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:56042:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4083:8778":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:1617:8563":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4040:8755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7303:5580":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:591:8481":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1700:8624":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11358:5772":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:11082:5776":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:10270:2880":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:5563:9145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10635:6499":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:56003:225":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:49338:3875":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:1639:4814":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12756:6838":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"12:2018:3131":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:11304:46970":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:2598:7627":{"crate_id":5,"path":["std","error","from","StringError"],"kind":"struct"},"1:12789:3888":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:4431:8899":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:14979:7723":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:4300:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:5594:766":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:10264:3327":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"2:300:195":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:11585:4990":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"4:8299:4671":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:8432:3131":{"crate_id":4,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:6202:5122":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:46464:3232":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11993:6696":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13296:7030":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13172:7002":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:49594:4592":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:3967:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:2031:145":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:50099:4681":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:10844:5784":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10304:5766":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:51111:7814":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:10449:6252":{"crate_id":5,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:7252:6260":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:46295:4729":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:3034:56556":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:5955:5174":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:51943:4456":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:4852:4552":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:15326:7726":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"16:6999:5568":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:837:4333":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:24063:10956":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11360:3873":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:48140:2880":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5167:8967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:10673:36250":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"17:12073:6712":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:8143:3217":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:47703:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6923:9318":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11499:6592":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:2399:7622":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"1:3360:3186":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6644:9301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:11329:4871":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:22961:32375":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:7392:5510":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:11287:5107":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:13986:7227":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:24751:4649":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:7510:119":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"17:11915:6674":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:13772:7173":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:1450:4759":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:5029:7277":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:24093:9341":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:12659:6825":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7514:5525":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12552:6803":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:4397:3061":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:50064:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:47423:3457":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:8092:3101":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"17:11750:6641":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:11165:4877":{"crate_id":5,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:77:1469":{"crate_id":1,"path":["core","usize"],"kind":"module"},"1:3252:209":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"18:169:7995":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:2991:5689":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:9222:3461":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:7289:7630":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:23006:4421":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"}},"external_crates":{"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}