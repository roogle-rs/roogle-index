{"root":"0:0:1620","crate_version":"1.2.1","includes_private":false,"index":{"1:3166:75":{"id":"1:3166:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:2921:183":{"id":"1:2921:183","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2923:604","1:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:23465:4474":{"id":"1:23465:4474","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23466:1270","1:23467:1269","1:23468:1267","1:23469:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"1:22877:4473","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:460:1620":{"id":"0:460:1620","crate_id":0,"name":"bytes","span":{"filename":"src/bytes.rs","begin":[1,0],"end":[1276,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:532:1623"],"is_stripped":true}},"1:13440:57156":{"id":"1:13440:57156","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"5:16010:2988"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13421:57152":{"id":"1:13421:57152","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3427:3273":{"id":"1:3427:3273","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:73:1954":{"id":"0:73:1954","crate_id":0,"name":"get_f32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[755,4],"end":[757,5]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x9A\\x99\\x99\\x3F hello\"[..];\nassert_eq!(1.2f32, buf.get_f32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1079:1360":{"id":"0:1079:1360","crate_id":0,"name":"sync","span":{"filename":"src/loom.rs","begin":[2,0],"end":[2,19]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(not(all(test, loom)))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:425":{"id":"0:425","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[32,0],"end":[32,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::buf_impl::Buf","name":"Buf","id":"0:42:1618","glob":false}},"1:8413:2910":{"id":"1:8413:2910","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8415:2880","1:8417:3748","1:8418:3749"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1292:1747":{"id":"0:1292:1747","crate_id":0,"name":"Take","span":{"filename":"src/buf/take.rs","begin":[10,0],"end":[13,1]},"visibility":"public","docs":"A `Buf` adapter which limits the bytes read from an underlying buffer.\n\nThis struct is generally created by calling `take()` on `Buf`. See\ndocumentation of [`take()`](trait.Buf.html#method.take) for more details.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"5:6859:4942":{"id":"5:6859:4942","crate_id":5,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6860:60290"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3519:130":{"id":"1:3519:130","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13419:1831":{"id":"1:13419:1831","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3269:211":{"id":"1:3269:211","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:58:1895":{"id":"0:58:1895","crate_id":0,"name":"get_i32","span":{"filename":"src/buf/buf_impl.rs","begin":[453,4],"end":[455,5]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1766":{"id":"0:49:1766","crate_id":0,"name":"copy_to_slice","span":{"filename":"src/buf/buf_impl.rs","begin":[250,4],"end":[269,5]},"visibility":"default","docs":"Copies bytes from `self` into `dst`.\n\nThe cursor is advanced by the number of bytes copied. `self` must have\nenough remaining bytes to fill `dst`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\nlet mut dst = [0; 5];\n\nbuf.copy_to_slice(&mut dst);\nassert_eq!(&b\"hello\"[..], &dst);\nassert_eq!(6, buf.remaining());\n```\n\n# Panics\n\nThis function panics if `self.remaining() < dst.len()`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13497:57167":{"id":"1:13497:57167","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"5:16010:2988","self::pattern":"1:13054:3379","prim@char":"5:16004:2983","`DoubleEndedIterator`":"1:8448:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49684:4668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:250:779":{"id":"0:250:779","crate_id":0,"name":"iter","span":{"filename":"src/buf/iter.rs","begin":[1,0],"end":[132,49]},"visibility":{"restricted":{"parent":"0:6:1617","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1273:1745"],"is_stripped":true}},"1:13537:4803":{"id":"1:13537:4803","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1961":{"id":"0:75:1961","crate_id":0,"name":"get_f64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[797,4],"end":[799,5]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F hello\"[..];\nassert_eq!(1.2f64, buf.get_f64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:1938":{"id":"0:69:1938","crate_id":0,"name":"get_uint_le","span":{"filename":"src/buf/buf_impl.rs","begin":[673,4],"end":[675,5]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_uint_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13514:57175":{"id":"1:13514:57175","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:16004:2983","self::pattern":"1:13054:3379"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:13084:4378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10575:4118":{"id":"1:10575:4118","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10576:146","1:10577:17965","1:10578:56960"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:169:2190":{"id":"0:169:2190","crate_id":0,"name":"put_int","span":{"filename":"src/buf/buf_mut.rs","begin":[759,4],"end":[761,5]},"visibility":"default","docs":"Writes low `nbytes` of a signed integer to `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_int(0x0504010203, 3);\nassert_eq!(buf, b\"\\x01\\x02\\x03\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self` or if `nbytes` is greater than 8.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:83:1739":{"id":"0:83:1739","crate_id":0,"name":"reader","span":{"filename":"src/buf/buf_impl.rs","begin":[900,4],"end":[905,5]},"visibility":"default","docs":"Creates an adaptor which implements the `Read` trait for `self`.\n\nThis function returns a new value which implements `Read` by adapting\nthe `Read` trait functions to the `Buf` trait functions. Given that\n`Buf` operations are infallible, none of the `Read` functions will\nreturn with `Err`.\n\n# Examples\n\n```\nuse bytes::{Bytes, Buf};\nuse std::io::Read;\n\nlet buf = Bytes::from(\"hello world\");\n\nlet mut reader = buf.reader();\nlet mut dst = [0; 1024];\n\nlet num = reader.read(&mut dst).unwrap();\n\nassert_eq!(11, num);\nassert_eq!(&dst[..11], &b\"hello world\"[..]);\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Reader","id":"0:1286:1749","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13064:3375":{"id":"1:13064:3375","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13066:4376","1:13067:56265","1:13068:56266","1:13069:56267","1:13070:56269","1:13071:56268","1:13072:56270"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10301:3419":{"id":"1:10301:3419","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10302:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13508:57171":{"id":"1:13508:57171","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13544:57185":{"id":"1:13544:57185","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"5:16004:2983"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49779:4675","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5735:4954":{"id":"5:5735:4954","crate_id":5,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5736:6636","5:5737:7788"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3389:3269":{"id":"1:3389:3269","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3390:181","1:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13506:57170":{"id":"1:13506:57170","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4000:68":{"id":"1:4000:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:2863:97":{"id":"1:2863:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2865:2443"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13782:150":{"id":"1:13782:150","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13783:181","1:13784:150","1:13785:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13432:2312":{"id":"1:13432:2312","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13443:4403":{"id":"1:13443:4403","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49438:4656","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6084:57840":{"id":"4:6084:57840","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"4:432:1755","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8106:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"4:432:1755","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8106:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3376:3263":{"id":"1:3376:3263","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:67:1928":{"id":"0:67:1928","crate_id":0,"name":"get_i128_le","span":{"filename":"src/buf/buf_impl.rs","begin":[633,4],"end":[635,5]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8473:2314":{"id":"1:8473:2314","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8474:793","1:8475:1831"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1273:1745":{"id":"0:1273:1745","crate_id":0,"name":"IntoIter","span":{"filename":"src/buf/iter.rs","begin":[26,0],"end":[28,1]},"visibility":"public","docs":"Iterator over the bytes contained by the buffer.\n\nThis struct is created by the [`iter`] method on [`Buf`].\n\n# Examples\n\nBasic usage:\n\n```\nuse bytes::Bytes;\n\nlet buf = Bytes::from(&b\"abc\"[..]);\nlet mut iter = buf.into_iter();\n\nassert_eq!(iter.next(), Some(b'a'));\nassert_eq!(iter.next(), Some(b'b'));\nassert_eq!(iter.next(), Some(b'c'));\nassert_eq!(iter.next(), None);\n```\n\n[`iter`]: trait.Buf.html#method.iter\n[`Buf`]: trait.Buf.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:13503:57169":{"id":"1:13503:57169","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13054:3379","str::match_indices":"5:16010:2988","prim@char":"5:16004:2983","`DoubleEndedIterator`":"1:8448:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49630:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43:1799":{"id":"0:43:1799","crate_id":0,"name":"remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[102,4],"end":[102,33]},"visibility":"default","docs":"Returns the number of bytes between the current position and the end of\nthe buffer.\n\nThis value is greater than or equal to the length of the slice returned\nby `chunk()`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.remaining(), 11);\n\nbuf.get_u8();\n\nassert_eq!(buf.remaining(), 10);\n```\n\n# Implementer notes\n\nImplementations of `remaining` should ensure that the return value does\nnot change unless a call is made to `advance` or any other function that\nis documented to change the `Buf`'s current position.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13418:793":{"id":"1:13418:793","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:173:2205":{"id":"0:173:2205","crate_id":0,"name":"put_f64","span":{"filename":"src/buf/buf_mut.rs","begin":[850,4],"end":[852,5]},"visibility":"default","docs":"Writes  an IEEE754 double-precision (8 bytes) floating point number to\n`self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f64(1.2f64);\nassert_eq!(buf, b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4783:3163":{"id":"1:4783:3163","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4784:2286","1:4785:56496","1:4786:2313"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6103:57843":{"id":"4:6103:57843","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:440":{"id":"0:440","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[37,0],"end":[37,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::take::Take","name":"Take","id":"0:1292:1747","glob":false}},"5:9343:4935":{"id":"5:9343:4935","crate_id":5,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:9344:61050","5:9345:61051","5:9346:61052","5:9347:61053","5:9348:61054","5:9349:32838","5:9350:61049"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10565:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8602:157":{"id":"1:8602:157","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8603:2286","1:8604:922","1:8605:3750","1:8608:2313","1:8609:495","1:8611:3751","1:8614:3752","1:8615:3753","1:8616:3754","1:8617:1737","1:8619:3313","1:8621:3755","1:8622:3756","1:8624:841","1:8627:3757","1:8634:3758","1:8636:3759","1:8639:3760","1:8640:3761","1:8641:3762","1:8643:3763","1:8645:3764","1:8648:1308","1:8649:1740","1:8650:3765","1:8654:3766","1:8657:3767","1:8658:3768","1:8659:3769","1:8661:3770","1:8662:3182","1:8664:3771","1:8667:3772","1:8669:3773","1:8679:3774","1:8694:3775","1:8696:3776","1:8700:3777","1:8709:3778","1:8712:3779","1:8714:3780","1:8717:276","1:8724:294","1:8731:3781","1:8738:3782","1:8747:3783","1:8757:1014","1:8764:3784","1:8771:2871","1:8772:1857","1:8773:3785","1:8785:3786","1:8792:3787","1:8804:3788","1:8811:3789","1:8812:3790","1:8817:2912","1:8820:3791","1:8823:3792","1:8824:3793","1:8826:3794","1:8828:415","1:8831:3795","1:8834:997","1:8837:3796","1:8840:604","1:8843:3797","1:8846:907","1:8848:826","1:8850:792","1:8852:713","1:8854:696","1:8856:3798","1:8857:3799","1:8865:3800"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:74:1958":{"id":"0:74:1958","crate_id":0,"name":"get_f64","span":{"filename":"src/buf/buf_impl.rs","begin":[776,4],"end":[778,5]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33 hello\"[..];\nassert_eq!(1.2f64, buf.get_f64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3734:137":{"id":"1:3734:137","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3172:149":{"id":"1:3172:149","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3174:2524"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13526:57178":{"id":"1:13526:57178","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13054:3379","prim@char":"5:16004:2983"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13532:57180":{"id":"1:13532:57180","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13054:3379","prim@char":"5:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3368:3261":{"id":"1:3368:3261","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13491:57166":{"id":"1:13491:57166","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:161:2161":{"id":"0:161:2161","crate_id":0,"name":"put_i64","span":{"filename":"src/buf/buf_mut.rs","begin":[583,4],"end":[585,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i64(0x0102030405060708);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13441:2236":{"id":"1:13441:2236","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"5:16010:2988"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5653:4978":{"id":"5:5653:4978","crate_id":5,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5654:5867","5:5655:2611"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10565:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3364:3258":{"id":"1:3364:3258","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3365:181","1:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:158:2150":{"id":"0:158:2150","crate_id":0,"name":"put_i32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[517,4],"end":[519,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i32_le(0x0809A0A1);\nassert_eq!(buf, b\"\\xA1\\xA0\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13500:57168":{"id":"1:13500:57168","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"5:16004:2983","`DoubleEndedIterator`":"1:8448:120","str::rmatch_indices":"5:16010:2988","self::pattern":"1:13054:3379"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49612:4664","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167:2182":{"id":"0:167:2182","crate_id":0,"name":"put_uint","span":{"filename":"src/buf/buf_mut.rs","begin":[715,4],"end":[717,5]},"visibility":"default","docs":"Writes an unsigned n-byte integer to `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_uint(0x010203, 3);\nassert_eq!(buf, b\"\\x01\\x02\\x03\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57:1892":{"id":"0:57:1892","crate_id":0,"name":"get_u32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[433,4],"end":[435,5]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3431:3274":{"id":"1:3431:3274","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13448:57157":{"id":"1:13448:57157","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49726:4669","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13084:4378":{"id":"1:13084:4378","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13420:57151":{"id":"1:13420:57151","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:532:1623":{"id":"0:532:1623","crate_id":0,"name":"Bytes","span":{"filename":"src/bytes.rs","begin":[100,0],"end":[106,1]},"visibility":"public","docs":"A cheaply cloneable and sliceable chunk of contiguous memory.\n\n`Bytes` is an efficient container for storing and operating on contiguous\nslices of memory. It is intended for use primarily in networking code, but\ncould have applications elsewhere as well.\n\n`Bytes` values facilitate zero-copy network programming by allowing multiple\n`Bytes` objects to point to the same underlying memory.\n\n`Bytes` does not have a single implementation. It is an interface, whose\nexact behavior is implemented through dynamic dispatch in several underlying\nimplementations of `Bytes`.\n\nAll `Bytes` implementations must fulfill the following requirements:\n- They are cheaply cloneable and thereby shareable between an unlimited amount\n  of components, for example by modifying a reference count.\n- Instances can be sliced to refer to a subset of the the original buffer.\n\n```\nuse bytes::Bytes;\n\nlet mut mem = Bytes::from(\"Hello world\");\nlet a = mem.slice(0..5);\n\nassert_eq!(a, \"Hello\");\n\nlet b = mem.split_to(6);\n\nassert_eq!(mem, \"world\");\nassert_eq!(b, \"Hello \");\n```\n\n# Memory layout\n\nThe `Bytes` struct itself is fairly small, limited to 4 `usize` fields used\nto track information about which segment of the underlying memory the\n`Bytes` handle has access to.\n\n`Bytes` keeps both a pointer to the shared state containing the full memory\nslice and a pointer to the start of the region visible by the handle.\n`Bytes` also tracks the length of its view into the memory.\n\n# Sharing\n\n`Bytes` contains a vtable, which allows implementations of `Bytes` to define\nhow sharing/cloning is implemented in detail.\nWhen `Bytes::clone()` is called, `Bytes` will call the vtable function for\ncloning the backing storage in order to share it behind between multiple\n`Bytes` instances.\n\nFor `Bytes` implementations which refer to constant memory (e.g. created\nvia `Bytes::from_static()`) the cloning implementation will be a no-op.\n\nFor `Bytes` implementations which point to a reference counted shared storage\n(e.g. an `Arc<[u8]>`), sharing will be implemented by increasing the\nthe reference count.\n\nDue to this mechanism, multiple `Bytes` instances may point to the same\nshared memory region.\nEach `Bytes` instance can point to different sections within that\nmemory region, and `Bytes` instances may or may not have overlapping views\ninto the memory.\n\nThe following diagram visualizes a scenario where 2 `Bytes` instances make\nuse of an `Arc`-based backing storage, and provide access to different views:\n\n```text\n\n   Arc ptrs                   ┌─────────┐\n   ________________________ / │ Bytes 2 │\n  /                           └─────────┘\n /          ┌───────────┐     |         |\n|_________/ │  Bytes 1  │     |         |\n|           └───────────┘     |         |\n|           |           | ___/ data     | tail\n|      data |      tail |/              |\nv           v           v               v\n┌─────┬─────┬───────────┬───────────────┬─────┐\n│ Arc │     │           │               │     │\n└─────┴─────┴───────────┴───────────────┴─────┘\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:175:1738":{"id":"0:175:1738","crate_id":0,"name":"limit","span":{"filename":"src/buf/buf_mut.rs","begin":[890,4],"end":[895,5]},"visibility":"default","docs":"Creates an adaptor which can write at most `limit` bytes to `self`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet arr = &mut [0u8; 128][..];\nassert_eq!(arr.remaining_mut(), 128);\n\nlet dst = arr.limit(10);\nassert_eq!(dst.remaining_mut(), 10);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["limit",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Limit","id":"0:1279:1746","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13523:57177":{"id":"1:13523:57177","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:16004:2983","self::pattern":"1:13054:3379"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13450:2955":{"id":"1:13450:2955","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:16004:2983","self::pattern":"1:13054:3379"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10309:189":{"id":"1:10309:189","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10310:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:711:1621":{"id":"0:711:1621","crate_id":0,"name":"bytes_mut","span":{"filename":"src/bytes_mut.rs","begin":[1,0],"end":[1774,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:812:1624"],"is_stripped":true}},"1:3406:3268":{"id":"1:3406:3268","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3408:181","1:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13456:57159":{"id":"1:13456:57159","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:16004:2983","self::pattern":"1:13054:3379"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1913":{"id":"0:63:1913","crate_id":0,"name":"get_i64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[553,4],"end":[555,5]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:1910":{"id":"0:62:1910","crate_id":0,"name":"get_i64","span":{"filename":"src/buf/buf_impl.rs","begin":[533,4],"end":[535,5]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,21],"end":[84,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::buf::Buf","name":"Buf","id":"0:42:1618","glob":false}},"4:6088:57841":{"id":"4:6088:57841","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3182:227":{"id":"1:3182:227","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3184:127","1:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:166:2178":{"id":"0:166:2178","crate_id":0,"name":"put_i128_le","span":{"filename":"src/buf/buf_mut.rs","begin":[693,4],"end":[695,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i128_le(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151:2124":{"id":"0:151:2124","crate_id":0,"name":"put_u16","span":{"filename":"src/buf/buf_mut.rs","begin":[363,4],"end":[365,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u16(0x0809);\nassert_eq!(buf, b\"\\x08\\x09\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172:2201":{"id":"0:172:2201","crate_id":0,"name":"put_f32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[827,4],"end":[829,5]},"visibility":"default","docs":"Writes  an IEEE754 single-precision (4 bytes) floating point number to\n`self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f32_le(1.2f32);\nassert_eq!(buf, b\"\\x9A\\x99\\x99\\x3F\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8363:3312":{"id":"1:8363:3312","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8365:3793"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:7795:4325":{"id":"5:7795:4325","crate_id":5,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:7796:61084"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3516:1628":{"id":"1:3516:1628","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:4741:3118":{"id":"5:4741:3118","crate_id":5,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4742:60964","5:4743:40242","5:4744:60966","5:4745:60965"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[34,0],"end":[34,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::chain::Chain","name":"Chain","id":"0:1264:1744","glob":false}},"0:168:2186":{"id":"0:168:2186","crate_id":0,"name":"put_uint_le","span":{"filename":"src/buf/buf_mut.rs","begin":[737,4],"end":[739,5]},"visibility":"default","docs":"Writes an unsigned n-byte integer to `self` in the little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_uint_le(0x010203, 3);\nassert_eq!(buf, b\"\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:148:2112":{"id":"0:148:2112","crate_id":0,"name":"put_bytes","span":{"filename":"src/buf/buf_mut.rs","begin":[293,4],"end":[297,5]},"visibility":"default","docs":"Put `cnt` bytes `val` into `self`.\n\nLogically equivalent to calling `self.put_u8(val)` `cnt` times, but may work faster.\n\n`self` must have at least `cnt` remaining capacity.\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 6];\n\n{\n    let mut buf = &mut dst[..];\n    buf.put_bytes(b'a', 4);\n\n    assert_eq!(2, buf.remaining_mut());\n}\n\nassert_eq!(b\"aaaa\\0\\0\", &dst);\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["val",{"kind":"primitive","inner":"u8"}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5775:4956":{"id":"5:5775:4956","crate_id":5,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5776:60345","5:5777:60346","5:5778:60347","5:5779:60348"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:199:1737":{"id":"0:199:1737","crate_id":0,"name":"chain","span":{"filename":"src/buf/chain.rs","begin":[1,0],"end":[242,1]},"visibility":{"restricted":{"parent":"0:6:1617","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1264:1744"],"is_stripped":true}},"0:47:1765":{"id":"0:47:1765","crate_id":0,"name":"advance","span":{"filename":"src/buf/buf_impl.rs","begin":[206,4],"end":[206,38]},"visibility":"default","docs":"Advance the internal cursor of the Buf\n\nThe next call to `chunk()` will return a slice starting `cnt` bytes\nfurther into the underlying buffer.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Panics\n\nThis function **may** panic if `cnt > self.remaining()`.\n\n# Implementer notes\n\nIt is recommended for implementations of `advance` to panic if `cnt >\nself.remaining()`. If the implementation does not panic, the call must\nbehave as if `cnt == self.remaining()`.\n\nA call with `cnt == 0` should never panic and be a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:160:2158":{"id":"0:160:2158","crate_id":0,"name":"put_u64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[561,4],"end":[563,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u64_le(0x0102030405060708);\nassert_eq!(buf, b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8887:3310":{"id":"1:8887:3310","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7928:3297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:145:1972":{"id":"0:145:1972","crate_id":0,"name":"put","span":{"filename":"src/buf/buf_mut.rs","begin":[197,4],"end":[219,5]},"visibility":"default","docs":"Transfer bytes into `self` from `src` and advance the cursor by the\nnumber of bytes written.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\n\nbuf.put_u8(b'h');\nbuf.put(&b\"ello\"[..]);\nbuf.put(&b\" world\"[..]);\n\nassert_eq!(buf, b\"hello world\");\n```\n\n# Panics\n\nPanics if `self` does not have enough capacity to contain `src`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["src",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"super::Buf","id":"0:42:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12993:3378":{"id":"1:12993:3378","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12994:126","1:12995:55637"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:450":{"id":"0:450","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[41,31],"end":[41,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::writer::Writer","name":"Writer","id":"0:1329:1750","glob":false}},"1:13767:138":{"id":"1:13767:138","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13768:181","1:13769:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3281:220":{"id":"1:3281:220","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1104":{"id":"0:1104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[91,0],"end":[91,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::bytes_mut::BytesMut","name":"BytesMut","id":"0:812:1624","glob":false}},"0:155:2140":{"id":"0:155:2140","crate_id":0,"name":"put_u32","span":{"filename":"src/buf/buf_mut.rs","begin":[451,4],"end":[453,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u32(0x0809A0A1);\nassert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13459:3781":{"id":"1:13459:3781","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"5:16004:2983","self::pattern":"1:13054:3379","`None`":"1:47495:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:143:2065":{"id":"0:143:2065","crate_id":0,"name":"has_remaining_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[124,4],"end":[126,5]},"visibility":"default","docs":"Returns true if there is space in `self` for more bytes.\n\nThis is equivalent to `self.remaining_mut() != 0`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 5];\nlet mut buf = &mut dst[..];\n\nassert!(buf.has_remaining_mut());\n\nbuf.put(&b\"hello\"[..]);\n\nassert!(!buf.has_remaining_mut());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8448:120":{"id":"1:8448:120","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8449:3742","1:8450:3743","1:8451:3744","1:8452:3745","1:8456:3746","1:8459:3747"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3435:3275":{"id":"1:3435:3275","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13423:57153":{"id":"1:13423:57153","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"5:16010:2988"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13540:57183":{"id":"1:13540:57183","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6083":{"id":"4:6083","crate_id":4,"name":null,"span":null,"visibility":{"restricted":{"parent":"4:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["4:6084:57840","4:6085:2235","4:6088:57841","4:6091:57842","4:6103:57843","4:6104:57844","4:6105:3143","4:6106:57845","4:6107:57846"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:23089:32495":{"id":"1:23089:32495","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23090:8009","1:23091:55971","1:23092:55972"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23082:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3717:3277":{"id":"1:3717:3277","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3648:2442","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:72:1949":{"id":"0:72:1949","crate_id":0,"name":"get_f32","span":{"filename":"src/buf/buf_impl.rs","begin":[734,4],"end":[736,5]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];\nassert_eq!(1.2f32, buf.get_f32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:316:1740":{"id":"0:316:1740","crate_id":0,"name":"take","span":{"filename":"src/buf/take.rs","begin":[1,0],"end":[155,1]},"visibility":{"restricted":{"parent":"0:6:1617","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1292:1747"],"is_stripped":true}},"1:10305:2959":{"id":"1:10305:2959","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10306:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13488:57165":{"id":"1:13488:57165","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:1883":{"id":"0:55:1883","crate_id":0,"name":"get_i16_le","span":{"filename":"src/buf/buf_impl.rs","begin":[393,4],"end":[395,5]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_i16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10242:2440":{"id":"1:10242:2440","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10243:1533","1:10244:4300","1:10246:2909"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:51:1867":{"id":"0:51:1867","crate_id":0,"name":"get_i8","span":{"filename":"src/buf/buf_impl.rs","begin":[310,4],"end":[315,5]},"visibility":"default","docs":"Gets a signed 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_i8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13447:3970":{"id":"1:13447:3970","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49716:3123","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10307:2960":{"id":"1:10307:2960","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10308:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13539:57182":{"id":"1:13539:57182","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13453:57158":{"id":"1:13453:57158","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"5:16004:2983","self::pattern":"1:13054:3379"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81:1737":{"id":"0:81:1737","crate_id":0,"name":"chain","span":{"filename":"src/buf/buf_impl.rs","begin":[869,4],"end":[874,5]},"visibility":"default","docs":"Creates an adaptor which will chain this buffer with another.\n\nThe returned `Buf` instance will first consume all bytes from `self`.\nAfterwards the output is equivalent to the output of next.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut chain = b\"hello \"[..].chain(&b\"world\"[..]);\n\nlet full = chain.copy_to_bytes(11);\nassert_eq!(full.chunk(), b\"hello world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["next",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"0:1264:1744","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"0:42:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3577:2368":{"id":"1:3577:2368","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3579:181","1:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:174:2208":{"id":"0:174:2208","crate_id":0,"name":"put_f64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[873,4],"end":[875,5]},"visibility":"default","docs":"Writes  an IEEE754 double-precision (8 bytes) floating point number to\n`self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f64_le(1.2f64);\nassert_eq!(buf, b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13482:57163":{"id":"1:13482:57163","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"5:16010:2988","self::pattern":"1:13054:3379","prim@char":"5:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49566:3987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3278:217":{"id":"1:3278:217","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1017:660":{"id":"0:1017:660","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[1,0],"end":[5,30]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"1:7928:3297":{"id":"1:7928:3297","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7929:55703","1:7930:55704","1:7931:55701","1:7932:55699","1:7933:55705","1:7934:55702","1:7935:55700"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:156:2144":{"id":"0:156:2144","crate_id":0,"name":"put_u32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[473,4],"end":[475,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u32_le(0x0809A0A1);\nassert_eq!(buf, b\"\\xA1\\xA0\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8404:151":{"id":"1:8404:151","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8405:2286","1:8406:1745","1:8407:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6104:57844":{"id":"4:6104:57844","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:432:1755","`String`":"4:8368:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"4:432:1755","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8106:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13446:18517":{"id":"1:13446:18517","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"5:16010:2988"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49745:4671","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76:1969":{"id":"0:76:1969","crate_id":0,"name":"copy_to_bytes","span":{"filename":"src/buf/buf_impl.rs","begin":[816,4],"end":[824,5]},"visibility":"default","docs":"Consumes `len` bytes inside self and returns new instance of `Bytes`\nwith this data.\n\nThis function may be optimized by the underlying type to avoid actual\ncopies. For example, `Bytes` implementation will do a shallow copy\n(ref-count increment).\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet bytes = (&b\"hello world\"[..]).copy_to_bytes(5);\nassert_eq!(&bytes[..], &b\"hello\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"crate::Bytes","id":"0:532:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6437:4936":{"id":"5:6437:4936","crate_id":5,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6438:5192","5:6439:5193","5:6440:7782","5:6441:59678","5:6443:59682","5:6445:59679","5:6446:59680","5:6448:59681"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10565:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:142:2060":{"id":"0:142:2060","crate_id":0,"name":"advance_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[104,4],"end":[104,49]},"visibility":"default","docs":"Advance the internal cursor of the BufMut\n\nThe next call to `chunk_mut` will return a slice starting `cnt` bytes\nfurther into the underlying buffer.\n\nThis function is unsafe because there is no guarantee that the bytes\nbeing advanced past have been initialized.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = Vec::with_capacity(16);\n\n// Write some data\nbuf.chunk_mut()[0..2].copy_from_slice(b\"he\");\nunsafe { buf.advance_mut(2) };\n\n// write more bytes\nbuf.chunk_mut()[0..3].copy_from_slice(b\"llo\");\n\nunsafe { buf.advance_mut(3); }\n\nassert_eq!(5, buf.len());\nassert_eq!(buf, b\"hello\");\n```\n\n# Panics\n\nThis function **may** panic if `cnt > self.remaining_mut()`.\n\n# Implementer notes\n\nIt is recommended for implementations of `advance_mut` to panic if\n`cnt > self.remaining_mut()`. If the implementation does not panic,\nthe call must behave as if `cnt == self.remaining_mut()`.\n\nA call with `cnt == 0` should never panic and be a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:71:1944":{"id":"0:71:1944","crate_id":0,"name":"get_int_le","span":{"filename":"src/buf/buf_impl.rs","begin":[713,4],"end":[715,5]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_int_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:140:1619":{"id":"0:140:1619","crate_id":0,"name":"BufMut","span":{"filename":"src/buf/buf_mut.rs","begin":[29,0],"end":[953,1]},"visibility":"public","docs":"A trait for values that provide sequential write access to bytes.\n\nWrite bytes to a buffer\n\nA buffer stores bytes in memory such that write operations are infallible.\nThe underlying storage may or may not be in contiguous memory. A `BufMut`\nvalue is a cursor into the buffer. Writing to `BufMut` advances the cursor\nposition.\n\nThe simplest `BufMut` is a `Vec<u8>`.\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\n\nbuf.put(&b\"hello world\"[..]);\n\nassert_eq!(buf, b\"hello world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:141:2042","0:142:2060","0:143:2065","0:144:2087","0:145:1972","0:147:2102","0:148:2112","0:149:2113","0:150:2120","0:151:2124","0:152:2129","0:153:2133","0:154:2136","0:155:2140","0:156:2144","0:157:2147","0:158:2150","0:159:2154","0:160:2158","0:161:2161","0:162:2164","0:163:2168","0:164:2172","0:165:2175","0:166:2178","0:167:2182","0:168:2186","0:169:2190","0:170:2193","0:171:2197","0:172:2201","0:173:2205","0:174:2208","0:175:1738","0:176:1743","0:177:2232"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:44:1762":{"id":"0:44:1762","crate_id":0,"name":"chunk","span":{"filename":"src/buf/buf_impl.rs","begin":[133,4],"end":[133,29]},"visibility":"default","docs":"Returns a slice starting at the current position and of length between 0\nand `Buf::remaining()`. Note that this *can* return shorter slice (this allows\nnon-continuous internal representation).\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Implementer notes\n\nThis function should never panic. Once the end of the buffer is reached,\ni.e., `Buf::remaining` returns 0, calls to `chunk()` should return an\nempty slice.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3411:3270":{"id":"1:3411:3270","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3413:181","1:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9259:3553":{"id":"1:9259:3553","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3492:116":{"id":"1:3492:116","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3493:221","1:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4051:4447":{"id":"1:4051:4447","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4052:61068"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:1075:4983":{"id":"5:1075:4983","crate_id":5,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:1076:3367","5:1077:4803","5:1078:57845","5:1079:57846","5:1080:57181","5:1081:57182","5:1082:57183"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:783:222":{"id":"4:783:222","crate_id":4,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:784:3367","4:785:55097","4:786:55098"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6411:223":{"id":"4:6411:223","crate_id":4,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6412:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:374:1748":{"id":"0:374:1748","crate_id":0,"name":"UninitSlice","span":{"filename":"src/buf/uninit_slice.rs","begin":[22,0],"end":[22,42]},"visibility":"public","docs":"Uninitialized byte slice.\n\nReturned by `BufMut::chunk_mut()`, the referenced byte slice may be\nuninitialized. The wrapper provides safe access without introducing\nundefined behavior.\n\nThe safety invariants of this wrapper are:\n\n 1. Reading from an `UninitSlice` is undefined behavior.\n 2. Writing uninitialized bytes to an `UninitSlice` is undefined behavior.\n\nThe difference between `&mut UninitSlice` and `&mut [MaybeUninit<u8>]` is\nthat it is possible in safe code to write uninitialized bytes to an\n`&mut [MaybeUninit<u8>]`, which this type prohibits.","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:170:2193":{"id":"0:170:2193","crate_id":0,"name":"put_int_le","span":{"filename":"src/buf/buf_mut.rs","begin":[781,4],"end":[783,5]},"visibility":"default","docs":"Writes low `nbytes` of a signed integer to `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_int_le(0x0504010203, 3);\nassert_eq!(buf, b\"\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self` or if `nbytes` is greater than 8.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:2572:127":{"id":"5:2572:127","crate_id":5,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:2573:8078","5:2575:61419","5:2576:61420","5:2577:61068"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13538:57181":{"id":"1:13538:57181","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5727:4952":{"id":"5:5727:4952","crate_id":5,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5728:6636","5:5729:60526","5:5730:60527"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1101":{"id":"0:1101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::bytes::Bytes","name":"Bytes","id":"0:532:1623","glob":false}},"1:14242:3177":{"id":"1:14242:3177","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14243:55553","1:14244:55554","1:14245:55555","1:14246:55556","1:14247:55557","1:14248:55558","1:14249:3770"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:50:1864":{"id":"0:50:1864","crate_id":0,"name":"get_u8","span":{"filename":"src/buf/buf_impl.rs","begin":[287,4],"end":[292,5]},"visibility":"default","docs":"Gets an unsigned 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_u8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10292:109":{"id":"1:10292:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10293:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3342:3260":{"id":"1:3342:3260","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3344:181","1:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3347:3257":{"id":"1:3347:3257","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3349:181","1:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3729:224":{"id":"1:3729:224","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3730:181","1:3731:3279","1:3732:686","1:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:428":{"id":"0:428","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[33,0],"end":[33,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::buf_mut::BufMut","name":"BufMut","id":"0:140:1619","glob":false}},"1:22751:4470":{"id":"1:22751:4470","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22752:4471","1:22753:56041","1:22754:56340","1:22755:2198","1:22756:1950","1:22757:43231","1:22758:56341","1:22759:56342","1:22760:56343","1:22761:56344","1:22762:56345","1:22763:56346","1:22764:56347","1:22765:56348","1:22766:56349","1:22767:56350","1:22768:56218","1:22769:56351","1:22770:55536","1:22771:55535","1:22772:55537","1:22773:56042","1:22774:56043","1:22775:56044","1:22776:56045"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22853:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2957:177":{"id":"1:2957:177","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2958:415","1:2959:2871","1:2960:1857","1:2961:3741"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6790:4936":{"id":"5:6790:4936","crate_id":5,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6791:7783"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10565:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10299:119":{"id":"1:10299:119","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10300:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3812:3169":{"id":"1:3812:3169","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3169:74":{"id":"1:3169:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3171:2907"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:6107:57846":{"id":"4:6107:57846","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"5:16010:2988"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6557:4979":{"id":"5:6557:4979","crate_id":5,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6558:60925","5:6559:60926"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:68:1933":{"id":"0:68:1933","crate_id":0,"name":"get_uint","span":{"filename":"src/buf/buf_impl.rs","begin":[653,4],"end":[655,5]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_uint(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13467:2791":{"id":"1:13467:2791","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"5:16010:2988","str::split_whitespace":"5:16010:2988","`DoubleEndedIterator`":"1:8448:120","self::pattern":"1:13054:3379","prim@char":"5:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49462:3122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[38,0],"end":[38,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::uninit_slice::UninitSlice","name":"UninitSlice","id":"0:374:1748","glob":false}},"1:3384:3264":{"id":"1:3384:3264","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:447":{"id":"0:447","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[41,15],"end":[41,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::reader::Reader","name":"Reader","id":"0:1286:1749","glob":false}},"1:3648:2442":{"id":"1:3648:2442","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3650:2537","1:3651:2541","1:3652:2955"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3417:3271":{"id":"1:3417:3271","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3419:181","1:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10311:3421":{"id":"1:10311:3421","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10312:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13485:57164":{"id":"1:13485:57164","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"5:16010:2988","self::pattern":"1:13054:3379","prim@char":"5:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49584:3984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13442:4693":{"id":"1:13442:4693","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49432:3376","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3175:135":{"id":"1:3175:135","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13426:2611":{"id":"1:13426:2611","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12525:4771"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164:2172":{"id":"0:164:2172","crate_id":0,"name":"put_u128_le","span":{"filename":"src/buf/buf_mut.rs","begin":[649,4],"end":[651,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u128_le(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13463:3747":{"id":"1:13463:3747","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"5:16004:2983","self::pattern":"1:13054:3379","`None`":"1:47495:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:165:2175":{"id":"0:165:2175","crate_id":0,"name":"put_i128","span":{"filename":"src/buf/buf_mut.rs","begin":[671,4],"end":[673,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i128(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8400:136":{"id":"1:8400:136","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8402:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:149:2113":{"id":"0:149:2113","crate_id":0,"name":"put_u8","span":{"filename":"src/buf/buf_mut.rs","begin":[317,4],"end":[320,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u8(0x01);\nassert_eq!(buf, b\"\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5833:4809":{"id":"4:5833:4809","crate_id":4,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5835:181","4:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:6106:57845":{"id":"4:6106:57845","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"5:16010:2988"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9260:3552":{"id":"1:9260:3552","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:342:1741":{"id":"0:342:1741","crate_id":0,"name":"uninit_slice","span":{"filename":"src/buf/uninit_slice.rs","begin":[1,0],"end":[209,2]},"visibility":{"restricted":{"parent":"0:6:1617","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:374:1748"],"is_stripped":true}},"5:5647:4976":{"id":"5:5647:4976","crate_id":5,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5648:2730","5:5649:3651"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10565:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:60:1903":{"id":"0:60:1903","crate_id":0,"name":"get_u64","span":{"filename":"src/buf/buf_impl.rs","begin":[493,4],"end":[495,5]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13529:57179":{"id":"1:13529:57179","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:16004:2983","self::pattern":"1:13054:3379"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:437":{"id":"0:437","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[36,0],"end":[36,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::limit::Limit","name":"Limit","id":"0:1279:1746","glob":false}},"1:22840:4462":{"id":"1:22840:4462","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22841:56041","1:22842:1227","1:22843:1228","1:22844:56042","1:22845:56043","1:22846:56044","1:22847:56045","1:22848:56046","1:22849:56047","1:22850:56048"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22853:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:144:2087":{"id":"0:144:2087","crate_id":0,"name":"chunk_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[175,4],"end":[175,48]},"visibility":"default","docs":"Returns a mutable slice starting at the current BufMut position and of\nlength between 0 and `BufMut::remaining_mut()`. Note that this *can* be shorter than the\nwhole remainder of the buffer (this allows non-continuous implementation).\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\nThe returned byte slice may represent uninitialized memory.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = Vec::with_capacity(16);\n\nunsafe {\n    // MaybeUninit::as_mut_ptr\n    buf.chunk_mut()[0..].as_mut_ptr().write(b'h');\n    buf.chunk_mut()[1..].as_mut_ptr().write(b'e');\n\n    buf.advance_mut(2);\n\n    buf.chunk_mut()[0..].as_mut_ptr().write(b'l');\n    buf.chunk_mut()[1..].as_mut_ptr().write(b'l');\n    buf.chunk_mut()[2..].as_mut_ptr().write(b'o');\n\n    buf.advance_mut(3);\n}\n\nassert_eq!(5, buf.len());\nassert_eq!(buf, b\"hello\");\n```\n\n# Implementer notes\n\nThis function should never panic. `chunk_mut` should return an empty\nslice **if and only if** `remaining_mut()` returns 0. In other words,\n`chunk_mut()` returning an empty slice implies that `remaining_mut()` will\nreturn 0 and `remaining_mut()` returning 0 implies that `chunk_mut()` will\nreturn an empty slice.\n\nThis function may trigger an out-of-memory abort if it tries to allocate\nmemory and fails to do so.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"UninitSlice","id":"0:374:1748","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:12501:3977":{"id":"1:12501:3977","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12502:2286","1:12503:2604"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3775:3168":{"id":"1:3775:3168","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13444:1620":{"id":"1:13444:1620","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49448:1623","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5837:4811":{"id":"4:5837:4811","crate_id":4,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5839:181","4:5840:2682"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13445:18479":{"id":"1:13445:18479","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"5:16010:2988"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49736:4670","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3337:3255":{"id":"1:3337:3255","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3339:181","1:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8880:3164":{"id":"1:8880:3164","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10303:3420":{"id":"1:10303:3420","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10304:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13434:56593":{"id":"1:13434:56593","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:64:1918":{"id":"0:64:1918","crate_id":0,"name":"get_u128","span":{"filename":"src/buf/buf_impl.rs","begin":[573,4],"end":[575,5]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13429:1858":{"id":"1:13429:1858","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:16021:2997"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70:1941":{"id":"0:70:1941","crate_id":0,"name":"get_int","span":{"filename":"src/buf/buf_impl.rs","begin":[693,4],"end":[695,5]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_int(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99:1736":{"id":"0:99:1736","crate_id":0,"name":"buf_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1,0],"end":[1146,43]},"visibility":{"restricted":{"parent":"0:6:1617","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:140:1619"],"is_stripped":true}},"0:7:1735":{"id":"0:7:1735","crate_id":0,"name":"buf_impl","span":{"filename":"src/buf/buf_impl.rs","begin":[1,0],"end":[1074,40]},"visibility":{"restricted":{"parent":"0:6:1617","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:42:1618"],"is_stripped":true}},"0:152:2129":{"id":"0:152:2129","crate_id":0,"name":"put_u16_le","span":{"filename":"src/buf/buf_mut.rs","begin":[385,4],"end":[387,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u16_le(0x0809);\nassert_eq!(buf, b\"\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1898":{"id":"0:59:1898","crate_id":0,"name":"get_i32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[473,4],"end":[475,5]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13439:57155":{"id":"1:13439:57155","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"1:3581:2369","str::slice_unchecked":"5:16010:2988","`str`":"5:16010:2988"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:812:1624":{"id":"0:812:1624","crate_id":0,"name":"BytesMut","span":{"filename":"src/bytes_mut.rs","begin":[61,0],"end":[66,1]},"visibility":"public","docs":"A unique reference to a contiguous slice of memory.\n\n`BytesMut` represents a unique view into a potentially shared memory region.\nGiven the uniqueness guarantee, owners of `BytesMut` handles are able to\nmutate the memory.\n\n`BytesMut` can be thought of as containing a `buf: Arc<Vec<u8>>`, an offset\ninto `buf`, a slice length, and a guarantee that no other `BytesMut` for the\nsame `buf` overlaps with its slice. That guarantee means that a write lock\nis not required.\n\n# Growth\n\n`BytesMut`'s `BufMut` implementation will implicitly grow its buffer as\nnecessary. However, explicitly reserving the required space up-front before\na series of inserts will be more efficient.\n\n# Examples\n\n```\nuse bytes::{BytesMut, BufMut};\n\nlet mut buf = BytesMut::with_capacity(64);\n\nbuf.put_u8(b'h');\nbuf.put_u8(b'e');\nbuf.put(&b\"llo\"[..]);\n\nassert_eq!(&buf[..], b\"hello\");\n\n// Freeze the buffer so that it can be shared\nlet a = buf.freeze();\n\n// This does not allocate, instead `b` points to the same memory.\nlet b = a.clone();\n\nassert_eq!(&a[..], b\"hello\");\nassert_eq!(&b[..], b\"hello\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:13517:57176":{"id":"1:13517:57176","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:16004:2983","self::pattern":"1:13054:3379"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:147:2102":{"id":"0:147:2102","crate_id":0,"name":"put_slice","span":{"filename":"src/buf/buf_mut.rs","begin":[240,4],"end":[266,5]},"visibility":"default","docs":"Transfer bytes into `self` from `src` and advance the cursor by the\nnumber of bytes written.\n\n`self` must have enough remaining capacity to contain all of `src`.\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 6];\n\n{\n    let mut buf = &mut dst[..];\n    buf.put_slice(b\"hello\");\n\n    assert_eq!(1, buf.remaining_mut());\n}\n\nassert_eq!(b\"hello\\0\", &dst);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22877:4473":{"id":"1:22877:4473","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22878:4471","1:22879:1247","1:22880:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1286:1749":{"id":"0:1286:1749","crate_id":0,"name":"Reader","span":{"filename":"src/buf/reader.rs","begin":[11,0],"end":[13,1]},"visibility":"public","docs":"A `Buf` adapter which implements `io::Read` for the inner value.\n\nThis struct is generally created by calling `reader()` on `Buf`. See\ndocumentation of [`reader()`](trait.Buf.html#method.reader) for more\ndetails.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:267:1738":{"id":"0:267:1738","crate_id":0,"name":"limit","span":{"filename":"src/buf/limit.rs","begin":[1,0],"end":[75,1]},"visibility":{"restricted":{"parent":"0:6:1617","path":"::buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1279:1746"],"is_stripped":true}},"1:3277:218":{"id":"1:3277:218","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5785:4957":{"id":"5:5785:4957","crate_id":5,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5786:59788"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:80:1740":{"id":"0:80:1740","crate_id":0,"name":"take","span":{"filename":"src/buf/buf_impl.rs","begin":[847,4],"end":[852,5]},"visibility":"default","docs":"Creates an adaptor which will read at most `limit` bytes from `self`.\n\nThis function returns a new instance of `Buf` which will read at most\n`limit` bytes.\n\n# Examples\n\n```\nuse bytes::{Buf, BufMut};\n\nlet mut buf = b\"hello world\"[..].take(5);\nlet mut dst = vec![];\n\ndst.put(&mut buf);\nassert_eq!(dst, b\"hello\");\n\nlet mut buf = buf.into_inner();\ndst.clear();\ndst.put(&mut buf);\nassert_eq!(dst, b\" world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["limit",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Take","id":"0:1292:1747","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6863:4945":{"id":"5:6863:4945","crate_id":5,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6864:61287"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3525:132":{"id":"1:3525:132","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3527:181","1:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6091:57842":{"id":"4:6091:57842","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6085:2235":{"id":"4:6085:2235","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3178:228":{"id":"1:3178:228","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3180:127","1:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3401:3267":{"id":"1:3401:3267","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3403:181","1:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13417":{"id":"1:13417","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12514:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13418:793","1:13419:1831","1:13420:57151","1:13421:57152","1:13423:57153","1:13426:2611","1:13427:57154","1:13428:304","1:13429:1858","1:13430:1763","1:13432:2312","1:13434:56593","1:13436:56594","1:13438:5020","1:13439:57155","1:13440:57156","1:13441:2236","1:13442:4693","1:13443:4403","1:13444:1620","1:13445:18479","1:13446:18517","1:13447:3970","1:13448:57157","1:13449:18508","1:13450:2955","1:13453:57158","1:13456:57159","1:13459:3781","1:13463:3747","1:13467:2791","1:13470:18166","1:13473:57160","1:13476:57161","1:13479:57162","1:13482:57163","1:13485:57164","1:13488:57165","1:13491:57166","1:13494:3008","1:13497:57167","1:13500:57168","1:13503:57169","1:13506:57170","1:13508:57171","1:13510:57172","1:13512:57173","1:13513:57174","1:13514:57175","1:13517:57176","1:13520:38656","1:13523:57177","1:13526:57178","1:13529:57179","1:13532:57180","1:13535:4606","1:13537:4803","1:13538:57181","1:13539:57182","1:13540:57183","1:13541:57184","1:13543:4985","1:13544:57185"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2926:124":{"id":"1:2926:124","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0:1620":{"id":"0:0:1620","crate_id":0,"name":"bytes","span":{"filename":"src/lib.rs","begin":[1,0],"end":[116,1]},"visibility":"public","docs":"Provides abstractions for working with bytes.\n\nThe `bytes` crate provides an efficient byte buffer structure\n([`Bytes`](struct.Bytes.html)) and traits for working with buffer\nimplementations ([`Buf`], [`BufMut`]).\n\n[`Buf`]: trait.Buf.html\n[`BufMut`]: trait.BufMut.html\n\n# `Bytes`\n\n`Bytes` is an efficient container for storing and operating on contiguous\nslices of memory. It is intended for use primarily in networking code, but\ncould have applications elsewhere as well.\n\n`Bytes` values facilitate zero-copy network programming by allowing multiple\n`Bytes` objects to point to the same underlying memory. This is managed by\nusing a reference count to track when the memory is no longer needed and can\nbe freed.\n\nA `Bytes` handle can be created directly from an existing byte store (such as `&[u8]`\nor `Vec<u8>`), but usually a `BytesMut` is used first and written to. For\nexample:\n\n```rust\nuse bytes::{BytesMut, BufMut};\n\nlet mut buf = BytesMut::with_capacity(1024);\nbuf.put(&b\"hello world\"[..]);\nbuf.put_u16(1234);\n\nlet a = buf.split();\nassert_eq!(a, b\"hello world\\x04\\xD2\"[..]);\n\nbuf.put(&b\"goodbye world\"[..]);\n\nlet b = buf.split();\nassert_eq!(b, b\"goodbye world\"[..]);\n\nassert_eq!(buf.capacity(), 998);\n```\n\nIn the above example, only a single buffer of 1024 is allocated. The handles\n`a` and `b` will share the underlying buffer and maintain indices tracking\nthe view into the buffer represented by the handle.\n\nSee the [struct docs] for more details.\n\n[struct docs]: struct.Bytes.html\n\n# `Buf`, `BufMut`\n\nThese two traits provide read and write access to buffers. The underlying\nstorage may or may not be in contiguous memory. For example, `Bytes` is a\nbuffer that guarantees contiguous memory, but a [rope] stores the bytes in\ndisjoint chunks. `Buf` and `BufMut` maintain cursors tracking the current\nposition in the underlying byte storage. When bytes are read or written, the\ncursor is advanced.\n\n[rope]: https://en.wikipedia.org/wiki/Rope_(data_structure)\n\n## Relation with `Read` and `Write`\n\nAt first glance, it may seem that `Buf` and `BufMut` overlap in\nfunctionality with `std::io::Read` and `std::io::Write`. However, they\nserve different purposes. A buffer is the value that is provided as an\nargument to `Read::read` and `Write::write`. `Read` and `Write` may then\nperform a syscall, which has the potential of failing. Operations on `Buf`\nand `BufMut` are infallible.","links":{},"attrs":["#![warn(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:6:1617","0:454","0:457","0:1101","0:1104"],"is_stripped":false}},"1:3104:4442":{"id":"1:3104:4442","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3103:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:66:1925":{"id":"0:66:1925","crate_id":0,"name":"get_i128","span":{"filename":"src/buf/buf_impl.rs","begin":[613,4],"end":[615,5]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3740:3279":{"id":"1:3740:3279","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3742:54513"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1279:1746":{"id":"0:1279:1746","crate_id":0,"name":"Limit","span":{"filename":"src/buf/limit.rs","begin":[9,0],"end":[12,1]},"visibility":"public","docs":"A `BufMut` adapter which limits the amount of bytes that can be written\nto an underlying buffer.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:171:2197":{"id":"0:171:2197","crate_id":0,"name":"put_f32","span":{"filename":"src/buf/buf_mut.rs","begin":[804,4],"end":[806,5]},"visibility":"default","docs":"Writes  an IEEE754 single-precision (4 bytes) floating point number to\n`self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f32(1.2f32);\nassert_eq!(buf, b\"\\x3F\\x99\\x99\\x9A\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3358:3259":{"id":"1:3358:3259","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3360:181","1:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13449:18508":{"id":"1:13449:18508","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49754:4672","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13494:3008":{"id":"1:13494:3008","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"5:16010:2988","`DoubleEndedIterator`":"1:8448:120","self::pattern":"1:13054:3379","prim@char":"5:16004:2983"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49666:4667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6685:4955":{"id":"5:6685:4955","crate_id":5,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6686:60876","5:6687:9254","5:6688:9255","5:6689:9257","5:6690:9256","5:6691:9258","5:6692:9259","5:6693:9261","5:6694:6678","5:6695:9264","5:6696:9265","5:6697:9266","5:6698:9267","5:6699:9268","5:6700:9269","5:6701:9262","5:6702:9263"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6787:4969":{"id":"5:6787:4969","crate_id":5,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6788:9370","5:6789:60363"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10565:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13513:57174":{"id":"1:13513:57174","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:177:2232":{"id":"0:177:2232","crate_id":0,"name":"chain_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[947,4],"end":[952,5]},"visibility":"default","docs":"Creates an adapter which will chain this buffer with another.\n\nThe returned `BufMut` instance will first write to all bytes from\n`self`. Afterwards, it will write to `next`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut a = [0u8; 5];\nlet mut b = [0u8; 6];\n\nlet mut chain = (&mut a[..]).chain_mut(&mut b[..]);\n\nchain.put_slice(b\"hello world\");\n\nassert_eq!(&a[..], b\"hello\");\nassert_eq!(&b[..], b\" world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["next",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"0:1264:1744","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"BufMut","id":"0:140:1619","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13535:4606":{"id":"1:13535:4606","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:12993:3378","FromStr::Err":"1:12993:3378"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12993:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12993:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13473:57160":{"id":"1:13473:57160","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"5:16010:2988","`DoubleEndedIterator`":"1:8448:120","self::pattern":"1:13054:3379","prim@char":"5:16004:2983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49480:3989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154:2136":{"id":"0:154:2136","crate_id":0,"name":"put_i16_le","span":{"filename":"src/buf/buf_mut.rs","begin":[429,4],"end":[431,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i16_le(0x0809);\nassert_eq!(buf, b\"\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1264:1744":{"id":"0:1264:1744","crate_id":0,"name":"Chain","span":{"filename":"src/buf/chain.rs","begin":[32,0],"end":[35,1]},"visibility":"public","docs":"A `Chain` sequences two buffers.\n\n`Chain` is an adapter that links two underlying buffers and provides a\ncontinuous view across both buffers. It is able to sequence either immutable\nbuffers ([`Buf`] values) or mutable buffers ([`BufMut`] values).\n\nThis struct is generally created by calling [`Buf::chain`]. Please see that\nfunction's documentation for more detail.\n\n# Examples\n\n```\nuse bytes::{Bytes, Buf};\n\nlet mut buf = (&b\"hello \"[..])\n    .chain(&b\"world\"[..]);\n\nlet full: Bytes = buf.copy_to_bytes(11);\nassert_eq!(full[..], b\"hello world\"[..]);\n```\n\n[`Buf::chain`]: trait.Buf.html#method.chain\n[`Buf`]: trait.Buf.html\n[`BufMut`]: trait.BufMut.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:48:1832":{"id":"0:48:1832","crate_id":0,"name":"has_remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[225,4],"end":[227,5]},"visibility":"default","docs":"Returns true if there are any more bytes to consume\n\nThis is equivalent to `self.remaining() != 0`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"a\"[..];\n\nassert!(buf.has_remaining());\n\nbuf.get_u8();\n\nassert!(!buf.has_remaining());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5008:4920":{"id":"5:5008:4920","crate_id":5,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5009:2610","5:5010:60550"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:150:2120":{"id":"0:150:2120","crate_id":0,"name":"put_i8","span":{"filename":"src/buf/buf_mut.rs","begin":[340,4],"end":[343,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i8(0x01);\nassert_eq!(buf, b\"\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3310:3166":{"id":"1:3310:3166","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3352:3256":{"id":"1:3352:3256","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3354:181","1:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1329:1750":{"id":"0:1329:1750","crate_id":0,"name":"Writer","span":{"filename":"src/buf/writer.rs","begin":[11,0],"end":[13,1]},"visibility":"public","docs":"A `BufMut` adapter which implements `io::Write` for the inner value.\n\nThis struct is generally created by calling `writer()` on `BufMut`. See\ndocumentation of [`writer()`](trait.BufMut.html#method.writer) for more\ndetails.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:157:2147":{"id":"0:157:2147","crate_id":0,"name":"put_i32","span":{"filename":"src/buf/buf_mut.rs","begin":[495,4],"end":[497,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i32(0x0809A0A1);\nassert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13520:38656":{"id":"1:13520:38656","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:16004:2983","self::pattern":"1:13054:3379"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22804:4480":{"id":"1:22804:4480","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22805:4471","1:22806:56041","1:22807:1227","1:22808:1228","1:22809:43231","1:22810:56214","1:22811:56215","1:22812:56216","1:22813:56217","1:22814:56218","1:22815:56042","1:22816:56043","1:22817:56044","1:22818:56045","1:22819:56046","1:22820:56047","1:22821:56048"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22853:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[35,0],"end":[35,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::iter::IntoIter","name":"IntoIter","id":"0:1273:1745","glob":false}},"0:6:1617":{"id":"0:6:1617","crate_id":0,"name":"buf","span":{"filename":"src/buf/mod.rs","begin":[1,0],"end":[41,47]},"visibility":"public","docs":"Utilities for working with buffers.\n\nA buffer is any structure that contains a sequence of bytes. The bytes may\nor may not be stored in contiguous memory. This module contains traits used\nto abstract over buffers as well as utilities for working with buffer types.\n\n# `Buf`, `BufMut`\n\nThese are the two foundational traits for abstractly working with buffers.\nThey can be thought as iterators for byte structures. They offer additional\nperformance over `Iterator` by providing an API optimized for byte slices.\n\nSee [`Buf`] and [`BufMut`] for more details.\n\n[rope]: https://en.wikipedia.org/wiki/Rope_(data_structure)\n[`Buf`]: trait.Buf.html\n[`BufMut`]: trait.BufMut.html","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:425","0:428","0:431","0:434","0:437","0:440","0:443","0:447","0:450"],"is_stripped":false}},"0:54:1880":{"id":"0:54:1880","crate_id":0,"name":"get_i16","span":{"filename":"src/buf/buf_impl.rs","begin":[373,4],"end":[375,5]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_i16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52:1873":{"id":"0:52:1873","crate_id":0,"name":"get_u16","span":{"filename":"src/buf/buf_impl.rs","begin":[333,4],"end":[335,5]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_u16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2967:184":{"id":"1:2967:184","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2969:997","1:2970:826","1:2971:792","1:2972:713","1:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3522:131":{"id":"1:3522:131","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:22940:4468":{"id":"1:22940:4468","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22930:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:53:1877":{"id":"0:53:1877","crate_id":0,"name":"get_u16_le","span":{"filename":"src/buf/buf_impl.rs","begin":[353,4],"end":[355,5]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_u16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:159:2154":{"id":"0:159:2154","crate_id":0,"name":"put_u64","span":{"filename":"src/buf/buf_mut.rs","begin":[539,4],"end":[541,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u64(0x0102030405060708);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1078:1622":{"id":"0:1078:1622","crate_id":0,"name":"loom","span":{"filename":"src/loom.rs","begin":[1,0],"end":[30,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:56:1888":{"id":"0:56:1888","crate_id":0,"name":"get_u32","span":{"filename":"src/buf/buf_impl.rs","begin":[413,4],"end":[415,5]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3279:106":{"id":"1:3279:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:141:2042":{"id":"0:141:2042","crate_id":0,"name":"remaining_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[63,4],"end":[63,37]},"visibility":"default","docs":"Returns the number of bytes that can be written from the current\nposition until the end of the buffer is reached.\n\nThis value is greater than or equal to the length of the slice returned\nby `chunk_mut()`.\n\nWriting to a `BufMut` may involve allocating more memory on the fly.\nImplementations may fail before reaching the number of bytes indicated\nby this method if they encounter an allocation failure.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 10];\nlet mut buf = &mut dst[..];\n\nlet original_remaining = buf.remaining_mut();\nbuf.put(&b\"hello\"[..]);\n\nassert_eq!(original_remaining - 5, buf.remaining_mut());\n```\n\n# Implementer notes\n\nImplementations of `remaining_mut` should ensure that the return value\ndoes not change unless a call is made to `advance_mut` or any other\nfunction that is documented to change the `BufMut`'s current position.\n\n# Note\n\n`remaining_mut` may return value smaller than actual available space.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3396:3266":{"id":"1:3396:3266","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3398:181","1:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,26],"end":[84,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::buf::BufMut","name":"BufMut","id":"0:140:1619","glob":false}},"1:23470:32514":{"id":"1:23470:32514","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23471:55535","1:23472:55536","1:23473:55537"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"1:23465:4474","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13438:5020":{"id":"1:13438:5020","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"5:16010:2988","`str`":"5:16010:2988","crate::ops::Index":"1:3577:2368"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5797:4960":{"id":"5:5797:4960","crate_id":5,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5798:6636"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3440:3276":{"id":"1:3440:3276","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13543:4985":{"id":"1:13543:4985","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"5:16004:2983"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49770:4674","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3423:3272":{"id":"1:3423:3272","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:176:1743":{"id":"0:176:1743","crate_id":0,"name":"writer","span":{"filename":"src/buf/buf_mut.rs","begin":[920,4],"end":[925,5]},"visibility":"default","docs":"Creates an adaptor which implements the `Write` trait for `self`.\n\nThis function returns a new value which implements `Write` by adapting\nthe `Write` trait functions to the `BufMut` trait functions. Given that\n`BufMut` operations are infallible, none of the `Write` functions will\nreturn with `Err`.\n\n# Examples\n\n```\nuse bytes::BufMut;\nuse std::io::Write;\n\nlet mut buf = vec![].writer();\n\nlet num = buf.write(&b\"hello world\"[..]).unwrap();\nassert_eq!(11, num);\n\nlet buf = buf.into_inner();\n\nassert_eq!(*buf, b\"hello world\"[..]);\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Writer","id":"0:1329:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13430:1763":{"id":"1:13430:1763","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3372:3265":{"id":"1:3372:3265","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:4723:2440":{"id":"5:4723:2440","crate_id":5,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4724:2398","5:4725:4041","5:4727:4042","5:4728:2441","5:4729:4043","5:4730:4044","5:4731:2909","5:4740:3770"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13510:57172":{"id":"1:13510:57172","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162:2164":{"id":"0:162:2164","crate_id":0,"name":"put_i64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[605,4],"end":[607,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i64_le(0x0102030405060708);\nassert_eq!(buf, b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10313:3422":{"id":"1:10313:3422","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10314:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13436:56594":{"id":"1:13436:56594","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13470:18166":{"id":"1:13470:18166","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"1:13054:3379","prim@char":"5:16004:2983"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12846:4002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13073:4376":{"id":"1:13073:4376","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13075:4396","1:13076:922","1:13077:56552","1:13078:56553"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5741:4955":{"id":"5:5741:4955","crate_id":5,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5742:8911","5:5743:59788","5:5744:6636","5:5745:61240","5:5746:5192","5:5747:5193","5:5748:61241","5:5749:1304","5:5750:61242","5:5751:61243","5:5752:61244","5:5753:61245","5:5754:61246","5:5755:61247","5:5756:61248","5:5757:61249"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10540:146":{"id":"1:10540:146","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10541:652","1:10542:2398","1:10543:56076","1:10544:56077","1:10545:56078","1:10546:56079","1:10547:56080","1:10548:56081","1:10549:56082","1:10550:56083","1:10551:56084","1:10552:56085","1:10553:56086","1:10554:56087","1:10555:56088","1:10556:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13476:57161":{"id":"1:13476:57161","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13054:3379","str::split":"5:16010:2988","prim@char":"5:16004:2983","str::rsplit_terminator":"5:16010:2988","`DoubleEndedIterator`":"1:8448:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49512:4660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2866:2685":{"id":"1:2866:2685","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2868:2908"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6105:3143":{"id":"4:6105:3143","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13541:57184":{"id":"1:13541:57184","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"5:16004:2983"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49761:4673","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3505:2683":{"id":"1:3505:2683","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8883:3309":{"id":"1:8883:3309","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:61:1907":{"id":"0:61:1907","crate_id":0,"name":"get_u64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[513,4],"end":[515,5]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10530:142":{"id":"1:10530:142","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10531:715","1:10533:4123"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3247:115":{"id":"1:3247:115","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23774:4472":{"id":"1:23774:4472","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23775:4471"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23770:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:291:1739":{"id":"0:291:1739","crate_id":0,"name":"reader","span":{"filename":"src/buf/reader.rs","begin":[1,0],"end":[81,1]},"visibility":{"restricted":{"parent":"0:6:1617","path":"::buf"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1286:1749"],"is_stripped":true}},"5:5789:4958":{"id":"5:5789:4958","crate_id":5,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5790:60868"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10565:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23137:4520":{"id":"1:23137:4520","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23774:4472","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23128:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10934:214":{"id":"1:10934:214","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10936:181","1:10937:1763","1:10938:2312","1:10939:56593","1:10940:56594","1:10941:753","1:10942:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10925:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3581:2369":{"id":"1:3581:2369","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3274:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3577:2368","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13512:57173":{"id":"1:13512:57173","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3380:3262":{"id":"1:3380:3262","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5719:4953":{"id":"5:5719:4953","crate_id":5,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5720:59808","5:5721:59810","5:5722:59809","5:5723:59811"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13427:57154":{"id":"1:13427:57154","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:45:1828":{"id":"0:45:1828","crate_id":0,"name":"chunks_vectored","span":{"filename":"src/buf/buf_impl.rs","begin":[163,4],"end":[174,5]},"visibility":"default","docs":"Fills `dst` with potentially multiple slices starting at `self`'s\ncurrent position.\n\nIf the `Buf` is backed by disjoint slices of bytes, `chunk_vectored` enables\nfetching more than one slice at once. `dst` is a slice of `IoSlice`\nreferences, enabling the slice to be directly used with [`writev`]\nwithout any further conversion. The sum of the lengths of all the\nbuffers in `dst` will be less than or equal to `Buf::remaining()`.\n\nThe entries in `dst` will be overwritten, but the data **contained** by\nthe slices **will not** be modified. If `chunk_vectored` does not fill every\nentry in `dst`, then `dst` is guaranteed to contain all remaining slices\nin `self.\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Implementer notes\n\nThis function should never panic. Once the end of the buffer is reached,\ni.e., `Buf::remaining` returns 0, calls to `chunk_vectored` must return 0\nwithout mutating `dst`.\n\nImplementations should also take care to properly handle being called\nwith `dst` being a zero length slice.\n\n[`writev`]: http://man7.org/linux/man-pages/man2/readv.2.html","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"5:11086:1753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:153:2133":{"id":"0:153:2133","crate_id":0,"name":"put_i16","span":{"filename":"src/buf/buf_mut.rs","begin":[407,4],"end":[409,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i16(0x0809);\nassert_eq!(buf, b\"\\x08\\x09\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:163:2168":{"id":"0:163:2168","crate_id":0,"name":"put_u128","span":{"filename":"src/buf/buf_mut.rs","begin":[627,4],"end":[629,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u128(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8367:3311":{"id":"1:8367:3311","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8369:3794"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6459:4939":{"id":"5:6459:4939","crate_id":5,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6460:2652","5:6461:9330","5:6462:60833","5:6463:60834","5:6464:60835","5:6465:2613"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"5:10565:4466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13479:57162":{"id":"1:13479:57162","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"5:16004:2983","str::split":"5:16010:2988","self::pattern":"1:13054:3379","str::split_terminator":"5:16010:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49530:4661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13064:3375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13079:4377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6861:4944":{"id":"5:6861:4944","crate_id":5,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6862:60797"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:42:1618":{"id":"0:42:1618","crate_id":0,"name":"Buf","span":{"filename":"src/buf/buf_impl.rs","begin":[76,0],"end":[906,1]},"visibility":"public","docs":"Read bytes from a buffer.\n\nA buffer stores bytes in memory such that read operations are infallible.\nThe underlying storage may or may not be in contiguous memory. A `Buf` value\nis a cursor into the buffer. Reading from `Buf` advances the cursor\nposition. It can be thought of as an efficient `Iterator` for collections of\nbytes.\n\nThe simplest `Buf` is a `&[u8]`.\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(b'h', buf.get_u8());\nassert_eq!(b'e', buf.get_u8());\nassert_eq!(b'l', buf.get_u8());\n\nlet mut rest = [0; 8];\nbuf.copy_to_slice(&mut rest);\n\nassert_eq!(&rest[..], &b\"lo world\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:43:1799","0:44:1762","0:45:1828","0:47:1765","0:48:1832","0:49:1766","0:50:1864","0:51:1867","0:52:1873","0:53:1877","0:54:1880","0:55:1883","0:56:1888","0:57:1892","0:58:1895","0:59:1898","0:60:1903","0:61:1907","0:62:1910","0:63:1913","0:64:1918","0:65:1922","0:66:1925","0:67:1928","0:68:1933","0:69:1938","0:70:1941","0:71:1944","0:72:1949","0:73:1954","0:74:1958","0:75:1961","0:76:1969","0:80:1740","0:81:1737","0:83:1739"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14166:141":{"id":"1:14166:141","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14167:277","1:14168:518","1:14169:280","1:14170:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6959:4941":{"id":"5:6959:4941","crate_id":5,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6960:60854"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:65:1922":{"id":"0:65:1922","crate_id":0,"name":"get_u128_le","span":{"filename":"src/buf/buf_impl.rs","begin":[593,4],"end":[595,5]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13079:4377":{"id":"1:13079:4377","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13081:3742","1:13082:55772","1:13083:55773"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:13073:4376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2888:104":{"id":"1:2888:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2889:408","1:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13428:304":{"id":"1:13428:304","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"5:16021:2997","str::as_mut_ptr":"5:16010:2988"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:403:1743":{"id":"0:403:1743","crate_id":0,"name":"writer","span":{"filename":"src/buf/writer.rs","begin":[1,0],"end":[88,1]},"visibility":{"restricted":{"parent":"0:6:1617","path":"::buf"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1329:1750"],"is_stripped":true}},"5:4666:2341":{"id":"5:4666:2341","crate_id":5,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4667:2342","5:4668:3962","5:4670:3963","5:4671:3964","5:4672:3116","5:4673:3965","5:4674:3966","5:4676:3967","5:4677:3770","5:4678:1620","5:4679:1737","5:4681:1740"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3559:3170":{"id":"1:3559:3170","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3561:237","1:3562:206","1:3563:55887"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3274:1984":{"id":"1:3274:1984","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:4748:2343":{"id":"5:4748:2343","crate_id":5,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4749:2344","5:4750:2345","5:4751:3968","5:4753:3120","5:4754:3969","5:4756:2791","5:4757:3970"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"5:4666:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"1:8400:136":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9600:61486":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"4:6475:3210":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"18:152:8059":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:15045:59658":{"crate_id":5,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8413:2910":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:5165:3434":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:50407:4697":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:9729:61488":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6152:5481":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:2159:1745":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:46603:3315":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"12:2072:4839":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"16:7843:5583":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:2397:7689":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"4:4643:6330":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:47528:2286":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:6136:5521":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:7549:5490":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:14633:1753":{"crate_id":5,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:2395:7688":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"16:7477:5504":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:14550:4970":{"crate_id":5,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:3194:5128":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"18:695:5947":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:4614:7330":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:1149:7681":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:7392:5487":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:49462:3122":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:2362:600":{"crate_id":5,"path":["std","env"],"kind":"module"},"17:9005:47389":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:3561:3128":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:6437:4936":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:3178:228":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"18:740:6417":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:7286:7696":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:57699:7958":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:7119:5473":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:56377:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3417:3271":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12040:6768":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11822:6734":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:53518:7947":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:50048:4391":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:32400:55948":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:45876:194":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:11962:6755":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5433:5527":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4230:8883":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:49770:4674":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:51211:4552":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:53399:7938":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:6790:4936":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:5314:6519":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:4783:3163":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:16020:2996":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"1:50398:4696":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:6685:9378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:7792:4323":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"1:46771:3320":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:51901:7891":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:16016:2992":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"5:13939:8333":{"crate_id":5,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"9:1056:5317":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6094:9274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:9766:6313":{"crate_id":5,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"5:12061:9404":{"crate_id":5,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:5672:5536":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13788:7243":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:10661:35829":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:8160:1745":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:53428:7941":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1588:8609":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:5415:3108":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6949:5786":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"12:843:4841":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:1531:8578":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:32334:2367":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:8639:5196":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6424:5558":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:8908:3301":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"18:661:5945":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:51076:4563":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:11957:4001":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"18:637:6410":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:4532:9002":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13547:7163":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:10407:5844":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:49326:3997":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:11143:3122":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"16:7295:5499":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:12712:6897":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:3758:4443":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12537:6865":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:15235:5022":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:705:6410":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5146:9009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13780:7242":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:1635:4841":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:8380:5118":{"crate_id":5,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:2926:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:12010:6765":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:51595:4545":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:6518:5560":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:783:6315":{"crate_id":5,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:9296:6428":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:50202:4683":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13272:7094":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:28054:4479":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:47800:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:52132:4558":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5444:9166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:14936:6322":{"crate_id":5,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:8344:4846":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:4748:2343":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"17:12307:6813":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:3431:3274":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:49684:4668":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10149:6531":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:48516:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"5:12257:5074":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:46312:4572":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:3039:57143":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:46353:4795":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:46792:3336":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11665:6691":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12568:6870":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:5315:200":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11147:6622":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"18:169:8062":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"12:2392:8486":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:5271:9083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:2957:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:7146:5570":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:321:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6620:5773":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5183:9035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:3920:8748":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:1537:8581":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:10299:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"16:5707:5537":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"16:2991:5755":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:12846:4002":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:49420:4458":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:11206:4002":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"12:895:5379":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:3972:8784":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5226:9053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:46059:4487":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10266:5813":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:16025:3001":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"17:13810:7248":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:56351:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5175:9033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:46998:3146":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:14588:7789":{"crate_id":5,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:12242:5063":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13532:7159":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:23770:4466":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:9961:6533":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10558:6557":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:2162:3210":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10611:6563":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:4078:205":{"crate_id":5,"path":["std","io","error","Result"],"kind":"typedef"},"1:24035:4613":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:14575:4965":{"crate_id":5,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13180:7069":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:6973:1502":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"17:9649:6527":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5257:9072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:4885:4629":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:5930:5238":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:14952:6323":{"crate_id":5,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11304:47397":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:6764:3108":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:46420:4791":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:48279:2960":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13429:7126":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:5858:5235":{"crate_id":5,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"16:5996:5547":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:4080:127":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"14:0:3037":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11458:6652":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:820:6315":{"crate_id":5,"path":["std","thread","local","os","Key"],"kind":"struct"},"1:3648:2442":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12073:6778":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:6636:5498":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:55967:4497":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:12028:6766":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:11598:5048":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11026:6617":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:49200:4655":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12208:6797":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:2508:3172":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13062:7028":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:6863:4945":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:294:6434":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:2543:5902":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"9:0:3033":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:32340:3243":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:3018:5745":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:10106:5914":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:4607:3146":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11588:6680":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11915:6740":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:4852:7338":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:10366:6439":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"14:231:3371":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5363:9134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6640:9366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:11356:3990":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:48272:2959":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:3175:135":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:24703:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"15:269:5414":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:51234:4556":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:10452:6318":{"crate_id":5,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:16019:2995":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"17:4157:5891":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:4762:7335":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:12262:5010":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"12:1147:4895":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4142:8867":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7073:5569":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:2397:2684":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:7453:6326":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:8602:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:50178:4686":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:14808:1618":{"crate_id":5,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:6181:9321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:49042:4801":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:22602:56958":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:1235:4885":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"8:0:3032":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:8313:4735":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11932:6746":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:49959:4387":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13884:7269":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:24567:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:4512:3137":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"19:117:8437":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:38871:4373":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:1011:2610":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:580:8543":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:4955:7341":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11794:6724":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10052:6540":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:53454:7943":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:3368:3261":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10502:6552":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:2912:5743":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:51721:4522":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:7378:5486":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:50170:4681":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:12053:4322":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"4:8168:194":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:6652:69":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:5185:3436":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"15:0:3038":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:12252:5073":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:7571:5478":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4098:8846":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6132:9285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:3648:3129":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:3748:160":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"0:6:1617":{"crate_id":0,"path":["bytes","buf"],"kind":"module"},"16:5029:7343":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6126:9284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:1560:94":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9528:1623":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:6226:9345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:4066:4453":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"6:4028:8812":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:4704:7333":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:24129:7826":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:48052:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4332:8915":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:6893:3339":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10844:5858":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:13893:7816":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:3577:2368":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:13582:7171":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:15216:5016":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:1526:8576":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13564:7167":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"12:1703:5402":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13898:7271":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:4000:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"12:952:5030":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:10377:7794":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:23676:56576":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:8690:5199":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:32299:2620":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12442:6852":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:51744:4525":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:6951:9394":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12521:6863":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11847:6738":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:46066:3432":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:48094:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11924:4000":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4148:8869":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:2553:4890":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:14601:5129":{"crate_id":5,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"9:603:10108":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:721:6412":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:2843:5741":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:46631:3324":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:3581:2369":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:9768:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:52163:4561":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:54:5377":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:45968:199":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:8368:216":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"16:7185:5573":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6265:9360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"9:1075:5325":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5308:9097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:5:1502":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"16:6464:5494":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:11250:4927":{"crate_id":5,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:10179:6545":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:15185:5014":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11726:6705":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:3091:5804":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:9763:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:0:3041":{"crate_id":18,"path":["memchr"],"kind":"module"},"12:472:8069":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"9:776:5304":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:2916:415":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"16:7856:5584":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:8849:5830":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:51696:4540":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:3300:95":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:4051:4447":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13978:7290":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:5833:4809":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"5:9639:8395":{"crate_id":5,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:50190:4687":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:56403:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:51523:4557":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:3736:3131":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:24669:3978":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:11409:5239":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:1653:4879":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"12:1256:4894":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:4684:3117":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:9133:47393":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:10575:4118":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:5875:6334":{"crate_id":4,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"4:8379:3368":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:4921:4630":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:7824:6338":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:49448:1623":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:4526:9000":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:5736:5539":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:5421:5526":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:3549:7316":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4485:8985":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:52006:4566":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:50071:7873":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"4:1939:3208":{"crate_id":4,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"5:4032:5081":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:886:5939":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11678:6692":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"12:777:1745":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:10592:5116":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"6:6004:9243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:8446:3208":{"crate_id":4,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:13130:4381":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:10684:36353":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"1:46782:1747":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:7379:1745":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12467:6855":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:6319:5189":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:3435:3275":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11555:6673":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:9060:5205":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"12:869:3210":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:1236:6440":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:14166:141":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:900:5096":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:3365:5733":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:52403:4541":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:52372:4538":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:10957:5079":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"1:8887:3310":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:49880:4382":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:1075:4983":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:7117:38380":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"5:10866:5149":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:45991:2535":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:6959:4941":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:586:8546":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:2889:5761":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:24093:4608":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:612:8559":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13356:7113":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:6031:9253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12645:6890":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:10301:3419":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:10331:5858":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"12:750:2610":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6087:5479":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:11317:59654":{"crate_id":5,"path":["std","net","parser","AddrKind"],"kind":"enum"},"16:2816:5760":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13488:7145":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:14626:118":{"crate_id":5,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:13422:5185":{"crate_id":5,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:1195:8075":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:5472:5529":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"15:248:5410":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"12:432:5392":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:51180:4564":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:10710:1744":{"crate_id":5,"path":["std","error","Chain"],"kind":"struct"},"5:5785:4957":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:3048:8338":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:513:8072":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:11402:4921":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:3358:3259":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:1597:2610":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12275:6806":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:22581:56956":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:21:672":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:3323:3382":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"6:5564:9202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:5632:5535":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11653:6690":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11100:5838":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6668:9369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:46503:4736":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:15353:5170":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:923:4848":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:3341:4835":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:2888:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"5:9627:8394":{"crate_id":5,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:13041:7019":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10950:6611":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:1621:8631":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:24215:9418":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10788:6599":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:51869:7890":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10656:6567":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3522:131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:9933:6532":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:51445:4565":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:2171:4837":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:4215:3210":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:14609:129":{"crate_id":5,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:14103:6321":{"crate_id":5,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4088:8839":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:4670:3108":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"12:928:4879":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:8954:5888":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:11297:9402":{"crate_id":5,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:3297:4372":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:45812:3171":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:14034:4318":{"crate_id":5,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:626:8567":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6024:9249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:46024:3278":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:7677:4317":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"4:3951:3208":{"crate_id":4,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:50194:4688":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:14236:3138":{"crate_id":5,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:24737:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6569:5775":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:3396:3266":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:49289:3992":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:571:8537":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:10242:2440":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"5:11098:3119":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12234:6800":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:11283:4003":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:8193:6298":{"crate_id":5,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:46299:4571":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:16023:2999":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"1:49405:3377":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:23465:4474":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:16015:2991":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"5:6199:5188":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:10934:214":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:23139:4471":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:50362:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:15072:9410":{"crate_id":5,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:53192:4559":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:46751:3334":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:53341:4562":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4346:8921":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:2866:5742":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:802:5932":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:12010:181":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"12:1682:5401":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10584:5890":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:49260:3980":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:12227:5204":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12756:6904":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6166:5550":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13574:7170":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:3423:3272":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:47007:3305":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:1428:3983":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:1132:4973":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6247:9357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"12:2045:3208":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:12124:4998":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6905:9382":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:47605:3602":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13942:7286":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:4008:6443":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:15483:59781":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"6:4446:8967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:5111:3432":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:10925:4466":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:11360:5173":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:3329:2610":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:8738:5208":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:3812:3169":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:12004:4318":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11714:6702":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:6077:9272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:3506:5753":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:1712:8693":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:2330:4886":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:3169:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:4296:8898":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:32159:4759":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:9162:5833":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:12501:3977":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:2269:3410":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10140:5858":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:12116:2610":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:7620:3214":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:8115:1745":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:49381:3995":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:24250:4726":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6208:5552":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:12742:5127":{"crate_id":5,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:11604:6681":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:4922:7340":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10814:5882":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4110:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7786:5492":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:3981:8789":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:10858:118":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:5753:5540":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"12:379:5394":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:3427:3273":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:14643:59652":{"crate_id":5,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:2458:7692":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"5:2166:3208":{"crate_id":5,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"4:792:108":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:12247:5210":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:5387:9146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5485:9176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10887:6603":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12155:6790":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:5595:5534":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"12:1121:4893":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13760:7236":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:3325:5132":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:3406:3268":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:51099:4551":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:46427:4792":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"5:1438:1745":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10420:5843":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13318:7100":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:38808:4326":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"5:8388:5047":{"crate_id":5,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"5:9634:6312":{"crate_id":5,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"5:5952:5240":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4392:8946":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10081:5856":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13163:7067":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:9759:6529":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:12262:6805":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:858:5937":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9404:6430":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:4287:8893":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5717:5538":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:24237:4727":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5298:9090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:9896:61482":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11499:6658":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:12993:3378":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:7250:5579":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:9245:5814":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:15053:5085":{"crate_id":5,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:6937:4946":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:23128:4466":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:53255:4524":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:47691:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:10840:129":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"1:3277:218":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:6252:5554":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13506:7149":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:45945:197":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:12525:4771":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10975:6613":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:22840:4462":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:13079:4377":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:2773:5767":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13540:7162":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:6999:5568":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:10577:59780":{"crate_id":5,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:50058:4392":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10516:5906":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:49269:3981":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:7264:5497":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12783:6907":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13172:7068":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:8488:5000":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"4:3336:4834":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:49736:4670":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:24601:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:5561:5533":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:15391:5171":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:5488:5530":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"14:216:10410":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:601:8554":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11482:6653":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4048:8820":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:432:1755":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:46973:3299":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13306:7097":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:7629:4314":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4020:8809":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:533:8512":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"12:183:5395":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:13568:7690":{"crate_id":5,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:2733:5718":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:7615:4313":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"17:9034:47390":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13986:7293":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:156:518":{"crate_id":4,"path":["alloc","alloc","dealloc"],"kind":"function"},"5:5647:4976":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4012:8807":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:49612:4664":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:8250:3207":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:3559:3170":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:1551:8586":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12195:6795":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:4397:5156":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:4890:7339":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5430:9161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:48531:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"12:2269:4893":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:50186:4689":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:22930:4466":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12480:6857":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:10580:4119":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:6697:9266":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:11354:5172":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"12:1183:5388":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6126:5549":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:10317:5846":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7024:5789":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:3287:3206":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:5968:5243":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"14:194:45736":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6691:5565":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:2177:4834":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:8289:5118":{"crate_id":5,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:12671:6892":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:8027:5118":{"crate_id":5,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"6:4208:8881":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5436:9164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5979:9225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:24052:9415":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:49512:4660":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:11457:9253":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:9769:61484":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:9440:6431":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:4732:10411":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:1740:8705":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:7453:5482":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:565:8534":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13453:7134":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:8298:4844":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:8404:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:897:5940":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:3896:8730":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:1415:2610":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:49716:3123":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:48136:3454":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:56338:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:56364:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:856:4878":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3172:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:24771:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:11674:5052":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"16:3145:5756":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:8362:9413":{"crate_id":4,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:51051:7880":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:542:5456":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3505:2683":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:1606:8619":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10827:5883":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10571:6560":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13240:7083":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11767:6715":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:6928:9388":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12771:6630":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:37651:3805":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:5735:4954":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4440:8964":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4493:8987":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9689:61485":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:16014:2990":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"1:14242:3177":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4160:8878":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:12203:5005":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12552:6869":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4321:8909":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:8203:1745":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12221:6798":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:22993:4471":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"12:2052:4837":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"12:1203:5389":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:11658:5050":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"1:46561:7859":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:46590:1744":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:15201:5015":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:5101:4638":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:1493:4880":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:10095:5913":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:51925:7892":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:47926:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:47716:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13746:7230":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:5237:9061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13590:7173":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:1488:4879":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:5522:5532":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:46739:3333":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:5008:4920":{"crate_id":5,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:3516:1628":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:24147:11047":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:53050:4555":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5475:9174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:15986:59655":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:3044:8337":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:2866:2685":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:49986:4388":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:22604:56954":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:46691:3338":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:681:6439":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:1157:35830":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:3894:4872":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10435:6550":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:48842:7870":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:16003:2982":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"5:14570:9408":{"crate_id":5,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:7332:186":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"6:4242:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10599:6562":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6964:3549":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"14:11:7599":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5995:9237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4127:8860":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:53129:4539":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:15474:7793":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"1:11425:3988":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:838:4376":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:1651:4894":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:6861:4944":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:12610:6878":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:6211:9338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:0:3040":{"crate_id":17,"path":["object"],"kind":"module"},"6:4516:8995":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:1486:4894":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:5290:9085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:3041:5746":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:136:8058":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:4473:3141":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:3195:5748":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:9467:60940":{"crate_id":5,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12168:6572":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:15498:5418":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:51492:4553":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:8107:3145":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:12659:6891":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:49666:4667":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:22853:4466":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:7670:3313":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:3200:3116":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"16:6718:5778":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:1733:5184":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:2219:1050":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:49842:4375":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:8138:4851":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:7441:185":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"4:1618:1745":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:48265:3419":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3247:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:157:40202":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:3372:3265":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12795:6914":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13609:7178":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:5156:4639":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10253:5810":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7884:5489":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:11137:1623":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"5:16009:2987":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"5:11180:4922":{"crate_id":5,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:47545:3983":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:3933:8758":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:10962:3132":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:10882:2008":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:37627:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:11479:4943":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5402:9148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:49745:4671":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"12:0:3036":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:4055:8823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:13659:5027":{"crate_id":5,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:11254:5832":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:7858:4518":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:8929:47388":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:10224:6548":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13402:7122":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:3287:5752":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12118:6785":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:46673:3328":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:46551:6345":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:10543:6554":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:46720:3331":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:24169:11039":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:11130:1747":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"1:10305:2959":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13348:7110":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:1017:5118":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"4:7111:6338":{"crate_id":4,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:13817:56411":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:16028:3004":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"4:8263:3289":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11779:6718":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:1091:6326":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:24635:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:46397:4790":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:46612:3316":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:16018:2994":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"5:6082:5180":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:88:40136":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:16011:2989":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"12:1666:5400":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:13961:4319":{"crate_id":5,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:5500:5178":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13119:7062":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"12:2059:4834":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13554:7164":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:8463:3209":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6176:5551":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:6110:5520":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:7780:234":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"17:13377:7117":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:3488:3208":{"crate_id":4,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:7255:7696":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:4995:7342":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:1507:5029":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:49566:3987":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:22564:56572":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:4510:3136":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:53480:7945":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:7663:4316":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"1:5030:3433":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:10377:5848":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:6438:3327":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:10799:4967":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"1:47682:1745":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:1704:8692":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10988:6614":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:4378:1745":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"7:38:45062":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:51769:4526":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11358:5885":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:48561:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:10353:5850":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:3338:5732":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:49894:4385":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:10816:5129":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"18:713:3805":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11628:6685":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:14565:9406":{"crate_id":5,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:3717:3277":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:8902:47387":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:5231:7344":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:4300:3148":{"crate_id":5,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"6:6964:9395":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:5416:9159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:12795:4663":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11835:6735":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11231:5834":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10489:5905":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:13064:3375":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9210:47394":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:14804:7707":{"crate_id":5,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:3172:5747":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10801:6601":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"12:2036:1745":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:3411:3270":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11519:6668":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7158:5571":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:10809:4965":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6591:5563":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:49371:3994":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:15092:5010":{"crate_id":5,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"4:994:4849":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:13767:138":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:11439:3985":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:696:5091":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:53439:7942":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:7212:3210":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:46802:3337":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11539:6669":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"13:0:3031":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:9381:3375":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:24222:4764":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:9065:47391":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:2183:4836":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:2921:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"12:2032:2610":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11411:3984":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:8121:4850":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:1843:6326":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:6413:5406":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11696:6701":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11616:6684":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11337:5901":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:8330:4845":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:53595:7950":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:4417:7325":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:48820:146":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6731:5779":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:1558:8589":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:4599:6329":{"crate_id":4,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:12598:6876":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:2066:4836":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:23774:4472":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:11434:5191":{"crate_id":5,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:10311:3421":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:3970:6326":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:547:5725":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:15754:6325":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:46650:3326":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:13084:4378":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13733:7224":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:51378:4521":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:1748:8709":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3279:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:23871:4707":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:5797:4960":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:672:40536":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:7216:5576":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:48850:7871":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:13154:7063":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:50439:3290":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:1721:8699":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:5975:5546":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:14239:3140":{"crate_id":5,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:7927:5117":{"crate_id":5,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"16:4535:7329":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:1190:8392":{"crate_id":5,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:5653:4978":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12095:6779":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:4434:3139":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12327:6814":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12582:6872":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4081:8836":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:14317:5102":{"crate_id":5,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:12744:6320":{"crate_id":5,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:5741:4955":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:51285:4544":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4402:8949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6269:5555":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:14069:3173":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:8646:5198":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10458:6481":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12946:6936":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:791:5931":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13386:7118":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:52796:4567":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:10826:4966":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"17:12456:6854":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:3939:7320":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:11245:3986":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:5719:4953":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:9771:6314":{"crate_id":5,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:545:8517":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"12:971:5031":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12632:6889":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:46702:3330":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6491:5559":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"18:651:5941":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:10566:5092":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:46486:4735":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:4471:3140":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13772:7239":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:51339:4536":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:46468:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:6940:9390":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:52438:4523":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10623:6564":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11082:5836":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13098:7057":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:1634:8638":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"9:27:5306":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"5:15229:5021":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"14:56:6653":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:1674:4881":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:50182:4685":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:10646:1309":{"crate_id":1,"path":["core","slice"],"kind":"module"},"16:7804:5491":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5207:9051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:46111:4580":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:2188:4839":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10041:6539":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11572:6675":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"9:41:5307":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:10926:6609":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:5408:3373":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11277:6627":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12982:6967":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11970:6757":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12685:6893":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11809:6730":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:50451:3176":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:5584:15588":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"18:775:6410":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:1459:4878":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:5815:5543":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:894:5095":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:5039:4633":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6899:9381":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:7932:8328":{"crate_id":5,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:24839:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10403:5854":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"12:2419:3207":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:3104:4442":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12494:6859":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:16005:2984":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"1:50228:4744":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:23664:3979":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:46343:4794":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:13786:4328":{"crate_id":5,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:2155:2610":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:46434:4793":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:7928:3297":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:2572:127":{"crate_id":5,"path":["std","error","Error"],"kind":"trait"},"16:0:3039":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:3877:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:374:3181":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:7642:3215":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:15122:7790":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"9:1020:5324":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:51821:7889":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:11193:4923":{"crate_id":5,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"9:686:5256":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:12811:4666":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:13858:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:6202:9335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:10874:3130":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"12:2404:61475":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:46284:4674":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:5605:4444":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:1441:4892":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:46413:4673":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:10705:4897":{"crate_id":5,"path":["std","error","private","Internal"],"kind":"struct"},"16:7174:5572":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:8363:3312":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:48811:4120":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11015:6616":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:53302:4542":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10295:109":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:24013:7818":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:50344:201":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:539:8514":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3746:3281":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11947:6750":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:521:8506":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10279:5856":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:11318:3989":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:16027:3003":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"18:611:5942":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:9861:6315":{"crate_id":5,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"5:1501:5028":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4075:8833":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:10677:5033":{"crate_id":5,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:3384:3264":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11993:6762":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6021:5740":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13685:7223":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10304:5847":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:22804:4480":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:13923:4317":{"crate_id":5,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:4304:7322":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:45860:196":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:3734:137":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6240:9354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:4728:4481":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"12:1784:6292":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"9:809:5047":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:1524:5031":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"16:6357:5556":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13465:7140":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6219:5553":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"15:230:5409":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:12741:6900":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12142:6787":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:22583:56959":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:12282:5085":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"1:46374:4789":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:2754:5734":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4410:8953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:4506:7328":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:3038:3367":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:3772:7318":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:2456:7691":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"17:11186:6624":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:3351:5142":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"5:2594:7693":{"crate_id":5,"path":["std","error","from","StringError"],"kind":"struct"},"17:12343:6819":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:50023:4389":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:12076:61210":{"crate_id":5,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"16:4734:7334":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:51397:7883":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:2062:3108":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:5384:5524":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4386:8943":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:3064:5803":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:6117:9281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10912:6605":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:3342:3260":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:22549:56572":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:3376:3263":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:6605:5496":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:1600:8617":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:4723:2440":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"1:3166:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"16:7236:5578":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:2484:47479":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:4740:4482":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:12158:5002":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:52325:4534":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:3182:227":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7514:5502":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:8130:3210":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:755:61493":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4308:8905":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:3775:3168":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:12773:7777":{"crate_id":5,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"6:5423:9160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:3375:4838":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:4448:7326":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:1518:5030":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4416:8954":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13842:7263":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:6511:3317":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:3604:6449":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4434:8963":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6922:9387":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:10427:6316":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1764:8714":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:6111:9279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:7870:5488":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6101:5477":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:2934:180":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:1215:4884":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:13054:3379":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:49046:4009":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4067:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"12:1162:5387":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6013:9244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11045:47395":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"12:787:4880":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:5960:5730":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:12772:4662":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:4741:3118":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"17:13282:7095":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:13963:55977":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:46391:4674":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:6634:55498":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:48010:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:48258:3420":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:11420:5183":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10292:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:45901:195":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"12:2040:3210":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:2310:4912":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4270:5190":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:23089:32495":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:69:3179":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:49361:3996":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:9718:5164":{"crate_id":5,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:4373:8938":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:16017:2993":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"1:3519:130":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:3907:8738":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9332:5900":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:7042:5790":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:15130:4330":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11640:6688":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11114:2610":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:11070:3145":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"4:1685:194":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:10667:4987":{"crate_id":5,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"4:8146:57115":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:23137:4520":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13221:7082":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:1497:4881":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:77:1491":{"crate_id":1,"path":["core","usize"],"kind":"module"},"1:47537:2610":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:13782:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:3341:5137":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"6:618:8562":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13799:7247":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10962:6612":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:5376:5171":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:1302:143":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7342:5515":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:0:3035":{"crate_id":11,"path":["adler"],"kind":"module"},"5:12065:59656":{"crate_id":5,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:12725:6898":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"12:353:8065":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:5788:6326":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:14000:7296":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:4477:7327":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:3492:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:9919:660":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:47666:2610":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"13:120:45708":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:24106:4609":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:7226:5577":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"10:0:3034":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:8973:5083":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:11150:3123":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"1:52085:4554":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:49779:4675":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:24805:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13370:7115":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:10303:3420":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:3800:7319":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:6954:4804":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"17:10635:6565":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8880:3164":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10529:6553":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9659:61487":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6682:5495":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11397:3987":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:3197:2342":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"16:6014:5548":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:16024:3000":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"4:6257:3214":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:920:96":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:3772:3983":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:6672:4817":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:53380:4527":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:5855:5544":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:47614:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"12:399:5393":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10117:5915":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4038:8817":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:7732:4319":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"1:7756:3322":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12431:6850":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:16021:2997":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"1:51030:7879":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"14:189:7599":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:50354:7878":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:4340:8919":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:2027:145":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:53408:7939":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:5295:45812":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10061:6541":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:1041:4982":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"12:2280:4895":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2769:579":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:1530:5032":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:8106:3178":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8367:3311":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:48635:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"12:933:5028":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11738:6706":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:46711:3318":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:53533:7948":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:5971:9220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13331:7105":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7205:5575":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:2262:4887":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:9368:6429":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:3714:7317":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:8474:202":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4362:8930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:0:430":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:23470:32514":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:1669:8667":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:51253:7881":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:10241:205":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"6:3993:8794":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8448:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:47495:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"5:8132:5118":{"crate_id":5,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"9:749:5260":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:4394:5155":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:621:6409":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:9733:5165":{"crate_id":5,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:12138:5001":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:7195:5574":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:12023:4320":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"17:9886:6531":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:6893:9380":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:10307:2960":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:3658:6295":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:50206:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:11524:5037":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"12:2398:8009":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:6934:9389":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"12:2412:8488":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:47622:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:53419:7940":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:14:2398":{"crate_id":1,"path":["core","write"],"kind":"macro"},"5:3192:128":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"6:1576:8600":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:767:6422":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:49251:3982":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:15509:5418":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:6459:4939":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:3488:5754":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:45784:3282":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:13587:8074":{"crate_id":5,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:50421:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:6688:4818":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:49279:3991":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:3218:5749":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:12057:6351":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"5:11340:7758":{"crate_id":5,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:5538:9187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:510:6436":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:48832:5047":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:48522:133":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:5330:6520":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7894:5518":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"14:244:7604":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:2433:7690":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"1:3274:1984":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:3682:3124":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:3759:2610":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6366:5407":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:24533:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:11232:4926":{"crate_id":5,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"6:5579:9213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:46761:3335":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"9:996:5323":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:10309:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"9:900:8491":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:52246:4546":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10938:6610":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6072:5500":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:9574:5837":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:3352:3256":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:32348:55945":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"5:5789:4958":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:2968:5744":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10864:6602":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:5536:4817":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"5:16022:2998":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"17:9839:5858":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:5927:5545":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:53556:7949":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:812:5933":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:11086:1753":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"1:48583:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:49438:4656":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12287:6807":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:22751:4470":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:50198:4682":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12408:6849":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:47596:3550":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:48803:7865":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5631:779":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:10200:6546":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:3987:8791":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:161:40203":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:1482:3208":{"crate_id":5,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:13477:7141":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:22877:4473":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:50241:4745":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"5:11615:5049":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"6:1662:8663":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13296:7096":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:46052:4486":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"5:0:1331":{"crate_id":5,"path":["std"],"kind":"module"},"1:2967:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"11:46:8490":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"7:85:45069":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:9259:3553":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4379:8941":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:11268:5024":{"crate_id":5,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:10001:47441":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6577:5562":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:5981:5244":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:821:5934":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:11414:5242":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:6054:9271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:9809:61483":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:3389:3269":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10128:5916":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:47842:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:24873:4713":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"12:764:3983":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:15412:5178":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:1446:4841":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:10447:7813":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13394:7120":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:11685:5053":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:4432:3138":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:16008:2986":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"1:25243:4621":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9551:5831":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:3339:5136":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"6:1694:8686":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:4699:6330":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"9:927:45166":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:10540:146":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:46621:3323":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:51124:4543":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:6685:4955":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3401:3267":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6853:9379":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:668:5946":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:7649:4315":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"1:46641:3325":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4179:8879":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:13497:7148":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:46581:3314":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11406:6634":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5328:9113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4425:8957":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9719:6528":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:8391:3369":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13520:7156":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:9979:4642":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:6780:5566":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:6699:9268":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:5407:5525":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6807:5567":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4135:8865":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:49630:4665":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:7279:5791":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:45922:198":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:8280:101":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:4350:7323":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:16029:3005":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"17:3743:5879":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"4:3362:4836":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5790:5542":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"0:0:1620":{"crate_id":0,"path":["bytes"],"kind":"module"},"6:5395:9147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:51358:7882":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13924:7280":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:10530:142":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:49761:4673":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:8473:2314":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9264:6519":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:3525:132":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:4666:2341":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"3:0:3028":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"12:162:5391":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"9:234:5282":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"14:250:7606":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:2194:3240":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"5:2937:179":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5544:9188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11981:6760":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10028:6538":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4005:8803":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:9974:4641":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:5960:5241":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10236:5819":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"12:466:8068":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:51546:4560":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13819:7250":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:1311:5920":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:11428:5172":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:7420:5503":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"5:12132:1745":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:10618:5102":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"1:14079:4698":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:9063:5068":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:783:222":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:46659:7860":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:49530:4661":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:2751:4971":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"18:830:5935":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:13279:7814":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"16:4823:7337":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:4306:3983":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:6411:223":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:51147:4531":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:11506:38381":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3281:220":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:49911:4386":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:730:61491":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:11163:3122":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:24499:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:1644:4878":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:15032:4321":{"crate_id":5,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:22940:4468":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13620:7179":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:3396:4839":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:23082:4466":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:7975:6298":{"crate_id":5,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"5:15019:4320":{"crate_id":5,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13627:7181":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:2777:4889":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"18:867:5938":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:8176:4808":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:3241:5750":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"12:940:5029":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:9139:5072":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:3347:3257":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:1619:4892":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"9:963:5322":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:46730:3332":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:2512:5845":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:46453:4576":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"9:469:10098":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:5766:5541":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:9088:47392":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:10252:134":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:49726:4669":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:1607:3983":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11199:6626":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:3882:2008":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4061:8825":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5375:9139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:7849:6343":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:8410:4871":{"crate_id":5,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"4:7257:6326":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:2314:5849":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:10804:5127":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"1:46290:7848":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:23942:4710":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:5373:5170":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:32500:55949":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"5:8925:5218":{"crate_id":5,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"17:13205:7079":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:2200:6328":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:9943:61490":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10071:5919":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7823:5493":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11434:6638":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:22536:3805":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:47674:3983":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:10673:47579":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:56390:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13933:7284":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:50174:4684":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11159:6623":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:1567:8594":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4198:8880":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:16026:3002":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"5:4400:5157":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:50037:4390":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4218:8882":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:13446:7133":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:46366:4675":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:3839:6326":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:783:6410":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:12038:4321":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11750:6707":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:15331:4928":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:12083:9405":{"crate_id":5,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:1944:1751":{"crate_id":1,"path":["core","mem"],"kind":"module"},"16:3522:6445":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:6787:4969":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"12:2253:4892":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:6557:4979":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:15975:35831":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12247:6802":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:11453:4968":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6391:5557":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:10463:715":{"crate_id":1,"path":["core","hash"],"kind":"module"},"12:1238:5390":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:10952:5078":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:10565:4466":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"17:11378:5884":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:3310:3166":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:12302:5086":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:4230:7321":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:3966:8782":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4116:8855":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12699:6896":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:9476:6432":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:32696:3244":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:11138:3983":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:47968:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:48795:4121":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:49754:4672":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:3729:224":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:634:8572":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:49865:4379":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:607:8557":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:16007:2985":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"1:51316:4532":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:4:979":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:2218:4842":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:9849:61489":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:12171:5003":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:6859:4942":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:10477:5903":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:8839:7698":{"crate_id":5,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:2283:4459":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"12:979:5032":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:7738:5581":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:6662:9367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:3883:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:12187:5004":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1544:8584":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:49300:3999":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:51642:4533":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:5775:4956":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:1663:4880":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4474:8979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:48498:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:3440:3276":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:46682:3329":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:52589:4547":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:13258:7091":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:3370:4837":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4315:8906":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11001:6615":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5273:5735":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:9343:4935":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:47553:1745":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:13073:4376":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9971:61481":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:6768:5782":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:46473:4734":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3364:3258":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:8481:4999":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13192:7074":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:71:773":{"crate_id":1,"path":["core","isize"],"kind":"module"},"17:13963:7289":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:10587:5100":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"6:6976:9397":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7333:5501":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6238:5484":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:4515:4862":{"crate_id":4,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"4:4443:2610":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:3392:5758":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:9260:3552":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"12:114:8064":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:593:8549":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:24121:7825":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4454:8972":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7303:5580":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:47884:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:4641:7331":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:24185:11048":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:46989:3303":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:11156:4921":{"crate_id":5,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"18:850:5936":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:15970:10116":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:51673:4537":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:4242:6326":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:14958:6324":{"crate_id":5,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:1642:4895":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:3320:5805":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:4628:235":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:5452:9168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:9261:3551":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:1727:8702":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:1633:4893":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7928:4486":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12385:6840":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:46031:4448":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"16:5456:5528":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:14242:3136":{"crate_id":5,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12051:6769":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:13284:8077":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"16:3118:5757":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11118:47396":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:3960:8781":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"12:1103:4892":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:12735:128":{"crate_id":5,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:10313:3422":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:7507:119":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"5:11077:3147":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"1:49352:3993":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:3278:217":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:2187:578":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"5:5727:4952":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5213:9052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5201:9048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:3275:3167":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:13054:7026":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:0:277":{"crate_id":4,"path":["alloc"],"kind":"module"},"16:7406:5485":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:745:61492":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:13865:7264":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:3380:3262":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4256:8885":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:49584:3984":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"12:880:3208":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4356:8927":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12182:6794":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:1694:4882":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:299:6435":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2945:5766":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:12735:4659":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:4386:7324":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:6695:9264":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:8197:1745":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:2863:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:2292:3409":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"9:722:5259":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:5580:5723":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:14821:4322":{"crate_id":5,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7761:5582":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:48619:3418":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:46328:4574":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11328:6630":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9280:6520":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:5505:5531":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:8803:162":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8883:3309":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:8180:3300":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:1912:41510":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:9594:6311":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:14130:201":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:47018:3307":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:5889:6336":{"crate_id":4,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:24068:7820":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:8164:8076":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:13637:7186":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:645:5944":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10160:6544":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:3366:1752":{"crate_id":5,"path":["std","io"],"kind":"module"},"17:10468:5904":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:10701:7707":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:1457:4895":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"9:692:5258":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:1152:7683":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:22934:4467":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:1626:8633":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:6744:5780":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:56325:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5360:5523":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:3103:4466":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:11668:2610":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"1:5208:3435":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:53465:7944":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:7795:4325":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"6:1680:8675":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:49480:3989":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:4752:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:11575:5047":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"17:12373:6838":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:3040:8336":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:49432:3376":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:5285:9084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:49339:3998":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"9:157:5274":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:52939:4535":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:48549:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:13912:7278":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:2794:5468":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:4538:9005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12917:6916":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:1472:4893":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:16010:2988":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"17:607:6438":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:6644:5564":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4277:8886":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:47562:3549":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:4790:7336":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:53503:7946":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:3269:211":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"12:815:4881":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6032:5472":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:11208:4925":{"crate_id":5,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:10211:6547":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:5346:5480":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:9799:6530":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:57678:7957":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:1472:3210":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:11365:5174":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"5:16004:2983":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"16:3429:5469":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:5837:4811":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:3337:3255":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"5:9174:7698":{"crate_id":5,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:12507:6860":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4509:8992":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"14:47:7599":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"13:232:8485":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:6911:9383":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:46980:3301":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:47758:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:7467:5483":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:9186:5887":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:5034:4632":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"16:6554:5561":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:11120:1744":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"1:3740:3279":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:4965:3431":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"5:10646:35827":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:4671:7332":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:12405:7691":{"crate_id":5,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:527:8509":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:4639:3108":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"6:4464:8978":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:6150:9295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:10448:5821":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5244:9063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:3264:5751":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13598:7174":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:2793:4972":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"5:16002:2981":{"crate_id":5,"path":["std","bool"],"kind":"primitive"}},"external_crates":{"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":17}