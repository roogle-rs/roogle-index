{"root":"0:0:2432","crate_version":"1.7.1","includes_private":false,"index":{"0:662:2881":{"id":"0:662:2881","crate_id":0,"name":"with_capacity","span":{"filename":"src/bytes_mut.rs","begin":[148,4],"end":[150,5]},"visibility":"public","docs":"Creates a new `BytesMut` with the specified capacity.\n\nThe returned `BytesMut` will be able to hold at least `capacity` bytes\nwithout reallocating.\n\nIt is important to note that this function does not specify the length\nof the returned `BytesMut`, but only the capacity.\n\n# Examples\n\n```\nuse bytes::{BytesMut, BufMut};\n\nlet mut bytes = BytesMut::with_capacity(64);\n\n// `bytes` contains no data, even though there is capacity\nassert_eq!(bytes.len(), 0);\n\nbytes.put(&b\"hello world\"[..]);\n\nassert_eq!(&bytes[..], b\"hello world\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1063:3052":{"id":"0:1063:3052","crate_id":0,"name":"put_i16_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:714":{"id":"0:714","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1249,0],"end":[1254,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3571:3684","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:715:656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:295:2616":{"id":"0:295:2616","crate_id":0,"name":"remaining","span":{"filename":"src/buf/take.rs","begin":[133,4],"end":[135,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:2616":{"id":"0:82:2616","crate_id":0,"name":"remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[1404,4],"end":[1406,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3095-0:1086:2600":{"id":"b:1:3095-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3098:3501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1036:3037":{"id":"0:1036:3037","crate_id":0,"name":"put_u16_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1061:3045":{"id":"0:1061:3045","crate_id":0,"name":"put_u16_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2817":{"id":"0:56:2817","crate_id":0,"name":"get_i128_le","span":{"filename":"src/buf/buf_impl.rs","begin":[813,4],"end":[815,5]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1046:3077":{"id":"0:1046:3077","crate_id":0,"name":"put_i32_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:984:2788":{"id":"0:984:2788","crate_id":0,"name":"get_u64_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1041:3059":{"id":"0:1041:3059","crate_id":0,"name":"put_u32","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2431":{"id":"0:111:2431","crate_id":0,"name":"BufMut","span":{"filename":"src/buf/buf_mut.rs","begin":[30,0],"end":[1342,1]},"visibility":"public","docs":"A trait for values that provide sequential write access to bytes.\n\nWrite bytes to a buffer\n\nA buffer stores bytes in memory such that write operations are infallible.\nThe underlying storage may or may not be in contiguous memory. A `BufMut`\nvalue is a cursor into the buffer. Writing to `BufMut` advances the cursor\nposition.\n\nThe simplest `BufMut` is a `Vec<u8>`.\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\n\nbuf.put(&b\"hello world\"[..]);\n\nassert_eq!(buf, b\"hello world\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"is_object_safe":true,"items":["0:112:2950","0:113:2969","0:114:2974","0:115:2995","0:116:2882","0:118:3009","0:119:3018","0:120:3024","0:121:3028","0:122:3032","0:123:3037","0:124:3045","0:125:3049","0:126:3052","0:127:3055","0:128:3059","0:129:3063","0:130:3068","0:131:3071","0:132:3074","0:133:3077","0:134:3081","0:135:3085","0:136:3090","0:137:3093","0:138:3096","0:139:3099","0:140:3103","0:141:3107","0:142:3112","0:143:3115","0:144:3118","0:145:3121","0:146:3126","0:147:3130","0:148:3135","0:149:3138","0:150:3141","0:151:3144","0:152:3148","0:153:3152","0:154:3157","0:155:3161","0:156:3164","0:157:3168","0:158:2593","0:159:2598","0:160:3192"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:163","0:165","0:167","0:173","0:179","0:215","0:255","0:699"]}}},"b:1:3967-0:1086:2600":{"id":"b:1:3967-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1072:3085":{"id":"0:1072:3085","crate_id":0,"name":"put_u64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3110-0:1086:2600":{"id":"b:1:3110-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3113:150","1:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2792:3407":{"id":"1:2792:3407","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:446:263":{"id":"0:446:263","crate_id":0,"name":"Target","span":{"filename":"src/bytes.rs","begin":[614,4],"end":[614,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"primitive":"u8"}}}}},"0:459":{"id":"0:459","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[653,0],"end":[660,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:461:185","0:462:2600","0:463:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:525:860":{"id":"0:525:860","crate_id":0,"name":"from","span":{"filename":"src/bytes.rs","begin":[838,4],"end":[840,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1152":{"id":"0:1152","crate_id":0,"name":null,"span":{"filename":"src/fmt/hex.rs","begin":[36,0],"end":[36,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:10668:4012","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1153:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:219:2995":{"id":"0:219:2995","crate_id":0,"name":"chunk_mut","span":{"filename":"src/buf/chain.rs","begin":[202,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1138:211":{"id":"0:1138:211","crate_id":0,"name":"Output","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:42829:4530-0:639:2436":{"id":"a:1:42829:4530-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1098:830":{"id":"0:1098:830","crate_id":0,"name":"fmt","span":{"filename":"src/buf/limit.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:982:2779":{"id":"0:982:2779","crate_id":0,"name":"get_u64","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2621":{"id":"0:29:2621","crate_id":0,"name":"advance","span":{"filename":"src/buf/buf_impl.rs","begin":[226,4],"end":[226,38]},"visibility":"default","docs":"Advance the internal cursor of the Buf\n\nThe next call to `chunk()` will return a slice starting `cnt` bytes\nfurther into the underlying buffer.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Panics\n\nThis function **may** panic if `cnt > self.remaining()`.\n\n# Implementer notes\n\nIt is recommended for implementations of `advance` to panic if `cnt >\nself.remaining()`. If the implementation does not panic, the call must\nbehave as if `cnt == self.remaining()`.\n\nA call with `cnt == 0` should never panic and be a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1019:2791":{"id":"0:1019:2791","crate_id":0,"name":"get_i64","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159:2598":{"id":"0:159:2598","crate_id":0,"name":"writer","span":{"filename":"src/buf/buf_mut.rs","begin":[1308,4],"end":[1313,5]},"visibility":"default","docs":"Creates an adaptor which implements the `Write` trait for `self`.\n\nThis function returns a new value which implements `Write` by adapting\nthe `Write` trait functions to the `BufMut` trait functions. Given that\n`BufMut` operations are infallible, none of the `Write` functions will\nreturn with `Err`.\n\n# Examples\n\n```\nuse bytes::BufMut;\nuse std::io::Write;\n\nlet mut buf = vec![].writer();\n\nlet num = buf.write(&b\"hello world\"[..]).unwrap();\nassert_eq!(11, num);\n\nlet buf = buf.into_inner();\n\nassert_eq!(*buf, b\"hello world\"[..]);\n```","links":{},"attrs":["#[cfg(feature = \"std\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1044:3071":{"id":"0:1044:3071","crate_id":0,"name":"put_i32","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1122":{"id":"0:1122","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:40276:3324","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFull","id":"1:40293:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1123:211","0:1124:969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:218:2950":{"id":"0:218:2950","crate_id":0,"name":"remaining_mut","span":{"filename":"src/buf/chain.rs","begin":[196,4],"end":[200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2691":{"id":"0:30:2691","crate_id":0,"name":"has_remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[245,4],"end":[247,5]},"visibility":"default","docs":"Returns true if there are any more bytes to consume\n\nThis is equivalent to `self.remaining() != 0`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"a\"[..];\n\nassert!(buf.has_remaining());\n\nbuf.get_u8();\n\nassert!(!buf.has_remaining());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:415":{"id":"0:415","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[123,0],"end":[563,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:416:1212","0:418:3477","0:419:1027","0:420:2690","0:421:3471","0:422:2715","0:423:1737","0:425:3535","0:426:3553","0:427:3562","0:428:3573","0:429:3579","0:430:3588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:357:3405":{"id":"0:357:3405","crate_id":0,"name":"flush","span":{"filename":"src/buf/writer.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"5:3095:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2824:29072":{"id":"1:2824:29072","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1118:211":{"id":"0:1118:211","crate_id":0,"name":"Output","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:422:2715":{"id":"0:422:2715","crate_id":0,"name":"copy_from_slice","span":{"filename":"src/bytes.rs","begin":[238,4],"end":[240,5]},"visibility":"public","docs":"Creates `Bytes` instance from slice, by copying it.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3105-0:404:2435":{"id":"b:1:3105-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3108:150","1:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:505:1331":{"id":"0:505:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[781,4],"end":[783,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:782-0:639:2436":{"id":"b:4:782-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:784:4394","4:785:29073","4:786:29074"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:733":{"id":"0:733","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1301,0],"end":[1309,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10875:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:734:902"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:746:185":{"id":"0:746:185","crate_id":0,"name":"Item","span":{"filename":"src/bytes_mut.rs","begin":[1347,4],"end":[1347,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"u8"}}}},"0:1154":{"id":"0:1154","crate_id":0,"name":null,"span":{"filename":"src/fmt/hex.rs","begin":[37,0],"end":[37,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:10668:4012","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1155:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:736":{"id":"0:736","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1311,0],"end":[1315,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:737:3407"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:824:725":{"id":"0:824:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1683,4],"end":[1685,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:3028":{"id":"0:121:3028","crate_id":0,"name":"put_i8","span":{"filename":"src/buf/buf_mut.rs","begin":[345,4],"end":[348,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i8(0x01);\nassert_eq!(buf, b\"\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:713:3953":{"id":"0:713:3953","crate_id":0,"name":"as_mut","span":{"filename":"src/bytes_mut.rs","begin":[1244,4],"end":[1246,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3322:261-0:1086:2600":{"id":"a:1:3322:261-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:456:185":{"id":"0:456:185","crate_id":0,"name":"Item","span":{"filename":"src/bytes.rs","begin":[645,4],"end":[645,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"u8"}}}},"a:1:3322:261-0:311:2603":{"id":"a:1:3322:261-0:311:2603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1069:3074":{"id":"0:1069:3074","crate_id":0,"name":"put_i32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:3138":{"id":"0:149:3138","crate_id":0,"name":"put_int","span":{"filename":"src/buf/buf_mut.rs","begin":[1041,4],"end":[1048,5]},"visibility":"default","docs":"Writes low `nbytes` of a signed integer to `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_int(0x0504010203, 3);\nassert_eq!(buf, b\"\\x01\\x02\\x03\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self` or if `nbytes` is greater than 8.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13776:2625":{"id":"1:13776:2625","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:823":{"id":"0:823","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1682,0],"end":[1686,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"items":["0:824:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1127":{"id":"0:1127","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:40276:3324","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeInclusive","id":"1:40368:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1128:211","0:1129:969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:506":{"id":"0:506","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[786,0],"end":[790,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"items":["0:507:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:669:3553":{"id":"0:669:3553","crate_id":0,"name":"split_off","span":{"filename":"src/bytes_mut.rs","begin":[318,4],"end":[333,5]},"visibility":"public","docs":"Splits the bytes into two at the given index.\n\nAfterwards `self` contains elements `[0, at)`, and the returned\n`BytesMut` contains elements `[at, capacity)`.\n\nThis is an `O(1)` operation that just increases the reference count\nand sets a few indices.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet mut a = BytesMut::from(&b\"hello world\"[..]);\nlet mut b = a.split_off(5);\n\na[0] = b'j';\nb[0] = b'!';\n\nassert_eq!(&a[..], b\"jello\");\nassert_eq!(&b[..], b\"!world\");\n```\n\n# Panics\n\nPanics if `at > capacity`.","links":{},"attrs":["#[must_use = \"consider BytesMut::truncate if you don't need the other half\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["at",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5725:34052":{"id":"4:5725:34052","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:963:2688":{"id":"0:963:2688","crate_id":0,"name":"chunks_vectored","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"5:8578:2607","args":{"angle_bracketed":{"args":[{"lifetime":"'b"}],"bindings":[]}}}}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13864:33301":{"id":"1:13864:33301","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3095-0:1077:2599":{"id":"b:1:3095-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["1:3098:3501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13866:33302":{"id":"1:13866:33302","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:12199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13761":{"id":"1:13761","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13762:1027","1:13763:2690","1:13764:33268","1:13765:33269","1:13767:33270","1:13770:3598","1:13771:33271","1:13772:352","1:13773:3020","1:13774:2619","1:13776:2625","1:13778:32354","1:13780:32355","1:13782:33272","1:13783:33273","1:13784:33274","1:13785:3195","1:13786:33275","1:13787:33276","1:13789:8511","1:13790:8654","1:13791:2432","1:13792:29261","1:13793:29262","1:13794:4971","1:13795:33278","1:13796:29263","1:13797:4007","1:13799:33279","1:13801:33280","1:13804:4778","1:13807:4742","1:13811:3792","1:13813:29250","1:13815:33281","1:13818:33282","1:13820:33283","1:13823:33284","1:13825:33285","1:13828:33286","1:13830:33287","1:13833:4066","1:13835:33288","1:13838:33289","1:13840:33290","1:13843:33291","1:13845:33292","1:13847:33293","1:13849:33294","1:13850:33295","1:13851:33296","1:13854:33297","1:13856:33298","1:13858:33299","1:13861:33300","1:13864:33301","1:13866:33302","1:13869:33303","1:13871:33304","1:13872:33305","1:13873:33306","1:13874:33307","1:13875:33308","1:13876:33309","1:13877:33310","1:13878:33311","1:13879:33312","1:13881:12118","1:13882:33313","1:13883:33314"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:450":{"id":"0:450","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[629,0],"end":[636,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10875:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:451:902"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42830:4529-0:311:2603":{"id":"a:1:42830:4529-0:311:2603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:151:3144":{"id":"0:151:3144","crate_id":0,"name":"put_int_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1102,4],"end":[1108,5]},"visibility":"default","docs":"Writes low `nbytes` of a signed integer to `self` in native-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_int_ne(0x010203, 3);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x01\\x02\\x03\");\n} else {\n    assert_eq!(buf, b\"\\x03\\x02\\x01\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self` or if `nbytes` is greater than 8.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33002:4481-0:311:2603":{"id":"a:1:33002:4481-0:311:2603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:205:3244":{"id":"0:205:3244","crate_id":0,"name":"into_inner","span":{"filename":"src/buf/chain.rs","begin":[125,4],"end":[127,5]},"visibility":"public","docs":"Consumes this `Chain`, returning the underlying values.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet chain = (&b\"hello\"[..])\n    .chain(&b\"world\"[..]);\n\nlet (first, last) = chain.into_inner();\nassert_eq!(first[..], b\"hello\"[..]);\nassert_eq!(last[..], b\"world\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"T"},{"generic":"U"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42830:4529-0:1142:2605":{"id":"a:1:42830:4529-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3322:261-0:1077:2599":{"id":"a:1:3322:261-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:859":{"id":"0:859","crate_id":0,"name":null,"span":{"filename":"src/fmt/debug.rs","begin":[39,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:860:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:718:860":{"id":"0:718:860","crate_id":0,"name":"from","span":{"filename":"src/bytes_mut.rs","begin":[1257,4],"end":[1259,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1038:3049":{"id":"0:1038:3049","crate_id":0,"name":"put_i16","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13771:33271":{"id":"1:13771:33271","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13815:33281":{"id":"1:13815:33281","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13452:4403","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::split":"1:13811:3792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44751:5001","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:12199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:2751":{"id":"0:39:2751","crate_id":0,"name":"get_i16_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[458,4],"end":[460,5]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in native-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x08\\x09 hello\",\n    false => b\"\\x09\\x08 hello\",\n};\nassert_eq!(0x0809, buf.get_i16_ne());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:832:860":{"id":"0:832:860","crate_id":0,"name":"from","span":{"filename":"src/bytes_mut.rs","begin":[1707,4],"end":[1738,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:2618":{"id":"0:89:2618","crate_id":0,"name":"chunk","span":{"filename":"src/buf/buf_impl.rs","begin":[1441,4],"end":[1445,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1003:2724":{"id":"0:1003:2724","crate_id":0,"name":"get_i8","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1071:3081":{"id":"0:1071:3081","crate_id":0,"name":"put_u64","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:765:863":{"id":"0:765:863","crate_id":0,"name":"from_iter","span":{"filename":"src/bytes_mut.rs","begin":[1403,4],"end":[1405,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["into_iter",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u8"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/buf/buf_impl.rs","begin":[1402,0],"end":[1431,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["chunks_vectored","copy_to_bytes","get_f64_ne","get_u16_le","get_f32","get_u64_le","reader","get_i32_ne","get_i32_le","get_i32","get_u32_ne","get_uint_le","get_u32","get_i128_le","get_i128","get_u128_ne","copy_to_slice","get_u16_ne","get_u128","get_i128_ne","get_f32_ne","take","chain","get_int_ne","get_int_le","get_int","get_uint_ne","get_u32_le","get_i16_ne","get_i16_le","get_i16","get_u128_le","get_f64_le","get_f64","get_i64_ne","get_u16","get_i64","get_i8","get_u8","get_u64_ne","get_u64","get_i64_le","get_f32_le","get_uint","has_remaining"],"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"items":["0:82:2616","0:83:2618","0:84:2621","0:85:2622"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1010:2756":{"id":"0:1010:2756","crate_id":0,"name":"get_u32","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:442:2618":{"id":"0:442:2618","crate_id":0,"name":"chunk","span":{"filename":"src/bytes.rs","begin":[590,4],"end":[592,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1039:3052":{"id":"0:1039:3052","crate_id":0,"name":"put_i16_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2774":{"id":"0:45:2774","crate_id":0,"name":"get_i32_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[584,4],"end":[586,5]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in native-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x08\\x09\\xA0\\xA1 hello\",\n    false => b\"\\xA1\\xA0\\x09\\x08 hello\",\n};\nassert_eq!(0x0809A0A1, buf.get_i32_ne());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1037:3045":{"id":"0:1037:3045","crate_id":0,"name":"put_u16_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1013:2768":{"id":"0:1013:2768","crate_id":0,"name":"get_i32","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:3233":{"id":"0:203:3233","crate_id":0,"name":"last_ref","span":{"filename":"src/buf/chain.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Gets a reference to the last underlying `Buf`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet buf = (&b\"hello\"[..])\n    .chain(&b\"world\"[..]);\n\nassert_eq!(buf.last_ref()[..], b\"world\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"U"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:860":{"id":"0:330:860","crate_id":0,"name":"from","span":{"filename":"src/buf/uninit_slice.rs","begin":[217,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:777":{"id":"0:777","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1547,0],"end":[1547,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13764:33268":{"id":"1:13764:33268","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367-0:1142:2605":{"id":"0:367-0:1142:2605","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[39,31],"end":[39,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"self::writer::Writer","name":"Writer","id":"0:1142:2605","glob":false}}},"0:1031:2969":{"id":"0:1031:2969","crate_id":0,"name":"advance_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1091:830":{"id":"0:1091:830","crate_id":0,"name":"fmt","span":{"filename":"src/buf/iter.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:701:2969":{"id":"0:701:2969","crate_id":0,"name":"advance_mut","span":{"filename":"src/bytes_mut.rs","begin":[1176,4],"end":[1183,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:666:3200":{"id":"0:666:3200","crate_id":0,"name":"capacity","span":{"filename":"src/bytes_mut.rs","begin":[217,4],"end":[219,5]},"visibility":"public","docs":"Returns the number of bytes the `BytesMut` can hold without reallocating.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet b = BytesMut::with_capacity(64);\nassert_eq!(b.capacity(), 64);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:860":{"id":"0:333:860","crate_id":0,"name":"from","span":{"filename":"src/buf/uninit_slice.rs","begin":[223,4],"end":[225,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"1:31325:3196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:2603":{"id":"0:311:2603","crate_id":0,"name":"UninitSlice","span":{"filename":"src/buf/uninit_slice.rs","begin":[22,0],"end":[22,42]},"visibility":"public","docs":"Uninitialized byte slice.\n\nReturned by `BufMut::chunk_mut()`, the referenced byte slice may be\nuninitialized. The wrapper provides safe access without introducing\nundefined behavior.\n\nThe safety invariants of this wrapper are:\n\n 1. Reading from an `UninitSlice` is undefined behavior.\n 2. Writing uninitialized bytes to an `UninitSlice` is undefined behavior.\n\nThe difference between `&mut UninitSlice` and `&mut [MaybeUninit<u8>]` is\nthat it is possible in safe code to write uninitialized bytes to an\n`&mut [MaybeUninit<u8>]`, which this type prohibits.","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:314","a:1:32944:249-0:311:2603","a:1:3322:261-0:311:2603","a:1:3357:12105-0:311:2603","a:1:33002:4481-0:311:2603","a:1:42829:4530-0:311:2603","a:1:42830:4529-0:311:2603","a:1:32945:251-0:311:2603","b:1:2790-0:311:2603","b:1:2793-0:311:2603","b:1:3967-0:311:2603","0:326","0:328","0:331","0:1112","0:1115","0:1117","0:1120","0:1122","0:1125","0:1127","0:1130","0:1132","0:1135","0:1137","0:1140"]}}},"0:353:3244":{"id":"0:353:3244","crate_id":0,"name":"into_inner","span":{"filename":"src/buf/writer.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"Consumes this `Writer`, returning the underlying value.\n\n# Examples\n\n```rust\nuse bytes::BufMut;\nuse std::io;\n\nlet mut buf = vec![].writer();\nlet mut src = &b\"hello world\"[..];\n\nio::copy(&mut src, &mut buf).unwrap();\n\nlet buf = buf.into_inner();\nassert_eq!(*buf, b\"hello world\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2797":{"id":"0:51:2797","crate_id":0,"name":"get_i64_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[710,4],"end":[712,5]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in native-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\",\n    false => b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\",\n};\nassert_eq!(0x0102030405060708, buf.get_i64_ne());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1117":{"id":"0:1117","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:40276:3324","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFrom","id":"1:40330:224","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1118:211","0:1119:969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:513:1331":{"id":"0:513:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[805,4],"end":[807,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1067:3068":{"id":"0:1067:3068","crate_id":0,"name":"put_u32_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315:1212":{"id":"0:315:1212","crate_id":0,"name":"new","span":{"filename":"src/buf/uninit_slice.rs","begin":[36,4],"end":[38,5]},"visibility":"public","docs":"Creates a `&mut UninitSlice` wrapping a slice of initialised memory.\n\n# Examples\n\n```\nuse bytes::buf::UninitSlice;\n\nlet mut buffer = [0u8; 64];\nlet slice = UninitSlice::new(&mut buffer[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:900-0:639:2436":{"id":"0:900-0:639:2436","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::bytes_mut::BytesMut","name":"BytesMut","id":"0:639:2436","glob":false}}},"1:13765:33269":{"id":"1:13765:33269","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13789:8511":{"id":"1:13789:8511","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44703:4400","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13830:33287":{"id":"1:13830:33287","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:12199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:961:2616":{"id":"0:961:2616","crate_id":0,"name":"remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5713:3194":{"id":"4:5713:3194","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/buf/buf_mut.rs","begin":[1572,0],"end":[1637,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["put_uint_le","put_u32_le","put_i128_ne","put_i128_le","put_i128","put_u128_ne","put_u16_ne","put_u128","put_f64_le","put_f64","put_u8","put_u64_le","put_bytes","put_f32_le","put_slice","chain_mut","put_i16_ne","put_i16_le","put_i16","writer","put_u128_le","put_f64_ne","put_u16_le","put_i8","put_int_ne","put_i32_ne","put","put_i32","put_u32_ne","put_i32_le","put_uint","put_u32","put_uint_ne","put_int","put_int_le","limit","has_remaining_mut","put_i64_ne","put_u16","put_i64","put_u64_ne","put_i64_le","put_f32","put_u64","put_f32_ne"],"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::vec::Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:180:2950","0:181:2969","0:182:2995","0:183:2882","0:185:3009","0:186:3018"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5728:34054":{"id":"4:5728:34054","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13874:33307"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/buf/limit.rs","begin":[59,0],"end":[75,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["put_uint_le","put_u32_le","put_i128_ne","put_i128_le","put_i128","put_u128_ne","put_u16_ne","put_u128","put_f64_le","put_f64","put_u8","put_u64_le","put_bytes","put_f32_le","put_slice","chain_mut","put_i16_ne","put_i16_le","put_i16","writer","put_u128_le","put_f64_ne","put_u16_le","put_i8","put_int_ne","put_i32_ne","put","put_i32","put_u32_ne","put_i32_le","put_uint","put_u32","put_uint_ne","put_int","put_int_le","limit","has_remaining_mut","put_i64_ne","put_u16","put_i64","put_u64_ne","put_i64_le","put_f32","put_u64","put_f32_ne"],"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:257:2950","0:258:2995","0:259:2969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:745":{"id":"0:745","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1346,0],"end":[1353,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:746:185","0:747:2600","0:748:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/buf/buf_impl.rs","begin":[1434,0],"end":[1462,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["chunks_vectored","copy_to_bytes","get_f64_ne","get_u16_le","get_f32","get_u64_le","reader","get_i32_ne","get_i32_le","get_i32","get_u32_ne","get_uint_le","get_u32","get_i128_le","get_i128","get_u128_ne","copy_to_slice","get_u16_ne","get_u128","get_i128_ne","get_f32_ne","take","chain","get_int_ne","get_int_le","get_int","get_uint_ne","get_u32_le","get_i16_ne","get_i16_le","get_i16","get_u128_le","get_f64_le","get_f64","get_i64_ne","get_u16","get_i64","get_i8","get_u8","get_u64_ne","get_u64","get_i64_le","get_f32_le","get_uint","has_remaining"],"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::io::Cursor","id":"5:8360:2916","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:88:2616","0:89:2618","0:90:2621"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:983:2783":{"id":"0:983:2783","crate_id":0,"name":"get_u64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:421:3471":{"id":"0:421:3471","crate_id":0,"name":"is_unique","span":{"filename":"src/bytes.rs","begin":[233,4],"end":[235,5]},"visibility":"public","docs":"Returns true if this is the only reference to the data.\n\nAlways returns false if the data is backed by a static slice.\n\nThe result of this method may be invalidated immediately if another\nthread clones this value while this is being called. Ensure you have\nunique access to this value (`&mut Bytes`) first if you need to be\ncertain the result is valid (i.e. for safety reasons)\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet a = Bytes::from(vec![1, 2, 3]);\nassert!(a.is_unique());\nlet b = a.clone();\nassert!(!a.is_unique());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:725":{"id":"0:479:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[703,4],"end":[705,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:3112":{"id":"0:142:3112","crate_id":0,"name":"put_u128_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[857,4],"end":[859,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to `self` in native-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u128_ne(0x01020304050607080910111213141516);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");\n} else {\n    assert_eq!(buf, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:707":{"id":"0:707","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1226,0],"end":[1231,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:708:353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1043:3068":{"id":"0:1043:3068","crate_id":0,"name":"put_u32_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:536:860":{"id":"0:536:860","crate_id":0,"name":"from","span":{"filename":"src/bytes.rs","begin":[938,4],"end":[940,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:671:3562":{"id":"0:671:3562","crate_id":0,"name":"split_to","span":{"filename":"src/bytes_mut.rs","begin":[393,4],"end":[410,5]},"visibility":"public","docs":"Splits the buffer into two at the given index.\n\nAfterwards `self` contains elements `[at, len)`, and the returned `BytesMut`\ncontains elements `[0, at)`.\n\nThis is an `O(1)` operation that just increases the reference count and\nsets a few indices.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet mut a = BytesMut::from(&b\"hello world\"[..]);\nlet mut b = a.split_to(5);\n\na[0] = b'!';\nb[0] = b'j';\n\nassert_eq!(&a[..], b\"!world\");\nassert_eq!(&b[..], b\"jello\");\n```\n\n# Panics\n\nPanics if `at > len`.","links":{},"attrs":["#[must_use = \"consider BytesMut::advance if you don't need the other half\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["at",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8329-0:1086:2600":{"id":"b:1:8329-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8498:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8331:185","1:8332:2600","1:8333:985"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:680:3923":{"id":"0:680:3923","crate_id":0,"name":"unsplit","span":{"filename":"src/bytes_mut.rs","begin":[902,4],"end":[911,5]},"visibility":"public","docs":"Absorbs a `BytesMut` that was previously split off.\n\nIf the two `BytesMut` objects were previously contiguous and not mutated\nin a way that causes re-allocation i.e., if `other` was created by\ncalling `split_off` on this `BytesMut`, then this is an `O(1)` operation\nthat just decreases a reference count and sets a few indices.\nOtherwise this method degenerates to\n`self.extend_from_slice(other.as_ref())`.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet mut buf = BytesMut::with_capacity(64);\nbuf.extend_from_slice(b\"aaabbbcccddd\");\n\nlet split = buf.split_off(6);\nassert_eq!(b\"aaabbb\", &buf[..]);\nassert_eq!(b\"cccddd\", &split[..]);\n\nbuf.unsplit(split);\nassert_eq!(b\"aaabbbcccddd\", &buf[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:727:1331":{"id":"0:727:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1281,4],"end":[1283,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:2760":{"id":"0:41:2760","crate_id":0,"name":"get_u32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[498,4],"end":[500,5]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2855":{"id":"0:65:2855","crate_id":0,"name":"get_f32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1016,4],"end":[1018,5]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x9A\\x99\\x99\\x3F hello\"[..];\nassert_eq!(1.2f32, buf.get_f32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:2860":{"id":"0:66:2860","crate_id":0,"name":"get_f32_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1040,4],"end":[1042,5]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in native-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x3F\\x99\\x99\\x9A hello\",\n    false => b\"\\x9A\\x99\\x99\\x3F hello\",\n};\nassert_eq!(1.2f32, buf.get_f32_ne());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:448":{"id":"0:448","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[622,0],"end":[627,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:449:353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:533":{"id":"0:533","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[915,0],"end":[935,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:534:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:737:3407":{"id":"0:737:3407","crate_id":0,"name":"borrow","span":{"filename":"src/bytes_mut.rs","begin":[1312,4],"end":[1314,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2790-0:1077:2599":{"id":"b:1:2790-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["1:2792:3407"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:742:3955":{"id":"0:742:3955","crate_id":0,"name":"write_fmt","span":{"filename":"src/bytes_mut.rs","begin":[1335,4],"end":[1337,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["args",{"resolved_path":{"name":"fmt::Arguments","id":"1:43920:3956","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:3077":{"id":"0:133:3077","crate_id":0,"name":"put_i32_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[638,4],"end":[640,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to `self` in native-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i32_ne(0x0809A0A1);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");\n} else {\n    assert_eq!(buf, b\"\\xA1\\xA0\\x09\\x08\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:3148":{"id":"0:152:3148","crate_id":0,"name":"put_f32","span":{"filename":"src/buf/buf_mut.rs","begin":[1130,4],"end":[1132,5]},"visibility":"default","docs":"Writes  an IEEE754 single-precision (4 bytes) floating point number to\n`self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f32(1.2f32);\nassert_eq!(buf, b\"\\x3F\\x99\\x99\\x9A\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32944:249-0:1086:2600":{"id":"a:1:32944:249-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:269:2917":{"id":"0:269:2917","crate_id":0,"name":"get_ref","span":{"filename":"src/buf/reader.rs","begin":[33,4],"end":[35,5]},"visibility":"public","docs":"Gets a reference to the underlying `Buf`.\n\nIt is inadvisable to directly read from the underlying `Buf`.\n\n# Examples\n\n```rust\nuse bytes::Buf;\n\nlet buf = b\"hello world\".reader();\n\nassert_eq!(b\"hello world\", buf.get_ref());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"B"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:702:2995":{"id":"0:702:2995","crate_id":0,"name":"chunk_mut","span":{"filename":"src/bytes_mut.rs","begin":[1186,4],"end":[1191,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2790-0:311:2603":{"id":"b:1:2790-0:311:2603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2792:3407"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1059:3032":{"id":"0:1059:3032","crate_id":0,"name":"put_u16","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340:2618":{"id":"0:340:2618","crate_id":0,"name":"chunk","span":{"filename":"src/buf/vec_deque.rs","begin":[10,4],"end":[17,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2969":{"id":"0:170:2969","crate_id":0,"name":"advance_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1488,4],"end":[1496,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2790-0:1099:2604":{"id":"b:1:2790-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:2792:3407"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:31:2622":{"id":"0:31:2622","crate_id":0,"name":"copy_to_slice","span":{"filename":"src/buf/buf_impl.rs","begin":[270,4],"end":[284,5]},"visibility":"default","docs":"Copies bytes from `self` into `dst`.\n\nThe cursor is advanced by the number of bytes copied. `self` must have\nenough remaining bytes to fill `dst`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\nlet mut dst = [0; 5];\n\nbuf.copy_to_slice(&mut dst);\nassert_eq!(&b\"hello\"[..], &dst);\nassert_eq!(6, buf.remaining());\n```\n\n# Panics\n\nThis function panics if `self.remaining() < dst.len()`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:696:2618":{"id":"0:696:2618","crate_id":0,"name":"chunk","span":{"filename":"src/bytes_mut.rs","begin":[1145,4],"end":[1147,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1075:3096":{"id":"0:1075:3096","crate_id":0,"name":"put_i64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:2765":{"id":"0:42:2765","crate_id":0,"name":"get_u32_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[521,4],"end":[523,5]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in native-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x08\\x09\\xA0\\xA1 hello\",\n    false => b\"\\xA1\\xA0\\x09\\x08 hello\",\n};\nassert_eq!(0x0809A0A1, buf.get_u32_ne());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3108:150":{"id":"1:3108:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:1:42829:4530-0:1086:2600":{"id":"a:1:42829:4530-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2793-0:1142:2605":{"id":"b:1:2793-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:2795:3954"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:33002:4481-0:404:2435":{"id":"a:1:33002:4481-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:523:60":{"id":"0:523:60","crate_id":0,"name":"default","span":{"filename":"src/bytes.rs","begin":[832,4],"end":[834,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3110-0:639:2436":{"id":"b:1:3110-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3113:150","1:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:787":{"id":"0:787","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1580,0],"end":[1584,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:788:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:790:1331":{"id":"0:790:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1587,4],"end":[1589,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:797":{"id":"0:797","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1610,0],"end":[1614,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:798:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:831":{"id":"0:831","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1706,0],"end":[1739,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::vec::Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:832:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:721:860":{"id":"0:721:860","crate_id":0,"name":"from","span":{"filename":"src/bytes_mut.rs","begin":[1263,4],"end":[1265,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158:2593":{"id":"0:158:2593","crate_id":0,"name":"limit","span":{"filename":"src/buf/buf_mut.rs","begin":[1276,4],"end":[1281,5]},"visibility":"default","docs":"Creates an adaptor which can write at most `limit` bytes to `self`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet arr = &mut [0u8; 128][..];\nassert_eq!(arr.remaining_mut(), 128);\n\nlet dst = arr.limit(10);\nassert_eq!(dst.remaining_mut(), 10);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["limit",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2793-0:1077:2599":{"id":"b:1:2793-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["1:2795:3954"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1147:830":{"id":"0:1147:830","crate_id":0,"name":"fmt","span":{"filename":"src/buf/writer.rs","begin":[10,9],"end":[10,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2621":{"id":"0:965:2621","crate_id":0,"name":"advance","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1029:2950":{"id":"0:1029:2950","crate_id":0,"name":"remaining_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320:3361":{"id":"0:320:3361","crate_id":0,"name":"write_byte","span":{"filename":"src/buf/uninit_slice.rs","begin":[107,4],"end":[111,5]},"visibility":"public","docs":"Write a single byte at the specified offset.\n\n# Panics\n\nThe function panics if `index` is out of bounds.\n\n# Examples\n\n```\nuse bytes::buf::UninitSlice;\n\nlet mut data = [b'f', b'o', b'o'];\nlet slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };\n\nslice.write_byte(0, b'b');\n\nassert_eq!(b\"boo\", &data[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["byte",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:504":{"id":"0:472:504","crate_id":0,"name":"cmp","span":{"filename":"src/bytes.rs","begin":[683,4],"end":[685,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3967-0:1077:2599":{"id":"b:1:3967-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:678:3902":{"id":"0:678:3902","crate_id":0,"name":"try_reclaim","span":{"filename":"src/bytes_mut.rs","begin":[831,4],"end":[842,5]},"visibility":"public","docs":"Attempts to cheaply reclaim already allocated capacity for at least `additional` more\nbytes to be inserted into the given `BytesMut` and returns `true` if it succeeded.\n\n`try_reclaim` behaves exactly like `reserve`, except that it never allocates new storage\nand returns a `bool` indicating whether it was successful in doing so:\n\n`try_reclaim` returns false under these conditions:\n - The spare capacity left is less than `additional` bytes AND\n - The existing allocation cannot be reclaimed cheaply or it was less than\n   `additional` bytes in size\n\nReclaiming the allocation cheaply is possible if the `BytesMut` has no outstanding\nreferences through other `BytesMut`s or `Bytes` which point to the same underlying\nstorage.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet mut buf = BytesMut::with_capacity(64);\nassert_eq!(true, buf.try_reclaim(64));\nassert_eq!(64, buf.capacity());\n\nbuf.extend_from_slice(b\"abcd\");\nlet mut split = buf.split();\nassert_eq!(60, buf.capacity());\nassert_eq!(4, split.capacity());\nassert_eq!(false, split.try_reclaim(64));\nassert_eq!(false, buf.try_reclaim(64));\n// The split buffer is filled with \"abcd\"\nassert_eq!(false, split.try_reclaim(4));\n// buf is empty and has capacity for 60 bytes\nassert_eq!(true, buf.try_reclaim(60));\n\ndrop(buf);\nassert_eq!(false, split.try_reclaim(64));\n\nsplit.clear();\nassert_eq!(4, split.capacity());\nassert_eq!(true, split.try_reclaim(64));\nassert_eq!(64, split.capacity());\n```","links":{},"attrs":["#[inline]","#[must_use =\n\"consider BytesMut::reserve if you need an infallible reservation\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:3063":{"id":"0:129:3063","crate_id":0,"name":"put_u32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[538,4],"end":[540,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u32_le(0x0809A0A1);\nassert_eq!(buf, b\"\\xA1\\xA0\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:749":{"id":"0:749","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1355,0],"end":[1362,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:751:185","0:752:2600","0:753:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:764":{"id":"0:764","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1402,0],"end":[1406,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8314:158","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:765:863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:779":{"id":"0:779","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1556,0],"end":[1560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:780:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:799":{"id":"0:799","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1616,0],"end":[1620,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::vec::Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:800:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:825":{"id":"0:825","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1688,0],"end":[1692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"items":["0:826:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13773:3020":{"id":"1:13773:3020","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13787:33276":{"id":"1:13787:33276","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13786:33275"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1151:830":{"id":"0:1151:830","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/hex.rs","begin":[35,0],"end":[35,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:3049":{"id":"0:125:3049","crate_id":0,"name":"put_i16","span":{"filename":"src/buf/buf_mut.rs","begin":[442,4],"end":[444,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i16(0x0809);\nassert_eq!(buf, b\"\\x08\\x09\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:511:725":{"id":"0:511:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[799,4],"end":[801,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:789":{"id":"0:789","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1586,0],"end":[1590,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:790:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:785":{"id":"0:785","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1574,0],"end":[1578,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"slice":{"primitive":"u8"}},"items":["0:786:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1020:2794":{"id":"0:1020:2794","crate_id":0,"name":"get_i64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:755:3910":{"id":"0:755:3910","crate_id":0,"name":"extend","span":{"filename":"src/bytes_mut.rs","begin":[1365,4],"end":[1379,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u8"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:3204":{"id":"0:318:3204","crate_id":0,"name":"from_raw_parts_mut","span":{"filename":"src/buf/uninit_slice.rs","begin":[82,4],"end":[86,5]},"visibility":"public","docs":"Create a `&mut UninitSlice` from a pointer and a length.\n\n# Safety\n\nThe caller must ensure that `ptr` references a valid memory region owned\nby the caller representing a byte slice for the duration of `'a`.\n\n# Examples\n\n```\nuse bytes::buf::UninitSlice;\n\nlet bytes = b\"hello world\".to_vec();\nlet ptr = bytes.as_ptr() as *mut _;\nlet len = bytes.len();\n\nlet slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}}],["len",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13882:33313":{"id":"1:13882:33313","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5066:33313"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:45050:8582","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:3302":{"id":"0:278:3302","crate_id":0,"name":"consume","span":{"filename":"src/buf/reader.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["amt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:724":{"id":"0:724","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1274,0],"end":[1278,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:725:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:795":{"id":"0:795","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1604,0],"end":[1608,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:796:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:822:1331":{"id":"0:822:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1677,4],"end":[1679,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:494":{"id":"0:494","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[750,0],"end":[754,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::vec::Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:495:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13797:4007":{"id":"1:13797:4007","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13799:33279":{"id":"1:13799:33279","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1012:2765":{"id":"0:1012:2765","crate_id":0,"name":"get_u32_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441:2616":{"id":"0:441:2616","crate_id":0,"name":"remaining","span":{"filename":"src/bytes.rs","begin":[585,4],"end":[587,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:2969":{"id":"0:259:2969","crate_id":0,"name":"advance_mut","span":{"filename":"src/buf/limit.rs","begin":[70,4],"end":[74,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:996:2618":{"id":"0:996:2618","crate_id":0,"name":"chunk","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2621":{"id":"0:84:2621","crate_id":0,"name":"advance","span":{"filename":"src/buf/buf_impl.rs","begin":[1414,4],"end":[1420,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42830:4529-0:1077:2599":{"id":"a:1:42830:4529-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:514":{"id":"0:514","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[810,0],"end":[817,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:517:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:518":{"id":"0:518","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[819,0],"end":[826,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:521:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:237:185":{"id":"0:237:185","crate_id":0,"name":"Item","span":{"filename":"src/buf/iter.rs","begin":[108,4],"end":[108,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"u8"}}}},"0:782:1331":{"id":"0:782:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1563,4],"end":[1565,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449:353":{"id":"0:449:353","crate_id":0,"name":"as_ref","span":{"filename":"src/bytes.rs","begin":[624,4],"end":[626,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:747:2600":{"id":"0:747:2600","crate_id":0,"name":"IntoIter","span":{"filename":"src/bytes_mut.rs","begin":[1348,4],"end":[1348,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:694":{"id":"0:694","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1138,0],"end":[1167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["chunks_vectored","copy_to_bytes","get_f64_ne","get_u16_le","get_f32","get_u64_le","reader","get_i32_ne","get_i32_le","get_i32","get_u32_ne","get_uint_le","get_u32","get_i128_le","get_i128","get_u128_ne","copy_to_slice","get_u16_ne","get_u128","get_i128_ne","get_f32_ne","take","chain","get_int_ne","get_int_le","get_int","get_uint_ne","get_u32_le","get_i16_ne","get_i16_le","get_i16","get_u128_le","get_f64_le","get_f64","get_i64_ne","get_u16","get_i64","get_i8","get_u8","get_u64_ne","get_u64","get_i64_le","get_f32_le","get_uint","has_remaining"],"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:695:2616","0:696:2618","0:697:2621","0:698:2880"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13774:2619":{"id":"1:13774:2619","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[216,0],"end":[220,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:330:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1096":{"id":"0:1096","crate_id":0,"name":null,"span":{"filename":"src/buf/limit.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1098:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:155:3161":{"id":"0:155:3161","crate_id":0,"name":"put_f64","span":{"filename":"src/buf/buf_mut.rs","begin":[1206,4],"end":[1208,5]},"visibility":"default","docs":"Writes  an IEEE754 double-precision (8 bytes) floating point number to\n`self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f64(1.2f64);\nassert_eq!(buf, b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1024:2836":{"id":"0:1024:2836","crate_id":0,"name":"get_uint_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:2950":{"id":"0:112:2950","crate_id":0,"name":"remaining_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[64,4],"end":[64,37]},"visibility":"default","docs":"Returns the number of bytes that can be written from the current\nposition until the end of the buffer is reached.\n\nThis value is greater than or equal to the length of the slice returned\nby `chunk_mut()`.\n\nWriting to a `BufMut` may involve allocating more memory on the fly.\nImplementations may fail before reaching the number of bytes indicated\nby this method if they encounter an allocation failure.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 10];\nlet mut buf = &mut dst[..];\n\nlet original_remaining = buf.remaining_mut();\nbuf.put(&b\"hello\"[..]);\n\nassert_eq!(original_remaining - 5, buf.remaining_mut());\n```\n\n# Implementer notes\n\nImplementations of `remaining_mut` should ensure that the return value\ndoes not change unless a call is made to `advance_mut` or any other\nfunction that is documented to change the `BufMut`'s current position.\n\n# Note\n\n`remaining_mut` may return value smaller than actual available space.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:139:3099":{"id":"0:139:3099","crate_id":0,"name":"put_i64_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[784,4],"end":[786,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to `self` in native-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i64_ne(0x0102030405060708);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\");\n} else {\n    assert_eq!(buf, b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1053:2950":{"id":"0:1053:2950","crate_id":0,"name":"remaining_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:2950":{"id":"0:174:2950","crate_id":0,"name":"remaining_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1525,4],"end":[1527,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3101:860":{"id":"1:3101:860","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42829:4530-0:311:2603":{"id":"a:1:42829:4530-0:311:2603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3322:261-0:1105:2602":{"id":"a:1:3322:261-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:361-0:1086:2600":{"id":"0:361-0:1086:2600","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[33,0],"end":[33,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::iter::IntoIter","name":"IntoIter","id":"0:1086:2600","glob":false}}},"0:664:1027":{"id":"0:664:1027","crate_id":0,"name":"len","span":{"filename":"src/bytes_mut.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Returns the number of bytes contained in this `BytesMut`.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet b = BytesMut::from(&b\"hello\"[..]);\nassert_eq!(b.len(), 5);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32944:249-0:1099:2604":{"id":"a:1:32944:249-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:253:2593":{"id":"0:253:2593","crate_id":0,"name":"limit","span":{"filename":"src/buf/limit.rs","begin":[44,4],"end":[46,5]},"visibility":"public","docs":"Returns the maximum number of bytes that can be written\n\n# Note\n\nIf the inner `BufMut` has fewer bytes than indicated by this method then\nthat is the actual number of available bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1055:2969":{"id":"0:1055:2969","crate_id":0,"name":"advance_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:719":{"id":"0:719","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1262,0],"end":[1266,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:721:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:204:3238":{"id":"0:204:3238","crate_id":0,"name":"last_mut","span":{"filename":"src/buf/chain.rs","begin":[107,4],"end":[109,5]},"visibility":"public","docs":"Gets a mutable reference to the last underlying `Buf`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = (&b\"hello \"[..])\n    .chain(&b\"world\"[..]);\n\nbuf.last_mut().advance(1);\n\nlet full = buf.copy_to_bytes(10);\nassert_eq!(full, b\"hello orld\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"U"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1114:969":{"id":"0:1114:969","crate_id":0,"name":"index","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"Range","id":"1:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:528":{"id":"0:528","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[849,0],"end":[882,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:529:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:693:696":{"id":"0:693:696","crate_id":0,"name":"drop","span":{"filename":"src/bytes_mut.rs","begin":[1122,4],"end":[1135,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:744:496":{"id":"0:744:496","crate_id":0,"name":"clone","span":{"filename":"src/bytes_mut.rs","begin":[1341,4],"end":[1343,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:783":{"id":"0:783","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1568,0],"end":[1572,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"slice":{"primitive":"u8"}},"items":["0:784:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13801:33280":{"id":"1:13801:33280","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:12199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:3009":{"id":"0:118:3009","crate_id":0,"name":"put_slice","span":{"filename":"src/buf/buf_mut.rs","begin":[243,4],"end":[258,5]},"visibility":"default","docs":"Transfer bytes into `self` from `src` and advance the cursor by the\nnumber of bytes written.\n\n`self` must have enough remaining capacity to contain all of `src`.\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 6];\n\n{\n    let mut buf = &mut dst[..];\n    buf.put_slice(b\"hello\");\n\n    assert_eq!(1, buf.remaining_mut());\n}\n\nassert_eq!(b\"hello\\0\", &dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1124:969":{"id":"0:1124:969","crate_id":0,"name":"index","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"RangeFull","id":"1:40293:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:2969":{"id":"0:176:2969","crate_id":0,"name":"advance_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1535,4],"end":[1543,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:3081":{"id":"0:134:3081","crate_id":0,"name":"put_u64","span":{"filename":"src/buf/buf_mut.rs","begin":[661,4],"end":[663,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u64(0x0102030405060708);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5711":{"id":"4:5711","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5712:34049","4:5713:3194","4:5715:34050","4:5717:34051","4:5725:34052","4:5726:34053","4:5727:4209","4:5728:34054","4:5729:34055"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1082":{"id":"0:1082","crate_id":0,"name":null,"span":{"filename":"src/buf/chain.rs","begin":[29,9],"end":[29,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["0:1085:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:126:3052":{"id":"0:126:3052","crate_id":0,"name":"put_i16_le","span":{"filename":"src/buf/buf_mut.rs","begin":[465,4],"end":[467,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i16_le(0x0809);\nassert_eq!(buf, b\"\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:971:2734":{"id":"0:971:2734","crate_id":0,"name":"get_u16_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:997:2688":{"id":"0:997:2688","crate_id":0,"name":"chunks_vectored","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"5:8578:2607","args":{"angle_bracketed":{"args":[{"lifetime":"'b"}],"bindings":[]}}}}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:695:2616":{"id":"0:695:2616","crate_id":0,"name":"remaining","span":{"filename":"src/bytes_mut.rs","begin":[1140,4],"end":[1142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5727:4209":{"id":"4:5727:4209","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:987:2797":{"id":"0:987:2797","crate_id":0,"name":"get_i64_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2793-0:1086:2600":{"id":"b:1:2793-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2795:3954"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1030:2995":{"id":"0:1030:2995","crate_id":0,"name":"chunk_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:428:3573":{"id":"0:428:3573","crate_id":0,"name":"truncate","span":{"filename":"src/bytes.rs","begin":[480,4],"end":[493,5]},"visibility":"public","docs":"Shortens the buffer, keeping the first `len` bytes and dropping the\nrest.\n\nIf `len` is greater than the buffer's current length, this has no\neffect.\n\nThe [split_off](`Self::split_off()`) method can emulate `truncate`, but this causes the\nexcess bytes to be returned instead of dropped.\n\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet mut buf = Bytes::from(&b\"hello world\"[..]);\nbuf.truncate(5);\nassert_eq!(buf, b\"hello\"[..]);\n```","links":{"`Self::split_off()`":"0:426:3553"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1054:2995":{"id":"0:1054:2995","crate_id":0,"name":"chunk_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:12105-0:639:2436":{"id":"a:1:3357:12105-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13874:33307":{"id":"1:13874:33307","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2790-0:1092:2601":{"id":"b:1:2790-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2792:3407"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5715:34050":{"id":"4:5715:34050","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:366-0:1099:2604":{"id":"0:366-0:1099:2604","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[39,15],"end":[39,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"self::reader::Reader","name":"Reader","id":"0:1099:2604","glob":false}}},"0:1040:3055":{"id":"0:1040:3055","crate_id":0,"name":"put_i16_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2793-0:1105:2602":{"id":"b:1:2793-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2795:3954"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2822-0:404:2435":{"id":"b:1:2822-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2820:4222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2824:29072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:25:2616":{"id":"0:25:2616","crate_id":0,"name":"remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[119,4],"end":[119,33]},"visibility":"default","docs":"Returns the number of bytes between the current position and the end of\nthe buffer.\n\nThis value is greater than or equal to the length of the slice returned\nby `chunk()`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.remaining(), 11);\n\nbuf.get_u8();\n\nassert_eq!(buf.remaining(), 10);\n```\n\n# Implementer notes\n\nImplementations of `remaining` should ensure that the return value does\nnot change unless a call is made to `advance` or any other function that\nis documented to change the `Buf`'s current position.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:160:3192":{"id":"0:160:3192","crate_id":0,"name":"chain_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1336,4],"end":[1341,5]},"visibility":"default","docs":"Creates an adapter which will chain this buffer with another.\n\nThe returned `BufMut` instance will first write to all bytes from\n`self`. Afterwards, it will write to `next`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut a = [0u8; 5];\nlet mut b = [0u8; 6];\n\nlet mut chain = (&mut a[..]).chain_mut(&mut b[..]);\n\nchain.put_slice(b\"hello world\");\n\nassert_eq!(&a[..], b\"hello\");\nassert_eq!(&b[..], b\" world\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["next",{"generic":"U"}]],"output":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3095-0:404:2435":{"id":"b:1:3095-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3098:3501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:510":{"id":"0:510","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[798,0],"end":[802,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"items":["0:511:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:992:2842":{"id":"0:992:2842","crate_id":0,"name":"get_int_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493:1331":{"id":"0:493:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[745,4],"end":[747,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:477:1331":{"id":"0:477:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[697,4],"end":[699,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13793:29262":{"id":"1:13793:29262","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13792:29261"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:45016:8645","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:3074":{"id":"0:132:3074","crate_id":0,"name":"put_i32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[611,4],"end":[613,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i32_le(0x0809A0A1);\nassert_eq!(buf, b\"\\xA1\\xA0\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:1027":{"id":"0:325:1027","crate_id":0,"name":"len","span":{"filename":"src/buf/uninit_slice.rs","begin":[205,4],"end":[207,5]},"visibility":"public","docs":"Returns the number of bytes in the slice.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut data = [0, 1, 2];\nlet mut slice = &mut data[..];\nlet len = BufMut::chunk_mut(&mut slice).len();\n\nassert_eq!(len, 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:3071":{"id":"0:131:3071","crate_id":0,"name":"put_i32","span":{"filename":"src/buf/buf_mut.rs","begin":[588,4],"end":[590,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i32(0x0809A0A1);\nassert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:425:3535":{"id":"0:425:3535","crate_id":0,"name":"slice_ref","span":{"filename":"src/bytes.rs","begin":[331,4],"end":[362,5]},"visibility":"public","docs":"Returns a slice of self that is equivalent to the given `subset`.\n\nWhen processing a `Bytes` buffer with other tools, one often gets a\n`&[u8]` which is in fact a slice of the `Bytes`, i.e. a subset of it.\nThis function turns that `&[u8]` into another `Bytes`, as if one had\ncalled `self.slice()` with the offsets that correspond to `subset`.\n\nThis operation is `O(1)`.\n\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet bytes = Bytes::from(&b\"012345678\"[..]);\nlet as_slice = bytes.as_ref();\nlet subset = &as_slice[2..6];\nlet subslice = bytes.slice_ref(&subset);\nassert_eq!(&subslice[..], b\"2345\");\n```\n\n# Panics\n\nRequires that the given `sub` slice is in fact contained within the\n`Bytes` buffer; otherwise this function will panic.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["subset",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2618":{"id":"0:26:2618","crate_id":0,"name":"chunk","span":{"filename":"src/buf/buf_impl.rs","begin":[152,4],"end":[152,29]},"visibility":"default","docs":"Returns a slice starting at the current position and of length between 0\nand `Buf::remaining()`. Note that this *can* return shorter slice (this allows\nnon-continuous internal representation).\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Implementer notes\n\nThis function should never panic. `chunk()` should return an empty\nslice **if and only if** `remaining()` returns 0. In other words,\n`chunk()` returning an empty slice implies that `remaining()` will\nreturn 0 and `remaining()` returning 0 implies that `chunk()` will\nreturn an empty slice.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:48:2788":{"id":"0:48:2788","crate_id":0,"name":"get_u64_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[647,4],"end":[649,5]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in native-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\",\n    false => b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\",\n};\nassert_eq!(0x0102030405060708, buf.get_u64_ne());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3095-0:1092:2601":{"id":"b:1:3095-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3098:3501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42830:4529-0:639:2436":{"id":"a:1:42830:4529-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:796:725":{"id":"0:796:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1605,4],"end":[1607,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13877:33310":{"id":"1:13877:33310","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:41129"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:2995":{"id":"0:115:2995","crate_id":0,"name":"chunk_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[179,4],"end":[179,48]},"visibility":"default","docs":"Returns a mutable slice starting at the current BufMut position and of\nlength between 0 and `BufMut::remaining_mut()`. Note that this *can* be shorter than the\nwhole remainder of the buffer (this allows non-continuous implementation).\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\nThe returned byte slice may represent uninitialized memory.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = Vec::with_capacity(16);\n\nunsafe {\n    // MaybeUninit::as_mut_ptr\n    buf.chunk_mut()[0..].as_mut_ptr().write(b'h');\n    buf.chunk_mut()[1..].as_mut_ptr().write(b'e');\n\n    buf.advance_mut(2);\n\n    buf.chunk_mut()[0..].as_mut_ptr().write(b'l');\n    buf.chunk_mut()[1..].as_mut_ptr().write(b'l');\n    buf.chunk_mut()[2..].as_mut_ptr().write(b'o');\n\n    buf.advance_mut(3);\n}\n\nassert_eq!(5, buf.len());\nassert_eq!(buf, b\"hello\");\n```\n\n# Implementer notes\n\nThis function should never panic. `chunk_mut()` should return an empty\nslice **if and only if** `remaining_mut()` returns 0. In other words,\n`chunk_mut()` returning an empty slice implies that `remaining_mut()` will\nreturn 0 and `remaining_mut()` returning 0 implies that `chunk_mut()` will\nreturn an empty slice.\n\nThis function may trigger an out-of-memory abort if it tries to allocate\nmemory and fails to do so.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:780:725":{"id":"0:780:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1557,4],"end":[1559,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:782-0:404:2435":{"id":"b:4:782-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:784:4394","4:785:29073","4:786:29074"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:423:1737":{"id":"0:423:1737","crate_id":0,"name":"slice","span":{"filename":"src/bytes.rs","begin":[264,4],"end":[304,5]},"visibility":"public","docs":"Returns a slice of self for the provided range.\n\nThis will increment the reference count for the underlying memory and\nreturn a new `Bytes` handle set to the slice.\n\nThis operation is `O(1)`.\n\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet a = Bytes::from(&b\"hello world\"[..]);\nlet b = a.slice(2..5);\n\nassert_eq!(&b[..], b\"llo\");\n```\n\n# Panics\n\nRequires that `begin <= end` and `end <= self.len()`, otherwise slicing\nwill panic.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"impl_trait":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl RangeBounds<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3719:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[837,0],"end":[841,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:525:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:729:504":{"id":"0:729:504","crate_id":0,"name":"cmp","span":{"filename":"src/bytes_mut.rs","begin":[1287,4],"end":[1289,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:703:2882":{"id":"0:703:2882","crate_id":0,"name":"put","span":{"filename":"src/bytes_mut.rs","begin":[1196,4],"end":[1206,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:500":{"id":"0:500","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[768,0],"end":[772,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:501:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:716":{"id":"0:716","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1256,0],"end":[1260,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:718:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:801":{"id":"0:801","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1622,0],"end":[1626,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::vec::Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:802:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1123:211":{"id":"0:1123:211","crate_id":0,"name":"Output","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:127:3055":{"id":"0:127:3055","crate_id":0,"name":"put_i16_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[492,4],"end":[494,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to `self` in native-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i16_ne(0x0809);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x08\\x09\");\n} else {\n    assert_eq!(buf, b\"\\x09\\x08\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:2917":{"id":"0:251:2917","crate_id":0,"name":"get_ref","span":{"filename":"src/buf/limit.rs","begin":[27,4],"end":[29,5]},"visibility":"public","docs":"Gets a reference to the underlying `BufMut`.\n\nIt is inadvisable to directly write to the underlying `BufMut`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:826:1331":{"id":"0:826:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1689,4],"end":[1691,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:507:725":{"id":"0:507:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[787,4],"end":[789,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:462:2600":{"id":"0:462:2600","crate_id":0,"name":"IntoIter","span":{"filename":"src/bytes.rs","begin":[655,4],"end":[655,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:11751:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"0:225:2600":{"id":"0:225:2600","crate_id":0,"name":"IntoIter","span":{"filename":"src/buf/chain.rs","begin":[235,4],"end":[235,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13807:4742":{"id":"1:13807:4742","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42735:203","prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:12199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:3164":{"id":"0:156:3164","crate_id":0,"name":"put_f64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1230,4],"end":[1232,5]},"visibility":"default","docs":"Writes  an IEEE754 double-precision (8 bytes) floating point number to\n`self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f64_le(1.2f64);\nassert_eq!(buf, b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:2882":{"id":"0:116:2882","crate_id":0,"name":"put","span":{"filename":"src/buf/buf_mut.rs","begin":[202,4],"end":[221,5]},"visibility":"default","docs":"Transfer bytes into `self` from `src` and advance the cursor by the\nnumber of bytes written.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\n\nbuf.put_u8(b'h');\nbuf.put(&b\"ello\"[..]);\nbuf.put(&b\" world\"[..]);\n\nassert_eq!(buf, b\"hello world\");\n```\n\n# Panics\n\nPanics if `self` does not have enough capacity to contain `src`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"super::Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:341:2621":{"id":"0:341:2621","crate_id":0,"name":"advance","span":{"filename":"src/buf/vec_deque.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3114:1856":{"id":"1:3114:1856","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314":{"id":"0:314","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[24,0],"end":[208,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:315:1212","0:316:3197","0:318:3204","0:320:3361","0:321:2715","0:323:3020","0:324:3382","0:325:1027"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:517:725":{"id":"0:517:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[814,4],"end":[816,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13825:33285":{"id":"1:13825:33285","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12642:492","str::splitn":"1:13823:33284","self::pattern":"1:13452:4403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44855:5003","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:12199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13840:33290":{"id":"1:13840:33290","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13452:4403","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::match_indices":"1:13838:33289"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44901:8640","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:12199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1113:211":{"id":"0:1113:211","crate_id":0,"name":"Output","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1058:3028":{"id":"0:1058:3028","crate_id":0,"name":"put_i8","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42829:4530-0:1077:2599":{"id":"a:1:42829:4530-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:119:3018":{"id":"0:119:3018","crate_id":0,"name":"put_bytes","span":{"filename":"src/buf/buf_mut.rs","begin":[286,4],"end":[300,5]},"visibility":"default","docs":"Put `cnt` bytes `val` into `self`.\n\nLogically equivalent to calling `self.put_u8(val)` `cnt` times, but may work faster.\n\n`self` must have at least `cnt` remaining capacity.\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 6];\n\n{\n    let mut buf = &mut dst[..];\n    buf.put_bytes(b'a', 4);\n\n    assert_eq!(2, buf.remaining_mut());\n}\n\nassert_eq!(b\"aaaa\\0\\0\", &dst);\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["val",{"primitive":"u8"}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:2864":{"id":"0:67:2864","crate_id":0,"name":"get_f64","span":{"filename":"src/buf/buf_impl.rs","begin":[1061,4],"end":[1063,5]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33 hello\"[..];\nassert_eq!(1.2f64, buf.get_f64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:990:2836":{"id":"0:990:2836","crate_id":0,"name":"get_uint_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1048:3085":{"id":"0:1048:3085","crate_id":0,"name":"put_u64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1141:970":{"id":"0:1141:970","crate_id":0,"name":"index_mut","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"RangeToInclusive","id":"1:40388:228","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:3363":{"id":"0:356:3363","crate_id":0,"name":"write","span":{"filename":"src/buf/writer.rs","begin":[78,4],"end":[83,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"5:3095:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[638,0],"end":[642,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:454:3407"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[688,0],"end":[688,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2877:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1153:830":{"id":"0:1153:830","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/hex.rs","begin":[36,0],"end":[36,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:715:656":{"id":"0:715:656","crate_id":0,"name":"deref_mut","span":{"filename":"src/bytes_mut.rs","begin":[1251,4],"end":[1253,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:810:1331":{"id":"0:810:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1647,4],"end":[1649,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215":{"id":"0:215","crate_id":0,"name":null,"span":{"filename":"src/buf/chain.rs","begin":[191,0],"end":[227,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["put_uint_le","put_u32_le","put_i128_ne","put_i128_le","put_i128","put_u128_ne","put_u16_ne","put_u128","put_f64_le","put_f64","put_u8","put_u64_le","put_bytes","put_f32_le","put_slice","chain_mut","put_i16_ne","put_i16_le","put_i16","writer","put_u128_le","put_f64_ne","put_u16_le","put_i8","put_int_ne","put_i32_ne","put","put_i32","put_u32_ne","put_i32_le","put_uint","put_u32","put_uint_ne","put_int","put_int_le","limit","has_remaining_mut","put_i64_ne","put_u16","put_i64","put_u64_ne","put_i64_le","put_f32","put_u64","put_f32_ne"],"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["0:218:2950","0:219:2995","0:220:2969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13875:33308":{"id":"1:13875:33308","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2850":{"id":"0:64:2850","crate_id":0,"name":"get_f32","span":{"filename":"src/buf/buf_impl.rs","begin":[995,4],"end":[997,5]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];\nassert_eq!(1.2f32, buf.get_f32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1064:3055":{"id":"0:1064:3055","crate_id":0,"name":"put_i16_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:2430":{"id":"0:24:2430","crate_id":0,"name":"Buf","span":{"filename":"src/buf/buf_impl.rs","begin":[93,0],"end":[1222,1]},"visibility":"public","docs":"Read bytes from a buffer.\n\nA buffer stores bytes in memory such that read operations are infallible.\nThe underlying storage may or may not be in contiguous memory. A `Buf` value\nis a cursor into the buffer. Reading from `Buf` advances the cursor\nposition. It can be thought of as an efficient `Iterator` for collections of\nbytes.\n\nThe simplest `Buf` is a `&[u8]`.\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(b'h', buf.get_u8());\nassert_eq!(b'e', buf.get_u8());\nassert_eq!(b'l', buf.get_u8());\n\nlet mut rest = [0; 8];\nbuf.copy_to_slice(&mut rest);\n\nassert_eq!(&rest[..], &b\"lo world\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:25:2616","0:26:2618","0:27:2688","0:29:2621","0:30:2691","0:31:2622","0:32:2721","0:33:2724","0:34:2730","0:35:2734","0:36:2741","0:37:2745","0:38:2748","0:39:2751","0:40:2756","0:41:2760","0:42:2765","0:43:2768","0:44:2771","0:45:2774","0:46:2779","0:47:2783","0:48:2788","0:49:2791","0:50:2794","0:51:2797","0:52:2802","0:53:2806","0:54:2811","0:55:2814","0:56:2817","0:57:2820","0:58:2825","0:59:2829","0:60:2836","0:61:2839","0:62:2842","0:63:2845","0:64:2850","0:65:2855","0:66:2860","0:67:2864","0:68:2867","0:69:2871","0:70:2880","0:72:2595","0:73:2592","0:75:2594"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:77","0:79","0:81","0:86","0:206","0:293","0:338","0:440","0:694"]}}},"b:1:2790-0:1142:2605":{"id":"b:1:2790-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:2792:3407"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[843,0],"end":[847,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:527:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1102":{"id":"0:1102","crate_id":0,"name":null,"span":{"filename":"src/buf/reader.rs","begin":[10,9],"end":[10,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:1104:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1028:2880":{"id":"0:1028:2880","crate_id":0,"name":"copy_to_bytes","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"crate::Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2793-0:404:2435":{"id":"b:1:2793-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2795:3954"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:475:725":{"id":"0:475:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[691,4],"end":[693,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3095-0:1142:2605":{"id":"b:1:3095-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:3098:3501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:731":{"id":"0:731","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1294,0],"end":[1299,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:732:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:751:185":{"id":"0:751:185","crate_id":0,"name":"Item","span":{"filename":"src/bytes_mut.rs","begin":[1356,4],"end":[1356,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"u8"}}}}}},"0:1155:830":{"id":"0:1155:830","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/hex.rs","begin":[37,0],"end":[37,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234:2625":{"id":"0:234:2625","crate_id":0,"name":"get_mut","span":{"filename":"src/buf/iter.rs","begin":[102,4],"end":[104,5]},"visibility":"public","docs":"Gets a mutable reference to the underlying `Buf`.\n\nIt is inadvisable to directly read from the underlying `Buf`.\n\n# Examples\n\n```rust\nuse bytes::{Buf, BytesMut};\n\nlet buf = BytesMut::from(&b\"abc\"[..]);\nlet mut iter = buf.into_iter();\n\nassert_eq!(iter.next(), Some(b'a'));\n\niter.get_mut().advance(1);\n\nassert_eq!(iter.next(), Some(b'c'));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2802":{"id":"0:52:2802","crate_id":0,"name":"get_u128","span":{"filename":"src/buf/buf_impl.rs","begin":[730,4],"end":[732,5]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42829:4530-0:1099:2604":{"id":"a:1:42829:4530-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:430:3588":{"id":"0:430:3588","crate_id":0,"name":"try_into_mut","span":{"filename":"src/bytes.rs","begin":[526,4],"end":[532,5]},"visibility":"public","docs":"Try to convert self into `BytesMut`.\n\nIf `self` is unique for the entire original buffer, this will succeed\nand return a `BytesMut` with the contents of `self` without copying.\nIf `self` is not unique for the entire original buffer, this will fail\nand return self.\n\n# Examples\n\n```\nuse bytes::{Bytes, BytesMut};\n\nlet bytes = Bytes::from(b\"hello\".to_vec());\nassert_eq!(bytes.try_into_mut(), Ok(BytesMut::from(&b\"hello\"[..])));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248":{"id":"0:248","crate_id":0,"name":null,"span":{"filename":"src/buf/limit.rs","begin":[18,0],"end":[57,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:250:3244","0:251:2917","0:252:2625","0:253:2593","0:254:3284"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1116:970":{"id":"0:1116:970","crate_id":0,"name":"index_mut","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"Range","id":"1:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:2768":{"id":"0:43:2768","crate_id":0,"name":"get_i32","span":{"filename":"src/buf/buf_impl.rs","begin":[541,4],"end":[543,5]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[644,0],"end":[651,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:456:185","0:457:2600","0:458:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/buf/buf_mut.rs","begin":[1476,0],"end":[1521,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["put_uint_le","put_u32_le","put_i128_ne","put_i128_le","put_i128","put_u128_ne","put_u16_ne","put_u128","put_f64_le","put_f64","put_u8","put_u64_le","put_bytes","put_f32_le","put_slice","chain_mut","put_i16_ne","put_i16_le","put_i16","writer","put_u128_le","put_f64_ne","put_u16_le","put_i8","put_int_ne","put_i32_ne","put","put_i32","put_u32_ne","put_i32_le","put_uint","put_u32","put_uint_ne","put_int","put_int_le","limit","has_remaining_mut","put_i64_ne","put_u16","put_i64","put_u64_ne","put_i64_le","put_f32","put_u64","put_f32_ne"],"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"items":["0:168:2950","0:169:2995","0:170:2969","0:171:3009","0:172:3018"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:491:725":{"id":"0:491:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[739,4],"end":[741,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:860":{"id":"0:538:860","crate_id":0,"name":"from","span":{"filename":"src/bytes.rs","begin":[944,4],"end":[947,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:738":{"id":"0:738","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1317,0],"end":[1321,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:739:3954"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:754":{"id":"0:754","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1364,0],"end":[1380,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one_unchecked","extend_one"],"trait":{"name":"Extend","id":"1:8334:3957","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:755:3910"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1002:2721":{"id":"0:1002:2721","crate_id":0,"name":"get_u8","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:778":{"id":"0:778","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1548,0],"end":[1548,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5726:34053":{"id":"4:5726:34053","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:299:2609","`String`":"4:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:299:2609","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:3157":{"id":"0:154:3157","crate_id":0,"name":"put_f32_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1182,4],"end":[1184,5]},"visibility":"default","docs":"Writes an IEEE754 single-precision (4 bytes) floating point number to\n`self` in native-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f32_ne(1.2f32);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x3F\\x99\\x99\\x9A\");\n} else {\n    assert_eq!(buf, b\"\\x9A\\x99\\x99\\x3F\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:829":{"id":"0:829","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1700,0],"end":[1704,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:830:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13770:3598":{"id":"1:13770:3598","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12975:12200"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13881:12118":{"id":"1:13881:12118","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5069:12118"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:45041:8465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:743":{"id":"0:743","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1340,0],"end":[1344,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:744:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:972:2741":{"id":"0:972:2741","crate_id":0,"name":"get_u16_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:461:185":{"id":"0:461:185","crate_id":0,"name":"Item","span":{"filename":"src/bytes.rs","begin":[654,4],"end":[654,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"u8"}}}}}},"a:1:42830:4529-0:1105:2602":{"id":"a:1:42830:4529-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3099-0:1077:2599":{"id":"b:1:3099-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:476":{"id":"0:476","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[696,0],"end":[700,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:477:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1057:3024":{"id":"0:1057:3024","crate_id":0,"name":"put_u8","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1109":{"id":"0:1109","crate_id":0,"name":null,"span":{"filename":"src/buf/take.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1111:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:973:2745":{"id":"0:973:2745","crate_id":0,"name":"get_i16","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:995:2616":{"id":"0:995:2616","crate_id":0,"name":"remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1131:970":{"id":"0:1131:970","crate_id":0,"name":"index_mut","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"RangeInclusive","id":"1:40368:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8332:2600":{"id":"1:8332:2600","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"b:1:3099-0:1099:2604":{"id":"b:1:3099-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1085:830":{"id":"0:1085:830","crate_id":0,"name":"fmt","span":{"filename":"src/buf/chain.rs","begin":[29,9],"end":[29,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13782:33272":{"id":"1:13782:33272","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12648:1771","str::slice_mut_unchecked":"1:13783:33273","crate::ops::Index":"1:40276:3324"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13835:33288":{"id":"1:13835:33288","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13452:4403","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::matches":"1:13833:4066"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44955:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:12199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13791:2432":{"id":"1:13791:2432","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44719:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1074:3093":{"id":"0:1074:3093","crate_id":0,"name":"put_i64","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1134:969":{"id":"0:1134:969","crate_id":0,"name":"index","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"RangeTo","id":"1:40348:227","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3967-0:404:2435":{"id":"b:1:3967-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:675:3201":{"id":"0:675:3201","crate_id":0,"name":"set_len","span":{"filename":"src/bytes_mut.rs","begin":[526,4],"end":[529,5]},"visibility":"public","docs":"Sets the length of the buffer.\n\nThis will explicitly set the size of the buffer without actually\nmodifying the data, so it is up to the caller to ensure that the data\nhas been initialized.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet mut b = BytesMut::from(&b\"hello world\"[..]);\n\nunsafe {\n    b.set_len(5);\n}\n\nassert_eq!(&b[..], b\"hello\");\n\nunsafe {\n    b.set_len(11);\n}\n\nassert_eq!(&b[..], b\"hello world\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:986:2794":{"id":"0:986:2794","crate_id":0,"name":"get_i64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13783:33273":{"id":"1:13783:33273","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12648:1771","crate::ops::IndexMut":"1:3628:3325","str::slice_unchecked":"1:13782:33272"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3110-0:1105:2602":{"id":"b:1:3110-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3113:150","1:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1111:830":{"id":"0:1111:830","crate_id":0,"name":"fmt","span":{"filename":"src/buf/take.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13847:33293":{"id":"1:13847:33293","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1060:3037":{"id":"0:1060:3037","crate_id":0,"name":"put_u16_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3322:261-0:1092:2601":{"id":"a:1:3322:261-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:967:2622":{"id":"0:967:2622","crate_id":0,"name":"copy_to_slice","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:791":{"id":"0:791","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1592,0],"end":[1596,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:792:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1021:2797":{"id":"0:1021:2797","crate_id":0,"name":"get_i64_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:2974":{"id":"0:114:2974","crate_id":0,"name":"has_remaining_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[128,4],"end":[130,5]},"visibility":"default","docs":"Returns true if there is space in `self` for more bytes.\n\nThis is equivalent to `self.remaining_mut() != 0`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut dst = [0; 5];\nlet mut buf = &mut dst[..];\n\nassert!(buf.has_remaining_mut());\n\nbuf.put(&b\"hello\"[..]);\n\nassert!(!buf.has_remaining_mut());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:474":{"id":"0:474","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[690,0],"end":[694,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:475:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1130":{"id":"0:1130","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3628:3325","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeInclusive","id":"1:40368:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1131:970"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:490":{"id":"0:490","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[738,0],"end":[742,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:491:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:978:2765":{"id":"0:978:2765","crate_id":0,"name":"get_u32_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1017:2783":{"id":"0:1017:2783","crate_id":0,"name":"get_u64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2616":{"id":"0:88:2616","crate_id":0,"name":"remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[1436,4],"end":[1438,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1121:970":{"id":"0:1121:970","crate_id":0,"name":"index_mut","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"RangeFrom","id":"1:40330:224","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363-0:1105:2602":{"id":"0:363-0:1105:2602","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[35,0],"end":[35,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::take::Take","name":"Take","id":"0:1105:2602","glob":false}}},"0:499:725":{"id":"0:499:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[763,4],"end":[765,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:12105-0:1077:2599":{"id":"a:1:3357:12105-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:481:1331":{"id":"0:481:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[709,4],"end":[711,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:3299":{"id":"0:274:3299","crate_id":0,"name":"read","span":{"filename":"src/buf/reader.rs","begin":[66,4],"end":[71,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"5:3095:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42829:4530-0:1142:2605":{"id":"a:1:42829:4530-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:679:3206":{"id":"0:679:3206","crate_id":0,"name":"extend_from_slice","span":{"filename":"src/bytes_mut.rs","begin":[861,4],"end":[876,5]},"visibility":"public","docs":"Appends given bytes to this `BytesMut`.\n\nIf this `BytesMut` object does not have enough capacity, it is resized\nfirst.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet mut buf = BytesMut::with_capacity(0);\nbuf.extend_from_slice(b\"aaabbb\");\nbuf.extend_from_slice(b\"cccddd\");\n\nassert_eq!(b\"aaabbbcccddd\", &buf[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["extend",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:691:3818":{"id":"0:691:3818","crate_id":0,"name":"spare_capacity_mut","span":{"filename":"src/bytes_mut.rs","begin":[1111,4],"end":[1118,5]},"visibility":"public","docs":"Returns the remaining spare capacity of the buffer as a slice of `MaybeUninit<u8>`.\n\nThe returned slice can be used to fill the buffer with data (e.g. by\nreading from a file) before marking the data as initialized using the\n[`set_len`] method.\n\n[`set_len`]: BytesMut::set_len\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\n// Allocate buffer big enough for 10 bytes.\nlet mut buf = BytesMut::with_capacity(10);\n\n// Fill in the first 3 elements.\nlet uninit = buf.spare_capacity_mut();\nuninit[0].write(0);\nuninit[1].write(1);\nuninit[2].write(2);\n\n// Mark the first 3 bytes of the buffer as being initialized.\nunsafe {\n    buf.set_len(3);\n}\n\nassert_eq!(&buf[..], &[0, 1, 2]);\n```","links":{"BytesMut::set_len":"0:675:3201"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"1:31325:3196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:3126":{"id":"0:146:3126","crate_id":0,"name":"put_uint","span":{"filename":"src/buf/buf_mut.rs","begin":[953,4],"end":[960,5]},"visibility":"default","docs":"Writes an unsigned n-byte integer to `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_uint(0x010203, 3);\nassert_eq!(buf, b\"\\x01\\x02\\x03\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self` or if `nbytes` is greater than 8.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2825":{"id":"0:58:2825","crate_id":0,"name":"get_uint","span":{"filename":"src/buf/buf_impl.rs","begin":[856,4],"end":[858,5]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_uint(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3113:150":{"id":"1:3113:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32868:4479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1026:2842":{"id":"0:1026:2842","crate_id":0,"name":"get_int_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:970:2730":{"id":"0:970:2730","crate_id":0,"name":"get_u16","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3322:261-0:1099:2604":{"id":"a:1:3322:261-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2793-0:311:2603":{"id":"b:1:2793-0:311:2603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2795:3954"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1140":{"id":"0:1140","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3628:3325","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeToInclusive","id":"1:40388:228","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1141:970"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:362-0:1092:2601":{"id":"0:362-0:1092:2601","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[34,0],"end":[34,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::limit::Limit","name":"Limit","id":"0:1092:2601","glob":false}}},"0:672:3573":{"id":"0:672:3573","crate_id":0,"name":"truncate","span":{"filename":"src/bytes_mut.rs","begin":[432,4],"end":[437,5]},"visibility":"public","docs":"Shortens the buffer, keeping the first `len` bytes and dropping the\nrest.\n\nIf `len` is greater than the buffer's current length, this has no\neffect.\n\nExisting underlying capacity is preserved.\n\nThe [split_off](`Self::split_off()`) method can emulate `truncate`, but this causes the\nexcess bytes to be returned instead of dropped.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet mut buf = BytesMut::from(&b\"hello world\"[..]);\nbuf.truncate(5);\nassert_eq!(buf, b\"hello\"[..]);\n```","links":{"`Self::split_off()`":"0:669:3553"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13878:33311":{"id":"1:13878:33311","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:41129"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2724":{"id":"0:33:2724","crate_id":0,"name":"get_i8","span":{"filename":"src/buf/buf_impl.rs","begin":[327,4],"end":[334,5]},"visibility":"default","docs":"Gets a signed 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_i8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2839":{"id":"0:61:2839","crate_id":0,"name":"get_int","span":{"filename":"src/buf/buf_impl.rs","begin":[925,4],"end":[927,5]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_int(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`, or\nif `nbytes` is greater than 8.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:3107":{"id":"0:141:3107","crate_id":0,"name":"put_u128_le","span":{"filename":"src/buf/buf_mut.rs","begin":[830,4],"end":[832,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u128_le(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:3090":{"id":"0:136:3090","crate_id":0,"name":"put_u64_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[711,4],"end":[713,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to `self` in native-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u64_ne(0x0102030405060708);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\");\n} else {\n    assert_eq!(buf, b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:1226":{"id":"0:238:1226","crate_id":0,"name":"next","span":{"filename":"src/buf/iter.rs","begin":[110,4],"end":[119,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1135":{"id":"0:1135","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3628:3325","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeTo","id":"1:40348:227","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1136:970"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:358-0:24:2430":{"id":"0:358-0:24:2430","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[30,0],"end":[30,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::buf_impl::Buf","name":"Buf","id":"0:24:2430","glob":false}}},"0:1047:3081":{"id":"0:1047:3081","crate_id":0,"name":"put_u64","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13811:3792":{"id":"1:13811:3792","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13452:4403","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::split_whitespace":"1:13792:29261","str::rsplit":"1:13815:33281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44733:4182","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32944:249-0:311:2603":{"id":"a:1:32944:249-0:311:2603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13838:33289":{"id":"1:13838:33289","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13452:4403","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::rmatch_indices":"1:13840:33290"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44883:8639","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:3085":{"id":"0:135:3085","crate_id":0,"name":"put_u64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[684,4],"end":[686,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u64_le(0x0102030405060708);\nassert_eq!(buf, b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492":{"id":"0:492","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[744,0],"end":[748,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:493:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1042:3063":{"id":"0:1042:3063","crate_id":0,"name":"put_u32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1099:2604":{"id":"0:1099:2604","crate_id":0,"name":"Reader","span":{"filename":"src/buf/reader.rs","begin":[11,0],"end":[13,1]},"visibility":"public","docs":"A `Buf` adapter which implements `io::Read` for the inner value.\n\nThis struct is generally created by calling `reader()` on `Buf`. See\ndocumentation of [`reader()`](Buf::reader) for more\ndetails.","links":{"Buf::reader":"0:75:2594"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:267","a:1:32944:249-0:1099:2604","a:1:3322:261-0:1099:2604","a:1:3357:12105-0:1099:2604","a:1:33002:4481-0:1099:2604","a:1:42829:4530-0:1099:2604","a:1:42830:4529-0:1099:2604","b:1:2790-0:1099:2604","b:1:2793-0:1099:2604","b:1:3095-0:1099:2604","b:1:3099-0:1099:2604","b:1:3105-0:1099:2604","b:1:3110-0:1099:2604","b:1:3967-0:1099:2604","0:1102","0:272","0:275"]}}},"0:157:3168":{"id":"0:157:3168","crate_id":0,"name":"put_f64_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1258,4],"end":[1260,5]},"visibility":"default","docs":"Writes  an IEEE754 double-precision (8 bytes) floating point number to\n`self` in native-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f64_ne(1.2f64);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\");\n} else {\n    assert_eq!(buf, b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1145":{"id":"0:1145","crate_id":0,"name":null,"span":{"filename":"src/buf/writer.rs","begin":[10,9],"end":[10,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:1147:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3109:1858":{"id":"1:3109:1858","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:3244":{"id":"0:271:3244","crate_id":0,"name":"into_inner","span":{"filename":"src/buf/reader.rs","begin":[60,4],"end":[62,5]},"visibility":"public","docs":"Consumes this `Reader`, returning the underlying value.\n\n# Examples\n\n```rust\nuse bytes::Buf;\nuse std::io;\n\nlet mut buf = b\"hello world\".reader();\nlet mut dst = vec![];\n\nio::copy(&mut buf, &mut dst).unwrap();\n\nlet buf = buf.into_inner();\nassert_eq!(0, buf.remaining());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1056:3009":{"id":"0:1056:3009","crate_id":0,"name":"put_slice","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3105-0:1099:2604":{"id":"b:1:3105-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:3108:150","1:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:360-0:1077:2599":{"id":"0:360-0:1077:2599","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[32,0],"end":[32,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::chain::Chain","name":"Chain","id":"0:1077:2599","glob":false}}},"0:63:2845":{"id":"0:63:2845","crate_id":0,"name":"get_int_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[970,4],"end":[976,5]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in native-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x01\\x02\\x03 hello\",\n    false => b\"\\x03\\x02\\x01 hello\",\n};\nassert_eq!(0x010203, buf.get_int_ne(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`, or\nif `nbytes` is greater than 8.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:2594":{"id":"0:75:2594","crate_id":0,"name":"reader","span":{"filename":"src/buf/buf_impl.rs","begin":[1216,4],"end":[1221,5]},"visibility":"default","docs":"Creates an adaptor which implements the `Read` trait for `self`.\n\nThis function returns a new value which implements `Read` by adapting\nthe `Read` trait functions to the `Buf` trait functions. Given that\n`Buf` operations are infallible, none of the `Read` functions will\nreturn with `Err`.\n\n# Examples\n\n```\nuse bytes::{Bytes, Buf};\nuse std::io::Read;\n\nlet buf = Bytes::from(\"hello world\");\n\nlet mut reader = buf.reader();\nlet mut dst = [0; 1024];\n\nlet num = reader.read(&mut dst).unwrap();\n\nassert_eq!(11, num);\nassert_eq!(&dst[..11], &b\"hello world\"[..]);\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427:3562":{"id":"0:427:3562","crate_id":0,"name":"split_to","span":{"filename":"src/bytes.rs","begin":[437,4],"end":[459,5]},"visibility":"public","docs":"Splits the bytes into two at the given index.\n\nAfterwards `self` contains elements `[at, len)`, and the returned\n`Bytes` contains elements `[0, at)`.\n\nThis is an `O(1)` operation that just increases the reference count and\nsets a few indices.\n\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet mut a = Bytes::from(&b\"hello world\"[..]);\nlet b = a.split_to(5);\n\nassert_eq!(&a[..], b\" world\");\nassert_eq!(&b[..], b\"hello\");\n```\n\n# Panics\n\nPanics if `at > len`.","links":{},"attrs":["#[must_use = \"consider Bytes::advance if you don't need the other half\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["at",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3967-0:1099:2604":{"id":"b:1:3967-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1011:2760":{"id":"0:1011:2760","crate_id":0,"name":"get_u32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1139:969":{"id":"0:1139:969","crate_id":0,"name":"index","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"RangeToInclusive","id":"1:40388:228","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404:2435":{"id":"0:404:2435","crate_id":0,"name":"Bytes","span":{"filename":"src/bytes.rs","begin":[101,0],"end":[107,1]},"visibility":"public","docs":"A cheaply cloneable and sliceable chunk of contiguous memory.\n\n`Bytes` is an efficient container for storing and operating on contiguous\nslices of memory. It is intended for use primarily in networking code, but\ncould have applications elsewhere as well.\n\n`Bytes` values facilitate zero-copy network programming by allowing multiple\n`Bytes` objects to point to the same underlying memory.\n\n`Bytes` does not have a single implementation. It is an interface, whose\nexact behavior is implemented through dynamic dispatch in several underlying\nimplementations of `Bytes`.\n\nAll `Bytes` implementations must fulfill the following requirements:\n- They are cheaply cloneable and thereby shareable between an unlimited amount\n  of components, for example by modifying a reference count.\n- Instances can be sliced to refer to a subset of the original buffer.\n\n```\nuse bytes::Bytes;\n\nlet mut mem = Bytes::from(\"Hello world\");\nlet a = mem.slice(0..5);\n\nassert_eq!(a, \"Hello\");\n\nlet b = mem.split_to(6);\n\nassert_eq!(mem, \"world\");\nassert_eq!(b, \"Hello \");\n```\n\n# Memory layout\n\nThe `Bytes` struct itself is fairly small, limited to 4 `usize` fields used\nto track information about which segment of the underlying memory the\n`Bytes` handle has access to.\n\n`Bytes` keeps both a pointer to the shared state containing the full memory\nslice and a pointer to the start of the region visible by the handle.\n`Bytes` also tracks the length of its view into the memory.\n\n# Sharing\n\n`Bytes` contains a vtable, which allows implementations of `Bytes` to define\nhow sharing/cloning is implemented in detail.\nWhen `Bytes::clone()` is called, `Bytes` will call the vtable function for\ncloning the backing storage in order to share it behind multiple `Bytes`\ninstances.\n\nFor `Bytes` implementations which refer to constant memory (e.g. created\nvia `Bytes::from_static()`) the cloning implementation will be a no-op.\n\nFor `Bytes` implementations which point to a reference counted shared storage\n(e.g. an `Arc<[u8]>`), sharing will be implemented by increasing the\nreference count.\n\nDue to this mechanism, multiple `Bytes` instances may point to the same\nshared memory region.\nEach `Bytes` instance can point to different sections within that\nmemory region, and `Bytes` instances may or may not have overlapping views\ninto the memory.\n\nThe following diagram visualizes a scenario where 2 `Bytes` instances make\nuse of an `Arc`-based backing storage, and provide access to different views:\n\n```text\n\n   Arc ptrs                   ┌─────────┐\n   ________________________ / │ Bytes 2 │\n  /                           └─────────┘\n /          ┌───────────┐     |         |\n|_________/ │  Bytes 1  │     |         |\n|           └───────────┘     |         |\n|           |           | ___/ data     | tail\n|      data |      tail |/              |\nv           v           v               v\n┌─────┬─────┬───────────┬───────────────┬─────┐\n│ Arc │     │           │               │     │\n└─────┴─────┴───────────┴───────────────┴─────┘\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:415","a:1:3357:12105-0:404:2435","a:1:33002:4481-0:404:2435","a:1:42829:4530-0:404:2435","a:1:42830:4529-0:404:2435","b:1:2790-0:404:2435","b:1:2793-0:404:2435","b:1:2822-0:404:2435","b:1:3095-0:404:2435","b:1:3099-0:404:2435","b:1:3105-0:404:2435","b:1:3110-0:404:2435","b:1:3967-0:404:2435","b:4:782-0:404:2435","0:434","0:435","0:436","0:438","0:440","0:445","0:448","0:450","0:453","0:455","0:459","0:464","0:467","0:469","0:471","0:473","0:474","0:476","0:478","0:480","0:482","0:484","0:486","0:488","0:490","0:492","0:494","0:496","0:498","0:500","0:502","0:504","0:506","0:508","0:510","0:512","0:514","0:518","0:522","0:524","0:526","0:528","0:530","0:533","0:535","0:537","0:722","0:761","0:827","0:829","0:859","0:1148","0:1152"]}}},"0:748:985":{"id":"0:748:985","crate_id":0,"name":"into_iter","span":{"filename":"src/bytes_mut.rs","begin":[1350,4],"end":[1352,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8325:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:976:2756":{"id":"0:976:2756","crate_id":0,"name":"get_u32","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:981:2774":{"id":"0:981:2774","crate_id":0,"name":"get_i32_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:991:2839":{"id":"0:991:2839","crate_id":0,"name":"get_int","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:985:2791":{"id":"0:985:2791","crate_id":0,"name":"get_i64","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1009:2751":{"id":"0:1009:2751","crate_id":0,"name":"get_i16_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1015:2774":{"id":"0:1015:2774","crate_id":0,"name":"get_i32_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3110-0:1077:2599":{"id":"b:1:3110-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["1:3113:150","1:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42829:4530-0:404:2435":{"id":"a:1:42829:4530-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:470:1331":{"id":"0:470:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[677,4],"end":[679,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:1331":{"id":"0:489:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[733,4],"end":[735,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3105-0:639:2436":{"id":"b:1:3105-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3108:150","1:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:692":{"id":"0:692","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1121,0],"end":[1136,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3587:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:693:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3967-0:1142:2605":{"id":"b:1:3967-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:708:353":{"id":"0:708:353","crate_id":0,"name":"as_ref","span":{"filename":"src/bytes_mut.rs","begin":[1228,4],"end":[1230,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:806:1331":{"id":"0:806:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1635,4],"end":[1637,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:531:860":{"id":"0:531:860","crate_id":0,"name":"from","span":{"filename":"src/bytes.rs","begin":[885,4],"end":[912,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"resolved_path":{"name":"Box","id":"4:299:2609","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13861:33300":{"id":"1:13861:33300","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:12199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3322:261-0:1142:2605":{"id":"a:1:3322:261-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:32:2721":{"id":"0:32:2721","crate_id":0,"name":"get_u8","span":{"filename":"src/buf/buf_impl.rs","begin":[302,4],"end":[309,5]},"visibility":"default","docs":"Gets an unsigned 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_u8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:969:2724":{"id":"0:969:2724","crate_id":0,"name":"get_i8","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:988:2825":{"id":"0:988:2825","crate_id":0,"name":"get_uint","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/buf/vec_deque.rs","begin":[5,0],"end":[22,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["chunks_vectored","copy_to_bytes","get_f64_ne","get_u16_le","get_f32","get_u64_le","reader","get_i32_ne","get_i32_le","get_i32","get_u32_ne","get_uint_le","get_u32","get_i128_le","get_i128","get_u128_ne","copy_to_slice","get_u16_ne","get_u128","get_i128_ne","get_f32_ne","take","chain","get_int_ne","get_int_le","get_int","get_uint_ne","get_u32_le","get_i16_ne","get_i16_le","get_i16","get_u128_le","get_f64_le","get_f64","get_i64_ne","get_u16","get_i64","get_i8","get_u8","get_u64_ne","get_u64","get_i64_le","get_f32_le","get_uint","has_remaining"],"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::collections::VecDeque","id":"4:4473:281","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:339:2616","0:340:2618","0:341:2621"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:239:3270":{"id":"0:239:3270","crate_id":0,"name":"size_hint","span":{"filename":"src/buf/iter.rs","begin":[121,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3105-0:1092:2601":{"id":"b:1:3105-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3108:150","1:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:185:3009":{"id":"0:185:3009","crate_id":0,"name":"put_slice","span":{"filename":"src/buf/buf_mut.rs","begin":[1627,4],"end":[1629,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3105-0:1142:2605":{"id":"b:1:3105-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:3108:150","1:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1027:2845":{"id":"0:1027:2845","crate_id":0,"name":"get_int_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:785:29073":{"id":"4:785:29073","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:534:860":{"id":"0:534:860","crate_id":0,"name":"from","span":{"filename":"src/bytes.rs","begin":[931,4],"end":[934,5]},"visibility":"default","docs":"Convert self into `BytesMut`.\n\nIf `bytes` is unique for the entire original buffer, this will return a\n`BytesMut` with the contents of `bytes` without copying.\nIf `bytes` is not unique for the entire original buffer, this will make\na copy of `bytes` subset of the original buffer in a new `BytesMut`.\n\n# Examples\n\n```\nuse bytes::{Bytes, BytesMut};\n\nlet bytes = Bytes::from(b\"hello\".to_vec());\nassert_eq!(BytesMut::from(bytes), BytesMut::from(&b\"hello\"[..]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/buf/buf_mut.rs","begin":[1468,0],"end":[1470,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["put_uint_le","put_u32_le","put_i128_ne","put_i128_le","put_i128","put_u128_ne","put_u16_ne","put_u128","put_f64_le","put_f64","put_u8","put_u64_le","put_bytes","put_f32_le","put_slice","chain_mut","put_i16_ne","put_i16_le","put_i16","writer","put_u128_le","put_f64_ne","put_u16_le","put_i8","put_int_ne","put_i32_ne","put","put_i32","put_u32_ne","put_i32_le","put_uint","put_u32","put_uint_ne","put_int","put_int_le","limit","has_remaining_mut","put_i64_ne","put_u16","put_i64","put_u64_ne","put_i64_le","put_f32","put_u64","put_f32_ne"],"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"items":["0:1029:2950","0:1030:2995","0:1031:2969","0:1032:3009","0:1033:3024","0:1034:3028","0:1035:3032","0:1036:3037","0:1037:3045","0:1038:3049","0:1039:3052","0:1040:3055","0:1041:3059","0:1042:3063","0:1043:3068","0:1044:3071","0:1045:3074","0:1046:3077","0:1047:3081","0:1048:3085","0:1049:3090","0:1050:3093","0:1051:3096","0:1052:3099"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:827":{"id":"0:827","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1694,0],"end":[1698,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:828:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1148":{"id":"0:1148","crate_id":0,"name":null,"span":{"filename":"src/fmt/hex.rs","begin":[34,0],"end":[34,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:10666:4011","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1149:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1104:830":{"id":"0:1104:830","crate_id":0,"name":"fmt","span":{"filename":"src/buf/reader.rs","begin":[10,9],"end":[10,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:3103":{"id":"0:140:3103","crate_id":0,"name":"put_u128","span":{"filename":"src/buf/buf_mut.rs","begin":[807,4],"end":[809,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u128(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13851:33296":{"id":"1:13851:33296","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13481:12198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8333:985":{"id":"1:8333:985","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:711:654":{"id":"0:711:654","crate_id":0,"name":"deref","span":{"filename":"src/bytes_mut.rs","begin":[1237,4],"end":[1239,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:753:985":{"id":"0:753:985","crate_id":0,"name":"into_iter","span":{"filename":"src/bytes_mut.rs","begin":[1359,4],"end":[1361,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8325:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2842":{"id":"0:62:2842","crate_id":0,"name":"get_int_le","span":{"filename":"src/buf/buf_impl.rs","begin":[946,4],"end":[948,5]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_int_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`, or\nif `nbytes` is greater than 8.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:762:3910":{"id":"0:762:3910","crate_id":0,"name":"extend","span":{"filename":"src/bytes_mut.rs","begin":[1392,4],"end":[1399,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:2618":{"id":"0:83:2618","crate_id":0,"name":"chunk","span":{"filename":"src/buf/buf_impl.rs","begin":[1409,4],"end":[1411,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1025:2839":{"id":"0:1025:2839","crate_id":0,"name":"get_int","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:769:863":{"id":"0:769:863","crate_id":0,"name":"from_iter","span":{"filename":"src/bytes_mut.rs","begin":[1409,4],"end":[1411,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["into_iter",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"u8"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5717:34051":{"id":"4:5717:34051","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:709":{"id":"0:709","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1233,0],"end":[1240,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3558:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:710:263","0:711:654"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13790:8654":{"id":"1:13790:8654","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44709:8635","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13883:33314":{"id":"1:13883:33314","crate_id":1,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"1:13811:3792","`str::find`":"1:13804:4778"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42829:4530-0:1092:2601":{"id":"a:1:42829:4530-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:130:3068":{"id":"0:130:3068","crate_id":0,"name":"put_u32_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[565,4],"end":[567,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to `self` in native-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u32_ne(0x0809A0A1);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");\n} else {\n    assert_eq!(buf, b\"\\xA1\\xA0\\x09\\x08\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416:1212":{"id":"0:416:1212","crate_id":0,"name":"new","span":{"filename":"src/bytes.rs","begin":[138,4],"end":[143,5]},"visibility":"public","docs":"Creates a new empty `Bytes`.\n\nThis will not allocate and the returned `Bytes` handle will be empty.\n\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet b = Bytes::new();\nassert_eq!(&b[..], b\"\");\n```","links":{},"attrs":["#[inline]","#[cfg(not(all(loom, test)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2432":{"id":"0:0:2432","crate_id":0,"name":"bytes","span":{"filename":"src/lib.rs","begin":[1,0],"end":[165,1]},"visibility":"public","docs":"Provides abstractions for working with bytes.\n\nThe `bytes` crate provides an efficient byte buffer structure\n([`Bytes`]) and traits for working with buffer\nimplementations ([`Buf`], [`BufMut`]).\n\n# `Bytes`\n\n`Bytes` is an efficient container for storing and operating on contiguous\nslices of memory. It is intended for use primarily in networking code, but\ncould have applications elsewhere as well.\n\n`Bytes` values facilitate zero-copy network programming by allowing multiple\n`Bytes` objects to point to the same underlying memory. This is managed by\nusing a reference count to track when the memory is no longer needed and can\nbe freed.\n\nA `Bytes` handle can be created directly from an existing byte store (such as `&[u8]`\nor `Vec<u8>`), but usually a `BytesMut` is used first and written to. For\nexample:\n\n```rust\nuse bytes::{BytesMut, BufMut};\n\nlet mut buf = BytesMut::with_capacity(1024);\nbuf.put(&b\"hello world\"[..]);\nbuf.put_u16(1234);\n\nlet a = buf.split();\nassert_eq!(a, b\"hello world\\x04\\xD2\"[..]);\n\nbuf.put(&b\"goodbye world\"[..]);\n\nlet b = buf.split();\nassert_eq!(b, b\"goodbye world\"[..]);\n\nassert_eq!(buf.capacity(), 998);\n```\n\nIn the above example, only a single buffer of 1024 is allocated. The handles\n`a` and `b` will share the underlying buffer and maintain indices tracking\nthe view into the buffer represented by the handle.\n\nSee the [struct docs](`Bytes`) for more details.\n\n# `Buf`, `BufMut`\n\nThese two traits provide read and write access to buffers. The underlying\nstorage may or may not be in contiguous memory. For example, `Bytes` is a\nbuffer that guarantees contiguous memory, but a [rope] stores the bytes in\ndisjoint chunks. `Buf` and `BufMut` maintain cursors tracking the current\nposition in the underlying byte storage. When bytes are read or written, the\ncursor is advanced.\n\n[rope]: https://en.wikipedia.org/wiki/Rope_(data_structure)\n\n## Relation with `Read` and `Write`\n\nAt first glance, it may seem that `Buf` and `BufMut` overlap in\nfunctionality with [`std::io::Read`] and [`std::io::Write`]. However, they\nserve different purposes. A buffer is the value that is provided as an\nargument to `Read::read` and `Write::write`. `Read` and `Write` may then\nperform a syscall, which has the potential of failing. Operations on `Buf`\nand `BufMut` are infallible.","links":{"`BufMut`":"0:111:2431","`std::io::Read`":"5:3622:3298","`Bytes`":"0:404:2435","`std::io::Write`":"5:3679:3404","`Buf`":"0:24:2430"},"attrs":["#![allow(unknown_lints, unexpected_cfgs)]","#![warn(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:6:2429","0:369-0:24:2430","0:370-0:111:2431","0:899-0:404:2435","0:900-0:639:2436"],"is_stripped":false}}},"0:50:2794":{"id":"0:50:2794","crate_id":0,"name":"get_i64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[687,4],"end":[689,5]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:12105-0:1105:2602":{"id":"a:1:3357:12105-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:815":{"id":"0:815","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1661,0],"end":[1668,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:818:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:2783":{"id":"0:47:2783","crate_id":0,"name":"get_u64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[624,4],"end":[626,5]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:339:2616":{"id":"0:339:2616","crate_id":0,"name":"remaining","span":{"filename":"src/buf/vec_deque.rs","begin":[6,4],"end":[8,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:712":{"id":"0:712","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1242,0],"end":[1247,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:3066:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:713:3953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42830:4529-0:404:2435":{"id":"a:1:42830:4529-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1129:969":{"id":"0:1129:969","crate_id":0,"name":"index","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"RangeInclusive","id":"1:40368:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:521:1331":{"id":"0:521:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[823,4],"end":[825,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:752:2600":{"id":"0:752:2600","crate_id":0,"name":"IntoIter","span":{"filename":"src/bytes_mut.rs","begin":[1357,4],"end":[1357,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:11751:3597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"0:501:1331":{"id":"0:501:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[769,4],"end":[771,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:443:2621":{"id":"0:443:2621","crate_id":0,"name":"advance","span":{"filename":"src/bytes.rs","begin":[595,4],"end":[606,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465:863":{"id":"0:465:863","crate_id":0,"name":"from_iter","span":{"filename":"src/bytes.rs","begin":[663,4],"end":[665,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["into_iter",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u8"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8331:185":{"id":"1:8331:185","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8498:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"a:1:42830:4529-0:1092:2601":{"id":"a:1:42830:4529-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:145:3121":{"id":"0:145:3121","crate_id":0,"name":"put_i128_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[930,4],"end":[932,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to `self` in native-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i128_ne(0x01020304050607080910111213141516);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");\n} else {\n    assert_eq!(buf, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1014:2771":{"id":"0:1014:2771","crate_id":0,"name":"get_i32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:804:725":{"id":"0:804:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1629,4],"end":[1631,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13849:33294":{"id":"1:13849:33294","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:458:985":{"id":"0:458:985","crate_id":0,"name":"into_iter","span":{"filename":"src/bytes.rs","begin":[648,4],"end":[650,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8325:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13795:33278":{"id":"1:13795:33278","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44997:8643","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[670,0],"end":[674,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:468:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:33002:4481-0:639:2436":{"id":"a:1:33002:4481-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:522":{"id":"0:522","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[830,0],"end":[835,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:523:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:807":{"id":"0:807","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1640,0],"end":[1644,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::string::String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:808:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3969:1871":{"id":"1:3969:1871","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40445:8337","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/buf/chain.rs","begin":[229,0],"end":[240,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["0:224:185","0:225:2600","0:226:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1128:211":{"id":"0:1128:211","crate_id":0,"name":"Output","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13845:33292":{"id":"1:13845:33292","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2806":{"id":"0:53:2806","crate_id":0,"name":"get_u128_le","span":{"filename":"src/buf/buf_impl.rs","begin":[750,4],"end":[752,5]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:404:2435":{"id":"b:1:3099-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:235":{"id":"0:235","crate_id":0,"name":null,"span":{"filename":"src/buf/iter.rs","begin":[107,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["map","is_sorted_by","sum","min_by","find_map","try_fold","by_ref","scan","filter_map","nth","min","all","is_sorted_by_key","product","rev","try_find","try_for_each","chain","try_collect","flat_map","any","enumerate","step_by","le","__iterator_get_unchecked","cmp_by","unzip","partial_cmp","rposition","lt","fold","ge","collect_into","flatten","peekable","intersperse","size_hint","gt","partial_cmp_by","copied","cloned","max_by_key","zip","reduce","partition","map_windows","count","skip_while","intersperse_with","next_chunk","eq_by","cmp","cycle","max_by","try_reduce","position","take","partition_in_place","fuse","take_while","for_each","last","skip","is_sorted","array_chunks","min_by_key","find","ne","is_partitioned","inspect","collect","map_while","max","filter","eq","advance_by"],"trait":{"name":"Iterator","id":"1:8498:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:237:185","0:238:1226","0:239:3270"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:2867":{"id":"0:68:2867","crate_id":0,"name":"get_f64_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1082,4],"end":[1084,5]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F hello\"[..];\nassert_eq!(1.2f64, buf.get_f64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:495:725":{"id":"0:495:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[751,4],"end":[753,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:2995":{"id":"0:169:2995","crate_id":0,"name":"chunk_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1483,4],"end":[1485,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:663:1212":{"id":"0:663:1212","crate_id":0,"name":"new","span":{"filename":"src/bytes_mut.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Creates a new `BytesMut` with default capacity.\n\nResulting object has length 0 and unspecified capacity.\nThis function does not allocate.\n\n# Examples\n\n```\nuse bytes::{BytesMut, BufMut};\n\nlet mut bytes = BytesMut::new();\n\nassert_eq!(0, bytes.len());\n\nbytes.reserve(2);\nbytes.put_slice(b\"xy\");\n\nassert_eq!(&b\"xy\"[..], &bytes[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:3018":{"id":"0:178:3018","crate_id":0,"name":"put_bytes","span":{"filename":"src/buf/buf_mut.rs","begin":[1559,4],"end":[1569,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["val",{"primitive":"u8"}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3967-0:639:2436":{"id":"b:1:3967-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:798:1331":{"id":"0:798:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1611,4],"end":[1613,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:698:2880":{"id":"0:698:2880","crate_id":0,"name":"copy_to_bytes","span":{"filename":"src/bytes_mut.rs","begin":[1164,4],"end":[1166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[943,0],"end":[948,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::vec::Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:538:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/buf/reader.rs","begin":[65,0],"end":[72,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["bytes","chain","take","read_buf","is_read_vectored","read_to_string","read_buf_exact","read_to_end","by_ref","read_exact","read_vectored"],"trait":{"name":"Read","id":"5:3622:3298","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:274:3299"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:186:3018":{"id":"0:186:3018","crate_id":0,"name":"put_bytes","span":{"filename":"src/buf/buf_mut.rs","begin":[1632,4],"end":[1636,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["val",{"primitive":"u8"}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1032:3009":{"id":"0:1032:3009","crate_id":0,"name":"put_slice","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33002:4481-0:1092:2601":{"id":"a:1:33002:4481-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32945:251-0:311:2603":{"id":"a:1:32945:251-0:311:2603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:323:3020":{"id":"0:323:3020","crate_id":0,"name":"as_mut_ptr","span":{"filename":"src/buf/uninit_slice.rs","begin":[161,4],"end":[163,5]},"visibility":"public","docs":"Return a raw pointer to the slice's buffer.\n\n# Safety\n\nThe caller **must not** read from the referenced memory and **must not**\nwrite **uninitialized** bytes to the slice either.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut data = [0, 1, 2];\nlet mut slice = &mut data[..];\nlet ptr = BufMut::chunk_mut(&mut slice).as_mut_ptr();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:457:2600":{"id":"0:457:2600","crate_id":0,"name":"IntoIter","span":{"filename":"src/bytes.rs","begin":[646,4],"end":[646,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:726":{"id":"0:726","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1280,0],"end":[1284,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:727:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42830:4529-0:1099:2604":{"id":"a:1:42830:4529-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:138:3096":{"id":"0:138:3096","crate_id":0,"name":"put_i64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[757,4],"end":[759,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i64_le(0x0102030405060708);\nassert_eq!(buf, b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:3224":{"id":"0:201:3224","crate_id":0,"name":"first_ref","span":{"filename":"src/buf/chain.rs","begin":[53,4],"end":[55,5]},"visibility":"public","docs":"Gets a reference to the first underlying `Buf`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet buf = (&b\"hello\"[..])\n    .chain(&b\"world\"[..]);\n\nassert_eq!(buf.first_ref()[..], b\"hello\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:899-0:404:2435":{"id":"0:899-0:404:2435","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[87,0],"end":[87,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::bytes::Bytes","name":"Bytes","id":"0:404:2435","glob":false}}},"0:463:985":{"id":"0:463:985","crate_id":0,"name":"into_iter","span":{"filename":"src/bytes.rs","begin":[657,4],"end":[659,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8325:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13876:33309":{"id":"1:13876:33309","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:41129"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:811":{"id":"0:811","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1652,0],"end":[1659,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:814:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:741:2016":{"id":"0:741:2016","crate_id":0,"name":"write_str","span":{"filename":"src/bytes_mut.rs","begin":[1325,4],"end":[1332,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:757":{"id":"0:757","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1382,0],"end":[1389,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one_unchecked","extend_one"],"trait":{"name":"Extend","id":"1:8334:3957","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:759:3910"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:435":{"id":"0:435","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[567,0],"end":[567,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:113:2969":{"id":"0:113:2969","crate_id":0,"name":"advance_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[107,4],"end":[107,49]},"visibility":"default","docs":"Advance the internal cursor of the BufMut\n\nThe next call to `chunk_mut` will return a slice starting `cnt` bytes\nfurther into the underlying buffer.\n\n# Safety\n\nThe caller must ensure that the next `cnt` bytes of `chunk` are\ninitialized.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = Vec::with_capacity(16);\n\n// Write some data\nbuf.chunk_mut()[0..2].copy_from_slice(b\"he\");\nunsafe { buf.advance_mut(2) };\n\n// write more bytes\nbuf.chunk_mut()[0..3].copy_from_slice(b\"llo\");\n\nunsafe { buf.advance_mut(3); }\n\nassert_eq!(5, buf.len());\nassert_eq!(buf, b\"hello\");\n```\n\n# Panics\n\nThis function **may** panic if `cnt > self.remaining_mut()`.\n\n# Implementer notes\n\nIt is recommended for implementations of `advance_mut` to panic if\n`cnt > self.remaining_mut()`. If the implementation does not panic,\nthe call must behave as if `cnt == self.remaining_mut()`.\n\nA call with `cnt == 0` should never panic and be a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:705:3009":{"id":"0:705:3009","crate_id":0,"name":"put_slice","span":{"filename":"src/bytes_mut.rs","begin":[1208,4],"end":[1210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13818:33282":{"id":"1:13818:33282","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13452:4403","str::split":"1:13811:3792","prim@char":"5:12642:492","`DoubleEndedIterator`":"1:8393:134","str::rsplit_terminator":"1:13820:33283"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44783:8637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:296:2618":{"id":"0:296:2618","crate_id":0,"name":"chunk","span":{"filename":"src/buf/take.rs","begin":[137,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:464":{"id":"0:464","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[662,0],"end":[666,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8314:158","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:465:863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:224:185":{"id":"0:224:185","crate_id":0,"name":"Item","span":{"filename":"src/buf/chain.rs","begin":[234,4],"end":[234,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"u8"}}}},"1:13794:4971":{"id":"1:13794:4971","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44987:4181","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182:2995":{"id":"0:182:2995","crate_id":0,"name":"chunk_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1593,4],"end":[1606,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:3141":{"id":"0:150:3141","crate_id":0,"name":"put_int_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1069,4],"end":[1077,5]},"visibility":"default","docs":"Writes low `nbytes` of a signed integer to `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_int_le(0x0504010203, 3);\nassert_eq!(buf, b\"\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self` or if `nbytes` is greater than 8.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439:496":{"id":"0:439:496","crate_id":0,"name":"clone","span":{"filename":"src/bytes.rs","begin":[578,4],"end":[580,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2779":{"id":"0:46:2779","crate_id":0,"name":"get_u64","span":{"filename":"src/buf/buf_impl.rs","begin":[604,4],"end":[606,5]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1142:2605":{"id":"0:1142:2605","crate_id":0,"name":"Writer","span":{"filename":"src/buf/writer.rs","begin":[11,0],"end":[13,1]},"visibility":"public","docs":"A `BufMut` adapter which implements `io::Write` for the inner value.\n\nThis struct is generally created by calling `writer()` on `BufMut`. See\ndocumentation of [`writer()`](BufMut::writer) for more\ndetails.","links":{"BufMut::writer":"0:159:2598"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:349","a:1:32944:249-0:1142:2605","a:1:3322:261-0:1142:2605","a:1:3357:12105-0:1142:2605","a:1:33002:4481-0:1142:2605","a:1:42829:4530-0:1142:2605","a:1:42830:4529-0:1142:2605","b:1:2790-0:1142:2605","b:1:2793-0:1142:2605","b:1:3095-0:1142:2605","b:1:3099-0:1142:2605","b:1:3105-0:1142:2605","b:1:3110-0:1142:2605","b:1:3967-0:1142:2605","0:1145","0:354"]}}},"0:438":{"id":"0:438","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[576,0],"end":[581,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:439:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13778:32354":{"id":"1:13778:32354","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2829":{"id":"0:1023:2829","crate_id":0,"name":"get_uint_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13785:3195":{"id":"1:13785:3195","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13784:33274","str::split_at_mut_checked":"1:13787:33276"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1034:3028":{"id":"0:1034:3028","crate_id":0,"name":"put_i8","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13786:33275":{"id":"1:13786:33275","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13787:33276"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1008:2748":{"id":"0:1008:2748","crate_id":0,"name":"get_i16_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:975:2751":{"id":"0:975:2751","crate_id":0,"name":"get_i16_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:989:2829":{"id":"0:989:2829","crate_id":0,"name":"get_uint_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:800:725":{"id":"0:800:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1617,4],"end":[1619,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/buf/reader.rs","begin":[74,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["split","read_line","skip_until","has_data_left","read_until","lines"],"trait":{"name":"BufRead","id":"5:3707:3300","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:277:3301","0:278:3302"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3095-0:1105:2602":{"id":"b:1:3095-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3098:3501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1089":{"id":"0:1089","crate_id":0,"name":null,"span":{"filename":"src/buf/iter.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1091:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2822-0:639:2436":{"id":"b:1:2822-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2820:4222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2824:29072"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:321:2715":{"id":"0:321:2715","crate_id":0,"name":"copy_from_slice","span":{"filename":"src/buf/uninit_slice.rs","begin":[134,4],"end":[142,5]},"visibility":"public","docs":"Copies bytes  from `src` into `self`.\n\nThe length of `src` must be the same as `self`.\n\n# Panics\n\nThe function panics if `src` has a different length than `self`.\n\n# Examples\n\n```\nuse bytes::buf::UninitSlice;\n\nlet mut data = [b'f', b'o', b'o'];\nlet slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };\n\nslice.copy_from_slice(b\"bar\");\n\nassert_eq!(b\"bar\", &data[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:2995":{"id":"0:175:2995","crate_id":0,"name":"chunk_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1530,4],"end":[1532,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:786:1331":{"id":"0:786:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1575,4],"end":[1577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1004:2730":{"id":"0:1004:2730","crate_id":0,"name":"get_u16","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1001:2622":{"id":"0:1001:2622","crate_id":0,"name":"copy_to_slice","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/buf/writer.rs","begin":[19,0],"end":[75,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:351:2917","0:352:2625","0:353:3244"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:288:3244":{"id":"0:288:3244","crate_id":0,"name":"into_inner","span":{"filename":"src/buf/take.rs","begin":[39,4],"end":[41,5]},"visibility":"public","docs":"Consumes this `Take`, returning the underlying value.\n\n# Examples\n\n```rust\nuse bytes::{Buf, BufMut};\n\nlet mut buf = b\"hello world\".take(2);\nlet mut dst = vec![];\n\ndst.put(&mut buf);\nassert_eq!(*dst, b\"he\"[..]);\n\nlet mut buf = buf.into_inner();\n\ndst.clear();\ndst.put(&mut buf);\nassert_eq!(*dst, b\"llo world\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2790-0:1086:2600":{"id":"b:1:2790-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2792:3407"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3967-0:311:2603":{"id":"b:1:3967-0:311:2603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2790-0:404:2435":{"id":"b:1:2790-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2792:3407"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1073:3090":{"id":"0:1073:3090","crate_id":0,"name":"put_u64_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:665:2690":{"id":"0:665:2690","crate_id":0,"name":"is_empty","span":{"filename":"src/bytes_mut.rs","begin":[202,4],"end":[204,5]},"visibility":"public","docs":"Returns true if the `BytesMut` has a length of 0.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet b = BytesMut::with_capacity(64);\nassert!(b.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13828:33286":{"id":"1:13828:33286","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1066:3063":{"id":"0:1066:3063","crate_id":0,"name":"put_u32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2621":{"id":"0:90:2621","crate_id":0,"name":"advance","span":{"filename":"src/buf/buf_impl.rs","begin":[1448,4],"end":[1461,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:2621":{"id":"0:297:2621","crate_id":0,"name":"advance","span":{"filename":"src/buf/take.rs","begin":[142,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1018:2788":{"id":"0:1018:2788","crate_id":0,"name":"get_u64_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:2950":{"id":"0:180:2950","crate_id":0,"name":"remaining_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1574,4],"end":[1577,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32944:249-0:1077:2599":{"id":"a:1:32944:249-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/buf/reader.rs","begin":[19,0],"end":[63,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:269:2917","0:270:2625","0:271:3244"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:527:860":{"id":"0:527:860","crate_id":0,"name":"from","span":{"filename":"src/bytes.rs","begin":[844,4],"end":[846,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2790-0:1105:2602":{"id":"b:1:2790-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2792:3407"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1150":{"id":"0:1150","crate_id":0,"name":null,"span":{"filename":"src/fmt/hex.rs","begin":[35,0],"end":[35,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:10666:4011","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1151:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:277:3301":{"id":"0:277:3301","crate_id":0,"name":"fill_buf","span":{"filename":"src/buf/reader.rs","begin":[75,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"5:3095:238","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:418:3477":{"id":"0:418:3477","crate_id":0,"name":"from_static","span":{"filename":"src/bytes.rs","begin":[166,4],"end":[173,5]},"visibility":"public","docs":"Creates a new `Bytes` from a static slice.\n\nThe returned `Bytes` will point directly to the static slice. There is\nno allocating or copying.\n\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet b = Bytes::from_static(b\"hello\");\nassert_eq!(&b[..], b\"hello\");\n```","links":{},"attrs":["#[inline]","#[cfg(not(all(loom, test)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:488":{"id":"0:488","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[732,0],"end":[736,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:489:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1119:969":{"id":"0:1119:969","crate_id":0,"name":"index","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"RangeFrom","id":"1:40330:224","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:673:3579":{"id":"0:673:3579","crate_id":0,"name":"clear","span":{"filename":"src/bytes_mut.rs","begin":[450,4],"end":[453,5]},"visibility":"public","docs":"Clears the buffer, removing all data. Existing capacity is preserved.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet mut buf = BytesMut::from(&b\"hello world\"[..]);\nbuf.clear();\nassert!(buf.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:977:2760":{"id":"0:977:2760","crate_id":0,"name":"get_u32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:809":{"id":"0:809","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1646,0],"end":[1650,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::string::String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:810:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:250:3244":{"id":"0:250:3244","crate_id":0,"name":"into_inner","span":{"filename":"src/buf/limit.rs","begin":[20,4],"end":[22,5]},"visibility":"public","docs":"Consumes this `Limit`, returning the underlying value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:968:2721":{"id":"0:968:2721","crate_id":0,"name":"get_u8","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42829:4530-0:1105:2602":{"id":"a:1:42829:4530-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:697:2621":{"id":"0:697:2621","crate_id":0,"name":"advance","span":{"filename":"src/bytes_mut.rs","begin":[1150,4],"end":[1162,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/buf/buf_mut.rs","begin":[1472,0],"end":[1474,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["put_uint_le","put_u32_le","put_i128_ne","put_i128_le","put_i128","put_u128_ne","put_u16_ne","put_u128","put_f64_le","put_f64","put_u8","put_u64_le","put_bytes","put_f32_le","put_slice","chain_mut","put_i16_ne","put_i16_le","put_i16","writer","put_u128_le","put_f64_ne","put_u16_le","put_i8","put_int_ne","put_i32_ne","put","put_i32","put_u32_ne","put_i32_le","put_uint","put_u32","put_uint_ne","put_int","put_int_le","limit","has_remaining_mut","put_i64_ne","put_u16","put_i64","put_u64_ne","put_i64_le","put_f32","put_u64","put_f32_ne"],"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:299:2609","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1053:2950","0:1054:2995","0:1055:2969","0:1056:3009","0:1057:3024","0:1058:3028","0:1059:3032","0:1060:3037","0:1061:3045","0:1062:3049","0:1063:3052","0:1064:3055","0:1065:3059","0:1066:3063","0:1067:3068","0:1068:3071","0:1069:3074","0:1070:3077","0:1071:3081","0:1072:3085","0:1073:3090","0:1074:3093","0:1075:3096","0:1076:3099"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3105-0:1077:2599":{"id":"b:1:3105-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["1:3108:150","1:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:966:2691":{"id":"0:966:2691","crate_id":0,"name":"has_remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1120":{"id":"0:1120","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3628:3325","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFrom","id":"1:40330:224","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1121:970"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:354":{"id":"0:354","crate_id":0,"name":null,"span":{"filename":"src/buf/writer.rs","begin":[77,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_fmt","write_all_vectored","write_vectored","by_ref","write_all","is_write_vectored"],"trait":{"name":"Write","id":"5:3679:3404","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:356:3363","0:357:3405"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:508":{"id":"0:508","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[792,0],"end":[796,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"items":["0:509:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1149:830":{"id":"0:1149:830","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/hex.rs","begin":[34,0],"end":[34,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2793-0:639:2436":{"id":"b:1:2793-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2795:3954"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3095-0:639:2436":{"id":"b:1:3095-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3098:3501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:980:2771":{"id":"0:980:2771","crate_id":0,"name":"get_i32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:734:902":{"id":"0:734:902","crate_id":0,"name":"hash","span":{"filename":"src/bytes_mut.rs","begin":[1302,4],"end":[1308,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"H"},"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"1:10883:169","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13780:32355":{"id":"1:13780:32355","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13858:33299":{"id":"1:13858:33299","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:12199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2745":{"id":"0:37:2745","crate_id":0,"name":"get_i16","span":{"filename":"src/buf/buf_impl.rs","begin":[415,4],"end":[417,5]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_i16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:814:725":{"id":"0:814:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1656,4],"end":[1658,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:802:1331":{"id":"0:802:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1623,4],"end":[1625,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/buf/chain.rs","begin":[35,0],"end":[128,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["0:201:3224","0:202:3230","0:203:3233","0:204:3238","0:205:3244"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:498":{"id":"0:498","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[762,0],"end":[766,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:499:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3357:12105-0:311:2603":{"id":"a:1:3357:12105-0:311:2603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:85:2622":{"id":"0:85:2622","crate_id":0,"name":"copy_to_slice","span":{"filename":"src/buf/buf_impl.rs","begin":[1423,4],"end":[1430,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2730":{"id":"0:34:2730","crate_id":0,"name":"get_u16","span":{"filename":"src/buf/buf_impl.rs","begin":[352,4],"end":[354,5]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_u16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:2969":{"id":"0:220:2969","crate_id":0,"name":"advance_mut","span":{"filename":"src/buf/chain.rs","begin":[210,4],"end":[226,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2688":{"id":"0:27:2688","crate_id":0,"name":"chunks_vectored","span":{"filename":"src/buf/buf_impl.rs","begin":[183,4],"end":[194,5]},"visibility":"default","docs":"Fills `dst` with potentially multiple slices starting at `self`'s\ncurrent position.\n\nIf the `Buf` is backed by disjoint slices of bytes, `chunk_vectored` enables\nfetching more than one slice at once. `dst` is a slice of `IoSlice`\nreferences, enabling the slice to be directly used with [`writev`]\nwithout any further conversion. The sum of the lengths of all the\nbuffers in `dst` will be less than or equal to `Buf::remaining()`.\n\nThe entries in `dst` will be overwritten, but the data **contained** by\nthe slices **will not** be modified. If `chunk_vectored` does not fill every\nentry in `dst`, then `dst` is guaranteed to contain all remaining slices\nin `self.\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Implementer notes\n\nThis function should never panic. Once the end of the buffer is reached,\ni.e., `Buf::remaining` returns 0, calls to `chunk_vectored` must return 0\nwithout mutating `dst`.\n\nImplementations should also take care to properly handle being called\nwith `dst` being a zero length slice.\n\n[`writev`]: http://man7.org/linux/man-pages/man2/readv.2.html","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"5:8578:2607","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1086:2600":{"id":"0:1086:2600","crate_id":0,"name":"IntoIter","span":{"filename":"src/buf/iter.rs","begin":[21,0],"end":[23,1]},"visibility":"public","docs":"Iterator over the bytes contained by the buffer.\n\n# Examples\n\nBasic usage:\n\n```\nuse bytes::Bytes;\n\nlet buf = Bytes::from(&b\"abc\"[..]);\nlet mut iter = buf.into_iter();\n\nassert_eq!(iter.next(), Some(b'a'));\nassert_eq!(iter.next(), Some(b'b'));\nassert_eq!(iter.next(), Some(b'c'));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:229","a:1:32944:249-0:1086:2600","a:1:3322:261-0:1086:2600","a:1:3357:12105-0:1086:2600","a:1:33002:4481-0:1086:2600","a:1:42829:4530-0:1086:2600","a:1:42830:4529-0:1086:2600","b:1:2790-0:1086:2600","b:1:2793-0:1086:2600","b:1:3095-0:1086:2600","b:1:3099-0:1086:2600","b:1:3105-0:1086:2600","b:1:3110-0:1086:2600","b:1:3967-0:1086:2600","b:1:8329-0:1086:2600","0:1089","0:235","0:240"]}}},"b:1:3967-0:1092:2601":{"id":"b:1:3967-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:38:2748":{"id":"0:38:2748","crate_id":0,"name":"get_i16_le","span":{"filename":"src/buf/buf_impl.rs","begin":[435,4],"end":[437,5]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_i16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:2625":{"id":"0:270:2625","crate_id":0,"name":"get_mut","span":{"filename":"src/buf/reader.rs","begin":[40,4],"end":[42,5]},"visibility":"public","docs":"Gets a mutable reference to the underlying `Buf`.\n\nIt is inadvisable to directly read from the underlying `Buf`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"B"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:2917":{"id":"0:289:2917","crate_id":0,"name":"get_ref","span":{"filename":"src/buf/take.rs","begin":[56,4],"end":[58,5]},"visibility":"public","docs":"Gets a reference to the underlying `Buf`.\n\nIt is inadvisable to directly read from the underlying `Buf`.\n\n# Examples\n\n```rust\nuse bytes::Buf;\n\nlet buf = b\"hello world\".take(2);\n\nassert_eq!(11, buf.get_ref().remaining());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1125":{"id":"0:1125","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3628:3325","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFull","id":"1:40293:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1126:970"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1065:3059":{"id":"0:1065:3059","crate_id":0,"name":"put_u32","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:3032":{"id":"0:122:3032","crate_id":0,"name":"put_u16","span":{"filename":"src/buf/buf_mut.rs","begin":[369,4],"end":[371,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u16(0x0809);\nassert_eq!(buf, b\"\\x08\\x09\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173":{"id":"0:173","crate_id":0,"name":null,"span":{"filename":"src/buf/buf_mut.rs","begin":[1523,0],"end":[1570,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["put_uint_le","put_u32_le","put_i128_ne","put_i128_le","put_i128","put_u128_ne","put_u16_ne","put_u128","put_f64_le","put_f64","put_u8","put_u64_le","put_bytes","put_f32_le","put_slice","chain_mut","put_i16_ne","put_i16_le","put_i16","writer","put_u128_le","put_f64_ne","put_u16_le","put_i8","put_int_ne","put_i32_ne","put","put_i32","put_u32_ne","put_i32_le","put_uint","put_u32","put_uint_ne","put_int","put_int_le","limit","has_remaining_mut","put_i64_ne","put_u16","put_i64","put_u64_ne","put_i64_le","put_f32","put_u64","put_f32_ne"],"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"core::mem::MaybeUninit","id":"1:31325:3196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"items":["0:174:2950","0:175:2995","0:176:2969","0:177:3009","0:178:3018"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:33002:4481-0:1086:2600":{"id":"a:1:33002:4481-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3105-0:1105:2602":{"id":"b:1:3105-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3108:150","1:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:429:3579":{"id":"0:429:3579","crate_id":0,"name":"clear","span":{"filename":"src/bytes.rs","begin":[507,4],"end":[509,5]},"visibility":"public","docs":"Clears the buffer, removing all data.\n\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet mut buf = Bytes::from(&b\"hello world\"[..]);\nbuf.clear();\nassert!(buf.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471":{"id":"0:471","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[682,0],"end":[686,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","min","max"],"trait":{"name":"Ord","id":"1:2908:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:472:504"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3099-0:1086:2600":{"id":"b:1:3099-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:485:1331":{"id":"0:485:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[721,4],"end":[723,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:784:725":{"id":"0:784:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1569,4],"end":[1571,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33002:4481-0:1099:2604":{"id":"a:1:33002:4481-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3098:3501":{"id":"1:3098:3501","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3072:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:451:902":{"id":"0:451:902","crate_id":0,"name":"hash","span":{"filename":"src/bytes.rs","begin":[630,4],"end":[635,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"H"},"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"1:10883:169","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:793":{"id":"0:793","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1598,0],"end":[1602,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:794:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:792:725":{"id":"0:792:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1593,4],"end":[1595,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/buf/iter.rs","begin":[127,0],"end":[127,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8446:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1112":{"id":"0:1112","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:40276:3324","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1113:211","0:1114:969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:33002:4481-0:1105:2602":{"id":"a:1:33002:4481-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:730":{"id":"0:730","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1292,0],"end":[1292,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2877:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:369-0:24:2430":{"id":"0:369-0:24:2430","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[81,21],"end":[81,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::buf::Buf","name":"Buf","id":"0:24:2430","glob":false}}},"1:13833:4066":{"id":"1:13833:4066","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13452:4403","`DoubleEndedIterator`":"1:8393:134","prim@char":"5:12642:492","str::rmatches":"1:13835:33288"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44937:8641","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:351:2917":{"id":"0:351:2917","crate_id":0,"name":"get_ref","span":{"filename":"src/buf/writer.rs","begin":[33,4],"end":[35,5]},"visibility":"public","docs":"Gets a reference to the underlying `BufMut`.\n\nIt is inadvisable to directly write to the underlying `BufMut`.\n\n# Examples\n\n```rust\nuse bytes::BufMut;\n\nlet buf = Vec::with_capacity(1024).writer();\n\nassert_eq!(1024, buf.get_ref().capacity());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"B"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/buf/buf_impl.rs","begin":[1398,0],"end":[1400,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["chunks_vectored","copy_to_bytes","get_f64_ne","get_u16_le","get_f32","get_u64_le","reader","get_i32_ne","get_i32_le","get_i32","get_u32_ne","get_uint_le","get_u32","get_i128_le","get_i128","get_u128_ne","copy_to_slice","get_u16_ne","get_u128","get_i128_ne","get_f32_ne","take","chain","get_int_ne","get_int_le","get_int","get_uint_ne","get_u32_le","get_i16_ne","get_i16_le","get_i16","get_u128_le","get_f64_le","get_f64","get_i64_ne","get_u16","get_i64","get_i8","get_u8","get_u64_ne","get_u64","get_i64_le","get_f32_le","get_uint","has_remaining"],"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:299:2609","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:995:2616","0:996:2618","0:997:2688","0:999:2621","0:1000:2691","0:1001:2622","0:1002:2721","0:1003:2724","0:1004:2730","0:1005:2734","0:1006:2741","0:1007:2745","0:1008:2748","0:1009:2751","0:1010:2756","0:1011:2760","0:1012:2765","0:1013:2768","0:1014:2771","0:1015:2774","0:1016:2779","0:1017:2783","0:1018:2788","0:1019:2791","0:1020:2794","0:1021:2797","0:1022:2825","0:1023:2829","0:1024:2836","0:1025:2839","0:1026:2842","0:1027:2845","0:1028:2880"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:292:3284":{"id":"0:292:3284","crate_id":0,"name":"set_limit","span":{"filename":"src/buf/take.rs","begin":[127,4],"end":[129,5]},"visibility":"public","docs":"Sets the maximum number of bytes that can be read.\n\n# Note\n\nIf the inner `Buf` has fewer bytes than `lim` then that is the actual\nnumber of available bytes.\n\n# Examples\n\n```rust\nuse bytes::{Buf, BufMut};\n\nlet mut buf = b\"hello world\".take(2);\nlet mut dst = vec![];\n\ndst.put(&mut buf);\nassert_eq!(*dst, b\"he\"[..]);\n\ndst.clear();\n\nbuf.set_limit(3);\ndst.put(&mut buf);\nassert_eq!(*dst, b\"llo\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["lim",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:3093":{"id":"0:137:3093","crate_id":0,"name":"put_i64","span":{"filename":"src/buf/buf_mut.rs","begin":[734,4],"end":[736,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i64(0x0102030405060708);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:468:725":{"id":"0:468:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[671,4],"end":[673,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:2616":{"id":"0:209:2616","crate_id":0,"name":"remaining","span":{"filename":"src/buf/chain.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:821":{"id":"0:821","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1676,0],"end":[1680,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"items":["0:822:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55:2814":{"id":"0:55:2814","crate_id":0,"name":"get_i128","span":{"filename":"src/buf/buf_impl.rs","begin":[793,4],"end":[795,5]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:1092:2601":{"id":"b:1:3099-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:454:3407":{"id":"0:454:3407","crate_id":0,"name":"borrow","span":{"filename":"src/bytes.rs","begin":[639,4],"end":[641,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:504":{"id":"0:504","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[780,0],"end":[784,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::string::String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:505:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/buf/chain.rs","begin":[130,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["chunks_vectored","copy_to_bytes","get_f64_ne","get_u16_le","get_f32","get_u64_le","reader","get_i32_ne","get_i32_le","get_i32","get_u32_ne","get_uint_le","get_u32","get_i128_le","get_i128","get_u128_ne","copy_to_slice","get_u16_ne","get_u128","get_i128_ne","get_f32_ne","take","chain","get_int_ne","get_int_le","get_int","get_uint_ne","get_u32_le","get_i16_ne","get_i16_le","get_i16","get_u128_le","get_f64_le","get_f64","get_i64_ne","get_u16","get_i64","get_i8","get_u8","get_u64_ne","get_u64","get_i64_le","get_f32_le","get_uint","has_remaining"],"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":["0:209:2616","0:210:2618","0:211:2621","0:212:2688","0:214:2880"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:639:2436":{"id":"0:639:2436","crate_id":0,"name":"BytesMut","span":{"filename":"src/bytes_mut.rs","begin":[61,0],"end":[66,1]},"visibility":"public","docs":"A unique reference to a contiguous slice of memory.\n\n`BytesMut` represents a unique view into a potentially shared memory region.\nGiven the uniqueness guarantee, owners of `BytesMut` handles are able to\nmutate the memory.\n\n`BytesMut` can be thought of as containing a `buf: Arc<Vec<u8>>`, an offset\ninto `buf`, a slice length, and a guarantee that no other `BytesMut` for the\nsame `buf` overlaps with its slice. That guarantee means that a write lock\nis not required.\n\n# Growth\n\n`BytesMut`'s `BufMut` implementation will implicitly grow its buffer as\nnecessary. However, explicitly reserving the required space up-front before\na series of inserts will be more efficient.\n\n# Examples\n\n```\nuse bytes::{BytesMut, BufMut};\n\nlet mut buf = BytesMut::with_capacity(64);\n\nbuf.put_u8(b'h');\nbuf.put_u8(b'e');\nbuf.put(&b\"llo\"[..]);\n\nassert_eq!(&buf[..], b\"hello\");\n\n// Freeze the buffer so that it can be shared\nlet a = buf.freeze();\n\n// This does not allocate, instead `b` points to the same memory.\nlet b = a.clone();\n\nassert_eq!(&a[..], b\"hello\");\nassert_eq!(&b[..], b\"hello\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:661","a:1:3357:12105-0:639:2436","a:1:33002:4481-0:639:2436","a:1:42829:4530-0:639:2436","a:1:42830:4529-0:639:2436","b:1:2790-0:639:2436","b:1:2793-0:639:2436","b:1:2822-0:639:2436","b:1:3095-0:639:2436","b:1:3099-0:639:2436","b:1:3105-0:639:2436","b:1:3110-0:639:2436","b:1:3967-0:639:2436","b:4:782-0:639:2436","0:533","0:692","0:694","0:699","0:707","0:709","0:712","0:714","0:716","0:719","0:722","0:724","0:726","0:728","0:730","0:731","0:733","0:736","0:738","0:740","0:743","0:745","0:749","0:754","0:757","0:761","0:764","0:767","0:777","0:778","0:779","0:781","0:783","0:785","0:787","0:789","0:791","0:793","0:795","0:797","0:799","0:801","0:803","0:805","0:807","0:809","0:811","0:815","0:819","0:821","0:823","0:825","0:827","0:829","0:831","0:861","0:1150","0:1154"]}}},"1:13869:33303":{"id":"1:13869:33303","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13411:149","`FromStr`":"1:13410:4402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13410:4402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13410:4402","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1105:2602":{"id":"0:1105:2602","crate_id":0,"name":"Take","span":{"filename":"src/buf/take.rs","begin":[10,0],"end":[13,1]},"visibility":"public","docs":"A `Buf` adapter which limits the bytes read from an underlying buffer.\n\nThis struct is generally created by calling `take()` on `Buf`. See\ndocumentation of [`take()`](Buf::take) for more details.","links":{"Buf::take":"0:72:2595"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:286","a:1:32944:249-0:1105:2602","a:1:3322:261-0:1105:2602","a:1:3357:12105-0:1105:2602","a:1:33002:4481-0:1105:2602","a:1:42829:4530-0:1105:2602","a:1:42830:4529-0:1105:2602","b:1:2790-0:1105:2602","b:1:2793-0:1105:2602","b:1:3095-0:1105:2602","b:1:3099-0:1105:2602","b:1:3105-0:1105:2602","b:1:3110-0:1105:2602","b:1:3967-0:1105:2602","0:1109","0:293"]}}},"0:529:860":{"id":"0:529:860","crate_id":0,"name":"from","span":{"filename":"src/bytes.rs","begin":[850,4],"end":[881,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1115":{"id":"0:1115","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3628:3325","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1116:970"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:674:3208":{"id":"0:674:3208","crate_id":0,"name":"resize","span":{"filename":"src/bytes_mut.rs","begin":[477,4],"end":[498,5]},"visibility":"public","docs":"Resizes the buffer so that `len` is equal to `new_len`.\n\nIf `new_len` is greater than `len`, the buffer is extended by the\ndifference with each additional byte set to `value`. If `new_len` is\nless than `len`, the buffer is simply truncated.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet mut buf = BytesMut::new();\n\nbuf.resize(3, 0x1);\nassert_eq!(&buf[..], &[0x1, 0x1, 0x1]);\n\nbuf.resize(2, 0x2);\nassert_eq!(&buf[..], &[0x1, 0x1]);\n\nbuf.resize(4, 0x3);\nassert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}],["value",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1126:970":{"id":"0:1126:970","crate_id":0,"name":"index_mut","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"RangeFull","id":"1:40293:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2811":{"id":"0:54:2811","crate_id":0,"name":"get_u128_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[773,4],"end":[775,5]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in native-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\",\n    false => b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\",\n};\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128_ne());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3110-0:1142:2605":{"id":"b:1:3110-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:3113:150","1:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:2820":{"id":"0:57:2820","crate_id":0,"name":"get_i128_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[836,4],"end":[838,5]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in native-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\",\n    false => b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\",\n};\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128_ne());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2880":{"id":"0:70:2880","crate_id":0,"name":"copy_to_bytes","span":{"filename":"src/buf/buf_impl.rs","begin":[1129,4],"end":[1139,5]},"visibility":"default","docs":"Consumes `len` bytes inside self and returns new instance of `Bytes`\nwith this data.\n\nThis function may be optimized by the underlying type to avoid actual\ncopies. For example, `Bytes` implementation will do a shallow copy\n(ref-count increment).\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet bytes = (&b\"hello world\"[..]).copy_to_bytes(5);\nassert_eq!(&bytes[..], &b\"hello\"[..]);\n```\n\n# Panics\n\nThis function panics if `len > self.remaining()`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"crate::Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:2688":{"id":"0:212:2688","crate_id":0,"name":"chunks_vectored","span":{"filename":"src/buf/chain.rs","begin":[166,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"5:8578:2607","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1051:3096":{"id":"0:1051:3096","crate_id":0,"name":"put_i64_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1132":{"id":"0:1132","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:40276:3324","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeTo","id":"1:40348:227","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1133:211","0:1134:969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13804:4778":{"id":"1:13804:4778","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42735:203","prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2836":{"id":"0:60:2836","crate_id":0,"name":"get_uint_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[900,4],"end":[906,5]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in native-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x01\\x02\\x03 hello\",\n    false => b\"\\x03\\x02\\x01 hello\",\n};\nassert_eq!(0x010203, buf.get_uint_ne(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`, or\nif `nbytes` is greater than 8.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/buf/buf_impl.rs","begin":[1394,0],"end":[1396,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["chunks_vectored","copy_to_bytes","get_f64_ne","get_u16_le","get_f32","get_u64_le","reader","get_i32_ne","get_i32_le","get_i32","get_u32_ne","get_uint_le","get_u32","get_i128_le","get_i128","get_u128_ne","copy_to_slice","get_u16_ne","get_u128","get_i128_ne","get_f32_ne","take","chain","get_int_ne","get_int_le","get_int","get_uint_ne","get_u32_le","get_i16_ne","get_i16_le","get_i16","get_u128_le","get_f64_le","get_f64","get_i64_ne","get_u16","get_i64","get_i8","get_u8","get_u64_ne","get_u64","get_i64_le","get_f32_le","get_uint","has_remaining"],"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"items":["0:961:2616","0:962:2618","0:963:2688","0:965:2621","0:966:2691","0:967:2622","0:968:2721","0:969:2724","0:970:2730","0:971:2734","0:972:2741","0:973:2745","0:974:2748","0:975:2751","0:976:2756","0:977:2760","0:978:2765","0:979:2768","0:980:2771","0:981:2774","0:982:2779","0:983:2783","0:984:2788","0:985:2791","0:986:2794","0:987:2797","0:988:2825","0:989:2829","0:990:2836","0:991:2839","0:992:2842","0:993:2845","0:994:2880"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59:2829":{"id":"0:59:2829","crate_id":0,"name":"get_uint_le","span":{"filename":"src/buf/buf_impl.rs","begin":[876,4],"end":[878,5]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_uint_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1033:3024":{"id":"0:1033:3024","crate_id":0,"name":"put_u8","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252:2625":{"id":"0:252:2625","crate_id":0,"name":"get_mut","span":{"filename":"src/buf/limit.rs","begin":[34,4],"end":[36,5]},"visibility":"public","docs":"Gets a mutable reference to the underlying `BufMut`.\n\nIt is inadvisable to directly write to the underlying `BufMut`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1045:3074":{"id":"0:1045:3074","crate_id":0,"name":"put_i32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359-0:111:2431":{"id":"0:359-0:111:2431","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[31,0],"end":[31,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::buf_mut::BufMut","name":"BufMut","id":"0:111:2431","glob":false}}},"0:667:855":{"id":"0:667:855","crate_id":0,"name":"freeze","span":{"filename":"src/bytes_mut.rs","begin":[246,4],"end":[265,5]},"visibility":"public","docs":"Converts `self` into an immutable `Bytes`.\n\nThe conversion is zero cost and is used to indicate that the slice\nreferenced by the handle will no longer be mutated. Once the conversion\nis done, the handle can be cloned and shared across threads.\n\n# Examples\n\n```\nuse bytes::{BytesMut, BufMut};\nuse std::thread;\n\nlet mut b = BytesMut::with_capacity(64);\nb.put(&b\"hello world\"[..]);\nlet b1 = b.freeze();\nlet b2 = b1.clone();\n\nlet th = thread::spawn(move || {\n    assert_eq!(&b1[..], b\"hello world\");\n});\n\nassert_eq!(&b2[..], b\"hello world\");\nth.join().unwrap();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:3130":{"id":"0:147:3130","crate_id":0,"name":"put_uint_le","span":{"filename":"src/buf/buf_mut.rs","begin":[981,4],"end":[989,5]},"visibility":"default","docs":"Writes an unsigned n-byte integer to `self` in the little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_uint_le(0x010203, 3);\nassert_eq!(buf, b\"\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self` or if `nbytes` is greater than 8.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:497:1331":{"id":"0:497:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[757,4],"end":[759,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444:2880":{"id":"0:444:2880","crate_id":0,"name":"copy_to_bytes","span":{"filename":"src/bytes.rs","begin":[608,4],"end":[610,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:3009":{"id":"0:171:3009","crate_id":0,"name":"put_slice","span":{"filename":"src/buf/buf_mut.rs","begin":[1499,4],"end":[1507,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2793-0:1099:2604":{"id":"b:1:2793-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:2795:3954"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:794:1331":{"id":"0:794:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1599,4],"end":[1601,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1000:2691":{"id":"0:1000:2691","crate_id":0,"name":"has_remaining","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:2618":{"id":"0:210:2618","crate_id":0,"name":"chunk","span":{"filename":"src/buf/chain.rs","begin":[139,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:316:3197":{"id":"0:316:3197","crate_id":0,"name":"uninit","span":{"filename":"src/buf/uninit_slice.rs","begin":[55,4],"end":[57,5]},"visibility":"public","docs":"Creates a `&mut UninitSlice` wrapping a slice of uninitialised memory.\n\n# Examples\n\n```\nuse bytes::buf::UninitSlice;\nuse core::mem::MaybeUninit;\n\nlet mut buffer = [MaybeUninit::uninit(); 64];\nlet slice = UninitSlice::uninit(&mut buffer[..]);\n\nlet mut vec = Vec::with_capacity(1024);\nlet spare: &mut UninitSlice = vec.spare_capacity_mut().into();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"1:31325:3196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[222,0],"end":[226,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"1:31325:3196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:333:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3967-0:1105:2602":{"id":"b:1:3967-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1137":{"id":"0:1137","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:40276:3324","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeToInclusive","id":"1:40388:228","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1138:211","0:1139:969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:670:3792":{"id":"0:670:3792","crate_id":0,"name":"split","span":{"filename":"src/bytes_mut.rs","begin":[361,4],"end":[364,5]},"visibility":"public","docs":"Removes the bytes from the current view, returning them in a new\n`BytesMut` handle.\n\nAfterwards, `self` will be empty, but will retain any additional\ncapacity that it had before the operation. This is identical to\n`self.split_to(self.len())`.\n\nThis is an `O(1)` operation that just increases the reference count and\nsets a few indices.\n\n# Examples\n\n```\nuse bytes::{BytesMut, BufMut};\n\nlet mut buf = BytesMut::with_capacity(1024);\nbuf.put(&b\"hello world\"[..]);\n\nlet other = buf.split();\n\nassert!(buf.is_empty());\nassert_eq!(1013, buf.capacity());\n\nassert_eq!(other, b\"hello world\"[..]);\n```","links":{},"attrs":["#[must_use = \"consider BytesMut::clear if you don't need the other half\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:861":{"id":"0:861","crate_id":0,"name":null,"span":{"filename":"src/fmt/debug.rs","begin":[45,0],"end":[49,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:862:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:699":{"id":"0:699","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1169,0],"end":[1224,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["put_uint_le","put_u32_le","put_i128_ne","put_i128_le","put_i128","put_u128_ne","put_u16_ne","put_u128","put_f64_le","put_f64","put_u8","put_u64_le","put_bytes","put_f32_le","put_slice","chain_mut","put_i16_ne","put_i16_le","put_i16","writer","put_u128_le","put_f64_ne","put_u16_le","put_i8","put_int_ne","put_i32_ne","put","put_i32","put_u32_ne","put_i32_le","put_uint","put_u32","put_uint_ne","put_int","put_int_le","limit","has_remaining_mut","put_i64_ne","put_u16","put_i64","put_u64_ne","put_i64_le","put_f32","put_u64","put_f32_ne"],"trait":{"name":"BufMut","id":"0:111:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:700:2950","0:701:2969","0:702:2995","0:703:2882","0:705:3009","0:706:3018"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13796:29263":{"id":"1:13796:29263","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:45025:8510","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13820:33283":{"id":"1:13820:33283","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13452:4403","str::split":"1:13811:3792","prim@char":"5:12642:492","str::split_terminator":"1:13818:33282"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44801:8638","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:12199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:722":{"id":"0:722","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1268,0],"end":[1272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:723:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:324:3382":{"id":"0:324:3382","crate_id":0,"name":"as_uninit_slice_mut","span":{"filename":"src/buf/uninit_slice.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Return a `&mut [MaybeUninit<u8>]` to this slice's buffer.\n\n# Safety\n\nThe caller **must not** read from the referenced memory and **must not** write\n**uninitialized** bytes to the slice either. This is because `BufMut` implementation\nthat created the `UninitSlice` knows which parts are initialized. Writing uninitialized\nbytes to the slice may cause the `BufMut` to read those bytes and trigger undefined\nbehavior.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut data = [0, 1, 2];\nlet mut slice = &mut data[..];\nunsafe {\n    let uninit_slice = BufMut::chunk_mut(&mut slice).as_uninit_slice_mut();\n};\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"1:31325:3196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:12105-0:1092:2601":{"id":"a:1:3357:12105-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13767:33270":{"id":"1:13767:33270","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13765:33269"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:447:654":{"id":"0:447:654","crate_id":0,"name":"deref","span":{"filename":"src/bytes.rs","begin":[617,4],"end":[619,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13872:33305":{"id":"1:13872:33305","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40629:12095","Self::is_ascii":"1:13871:33304"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40629:12095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13784:33274":{"id":"1:13784:33274","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13786:33275","str::split_at_mut":"1:13785:3195"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:3009":{"id":"0:177:3009","crate_id":0,"name":"put_slice","span":{"filename":"src/buf/buf_mut.rs","begin":[1546,4],"end":[1556,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445":{"id":"0:445","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[613,0],"end":[620,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3558:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:446:263","0:447:654"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:723:860":{"id":"0:723:860","crate_id":0,"name":"from","span":{"filename":"src/bytes_mut.rs","begin":[1269,4],"end":[1271,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32944:249-0:1142:2605":{"id":"a:1:32944:249-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1022:2825":{"id":"0:1022:2825","crate_id":0,"name":"get_uint","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:503:725":{"id":"0:503:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[775,4],"end":[777,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:993:2845":{"id":"0:993:2845","crate_id":0,"name":"get_int_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:12105-0:404:2435":{"id":"a:1:3357:12105-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13850:33295":{"id":"1:13850:33295","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13854:33297":{"id":"1:13854:33297","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226:985":{"id":"0:226:985","crate_id":0,"name":"into_iter","span":{"filename":"src/buf/chain.rs","begin":[237,4],"end":[239,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8325:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:509:1331":{"id":"0:509:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes.rs","begin":[793,4],"end":[795,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:740":{"id":"0:740","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1323,0],"end":[1338,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_fmt","write_char"],"trait":{"name":"Write","id":"1:10604:3404","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:741:2016","0:742:3955"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:44:2771":{"id":"0:44:2771","crate_id":0,"name":"get_i32_le","span":{"filename":"src/buf/buf_impl.rs","begin":[561,4],"end":[563,5]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:830:725":{"id":"0:830:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1701,4],"end":[1703,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2871":{"id":"0:69:2871","crate_id":0,"name":"get_f64_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1106,4],"end":[1108,5]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in native-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33 hello\",\n    false => b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F hello\",\n};\nassert_eq!(1.2f64, buf.get_f64_ne());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13823:33284":{"id":"1:13823:33284","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403","str::rsplitn":"1:13825:33285"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44837:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:728":{"id":"0:728","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1286,0],"end":[1290,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","min","max"],"trait":{"name":"Ord","id":"1:2908:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:504"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5712:34049":{"id":"4:5712:34049","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:299:2609","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:299:2609","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:979:2768":{"id":"0:979:2768","crate_id":0,"name":"get_i32","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419:1027":{"id":"0:419:1027","crate_id":0,"name":"len","span":{"filename":"src/bytes.rs","begin":[196,4],"end":[198,5]},"visibility":"public","docs":"Returns the number of bytes contained in this `Bytes`.\n\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet b = Bytes::from(&b\"hello\"[..]);\nassert_eq!(b.len(), 5);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[566,0],"end":[566,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:739:3954":{"id":"0:739:3954","crate_id":0,"name":"borrow_mut","span":{"filename":"src/bytes_mut.rs","begin":[1318,4],"end":[1320,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:3118":{"id":"0:144:3118","crate_id":0,"name":"put_i128_le","span":{"filename":"src/buf/buf_mut.rs","begin":[903,4],"end":[905,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i128_le(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:2969":{"id":"0:181:2969","crate_id":0,"name":"advance_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1580,4],"end":[1590,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:2621":{"id":"0:211:2621","crate_id":0,"name":"advance","span":{"filename":"src/buf/chain.rs","begin":[147,4],"end":[163,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[884,0],"end":[913,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"4:299:2609","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:531:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1133:211":{"id":"0:1133:211","crate_id":0,"name":"Output","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:36:2741":{"id":"0:36:2741","crate_id":0,"name":"get_u16_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[395,4],"end":[397,5]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in native-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf: &[u8] = match cfg!(target_endian = \"big\") {\n    true => b\"\\x08\\x09 hello\",\n    false => b\"\\x09\\x08 hello\",\n};\nassert_eq!(0x0809, buf.get_u16_ne());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1050:3093":{"id":"0:1050:3093","crate_id":0,"name":"put_i64","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/buf/iter.rs","begin":[25,0],"end":[105,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:231:1212","0:232:3244","0:233:2917","0:234:2625"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258:2995":{"id":"0:258:2995","crate_id":0,"name":"chunk_mut","span":{"filename":"src/buf/limit.rs","begin":[64,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:860:830":{"id":"0:860:830","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/debug.rs","begin":[40,4],"end":[42,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13792:29261":{"id":"1:13792:29261","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13793:29262"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:45007:8644","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2793-0:1092:2601":{"id":"b:1:2793-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2795:3954"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:486":{"id":"0:486","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[726,0],"end":[730,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:487:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:761":{"id":"0:761","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1391,0],"end":[1400,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one_unchecked","extend_one"],"trait":{"name":"Extend","id":"1:8334:3957","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:762:3910"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3099-0:639:2436":{"id":"b:1:3099-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:257:2950":{"id":"0:257:2950","crate_id":0,"name":"remaining_mut","span":{"filename":"src/buf/limit.rs","begin":[60,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:759:3910":{"id":"0:759:3910","crate_id":0,"name":"extend","span":{"filename":"src/bytes_mut.rs","begin":[1383,4],"end":[1388,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8325:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"u8"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3095-0:1099:2604":{"id":"b:1:3095-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:3098:3501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13843:33291":{"id":"1:13843:33291","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5729:34055":{"id":"4:5729:34055","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13875:33308"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436":{"id":"0:436","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[569,0],"end":[574,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3587:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:437:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:123:3037":{"id":"0:123:3037","crate_id":0,"name":"put_u16_le","span":{"filename":"src/buf/buf_mut.rs","begin":[392,4],"end":[394,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u16_le(0x0809);\nassert_eq!(buf, b\"\\x09\\x08\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1077:2599":{"id":"0:1077:2599","crate_id":0,"name":"Chain","span":{"filename":"src/buf/chain.rs","begin":[30,0],"end":[33,1]},"visibility":"public","docs":"A `Chain` sequences two buffers.\n\n`Chain` is an adapter that links two underlying buffers and provides a\ncontinuous view across both buffers. It is able to sequence either immutable\nbuffers ([`Buf`] values) or mutable buffers ([`BufMut`] values).\n\nThis struct is generally created by calling [`Buf::chain`]. Please see that\nfunction's documentation for more detail.\n\n# Examples\n\n```\nuse bytes::{Bytes, Buf};\n\nlet mut buf = (&b\"hello \"[..])\n    .chain(&b\"world\"[..]);\n\nlet full: Bytes = buf.copy_to_bytes(11);\nassert_eq!(full[..], b\"hello world\"[..]);\n```\n\n[`Buf::chain`]: Buf::chain","links":{"`BufMut`":"0:111:2431","`Buf`":"0:24:2430","Buf::chain":"0:73:2592"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:197","a:1:32944:249-0:1077:2599","a:1:3322:261-0:1077:2599","a:1:3357:12105-0:1077:2599","a:1:33002:4481-0:1077:2599","a:1:42829:4530-0:1077:2599","a:1:42830:4529-0:1077:2599","b:1:2790-0:1077:2599","b:1:2793-0:1077:2599","b:1:3095-0:1077:2599","b:1:3099-0:1077:2599","b:1:3105-0:1077:2599","b:1:3110-0:1077:2599","b:1:3967-0:1077:2599","0:1082","0:206","0:215","0:221"]}}},"0:440":{"id":"0:440","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[583,0],"end":[611,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["chunks_vectored","copy_to_bytes","get_f64_ne","get_u16_le","get_f32","get_u64_le","reader","get_i32_ne","get_i32_le","get_i32","get_u32_ne","get_uint_le","get_u32","get_i128_le","get_i128","get_u128_ne","copy_to_slice","get_u16_ne","get_u128","get_i128_ne","get_f32_ne","take","chain","get_int_ne","get_int_le","get_int","get_uint_ne","get_u32_le","get_i16_ne","get_i16_le","get_i16","get_u128_le","get_f64_le","get_f64","get_i64_ne","get_u16","get_i64","get_i8","get_u8","get_u64_ne","get_u64","get_i64_le","get_f32_le","get_uint","has_remaining"],"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:441:2616","0:442:2618","0:443:2621","0:444:2880"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1049:3090":{"id":"0:1049:3090","crate_id":0,"name":"put_u64_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426:3553":{"id":"0:426:3553","crate_id":0,"name":"split_off","span":{"filename":"src/bytes.rs","begin":[388,4],"end":[411,5]},"visibility":"public","docs":"Splits the bytes into two at the given index.\n\nAfterwards `self` contains elements `[0, at)`, and the returned `Bytes`\ncontains elements `[at, len)`.\n\nThis is an `O(1)` operation that just increases the reference count and\nsets a few indices.\n\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet mut a = Bytes::from(&b\"hello world\"[..]);\nlet b = a.split_off(5);\n\nassert_eq!(&a[..], b\"hello\");\nassert_eq!(&b[..], b\" world\");\n```\n\n# Panics\n\nPanics if `at > len`.","links":{},"attrs":["#[must_use = \"consider Bytes::truncate if you don't need the other half\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["at",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:437:696":{"id":"0:437:696","crate_id":0,"name":"drop","span":{"filename":"src/bytes.rs","begin":[571,4],"end":[573,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254:3284":{"id":"0:254:3284","crate_id":0,"name":"set_limit","span":{"filename":"src/buf/limit.rs","begin":[54,4],"end":[56,5]},"visibility":"public","docs":"Sets the maximum number of bytes that can be written.\n\n# Note\n\nIf the inner `BufMut` has fewer bytes than `lim` then that is the actual\nnumber of available bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["lim",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:420:2690":{"id":"0:420:2690","crate_id":0,"name":"is_empty","span":{"filename":"src/bytes.rs","begin":[211,4],"end":[213,5]},"visibility":"public","docs":"Returns true if the `Bytes` has a length of 0.\n\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet b = Bytes::new();\nassert!(b.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:828:725":{"id":"0:828:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1695,4],"end":[1697,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1007:2745":{"id":"0:1007:2745","crate_id":0,"name":"get_i16","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:1142:2605":{"id":"b:1:3099-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:710:263":{"id":"0:710:263","crate_id":0,"name":"Target","span":{"filename":"src/bytes_mut.rs","begin":[1234,4],"end":[1234,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"primitive":"u8"}}}}},"0:732:60":{"id":"0:732:60","crate_id":0,"name":"default","span":{"filename":"src/bytes_mut.rs","begin":[1296,4],"end":[1298,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:805":{"id":"0:805","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1634,0],"end":[1638,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:806:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1052:3099":{"id":"0:1052:3099","crate_id":0,"name":"put_i64_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484":{"id":"0:484","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[720,0],"end":[724,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:485:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:214:2880":{"id":"0:214:2880","crate_id":0,"name":"copy_to_bytes","span":{"filename":"src/buf/chain.rs","begin":[172,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:3152":{"id":"0:153:3152","crate_id":0,"name":"put_f32_le","span":{"filename":"src/buf/buf_mut.rs","begin":[1154,4],"end":[1156,5]},"visibility":"default","docs":"Writes  an IEEE754 single-precision (4 bytes) floating point number to\n`self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_f32_le(1.2f32);\nassert_eq!(buf, b\"\\x9A\\x99\\x99\\x3F\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:496":{"id":"0:496","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[756,0],"end":[760,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::vec::Vec","id":"4:7200:280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:497:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1005:2734":{"id":"0:1005:2734","crate_id":0,"name":"get_u16_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42830:4529-0:1086:2600":{"id":"a:1:42830:4529-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:4529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1016:2779":{"id":"0:1016:2779","crate_id":0,"name":"get_u64","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2595":{"id":"0:72:2595","crate_id":0,"name":"take","span":{"filename":"src/buf/buf_impl.rs","begin":[1162,4],"end":[1167,5]},"visibility":"default","docs":"Creates an adaptor which will read at most `limit` bytes from `self`.\n\nThis function returns a new instance of `Buf` which will read at most\n`limit` bytes.\n\n# Examples\n\n```\nuse bytes::{Buf, BufMut};\n\nlet mut buf = b\"hello world\"[..].take(5);\nlet mut dst = vec![];\n\ndst.put(&mut buf);\nassert_eq!(dst, b\"hello\");\n\nlet mut buf = buf.into_inner();\ndst.clear();\ndst.put(&mut buf);\nassert_eq!(dst, b\" world\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["limit",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:1105:2602":{"id":"b:1:3099-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:786:29074":{"id":"4:786:29074","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233:2917":{"id":"0:233:2917","crate_id":0,"name":"get_ref","span":{"filename":"src/buf/iter.rs","begin":[80,4],"end":[82,5]},"visibility":"public","docs":"Gets a reference to the underlying `Buf`.\n\nIt is inadvisable to directly read from the underlying `Buf`.\n\n# Examples\n\n```rust\nuse bytes::{Buf, Bytes};\n\nlet buf = Bytes::from(&b\"abc\"[..]);\nlet mut iter = buf.into_iter();\n\nassert_eq!(iter.next(), Some(b'a'));\n\nassert_eq!(2, iter.get_ref().remaining());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2734":{"id":"0:35:2734","crate_id":0,"name":"get_u16_le","span":{"filename":"src/buf/buf_impl.rs","begin":[372,4],"end":[374,5]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_u16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:512":{"id":"0:512","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[804,0],"end":[808,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"items":["0:513:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[937,0],"end":[941,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:536:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:298:2880":{"id":"0:298:2880","crate_id":0,"name":"copy_to_bytes","span":{"filename":"src/buf/take.rs","begin":[148,4],"end":[154,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:668:3769":{"id":"0:668:3769","crate_id":0,"name":"zeroed","span":{"filename":"src/bytes_mut.rs","begin":[287,4],"end":[289,5]},"visibility":"public","docs":"Creates a new `BytesMut` containing `len` zeros.\n\nThe resulting object has a length of `len` and a capacity greater\nthan or equal to `len`. The entire length of the object will be filled\nwith zeros.\n\nOn some platforms or allocators this function may be faster than\na manual implementation.\n\n# Examples\n\n```\nuse bytes::BytesMut;\n\nlet zeros = BytesMut::zeroed(42);\n\nassert!(zeros.capacity() >= 42);\nassert_eq!(zeros.len(), 42);\nzeros.into_iter().for_each(|x| assert_eq!(x, 0));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:999:2621":{"id":"0:999:2621","crate_id":0,"name":"advance","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327:830":{"id":"0:327:830","crate_id":0,"name":"fmt","span":{"filename":"src/buf/uninit_slice.rs","begin":[211,4],"end":[213,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6:2429":{"id":"0:6:2429","crate_id":0,"name":"buf","span":{"filename":"src/buf/mod.rs","begin":[1,0],"end":[39,47]},"visibility":"public","docs":"Utilities for working with buffers.\n\nA buffer is any structure that contains a sequence of bytes. The bytes may\nor may not be stored in contiguous memory. This module contains traits used\nto abstract over buffers as well as utilities for working with buffer types.\n\n# `Buf`, `BufMut`\n\nThese are the two foundational traits for abstractly working with buffers.\nThey can be thought as iterators for byte structures. They offer additional\nperformance over `Iterator` by providing an API optimized for byte slices.\n\nSee [`Buf`] and [`BufMut`] for more details.\n\n[rope]: https://en.wikipedia.org/wiki/Rope_(data_structure)","links":{"`BufMut`":"0:111:2431","`Buf`":"0:24:2430"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:358-0:24:2430","0:359-0:111:2431","0:360-0:1077:2599","0:361-0:1086:2600","0:362-0:1092:2601","0:363-0:1105:2602","0:364-0:311:2603","0:366-0:1099:2604","0:367-0:1142:2605"],"is_stripped":false}}},"0:661":{"id":"0:661","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[124,0],"end":[1119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:662:2881","0:663:1212","0:664:1027","0:665:2690","0:666:3200","0:667:855","0:668:3769","0:669:3553","0:670:3792","0:671:3562","0:672:3573","0:673:3579","0:674:3208","0:675:3201","0:676:3202","0:678:3902","0:679:3206","0:680:3923","0:691:3818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3105-0:1086:2600":{"id":"b:1:3105-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3108:150","1:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2790-0:639:2436":{"id":"b:1:2790-0:639:2436","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2792:3407"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1068:3071":{"id":"0:1068:3071","crate_id":0,"name":"put_i32","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1076:3099":{"id":"0:1076:3099","crate_id":0,"name":"put_i64_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:818:1331":{"id":"0:818:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/bytes_mut.rs","begin":[1665,4],"end":[1667,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:31704:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120:3024":{"id":"0:120:3024","crate_id":0,"name":"put_u8","span":{"filename":"src/buf/buf_mut.rs","begin":[321,4],"end":[324,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u8(0x01);\nassert_eq!(buf, b\"\\x01\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1035:3032":{"id":"0:1035:3032","crate_id":0,"name":"put_u16","span":{"filename":"src/buf/buf_mut.rs","begin":[1469,4],"end":[1469,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:706:3018":{"id":"0:706:3018","crate_id":0,"name":"put_bytes","span":{"filename":"src/bytes_mut.rs","begin":[1212,4],"end":[1223,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["val",{"primitive":"u8"}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2592":{"id":"0:73:2592","crate_id":0,"name":"chain","span":{"filename":"src/buf/buf_impl.rs","begin":[1184,4],"end":[1189,5]},"visibility":"default","docs":"Creates an adaptor which will chain this buffer with another.\n\nThe returned `Buf` instance will first consume all bytes from `self`.\nAfterwards the output is equivalent to the output of next.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut chain = b\"hello \"[..].chain(&b\"world\"[..]);\n\nlet full = chain.copy_to_bytes(11);\nassert_eq!(full.chunk(), b\"hello world\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["next",{"generic":"U"}]],"output":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:3059":{"id":"0:128:3059","crate_id":0,"name":"put_u32","span":{"filename":"src/buf/buf_mut.rs","begin":[515,4],"end":[517,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u32(0x0809A0A1);\nassert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2882":{"id":"0:183:2882","crate_id":0,"name":"put","span":{"filename":"src/buf/buf_mut.rs","begin":[1611,4],"end":[1624,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"super::Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33002:4481-0:1142:2605":{"id":"a:1:33002:4481-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[702,0],"end":[706,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"slice":{"primitive":"u8"}},"items":["0:479:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1006:2741":{"id":"0:1006:2741","crate_id":0,"name":"get_u16_ne","span":{"filename":"src/buf/buf_impl.rs","begin":[1399,4],"end":[1399,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:974:2748":{"id":"0:974:2748","crate_id":0,"name":"get_i16_le","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:700:2950":{"id":"0:700:2950","crate_id":0,"name":"remaining_mut","span":{"filename":"src/bytes_mut.rs","begin":[1171,4],"end":[1173,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3110-0:1099:2604":{"id":"b:1:3110-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:3113:150","1:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:482":{"id":"0:482","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[714,0],"end":[718,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:483:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148:3135":{"id":"0:148:3135","crate_id":0,"name":"put_uint_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1014,4],"end":[1020,5]},"visibility":"default","docs":"Writes an unsigned n-byte integer to `self` in the native-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_uint_ne(0x010203, 3);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x01\\x02\\x03\");\n} else {\n    assert_eq!(buf, b\"\\x03\\x02\\x01\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self` or if `nbytes` is greater than 8.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:2625":{"id":"0:290:2625","crate_id":0,"name":"get_mut","span":{"filename":"src/buf/take.rs","begin":[77,4],"end":[79,5]},"visibility":"public","docs":"Gets a mutable reference to the underlying `Buf`.\n\nIt is inadvisable to directly read from the underlying `Buf`.\n\n# Examples\n\n```rust\nuse bytes::{Buf, BufMut};\n\nlet mut buf = b\"hello world\".take(2);\nlet mut dst = vec![];\n\nbuf.get_mut().advance(2);\n\ndst.put(&mut buf);\nassert_eq!(*dst, b\"ll\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:784:4394":{"id":"4:784:4394","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:1070:3077":{"id":"0:1070:3077","crate_id":0,"name":"put_i32_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:3018":{"id":"0:172:3018","crate_id":0,"name":"put_bytes","span":{"filename":"src/buf/buf_mut.rs","begin":[1510,4],"end":[1520,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["val",{"primitive":"u8"}],["cnt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:12105-0:1086:2600":{"id":"a:1:3357:12105-0:1086:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:40:2756":{"id":"0:40:2756","crate_id":0,"name":"get_u32","span":{"filename":"src/buf/buf_impl.rs","begin":[478,4],"end":[480,5]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:2950":{"id":"0:168:2950","crate_id":0,"name":"remaining_mut","span":{"filename":"src/buf/buf_mut.rs","begin":[1478,4],"end":[1480,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:2593":{"id":"0:291:2593","crate_id":0,"name":"limit","span":{"filename":"src/buf/take.rs","begin":[99,4],"end":[101,5]},"visibility":"public","docs":"Returns the maximum number of bytes that can be read.\n\n# Note\n\nIf the inner `Buf` has fewer bytes than indicated by this method then\nthat is the actual number of available bytes.\n\n# Examples\n\n```rust\nuse bytes::Buf;\n\nlet mut buf = b\"hello world\".take(2);\n\nassert_eq!(2, buf.limit());\nassert_eq!(b'h', buf.get_u8());\nassert_eq!(1, buf.limit());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32944:249-0:1105:2602":{"id":"a:1:32944:249-0:1105:2602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3110-0:404:2435":{"id":"b:1:3110-0:404:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3113:150","1:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:502":{"id":"0:502","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[774,0],"end":[778,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::string::String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:503:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[676,0],"end":[680,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:470:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:676:3202":{"id":"0:676:3202","crate_id":0,"name":"reserve","span":{"filename":"src/bytes_mut.rs","begin":[590,4],"end":[602,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more bytes to be inserted\ninto the given `BytesMut`.\n\nMore than `additional` bytes may be reserved in order to avoid frequent\nreallocations. A call to `reserve` may result in an allocation.\n\nBefore allocating new buffer space, the function will attempt to reclaim\nspace in the existing buffer. If the current handle references a view\ninto a larger original buffer, and all other handles referencing part\nof the same original buffer have been dropped, then the current view\ncan be copied/shifted to the front of the buffer and the handle can take\nownership of the full buffer, provided that the full buffer is large\nenough to fit the requested additional capacity.\n\nThis optimization will only happen if shifting the data from the current\nview to the front of the buffer is not too expensive in terms of the\n(amortized) time required. The precise condition is subject to change;\nas of now, the length of the data being shifted needs to be at least as\nlarge as the distance that it's shifted by. If the current view is empty\nand the original buffer is large enough to fit the requested additional\ncapacity, then reallocations will never happen.\n\n# Examples\n\nIn the following example, a new buffer is allocated.\n\n```\nuse bytes::BytesMut;\n\nlet mut buf = BytesMut::from(&b\"hello\"[..]);\nbuf.reserve(64);\nassert!(buf.capacity() >= 69);\n```\n\nIn the following example, the existing buffer is reclaimed.\n\n```\nuse bytes::{BytesMut, BufMut};\n\nlet mut buf = BytesMut::with_capacity(128);\nbuf.put(&[0; 64][..]);\n\nlet ptr = buf.as_ptr();\nlet other = buf.split();\n\nassert!(buf.is_empty());\nassert_eq!(buf.capacity(), 64);\n\ndrop(other);\nbuf.reserve(128);\n\nassert_eq!(buf.capacity(), 128);\nassert_eq!(buf.as_ptr(), ptr);\n```\n\n# Panics\n\nPanics if the new capacity overflows `usize`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:725:725":{"id":"0:725:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1275,4],"end":[1277,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:781":{"id":"0:781","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1562,0],"end":[1566,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:782:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:788:725":{"id":"0:788:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1581,4],"end":[1583,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1136:970":{"id":"0:1136:970","crate_id":0,"name":"index_mut","span":{"filename":"src/buf/uninit_slice.rs","begin":[250,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"resolved_path":{"name":"RangeTo","id":"1:40348:227","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:808:725":{"id":"0:808:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1641,4],"end":[1643,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:962:2618":{"id":"0:962:2618","crate_id":0,"name":"chunk","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293":{"id":"0:293","crate_id":0,"name":null,"span":{"filename":"src/buf/take.rs","begin":[132,0],"end":[155,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["chunks_vectored","copy_to_bytes","get_f64_ne","get_u16_le","get_f32","get_u64_le","reader","get_i32_ne","get_i32_le","get_i32","get_u32_ne","get_uint_le","get_u32","get_i128_le","get_i128","get_u128_ne","copy_to_slice","get_u16_ne","get_u128","get_i128_ne","get_f32_ne","take","chain","get_int_ne","get_int_le","get_int","get_uint_ne","get_u32_le","get_i16_ne","get_i16_le","get_i16","get_u128_le","get_f64_le","get_f64","get_i64_ne","get_u16","get_i64","get_i8","get_u8","get_u64_ne","get_u64","get_i64_le","get_f32_le","get_uint","has_remaining"],"trait":{"name":"Buf","id":"0:24:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:295:2616","0:296:2618","0:297:2621","0:298:2880"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1062:3049":{"id":"0:1062:3049","crate_id":0,"name":"put_i16","span":{"filename":"src/buf/buf_mut.rs","begin":[1473,4],"end":[1473,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13763:2690":{"id":"1:13763:2690","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13772:352":{"id":"1:13772:352","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13773:3020","`u8`":"5:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:480":{"id":"0:480","crate_id":0,"name":null,"span":{"filename":"src/bytes.rs","begin":[708,0],"end":[712,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2914:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"slice":{"primitive":"u8"}},"items":["0:481:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:364-0:311:2603":{"id":"0:364-0:311:2603","crate_id":0,"name":null,"span":{"filename":"src/buf/mod.rs","begin":[36,0],"end":[36,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::uninit_slice::UninitSlice","name":"UninitSlice","id":"0:311:2603","glob":false}}},"0:767":{"id":"0:767","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1408,0],"end":[1412,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8314:158","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:769:863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2795:3954":{"id":"1:2795:3954","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33002:4481-0:1077:2599":{"id":"a:1:33002:4481-0:1077:2599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:4481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:1077:2599","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"U"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13856:33298":{"id":"1:13856:33298","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:231:1212":{"id":"0:231:1212","crate_id":0,"name":"new","span":{"filename":"src/buf/iter.rs","begin":[41,4],"end":[43,5]},"visibility":"public","docs":"Creates an iterator over the bytes contained by the buffer.\n\n# Examples\n\n```\nuse bytes::Bytes;\n\nlet buf = Bytes::from_static(b\"abc\");\nlet mut iter = buf.into_iter();\n\nassert_eq!(iter.next(), Some(b'a'));\nassert_eq!(iter.next(), Some(b'b'));\nassert_eq!(iter.next(), Some(b'c'));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["inner",{"generic":"T"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:1086:2600","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:3244":{"id":"0:232:3244","crate_id":0,"name":"into_inner","span":{"filename":"src/buf/iter.rs","begin":[60,4],"end":[62,5]},"visibility":"public","docs":"Consumes this `IntoIter`, returning the underlying value.\n\n# Examples\n\n```rust\nuse bytes::{Buf, Bytes};\n\nlet buf = Bytes::from(&b\"abc\"[..]);\nlet mut iter = buf.into_iter();\n\nassert_eq!(iter.next(), Some(b'a'));\n\nlet buf = iter.into_inner();\nassert_eq!(2, buf.remaining());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13879:33312":{"id":"1:13879:33312","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5068:33312"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:45032:8583","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13762:1027":{"id":"1:13762:1027","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12642:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:994:2880":{"id":"0:994:2880","crate_id":0,"name":"copy_to_bytes","span":{"filename":"src/buf/buf_impl.rs","begin":[1395,4],"end":[1395,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"crate::Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370-0:111:2431":{"id":"0:370-0:111:2431","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[81,26],"end":[81,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::buf::BufMut","name":"BufMut","id":"0:111:2431","glob":false}}},"0:819":{"id":"0:819","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1670,0],"end":[1674,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"items":["0:820:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/buf/take.rs","begin":[19,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Take","id":"0:1105:2602","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:288:3244","0:289:2917","0:290:2625","0:291:2593","0:292:3284"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:202:3230":{"id":"0:202:3230","crate_id":0,"name":"first_mut","span":{"filename":"src/buf/chain.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"Gets a mutable reference to the first underlying `Buf`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = (&b\"hello\"[..])\n    .chain(&b\"world\"[..]);\n\nbuf.first_mut().advance(1);\n\nlet full = buf.copy_to_bytes(9);\nassert_eq!(full, b\"elloworld\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:12105-0:1142:2605":{"id":"a:1:3357:12105-0:1142:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Writer","id":"0:1142:2605","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:49:2791":{"id":"0:49:2791","crate_id":0,"name":"get_i64","span":{"filename":"src/buf/buf_impl.rs","begin":[667,4],"end":[669,5]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32944:249-0:1092:2601":{"id":"a:1:32944:249-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:326":{"id":"0:326","crate_id":0,"name":null,"span":{"filename":"src/buf/uninit_slice.rs","begin":[210,0],"end":[214,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UninitSlice","id":"0:311:2603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:327:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13873:33306":{"id":"1:13873:33306","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13871:33304":{"id":"1:13871:33304","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:820:725":{"id":"0:820:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes_mut.rs","begin":[1671,4],"end":[1673,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1092:2601":{"id":"0:1092:2601","crate_id":0,"name":"Limit","span":{"filename":"src/buf/limit.rs","begin":[9,0],"end":[12,1]},"visibility":"public","docs":"A `BufMut` adapter which limits the amount of bytes that can be written\nto an underlying buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:248","a:1:32944:249-0:1092:2601","a:1:3322:261-0:1092:2601","a:1:3357:12105-0:1092:2601","a:1:33002:4481-0:1092:2601","a:1:42829:4530-0:1092:2601","a:1:42830:4529-0:1092:2601","b:1:2790-0:1092:2601","b:1:2793-0:1092:2601","b:1:3095-0:1092:2601","b:1:3099-0:1092:2601","b:1:3105-0:1092:2601","b:1:3110-0:1092:2601","b:1:3967-0:1092:2601","0:1096","0:255"]}}},"b:1:3110-0:1092:2601":{"id":"b:1:3110-0:1092:2601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Limit","id":"0:1092:2601","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3113:150","1:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:124:3045":{"id":"0:124:3045","crate_id":0,"name":"put_u16_ne","span":{"filename":"src/buf/buf_mut.rs","begin":[419,4],"end":[421,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to `self` in native-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_u16_ne(0x0809);\nif cfg!(target_endian = \"big\") {\n    assert_eq!(buf, b\"\\x08\\x09\");\n} else {\n    assert_eq!(buf, b\"\\x09\\x08\");\n}\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:803":{"id":"0:803","crate_id":0,"name":null,"span":{"filename":"src/bytes_mut.rs","begin":[1628,0],"end":[1632,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2872:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BytesMut","id":"0:639:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:804:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:862:830":{"id":"0:862:830","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/debug.rs","begin":[46,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13813:29250":{"id":"1:13813:29250","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12642:492","self::pattern":"1:13452:4403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13239:5008","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:4398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:12105-0:1099:2604":{"id":"a:1:3357:12105-0:1099:2604","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:12105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Reader","id":"0:1099:2604","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:487:725":{"id":"0:487:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[727,4],"end":[729,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:404:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:3115":{"id":"0:143:3115","crate_id":0,"name":"put_i128","span":{"filename":"src/buf/buf_mut.rs","begin":[880,4],"end":[882,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to `self` in the big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::BufMut;\n\nlet mut buf = vec![];\nbuf.put_i128(0x01020304050607080910111213141516);\nassert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");\n```\n\n# Panics\n\nThis function panics if there is not enough remaining capacity in\n`self`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:352:2625":{"id":"0:352:2625","crate_id":0,"name":"get_mut","span":{"filename":"src/buf/writer.rs","begin":[52,4],"end":[54,5]},"visibility":"public","docs":"Gets a mutable reference to the underlying `BufMut`.\n\nIt is inadvisable to directly write to the underlying `BufMut`.\n\n# Examples\n\n```rust\nuse bytes::BufMut;\n\nlet mut buf = vec![].writer();\n\nbuf.get_mut().reserve(1024);\n\nassert_eq!(1024, buf.get_ref().capacity());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"B"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:483:725":{"id":"0:483:725","crate_id":0,"name":"eq","span":{"filename":"src/bytes.rs","begin":[715,4],"end":[717,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:12647:1737":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"1:2908:207":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:41434:4343":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:2540:4261":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:4990:229":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:48052:8794":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:9478:10673":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:14110:6686":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:15713:7077":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:44320:10776":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:23515:8551":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:8743:10520":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:47861:8787":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:10860:6195":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:43071:208":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:13481:12198":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:519:6198":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13947:6653":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:8714:8216":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13489:6578":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13108:6353":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:5323:30067":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"1:48081:8797":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:5325:10079":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4997:9965":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:1948:2615":{"crate_id":1,"path":["core","mem"],"kind":"module"},"17:16241:7233":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:6547:17636":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:44652:4998":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10571:6332":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:14690:6797":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:3688:11828":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:8040:38207":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13120:6354":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:45496:10783":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:3090:9460":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:8578:2607":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"17:16040:7162":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:45389:8514":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:6802:10443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:3622:3298":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"1:42695:8493":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:1011:7999":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:16744:7366":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:4247:17729":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:12641:1208":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"1:23468:29085":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4621:8468":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:6617:10380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5217:10032":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:3448:4260":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:10378:8608":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:2914:214":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9446:4527":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:40368:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8325:177":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:33917:4296":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:6878:10469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:47223:8720":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:14039:6672":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:4692:7473":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:12618:3591":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:11770:24898":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:6678:7607":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"16:6864:24794":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:6623:7585":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13673:6593":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:44901:8640":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:45272:8513":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7997:7454":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:7344:10520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13795:6626":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:8562:7890":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:7990:10635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:0:1763":{"crate_id":5,"path":["std"],"kind":"module"},"6:5630:10223":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2229:4404":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"17:14337:6745":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"4:984:6014":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:485:6196":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:1083:8004":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:4771:8470":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7551:24798":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:7165:7679":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12749:6515":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:6566:17638":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:41597:4340":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:22372:17713":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:12011:8150":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8851:11829":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5127:10008":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"10:36:9618":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:6503:8133":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:5022:5966":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5249:10044":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:5960:265":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"16:8025:7824":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"15:394:23893":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:11210:38216":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:43815:4427":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:1883:8096":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"1:42733:206":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"14:0:4092":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:6030:4263":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:45348:8659":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:589:6148":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:23361:8531":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:45371:8667":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:45488:10781":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:14710:6800":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7189:24796":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:2682:7423":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:7445:10551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:22962:17353":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:9310:8253":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:5575:10192":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:6121:4162":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:16203:7223":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:1500:9708":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:44679:4401":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:15469:7012":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:0:527":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:22986:17713":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:9279:8252":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:41148:8465":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:3965:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"6:7367:10538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13630:6589":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:9404:36110":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:5334:10082":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:532:9671":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:12217:8297":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"17:16848:6662":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:14650:6792":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:32910:8568":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"18:538:6145":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:538:9674":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:1521:9716":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:4118:7467":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:22880:17351":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:11825:6398":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:7292:10492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:1654:8011":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13052:6550":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:12045:6274":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:2521:17710":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"6:6679:10407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"11:2469:23857":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"4:7200:280":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6157:7510":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:34602:4303":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:1591:8007":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:10674:4435":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"14:186:11826":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:3431:4227":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:12160:6436":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:23065:4414":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:10369:24859":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:44692:8634":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:42860:4231":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:44955:8642":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:523:9665":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:702:8091":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:15569:7048":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:42752:185":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:8206:7445":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:8220:7832":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:12100:8109":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:2344:32946":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:8560:4211":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"1:44709:8635":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"18:689:6170":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:11394:36141":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:974:7990":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11259:6354":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:47739:8785":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14178:6706":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13231:6560":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:1665:8013":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:48092:8798":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:1100:7740":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:4928:4444":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6335:7535":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:43565:4433":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11151:6352":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:3079:4394":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:581:4951":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:16791:7377":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"11:763:7993":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:570:9690":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"18:613:38222":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:2810:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:10273:830":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:8812:4375":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11469:24879":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:3524:6212":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:4233:17727":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:10830:6338":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"6:5288:10066":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:3303:33054":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:4134:17722":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:909:4996":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11915:6353":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:491:6137":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:47240:8721":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:16613:6630":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6571:7579":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:15102:6882":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:7762:6034":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:670:6167":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:4764:7474":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:3332:8010":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:8498:190":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:10132:24851":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:11590:6378":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:44837:5006":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:6792:10441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:9552:174":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"5:12669:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"1:2872:213":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"13:229:9613":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:16403:7278":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:9220:5349":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"17:14384:6754":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:1781:6007":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:48035:8793":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6694:7610":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:96:8929":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7027:7652":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:23384:8536":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5151:10010":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13509:6216":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:8910:17793":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"17:10202:24854":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:14054:8518":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:4976:9954":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:12959:4982":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:12263:6446":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"4:7583:2600":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:15115:6883":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:6274:4162":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:5142:7485":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"15:0:4093":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:22177:32600":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5450:10136":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12711:6509":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:43243:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:6438:24791":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"11:2414:4263":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:13856:6640":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7220:7692":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:508:5954":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:5428:10120":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"9:470:23781":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:10479:24863":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:7334:7710":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4896:9918":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:927:7992":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11269:24880":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:47935:8789":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:4922:17771":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6887:7440":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13436:6575":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5311:10074":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:754:6185":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:8284:10658":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:40408:3512":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:6744:10426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:7369:7449":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:14081:6677":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:45688:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"14:201:4395":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"11:1558:8008":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:46785:8681":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:8708:7903":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:34457:4301":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:5683:5340":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"17:11494:6368":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:3587:2439":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"9:0:4088":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13423:6573":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:48186:8809":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:1247:8970":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:43899:150":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"16:7492:7731":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14859:6841":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:26659:283":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:15733:7081":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:8429:8171":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:5289:6033":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:3792:268":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:6116:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:47027:8702":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:10601:6186":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:2032:813":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"1:4413:4162":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"5:11155:5353":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"18:113:8932":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:7890:36152":{"crate_id":5,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"6:5375:10095":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:3108:7460":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:1573:7992":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:45238:8657":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:8543:7887":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:31293:3406":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12969:6539":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13243:6561":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:1643:4260":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:3061:5965":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:34948:4305":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:13470:6173":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:15448:7002":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:15876:7117":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:3043:4480":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:2354:3597":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:5186:10013":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:13687:123":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:3262:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7072:24795":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7302:7706":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:978:7991":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:41322:6062":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"4:284:6007":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:8643:8216":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:43844:7859":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"11:1542:23862":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:7463:10561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:41970:4367":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:8316:10667":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6441:10285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:5375:4183":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:6638:7587":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:14388:6075":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:14431:6760":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:3832:7466":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:32944:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:44490:8629":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:15534:7047":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:9432:8263":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:8895:8242":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3628:3325":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:1660:8012":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:7580:10626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:4333:8960":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11161:38215":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:38873:4309":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13304:24867":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12725:6513":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:4925:17749":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12242:6443":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:11843:5008":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:5271:10055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:2671:697":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13000:24994":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:765:29061":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:491:9642":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:31357:29093":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:12076:5004":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:42926:8616":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"4:1520:3597":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:1878:8010":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12298:24968":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1:3599:155":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:3424:4206":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:9501:199":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:10800:5993":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:2534:17712":{"crate_id":5,"path":["std","fs","exists"],"kind":"function"},"17:16359:7271":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11868:6377":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:8087:17713":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"5:6669:198":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:8739:8226":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:14071:8521":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:13608:24837":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:6543:10345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:14186:217":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:47417:8744":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:4565:6025":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:8688:8112":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11667:6383":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:1862:2600":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"4:1582:7993":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:15456:7005":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:11106:8276":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:7916:7810":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:7797:4397":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:5564:17622":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"4:7872:4262":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:13201:8509":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:23606:8557":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"16:6841:7631":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:15801:7099":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:3934:8109":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12081:6425":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:48248:8824":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:706:6173":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13700:6599":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:9864:131":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:12008:6413":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:47159:8716":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:4171:2600":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:8352:4196":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:2750:5960":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:41416:4334":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13079:6553":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:47367:8742":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6398:10267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:553:9682":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:1551:2600":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:5687:7497":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:8278:10657":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:8276:4378":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:12655:761":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"1:47612:8751":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"6:7524:10604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7279:7705":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:5222:17776":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"16:8317:24802":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:16013:7155":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:10108:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4984:9959":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:42769:4996":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:586:9699":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:10647:116":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:33705:4293":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3063:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:5301:10071":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:7599:8326":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"11:0:4090":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:3147:127":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:12120:6432":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:16211:7226":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:11099:152":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:4842:7476":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:7539:4263":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:6148:6033":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"4:3337:33055":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:3411:4295":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:10664:4433":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:11715:6386":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:573:6138":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:5871:5345":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"17:13983:6660":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:564:9687":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5550:10183":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13996:6662":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:45500:10784":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:42789:4525":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:41932:8485":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"4:7527:8324":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:3822:31667":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:6695:10413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"11:820:17673":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:8148:7457":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:45050:8582":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:650:17660":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"11:2525:38187":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:11437:10678":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:13592:6586":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"4:2167:8309":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:16717:7357":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:5471:10151":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:7407:10540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13529:6580":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12889:6532":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:1506:168":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:999:7997":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3439:7463":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:12254:6445":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:9588:8269":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:16755:7371":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:3298:8011":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:1352:6203":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:1027:8002":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12814:6520":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:6472:10304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13183:6556":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"11:649:3597":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:5707:24788":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:8153:17664":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5640:10224":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:4937:9938":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:5749:116":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"1:45676:10787":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"4:2251:5955":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:3571:3684":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13959:6656":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12173:6437":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:46885:8693":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:32928:4441":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:13928:6652":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:8225:10646":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:40308:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:4990:9962":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:1652:5952":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:5139:10009":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:7710:8327":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7713:38202":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:5697:5341":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"1:10655:123":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:2394:24924":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:23672:8563":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:12072:6422":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:44579:4995":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:11576:252":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:5356:454":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:11989:6411":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:5222:7488":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12397:6465":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:3792:6007":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:214:4234":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:2122:696":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"16:7156:7678":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:11135:36140":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:8162:7447":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:41732:4355":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"11:2374:4996":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:16301:7254":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:5405:10110":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:14971:6856":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11814:6396":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:40438:4318":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:6631:10391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:5755:7498":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:1122:6007":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:33003:8571":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3315:277":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"11:787:4260":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:33032:4223":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:6203:24790":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"15:327:11469":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:43041:3597":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:16116:7207":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:6171:7513":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:4808:7475":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:41352:12151":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:47176:8717":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:0:4095":{"crate_id":17,"path":["object"],"kind":"module"},"6:5557:10185":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:10505:8278":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:45820:8677":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:11971:8144":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:9675:8099":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:16658:7344":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:44127:8627":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:43920:3956":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:41525:4337":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:5647:7496":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:2422:6208":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:8277:8164":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"1:3797:159":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:12428:6006":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4929:9936":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6806:7438":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10176:24853":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:41116:8580":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:41403:2599":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:9293:8125":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:23694:8565":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"4:1612:7991":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:41156:8583":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:8314:158":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:1118:8005":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5088:10005":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7575:8267":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5007:9972":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:12666:996":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"5:6061:8130":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:16380:7274":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:16315:7256":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:3560:4212":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"1:32921:8569":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:10700:6189":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2448:7406":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:16058:7165":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:22141:32592":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:44333:10777":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:4959:4443":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:41557:4352":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5366:10089":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12133:6434":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5295:10068":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6939:7641":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:43572:4432":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:43095:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7347:7712":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:35121:4307":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:4848:10531":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:2228:4430":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:4921:9934":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2484:7414":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:3803:4317":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:2507:9614":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:1001:3597":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:4140:17721":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"10:44:8018":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:23595:8556":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"9:435:23782":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:316:6193":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:3080:33057":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:2948:7435":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:12022:8966":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:44751:5001":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11963:6410":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:11775:4996":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12924:6534":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:953:4263":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:8311:152":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"1:10440:4447":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:42511:8492":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:43805:10766":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:5874:5347":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"1:45007:8644":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:2142:2916":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:12864:6523":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:8480:7881":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:23502:8550":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:14190:6709":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:9596:4398":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12836:24993":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:377:8084":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:596:6199":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:45512:10677":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:42555:10765":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:2364:10690":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:12652:763":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"1:11083:6070":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"16:6995:7643":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:8176:7830":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:12588:6503":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:6121:7443":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:15978:7147":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:10923:5149":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:9506:5980":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"5:12657:921":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"16:3012:23929":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:11901:6405":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:16005:7154":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:45138:8647":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13157:6555":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:10822:902":{"crate_id":1,"path":["core","hash"],"kind":"module"},"1:42981:224":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"16:7904:7809":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:23012:32817":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"16:6082:7500":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:45760:29333":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:7962:10632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13021:24995":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:12649:1861":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"1:41243:8587":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:11356:38218":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:2548:7417":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:23136:17348":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:8230:24801":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:15908:7125":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:16838:6657":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"4:299:2609":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"17:14624:6788":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:2702:7424":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:44883:8639":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:46770:8678":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11939:6409":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12103:6430":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13836:6630":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:16573:7329":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:7390:10539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:7439:10550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:5346:7492":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:4536:4221":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13044:6548":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:13239:5008":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7983:8152":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8446:3271":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:15198:6897":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:9215:8250":{"crate_id":5,"path":["std","pipe","PipeWriter"],"kind":"struct"},"16:3585:7464":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:40330:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:45167:8655":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:5560:17621":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:1632:9794":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"9:49:11472":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:13459:4398":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:4803:17767":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:15174:6539":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:485:9640":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12761:6516":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:8272:5498":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"1:44337:4985":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:3291:3597":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:14571:6473":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5387:10099":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:2838:7430":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:16802:7379":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:15013:6864":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:2341:8105":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11728:6387":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:8325:131":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:8272:10656":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:15896:7124":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5381:10096":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5658:10233":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13892:6645":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:3874:132":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:44550:4991":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:12945:4980":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5521:10166":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:11997:8148":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11358:6073":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"6:5539:10177":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"11:663:4996":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:2511:17705":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"1:47322:8725":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:4292:4162":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:2772:4186":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:15088:6879":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:8344:8170":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:41394:4333":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:10664:9450":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"6:5051:9993":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:16631:6640":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:3843:2916":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:6968:5984":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:11059:10674":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:44105:169":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:12646:351":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"5:8798:8227":{"crate_id":5,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"6:5230:10036":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11629:6317":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:4071:4263":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:16051:7163":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:45747:8673":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5617:10217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:22203:17713":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:7740:4341":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:6835:7630":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:7472:5988":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:8266:10655":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:3985:6239":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:6998:4338":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:7820:36857":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"6:5349:10084":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:42639:29114":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:521:29062":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:1942:8099":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"18:659:6161":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:14637:6790":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:5947:8124":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:8500:7882":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6460:24792":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:16395:7275":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:8055:7826":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:9425:8262":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:8525:7885":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:8282:8165":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:44937:8641":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"5:12663:1890":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"6:6749:10427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:1643:9802":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4906:4442":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:47056:8711":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12944:6536":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:7549:6016":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:14558:6779":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:6769:10435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:14093:6678":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:47816:8786":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:3782:4316":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:45480:10779":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:888:6009":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:4265:7471":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:12656:939":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"16:2898:7433":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:113:629":{"crate_id":4,"path":["alloc","alloc","dealloc"],"kind":"function"},"16:4871:7477":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:1489:9703":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13014:6543":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11842:6401":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:2588:7419":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:47479:8746":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:10662:4432":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:11654:6354":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13360:24868":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:47290:8723":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:15186:6893":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6586:7582":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"16:2658:7422":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:43354:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:7326:10511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:15844:7107":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:2495:17700":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:44135:8628":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10634:6187":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6702:10414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:14258:6711":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:7774:257":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"6:545:9677":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:5130:17768":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:1597:9765":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1539:9727":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:2129:4281":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"5:7973:6200":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:4897:6061":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:44080:5151":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11502:6369":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:321:6194":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:47434:8745":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"0:0:2432":{"crate_id":0,"path":["bytes"],"kind":"module"},"16:6096:7504":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:22264:17268":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6747:7398":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11563:17713":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:906:6194":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"11:2519:8944":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"12:0:4091":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:15937:7133":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:47662:8753":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:11164:5344":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:46849:8687":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:4185:17724":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1727:9842":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11616:6381":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:11907:8623":{"crate_id":5,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"11:1892:8012":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:4555:12119":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:3364:4426":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:43280:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:11014:38212":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:15721:7078":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:47109:8714":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10586:6333":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:9835:151":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:13410:4402":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:7337:10516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:12614:17666":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:14322:6740":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:15159:6890":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:12664:1896":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"1:3540:4228":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:4182:7469":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:44997:8643":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:14476:6770":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:2453:6211":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:982:7994":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:45476:10778":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:2784:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10553:24865":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:2099:7740":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:7619:2600":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:4591:8115":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:11420:8143":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:8960:3597":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"5:9337:17813":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:1123:8002":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:41140:8582":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:46952:8697":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:15324:6899":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:1483:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12737:6514":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:5576:133":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"1:42761:3597":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:40280:4315":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:8595:7894":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10524:24864":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:12958:6537":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:41126:8581":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:11751:3597":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7355:7448":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12287:6451":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:13328:6293":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:43169:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7013:7650":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"4:7679:4326":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:13529:12206":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12447:24969":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:1601:7990":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:14585:6784":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:11512:24880":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:44633:4997":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:33493:4294":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:13185:8508":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:8294:10662":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:680:6168":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:41312:2435":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:11346:6356":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:10925:5994":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:4947:9943":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:47529:8748":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:3199:8335":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:39617:4313":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:15985:7148":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:5821:4267":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:4239:7470":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:9534:247":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:23495:10698":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:1648:8010":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:11143:8226":{"crate_id":5,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"6:6602:10378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4957:9946":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12825:6521":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:4967:17740":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:78:1966":{"crate_id":1,"path":["core","usize"],"kind":"module"},"1:41264:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10733:6190":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:8720:8224":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12318:6454":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:12668:1460":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"5:9250:5350":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:7098:4268":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:11749:5998":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:42673:8112":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"9:345:23797":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"11:832:7997":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:5417:1007":{"crate_id":1,"path":["core","iter"],"kind":"module"},"5:4363:8962":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12093:6429":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:5179:10012":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:43832:10775":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"15:288:8936":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:15611:7055":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:6379:5969":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12187:6438":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:12344:6458":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:2820:4222":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:23108:17347":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"18:563:6147":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:544:7391":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:12214:6440":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:6558:5976":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:5377:7493":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:9445:8267":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6366:7386":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:22162:32595":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:726:6180":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:45508:10786":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10455:24862":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:14746:6806":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:479:9637":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:9514:4162":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"5:707:17662":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:7857:4359":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:47567:8750":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"5:3590:4162":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"9:490:8070":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:11575:9451":{"crate_id":5,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"1:10668:4012":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:23526:11935":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:7559:8325":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:4900:7478":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:5652:10231":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:14788:6827":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:47013:8701":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:11040:8287":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:12575:6501":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"1:22187:32601":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"11:1898:8013":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:42960:226":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"16:2818:7429":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:42868:8614":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"4:4473:281":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:44733:4182":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:5390:216":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"5:4199:17726":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:41516:4349":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"11:344:8950":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:3872:17720":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:10670:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:22151:32592":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:42661:8611":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:22133:4951":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5224:10033":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"11:851:7998":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:14955:6855":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11540:6372":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:32868:4479":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:48209:8810":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:7284:10487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:1227:9454":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:12660:914":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"1:41077:8576":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4875:9909":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:41103:8579":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"11:983:7740":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:7518:7737":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12935:6535":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:23395:29081":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:16777:7373":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:45698:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:5282:10063":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:5134:4162":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:3837:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:321:8948":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:8824:8239":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"6:6452:10293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:15595:7054":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:4171:17723":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:45117:12212":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:43467:4453":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:2226:4429":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:9437:8264":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:5196:7487":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:8326:10669":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6406:7548":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:46917:8695":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:3481:4306":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11053:6350":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"11:776:4263":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"0:6:2429":{"crate_id":0,"path":["bytes","buf"],"kind":"module"},"17:15624:7060":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:31346:4427":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6873:7635":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"18:80:8928":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:2206:6422":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:41444:146":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:24259:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:8623:7896":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:16814:7382":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:8654:17719":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"5:6296:232":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:42495:8490":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:22674:4983":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:8872:8623":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"1:47546:8749":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5503:10164":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:44117:8623":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"5:12229:36122":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:11127:36138":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:3306:7405":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:1944:8100":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"1:41236:8586":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"5:12593:8300":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:16250:7235":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:6513:10322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:12140:8110":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:23276:8529":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:45797:4327":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:6300:7532":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"11:1858:3597":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:9397:8258":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2062:8333":{"crate_id":2,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"1:912:202":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:11800:4182":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:5170:7486":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:14365:6749":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13387:6571":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:46931:8696":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6852:10454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5319:10078":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:46998:8700":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10311:24857":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:537:5955":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:2096:210":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:14165:6705":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11576:6377":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:894:7400":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"5:699:8089":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:11370:5348":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:10405:24860":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:1625:9790":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:2235:4428":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:5280:7490":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:2568:2606":{"crate_id":5,"path":["std","io"],"kind":"module"},"17:15884:7118":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:40456:8574":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:42473:182":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:2663:4194":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:40276:3324":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"5:11660:2430":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:45808:4236":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:23221:8528":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:15144:6886":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:4362:3597":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:11977:5355":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:3322:261":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"17:16684:7350":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:896:3597":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:7510:4238":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"16:2528:7416":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:9544:5987":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:8609:7459":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6737:10425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:43586:4012":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:7856:4260":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:3679:3404":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"5:8977:8248":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:45016:8645":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:7273:6054":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:12161:8111":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:0:4094":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:15659:7064":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:12642:492":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"5:8439:4198":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4842:9885":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:2504:7415":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:2303:201":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:45153:8652":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6186:7515":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:383:8085":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:41047:8575":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:22256:17713":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:1657:9813":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:22175:32598":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:7916:36154":{"crate_id":5,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:12975:12200":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12774:6517":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:15771:7094":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10658:123":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:23051:17355":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:7317:10510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:14159:32214":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:6169:9461":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5420:10115":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:7806:8971":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12430:6468":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:48118:8800":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:8102:8154":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"17:11855:6402":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:14094:4347":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:4501:8467":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:12028:8967":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4805:9857":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"3:0:4085":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:15792:7098":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:123:5946":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12055:6417":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5025:9981":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:8803:162":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10431:24861":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:23141:17346":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"4:4519:4162":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:44096:5150":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12357:6461":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:40293:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:8587:4180":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6729:7621":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:8175:10645":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:6711:7611":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:7562:10623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11063:38213":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:643:6138":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:6659:10398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:16672:7348":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:10840:2435":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:41332:8591":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"11:292:8945":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:15062:6877":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7835:24799":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:45504:10785":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:23346:10695":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:15995:7151":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:7723:12165":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"9:412:23784":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:9847:5992":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:9842:8164":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:6687:10410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:41548:4351":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13730:6603":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:1494:9705":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:15809:7101":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:11262:5997":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:15963:7143":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"4:6700:4263":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:1366:7740":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:13452:4403":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:15128:6884":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:4767:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"5:8092:8086":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:9373:8254":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:44703:4400":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:22652:17271":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"5:6775:4363":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"6:6360:10240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:23417:8538":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:7804:38204":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4881:9911":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:8173:17688":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"14:164:23867":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:1005:7998":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:1632:8306":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12643:6353":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:8950:8117":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"17:15691:7075":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"9:226:8623":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:43001:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:47077:8712":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:651:6138":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:1535:4996":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:13125:8504":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:8617:2602":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"4:884:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12065:6419":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:10255:24855":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5447:7495":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:5664:10236":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:43579:4011":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:47964:8790":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:14122:6689":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:9352:17815":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:389:5950":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:2787:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:1675:9820":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:6901:7638":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:10113:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:6513:6039":{"crate_id":4,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:22164:32597":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11458:6365":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"7:78:23776":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2722:7425":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:5623:10220":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:47208:8719":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:6746:6007":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:7468:7730":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12621:6505":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:14883:6844":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:41454:4344":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5611:10214":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:12667:1966":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"17:12229:6442":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:1667:9819":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:14985:6858":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:7308:10504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:46864:8688":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:7539:10611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:8807:17780":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12409:6466":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:23617:8558":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"13:110:38190":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:3317:121":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"11:718:7991":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:928:6012":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:48061:8795":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:23014:4414":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:45681:163":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:5265:10052":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:8289:8166":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"17:16766:7372":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:4829:9875":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:32935:8570":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:44569:4994":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:2339:151":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"15:306:8940":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11318:6355":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:1233:6201":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:8706:8222":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:32914:7790":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:43430:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:6710:10415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:11993:5002":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:4157:6007":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:10622:156":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:47396:8743":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:6779:7624":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:10672:4434":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6387:7541":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:44559:4992":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:5515:6007":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"11:813:7994":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"13:0:4086":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:14368:5972":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12146:6435":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:43393:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:31704:208":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:12665:1878":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"16:8295:7844":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:16029:7158":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"11:357:5948":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:42527:12172":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:11256:5996":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:7787:4396":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:2275:7740":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:4436:8113":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:4725:17750":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6719:10417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:2736:4195":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:3469:4203":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:15817:7103":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:3712:4996":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5395:10104":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12201:6439":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:5328:6223":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:14776:6825":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"11:1885:8011":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:2261:8310":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:8360:2916":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5165:10011":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6390:10265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:7494:10587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:7935:7818":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:1919:12053":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:40388:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4792:9848":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6500:23901":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7539:7739":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:7635:4331":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:43049:4996":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:7786:38203":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:2746:7426":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:4243:17728":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:48107:8799":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:2918:7434":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:13399:6572":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12854:6216":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:3327:4259":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:7878:36150":{"crate_id":5,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"17:5154:6221":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"5:2344:3299":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"1:34189:4298":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:6810:4358":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:44801:8638":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:3082:9458":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:41980:4369":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:3517:4189":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:10879:4206":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:45684:176":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:8102:7828":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12878:6528":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:15513:7042":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:735:29060":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12979:6540":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:14211:8523":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:45492:10782":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12331:6456":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:6578:10366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6254:7524":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:1785:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:8134:7456":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:7251:17817":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:6237:7519":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:14152:6701":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:8304:10663":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:1703:9833":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10880:6339":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6911:7639":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:7424:10545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:2685:4414":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:6850:7632":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:14870:6842":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:2424:4233":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:1569:9746":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:6638:10392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:1001:8000":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:38983:4311":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:23705:8566":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"5:6280:5976":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:11221:6072":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:3558:128":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13575:6539":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:5940:5976":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:42713:8495":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:2509:17704":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"4:4552:4162":{"crate_id":4,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:6455:5972":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:14426:164":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:4322:4162":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:8125:5994":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"4:3086:9459":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:12034:5006":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13066:6552":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:45484:10780":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:6459:10295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:623:38223":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:8007:10644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8030:4211":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:5506:215":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"5:12236:8151":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:7409:36149":{"crate_id":5,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"1:23547:17713":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:11200:6353":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11690:6384":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:5414:6035":{"crate_id":4,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:15587:7053":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:16191:7220":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10766:6191":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:23683:8564":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"5:789:166":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4914:9930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"11:1042:23861":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3357:12105":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"5:1867:722":{"crate_id":5,"path":["std","env"],"kind":"module"},"4:7074:4267":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:33035:278":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"4:1397:8000":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:2810:10691":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:10666:4011":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:6590:10371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:22647:17713":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:0:585":{"crate_id":1,"path":["core"],"kind":"module"},"4:3686:194":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:423:8953":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:32946:258":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:578:9695":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:4202:4996":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:44642:5000":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5117:10007":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:2433:23928":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:46832:8686":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:5139:17769":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"5:3334:9312":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:3693:7465":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:3743:6214":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:22789:17267":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8393:134":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"8:0:4087":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:10507:8277":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:6062:7444":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7946:7452":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:14137:6695":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:3858:8308":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:31061:11895":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:8090:4362":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:45041:8465":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13819:6627":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:5058:7482":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"9:318:9619":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:4371:17747":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:969:8007":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11112:38214":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:2465:7408":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:963:4260":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:8637:4181":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"5:11983:8147":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:13162:8507":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:598:38221":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:7009:6068":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:42820:4526":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12787:6518":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:6756:10428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:14443:6762":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:9322:17814":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:15746:7086":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:11402:10677":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:41370:4184":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:12272:6447":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5196:10020":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2077:8334":{"crate_id":2,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"16:155:5944":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:718:6177":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:102:9449":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:3699:3597":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:45032:8583":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:6109:7509":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6026:7439":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5357:10085":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"11:859:7999":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:6727:10418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"4:6915:6007":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:750:7992":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:22205:17269":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:3937:8110":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13219:6559":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:23094:17713":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:683:8088":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:8765:8116":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:3877:6215":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:9458:36111":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:8243:10649":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:2440:4260":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:6736:38200":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:4963:17737":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:2863:504":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"11:2533:9616":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:41041:8465":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:7505:7734":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13585:6585":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"17:16021:7157":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11214:6071":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:10062:24850":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:14811:6836":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:919:2600":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:5494:10159":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:559:9685":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:3075:272":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"5:8607:2599":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"1:45025:8510":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"11:2115:8000":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:7248:6051":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:31331:4284":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:5717:5342":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1514:9713":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:4402:7472":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:3640:4172":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:16828:7383":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:2988:7437":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:8093:7827":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:12243:8151":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:3046:23930":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:12546:4989":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:11955:5001":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:43057:2600":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:1589:9760":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:7570:8964":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:1382:8002":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:2493:4404":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"17:12373:6463":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:635:6160":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:14307:6736":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6950:7642":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:7421:24797":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10150:24852":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:14521:6775":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:45706:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6656:7601":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:47307:8724":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:41486:4347":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:3328:9065":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:46902:8694":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:4489:8466":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:47508:8747":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:909:11936":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:14345:119":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:41251:8588":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:5136:12136":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:8966:8247":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"4:1623:222":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:4150:7468":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:44541:4993":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:16068:7170":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:41425:4335":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:3139:6226":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:47191:8718":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:9263:5351":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"17:15640:7063":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8280:4377":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4890:9916":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:3373:4205":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:13648:6592":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:14373:6751":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:45771:8676":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"4:2579:9455":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:4816:9865":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:31731:4951":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:31325:3196":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:22258:17265":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:6670:10401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:1551:9736":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:42936:222":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"1:41955:4365":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"14:213:7986":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13344:6569":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5036:9986":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12663:6506":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:4776:8471":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:46969:8698":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:48133:8801":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:23453:29084":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:5344:8122":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:33034:118":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"11:1579:8009":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:10882:4202":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:5045:17736":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13771:6612":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:8700:17748":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:7108:4269":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:14413:6759":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13030:6545":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:2025:11827":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"6:5057:9995":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:48072:8796":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11423:24878":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:47906:8788":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:43860:29247":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:15001:6862":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:22685:32602":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:12659:933":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"5:619:8087":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:14897:6845":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:8630:4182":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"6:8249:10650":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:8107:8156":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"17:15048:6876":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:6197:4346":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3042:17713":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:23639:8560":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:22382:17266":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:14678:6796":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:48171:8808":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:10756:5349":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:41495:4348":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:3124:23931":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5482:10156":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:481:6136":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:10486:8098":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"14:31:7981":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:11179:36118":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:11241:5995":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:15389:6950":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:14454:6763":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6500:10316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5341:10083":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:473:9634":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:1866:4263":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:11483:10679":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13207:6558":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:41163:12142":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:515:6135":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:43132:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10815:6334":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"5:4355:8961":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:15928:7132":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11888:6404":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5019:9978":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:6054:8127":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:3079:271":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:34775:4304":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:7041:7446":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:8260:10654":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:12260:6004":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:7553:10620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13876:6641":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:10918:5148":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8806:4374":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:11594:8296":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:2258:133":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:41961:4212":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:34323:4300":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:8695:10671":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:12653:766":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"5:940:7993":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:7055:7654":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:2877:147":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:12022:6414":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7413:7717":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:41746:4356":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:808:8007":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6858:10455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:7515:10601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:6826:2600":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:10989:1737":{"crate_id":1,"path":["core","slice"],"kind":"module"},"6:5462:10145":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:45180:8656":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:465:8958":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:7004:10694":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:5740:6333":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:43206:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:47138:8715":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:8666:7790":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:41300:8590":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:778:264":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:3324:8012":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:9287:2600":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:3467:4202":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:4127:4263":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:12077:6001":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:16730:7363":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:3576:4230":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"5:8624:2435":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"5:3707:3300":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"17:12035:6415":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:8633:24803":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:3596:154":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:8582:7891":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13133:6554":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:5253:7489":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:11080:8270":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:12990:6541":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:41504:4357":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:14834:6837":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"9:380:23783":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:4927:7479":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:33002:4481":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:12562:6500":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13909:6647":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11794:24899":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:4513:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:1639:4263":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:2687:4415":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:10603:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"6:1530:9721":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1563:9744":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:45739:8672":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:7984:10633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:16164:7208":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:22276:8527":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:3158:150":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:16650:7343":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:43874:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"14:7:7981":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:11383:5350":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:497:9645":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:7741:4342":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:6817:5983":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:3331:9311":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:10604:3404":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:4981:7481":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12608:6504":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:44719:2435":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:6645:10393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6792:7625":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"5:1132:8006":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:608:6155":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:23409:8537":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:4703:17749":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:34390:4299":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:5725:6332":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5529:10171":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:32945:251":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:7519:2600":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:41202:8585":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:41988:4371":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11882:5005":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:41587:4354":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4970:9951":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:6471:5975":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:34256:4302":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12907:6578":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:12645:1352":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"4:7591:222":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:41472:8594":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:787:122":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:44987:4181":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:1885:4260":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:6267:7525":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:15:3363":{"crate_id":1,"path":["core","write"],"kind":"macro"},"5:3097:150":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"1:42830:4529":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:44855:5003":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:14008:6663":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13093:6377":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:46817:8685":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:4965:17739":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:3069:175":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:48014:8792":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:1114:8000":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"11:1136:8006":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:5733:5343":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"1:3072:157":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:4193:17725":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12686:6507":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:9529:246":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:4840:6060":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:2964:7436":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:23331:8530":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3593:153":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:16329:7263":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:724:8304":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:14482:4237":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:44662:4999":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:1632:3597":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5107:10006":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:42851:4554":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6486:10315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:23584:8555":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:8331:8106":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:16219:7227":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:1411:8006":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:8264:7840":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:15578:7052":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11485:6366":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7209:7691":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:2099:209":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:3809:4320":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:4902:9921":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5111:7484":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:3371:4204":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:680:6200":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:15785:7097":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:3066:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:10667:6188":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:7694:6028":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:44611:4332":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6820:24793":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"4:4488:6025":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:10876:4204":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:39038:4312":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:40232:4229":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:9391:119":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:14598:6785":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5044:9991":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:7569:32943":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:5154:17770":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:10821:6335":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:23650:8561":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"5:4838:17726":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:10883:169":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"7:31:23769":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:1584:9758":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6981:7458":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4869:9908":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:3426:4207":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:6088:8131":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:2348:4171":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"17:16177:7214":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:14021:6664":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10875:165":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:1885:8097":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"6:517:9662":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13757:6611":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:16417:7281":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:40196:4314":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"9:168:11482":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:3423:4225":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:13553:24869":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:40348:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:5585:10197":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:2323:8002":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:11920:5009":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"11:427:8954":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:9237:5348":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6428:10284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:0:325":{"crate_id":4,"path":["alloc"],"kind":"module"},"7:0:1956":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:10333:24858":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:7430:10547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5205:10025":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:7750:8332":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:15677:7072":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:44622:4988":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:12609:11491":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:8188:8163":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:15971:7146":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:7627:2600":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:8336:8169":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:8434:8172":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"4:2291:10687":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11643:6353":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:5313:8122":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:22924:17352":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:4:1292":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:6606:232":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:45530:135":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:7668:4261":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:9539:5986":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:45323:8658":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:41722:2602":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:11151:8163":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:38928:4310":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:2340:8016":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:9386:8255":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:3095:238":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5604:10211":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:36997:4308":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:676:2600":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:12640:436":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"17:16288:7249":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:4653:8469":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:4384:8963":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:3887:6231":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6967:7441":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11757:6390":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:45337:12213":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:5933:232":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:14845:6839":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14057:6673":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:2394:2600":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:7383:7714":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:11064:10676":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"5:2811:4197":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:9483:4528":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5241:10040":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4964:9949":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:15861:7115":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:1690:9829":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:23433:29083":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:12579:4990":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:10965:6349":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:8011:7455":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:6893:10480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5255:10046":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:4852:10535":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:12662:1884":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"5:5803:5344":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"17:10975:38211":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:6585:1982":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"5:6779:8134":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7398:38201":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:901:6193":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:5069:10004":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:8237:10648":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13260:24866":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:14940:6851":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:44088:8621":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:1684:9826":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:12625:36137":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:22787:17713":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:13476:12199":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:48156:8807":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:12658:927":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"1:41946:4363":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:8231:10647":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14396:6756":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:11069:8165":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:6419:7393":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:47269:8722":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:72:996":{"crate_id":1,"path":["core","isize"],"kind":"module"},"16:5415:7494":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:1696:9830":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:2878:7432":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:698:6171":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:9226:211":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"5:988:17673":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:1919:8098":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"5:8167:17665":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2568:7418":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:9210:8249":{"crate_id":5,"path":["std","pipe","PipeReader"],"kind":"struct"},"5:11455:174":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:15951:7140":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:14545:6776":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:6651:10396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:2243:6204":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:15477:7013":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7256:7704":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:2159:1397":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"16:2638:7421":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11102:6351":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:8649:8218":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:12654:782":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"5:6133:5968":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:42908:8615":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"17:11564:6376":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13971:6657":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5568:10190":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6422:10283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7459:7727":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:3396:4292":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:2858:7431":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:11196:5351":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:41939:4361":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:47641:8752":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:41285:12165":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:16538:7299":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:3426:4226":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:14498:6771":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:1996:8101":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"1:2834:6056":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"5:562:9210":{"crate_id":5,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"11:686:7990":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:2413:23902":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:2618:7420":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:14069:6676":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:42829:4530":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:5512:10165":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"18:507:6138":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:3719:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:2156:8308":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:44590:4987":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:41088:29109":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:7728:4525":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:41274:8589":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"11:2126:8002":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:3697:4173":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"16:5083:7483":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6416:10280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1711:9837":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:4850:4441":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:42777:2600":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:15868:7116":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:43882:4427":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:9271:3597":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:6954:8139":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:595:5956":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"5:12648:1771":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"5:8028:5990":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"10:0:4089":{"crate_id":10,"path":["adler"],"kind":"module"},"11:2513:8897":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:7987:7823":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:16350:7269":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:8063:24800":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:15035:6875":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:45358:8663":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:41377:4332":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:15699:7076":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:4954:7480":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:4701:4440":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:10295:11830":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:16230:7232":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:4039:8111":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:1507:9711":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7977:7453":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:13195:6557":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:15353:6919":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11328:38217":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:7902:36153":{"crate_id":5,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:41573:4353":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"14:40:6627":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:6899:17809":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:3401:4297":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:14350:6747":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:40629:12095":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:11438:6363":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:0:4096":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:5316:7491":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"14:219:7988":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:22:845":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:41538:4350":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:436:197":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:40:4239":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:16700:7355":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:5477:10154":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:531:6142":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11552:6373":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:16512:6612":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:16269:7248":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:2770:7427":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12800:6519":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:22384:8527":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:23628:8559":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"4:3358:8013":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:7956:7821":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:11118:2607":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:43317:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:8569:4213":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"16:2794:7428":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10300:11493":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:44783:8637":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:41463:4345":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11395:24877":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:12643:1924":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"16:7762:7770":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:9570:8143":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"11:2297:8000":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:12048:5003":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:45781:192":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:23661:8562":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:8299:8167":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"17:14910:6846":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:7023:245":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:10660:133":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:7738:8330":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:47094:8713":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:1211:8969":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:3925:4260":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:16525:6626":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:15763:7091":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:40445:8337":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:15919:7129":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6040:7442":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:1063:38188":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:14730:6801":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:5:1982":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:1871:4260":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:7966:7822":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:14924:6849":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5488:10157":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:4255:17731":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:14611:6787":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:6505:10317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:7502:5989":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:6896:8135":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:8334:3957":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:14665:6795":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:47993:8791":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:15074:6878":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:4850:10533":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:11995:6412":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:46984:8699":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6610:10379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:2043:4162":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:6310:4336":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:12062:5007":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:46800:8682":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:4517:8114":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10283:24856":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:23000:17354":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:12661:1902":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"6:6523:10329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:12898:6533":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1636:2600":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11743:6388":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13465:6576":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:11603:6379":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:6142:24789":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"14:159:7981":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7880:7552":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:11089:8166":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:45554:8669":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5441:10130":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:45565:12223":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:16341:7265":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12385:6464":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}