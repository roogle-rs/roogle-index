{"root":"0:0:2040","crate_version":"0.12.2","includes_private":false,"index":{"2:2933:1805":{"id":"2:2933:1805","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42078:3443-0:456:2027":{"id":"a:2:42078:3443-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42078:3443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2924-0:456:2027":{"id":"b:2:2924-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2927:137","2:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32275:3408-0:155:2028":{"id":"a:2:32275:3408-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32275:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[312,0],"end":[317,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2966:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:149:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:210:2729":{"id":"0:210:2729","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_mutex.rs","begin":[146,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9426:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2929-0:195:2029":{"id":"b:2:2929-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2932:137","2:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13205:34682":{"id":"2:13205:34682","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12336:1720","crate::ops::IndexMut":"2:3415:3299","str::slice_unchecked":"2:13204:34681"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:2726":{"id":"0:166:2726","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_fair_mutex.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32275:3408-0:195:2029":{"id":"a:2:32275:3408-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32275:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[454,0],"end":[506,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeTimed","id":"20:479:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:305:2847","0:306:2848","0:307:2849","0:308:2850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2644-0:125:2026":{"id":"b:2:2644-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2646:2906"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:281:162":{"id":"0:281:162","crate_id":0,"name":"Instant","span":{"filename":"src/raw_rwlock.rs","begin":[207,4],"end":[207,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9426:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:3137:247-0:355:2033":{"id":"a:2:3137:247-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13186:34677":{"id":"2:13186:34677","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3172:3693-0:456:2027":{"id":"a:2:3172:3693-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3172:3693","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:172:2730":{"id":"0:172:2730","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_fair_mutex.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:2728","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275:2808":{"id":"0:275:2808","crate_id":0,"name":"bump_shared","span":{"filename":"src/raw_rwlock.rs","begin":[175,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3756-0:155:2028":{"id":"b:2:3756-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32216:237-0:195:2029":{"id":"a:2:32216:237-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13304:34699":{"id":"2:13304:34699","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12834:136","`FromStr`":"2:12833:3388"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12833:3388","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12833:3388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:801":{"id":"0:151:801","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[320,4],"end":[324,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10278:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10259:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13214:32558":{"id":"2:13214:32558","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13215:32554"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44150:6916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13314:34700":{"id":"2:13314:34700","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4944:34700"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44175:6821","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[14,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:159:2533","0:160:2014","0:161:2303","0:162:2555","0:163:2296","0:164:2727"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2917:3722":{"id":"2:2917:3722","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2891:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2929-0:259:2030":{"id":"b:2:2929-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2932:137","2:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:268:2799":{"id":"0:268:2799","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[116,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:2804":{"id":"0:271:2804","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[148,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:698":{"id":"0:472:698","crate_id":0,"name":"eq","span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2929-0:456:2027":{"id":"b:2:2929-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2932:137","2:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42079:3442-0:195:2029":{"id":"a:2:42079:3442-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42079:3442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:450:698":{"id":"0:450:698","crate_id":0,"name":"eq","span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:6748":{"id":"2:13211:6748","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12330:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43846:6740","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423-0:125:2026":{"id":"0:423-0:125:2026","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,21],"end":[44,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::Once","name":"Once","id":"0:125:2026","glob":false}}},"0:446":{"id":"0:446","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10304:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:447:801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:265:2792":{"id":"0:265:2792","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[80,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3756-0:355:2033":{"id":"b:2:3756-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13218:32567":{"id":"2:13218:32567","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44168:6747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3137:247-0:456:2027":{"id":"a:2:3137:247-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2644-0:355:2033":{"id":"b:2:2644-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2646:2906"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:101:2025":{"id":"0:101:2025","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[109,0],"end":[109,79]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:848:2025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:155:2028":{"id":"0:155:2028","crate_id":0,"name":"RawFairMutex","span":{"filename":"src/raw_fair_mutex.rs","begin":[12,0],"end":[12,34]},"visibility":"public","docs":"Raw fair mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:42079:3442-0:155:2028","a:2:32275:3408-0:155:2028","a:2:42078:3443-0:155:2028","a:2:3172:3693-0:155:2028","a:2:32216:237-0:155:2028","a:2:3137:247-0:155:2028","b:2:3756-0:155:2028","b:2:2929-0:155:2028","b:2:2924-0:155:2028","b:2:2644-0:155:2028","b:2:2641-0:155:2028","b:2:2918-0:155:2028","b:2:2914-0:155:2028","0:168","0:165","0:158"]}}},"0:293:2826":{"id":"0:293:2826","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[324,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:27258":{"id":"2:13289:27258","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361:2034":{"id":"0:361:2034","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[41,0],"end":[41,80]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](crate::Mutex) for more details about the underlying mutex\nprimitive.","links":{"crate::Mutex":"0:94:186"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutex","id":"20:256:2034","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:98:187":{"id":"0:98:187","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[100,0],"end":[100,67]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:840:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:2924-0:355:2033":{"id":"b:2:2924-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2927:137","2:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128":{"id":"0:128","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[79,0],"end":[310,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:129:1177","0:130:1707","0:131:438","0:134:2695"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13217:34683":{"id":"2:13217:34683","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44140:6915","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13245:34684":{"id":"2:13245:34684","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12873:3509","str::split":"2:13236:28068","prim@char":"1:12330:471","`DoubleEndedIterator`":"2:8256:129","str::rsplit_terminator":"2:13248:34685"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43926:6908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:34695":{"id":"2:13286:34695","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:2840":{"id":"0:300:2840","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[422,4],"end":[426,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[154,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_shared","bump_exclusive"],"trait":{"name":"RawRwLockFair","id":"20:447:2805","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:273:2806","0:274:2807","0:275:2808","0:276:2810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13187:34678":{"id":"2:13187:34678","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42079:3442-0:355:2033":{"id":"a:2:42079:3442-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42079:3442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3756-0:259:2030":{"id":"b:2:3756-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:169:130":{"id":"0:169:130","crate_id":0,"name":"Duration","span":{"filename":"src/raw_fair_mutex.rs","begin":[53,4],"end":[53,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"b:2:2641-0:443:2019":{"id":"b:2:2641-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2643:2904"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42078:3443-0:443:2019":{"id":"a:2:42078:3443-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42078:3443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:124:2638":{"id":"0:124:2638","crate_id":0,"name":"done","span":{"filename":"src/once.rs","begin":[49,4],"end":[51,5]},"visibility":"public","docs":"Returns whether the associated `Once` has successfully executed a\nclosure.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2641-0:195:2029":{"id":"b:2:2641-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2643:2904"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:294:2829":{"id":"0:294:2829","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[333,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359:2883":{"id":"0:359:2883","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[18,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"2:23400:2880","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42079:3442-0:31:2018":{"id":"a:2:42079:3442-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42079:3442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:262:2533":{"id":"0:262:2533","crate_id":0,"name":"INIT","span":{"filename":"src/raw_rwlock.rs","begin":[60,4],"end":[62,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"2:13277:34690":{"id":"2:13277:34690","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[191,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockDowngrade","id":"20:452:2812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:278:2813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13275:34689":{"id":"2:13275:34689","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:2726":{"id":"0:205:2726","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_mutex.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13310:27272":{"id":"2:13310:27272","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:29193":{"id":"2:13202:29193","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13208:29221":{"id":"2:13208:29221","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13209:29222"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13313:30390":{"id":"2:13313:30390","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:38883"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:1177":{"id":"0:34:1177","crate_id":0,"name":"new","span":{"filename":"src/condvar.rs","begin":[98,4],"end":[102,5]},"visibility":"public","docs":"Creates a new condition variable which is ready to be waited on and\nnotified.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[319,0],"end":[325,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10304:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:94:186":{"id":"0:94:186","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[86,0],"end":[86,49]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same mutex in succession, which can starve\nother threads waiting to acquire the mutex. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na mutex it has just released, this can starve other threads.\n\nThis mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the mutex.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `MutexGuard::unlock_fair` when\nunlocking a mutex instead of simply dropping the `MutexGuard`.\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `Mutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the mutex is fair on average.\n- Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::Mutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(Mutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:186","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:200:2303":{"id":"0:200:2303","crate_id":0,"name":"lock","span":{"filename":"src/raw_mutex.rs","begin":[66,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:2555":{"id":"0:201:2555","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_mutex.rs","begin":[78,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:357":{"id":"0:357","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[15,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"GetThreadId","id":"20:215:2881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:358:2533","0:359:2883"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3172:3693-0:31:2018":{"id":"a:2:3172:3693-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3172:3693","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:305:2847":{"id":"0:305:2847","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/raw_rwlock.rs","begin":[456,4],"end":[466,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9426:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:2386":{"id":"0:167:2386","crate_id":0,"name":"bump","span":{"filename":"src/raw_fair_mutex.rs","begin":[47,4],"end":[49,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2018":{"id":"0:31:2018","crate_id":0,"name":"Condvar","span":{"filename":"src/condvar.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"A Condition Variable\n\nCondition variables represent the ability to block a thread such that it\nconsumes no CPU time while waiting for an event to occur. Condition\nvariables are typically associated with a boolean predicate (a condition)\nand a mutex. The predicate is always verified inside of the mutex before\ndetermining that thread must block.\n\nNote that this module places one additional restriction over the system\ncondition variables: each condvar can be used with only one mutex at a\ntime. Any attempt to use multiple mutexes on the same condition variable\nsimultaneously will result in a runtime panic. However it is possible to\nswitch to a different mutex if there are no threads currently waiting on\nthe condition variable.\n\n# Differences from the standard library `Condvar`\n\n- No spurious wakeups: A wait will only return a non-timeout result if it\n  was woken up by `notify_one` or `notify_all`.\n- `Condvar::notify_all` will only wake up a single thread, the rest are\n  requeued to wait for the `Mutex` to be unlocked by the thread that was\n  woken up.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `Condvar` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n\n# Examples\n\n```\nuse parking_lot::{Mutex, Condvar};\nuse std::sync::Arc;\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\n// Inside of our lock, spawn a new thread, and then wait for it to start\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock();\n    *started = true;\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock();\nif !*started {\n    cvar.wait(&mut started);\n}\n// Note that we used an if instead of a while loop above. This is only\n// possible because parking_lot's Condvar will never spuriously wake up.\n// This means that wait() will only return after notify_one or notify_all is\n// called.\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:33","a:2:42079:3442-0:31:2018","a:2:32275:3408-0:31:2018","a:2:42078:3443-0:31:2018","a:2:3172:3693-0:31:2018","a:2:32216:237-0:31:2018","a:2:3137:247-0:31:2018","b:2:3756-0:31:2018","b:2:2929-0:31:2018","b:2:2924-0:31:2018","b:2:2644-0:31:2018","b:2:2641-0:31:2018","b:2:2918-0:31:2018","b:2:2914-0:31:2018","0:65","0:67"]}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[519,0],"end":[523,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10304:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:264:2788":{"id":"0:264:2788","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[67,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13204:34681":{"id":"2:13204:34681","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12336:1720","str::slice_mut_unchecked":"2:13205:34682","crate::ops::Index":"2:39530:3298"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:3627":{"id":"5:5614:3627","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:2730":{"id":"0:211:2730","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_mutex.rs","begin":[163,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44644:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:35398":{"id":"5:5620:35398","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284:2818":{"id":"0:284:2818","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/raw_rwlock.rs","begin":[236,4],"end":[250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44644:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:2727":{"id":"0:203:2727","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_mutex.rs","begin":[113,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:2727":{"id":"0:164:2727","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_fair_mutex.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2644-0:456:2027":{"id":"b:2:2644-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2646:2906"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2644-0:259:2030":{"id":"b:2:2644-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2646:2906"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:459:2626":{"id":"0:459:2626","crate_id":0,"name":"Poisoned","span":{"filename":"src/once.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":"A closure was executed but panicked.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:426-0:195:2029":{"id":"0:426-0:195:2029","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[46,0],"end":[46,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_mutex::RawMutex","name":"RawMutex","id":"0:195:2029","glob":false}}},"2:2932:137":{"id":"2:2932:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32140:8904","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13185:2436":{"id":"2:13185:2436","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:34691":{"id":"2:13279:34691","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3172:3693-0:195:2029":{"id":"a:2:3172:3693-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3172:3693","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[205,0],"end":[268,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockTimed","id":"20:454:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:130","0:281:162","0:282:2816","0:283:2817","0:284:2818","0:285:2819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13228:3767":{"id":"2:13228:3767","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41986:191","prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:466":{"id":"0:466","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:467:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:82:2021":{"id":"0:82:2021","crate_id":0,"name":"FairMutex","span":{"filename":"src/fair_mutex.rs","begin":[77,0],"end":[77,57]},"visibility":"public","docs":"A mutual exclusive primitive that is always fair, useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\nThe regular mutex provided by `parking_lot` uses eventual fairness\n(after some time it will default to the fair algorithm), but eventual\nfairness does not provide the same guarantees an always fair method would.\nFair mutexes are generally slower, but sometimes needed.\n\nIn a fair mutex the waiters form a queue, and the lock is always granted to\nthe next requester in the queue, in first-in first-out order. This ensures\nthat one thread cannot starve others by quickly re-acquiring the lock after\nreleasing it.\n\nA fair mutex may not be interesting if threads have different priorities (this is known as\npriority inversion).\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `FairMutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n\n# Examples\n\n```\nuse parking_lot::FairMutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(FairMutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:186","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32218:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32275:3408-0:259:2030":{"id":"a:2:32275:3408-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32275:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13260:29233":{"id":"2:13260:29233","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2641-0:456:2027":{"id":"b:2:2641-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2643:2904"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:389:2039":{"id":"0:389:2039","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[125,0],"end":[125,98]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockUpgradableReadGuard","id":"20:888:2039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:270:2727":{"id":"0:270:2727","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_rwlock.rs","begin":[142,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:448":{"id":"0:448","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32218:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2641-0:125:2026":{"id":"b:2:2641-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2643:2904"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42078:3443-0:31:2018":{"id":"a:2:42078:3443-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42078:3443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:443:2019":{"id":"0:443:2019","crate_id":0,"name":"WaitTimeoutResult","span":{"filename":"src/condvar.rs","begin":[23,0],"end":[23,35]},"visibility":"public","docs":"A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:42079:3442-0:443:2019","a:2:32275:3408-0:443:2019","a:2:42078:3443-0:443:2019","a:2:3172:3693-0:443:2019","a:2:32216:237-0:443:2019","a:2:3137:247-0:443:2019","b:2:3756-0:443:2019","b:2:2929-0:443:2019","b:2:2924-0:443:2019","b:2:2644-0:443:2019","b:2:2641-0:443:2019","b:2:2918-0:443:2019","b:2:2914-0:443:2019","b:5:736-0:443:2019","0:454","0:451","0:449","0:446","0:448","0:453"]}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[512,0],"end":[517,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2966:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:368:2032":{"id":"0:368:2032","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[68,0],"end":[69,70]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedReentrantMutexGuard","id":"20:864:2032","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:32216:237-0:355:2033":{"id":"a:2:32216:237-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13295:34696":{"id":"2:13295:34696","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2914-0:31:2018":{"id":"b:2:2914-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2917:3722"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:739:3788":{"id":"5:739:3788","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365:2035":{"id":"0:365:2035","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[59,0],"end":[59,98]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutexGuard","id":"20:855:2035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13196:2869":{"id":"2:13196:2869","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:430-0:368:2032":{"id":"0:430-0:368:2032","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,27],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::MappedReentrantMutexGuard","name":"MappedReentrantMutexGuard","id":"0:368:2032","glob":false}}},"2:13207:29218":{"id":"2:13207:29218","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13206:29217","str::split_at_mut_checked":"2:13209:29222"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5630:9605":{"id":"5:5630:9605","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439-0:377:234":{"id":"0:439-0:377:234","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,73],"end":[53,88]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockReadGuard","name":"RwLockReadGuard","id":"0:377:234","glob":false}}},"2:2646:2906":{"id":"2:2646:2906","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2022":{"id":"0:86:2022","crate_id":0,"name":"FairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[91,0],"end":[91,75]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:840:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13225:28786":{"id":"2:13225:28786","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[40,0],"end":[50,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2724","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:166:2726","0:167:2386"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:297:2836":{"id":"0:297:2836","crate_id":0,"name":"try_upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[380,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2641-0:31:2018":{"id":"b:2:2641-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2643:2904"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:416-0:89:2023":{"id":"0:416-0:89:2023","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,72],"end":[42,92]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::MappedFairMutexGuard","name":"MappedFairMutexGuard","id":"0:89:2023","glob":false}}},"a:2:42078:3443-0:259:2030":{"id":"a:2:42078:3443-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42078:3443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:276:2810":{"id":"0:276:2810","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[184,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3756-0:456:2027":{"id":"b:2:3756-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2924-0:125:2026":{"id":"b:2:2924-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2927:137","2:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:299:2839":{"id":"0:299:2839","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/raw_rwlock.rs","begin":[400,4],"end":[419,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:289":{"id":"0:289","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[294,0],"end":[320,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursiveTimed","id":"20:464:2823","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:290:2824","0:291:2825"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3756-0:125:2026":{"id":"b:2:3756-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:456:2027":{"id":"0:456:2027","crate_id":0,"name":"OnceState","span":{"filename":"src/once.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"Current state of a `Once`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:457:2624","0:459:2626","0:461:2628","0:463:2630"],"impls":["0:122","a:2:42079:3442-0:456:2027","a:2:32275:3408-0:456:2027","a:2:42078:3443-0:456:2027","a:2:3172:3693-0:456:2027","a:2:32216:237-0:456:2027","a:2:3137:247-0:456:2027","b:2:3756-0:456:2027","b:2:2929-0:456:2027","b:2:2924-0:456:2027","b:2:2644-0:456:2027","b:2:2641-0:456:2027","b:2:2918-0:456:2027","b:2:2914-0:456:2027","b:5:736-0:456:2027","0:473","0:470","0:471","0:466","0:465","0:468"]}}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[58,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:198:2533","0:199:2014","0:200:2303","0:201:2555","0:202:2296","0:203:2727"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:447:801":{"id":"0:447:801","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10278:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10259:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2641-0:259:2030":{"id":"b:2:2641-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2643:2904"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:411-0:443:2019":{"id":"0:411-0:443:2019","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,33],"end":[41,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::WaitTimeoutResult","name":"WaitTimeoutResult","id":"0:443:2019","glob":false}}},"0:461:2628":{"id":"0:461:2628","crate_id":0,"name":"InProgress","span":{"filename":"src/once.rs","begin":[30,4],"end":[30,14]},"visibility":"default","docs":"A thread is currently executing a closure.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[322,0],"end":[396,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgrade","id":"20:467:2770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:293:2826","0:294:2829","0:295:2831","0:296:2834","0:297:2836"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:287:2821":{"id":"0:287:2821","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[272,4],"end":[278,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32216:237-0:155:2028":{"id":"a:2:32216:237-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:455:475":{"id":"0:455:475","crate_id":0,"name":"clone","span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42078:3443-0:355:2033":{"id":"a:2:42078:3443-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42078:3443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:149:60":{"id":"0:149:60","crate_id":0,"name":"default","span":{"filename":"src/once.rs","begin":[314,4],"end":[316,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:415-0:86:2022":{"id":"0:415-0:86:2022","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,56],"end":[42,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutexGuard","name":"FairMutexGuard","id":"0:86:2022","glob":false}}},"0:425-0:155:2028":{"id":"0:425-0:155:2028","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_fair_mutex::RawFairMutex","name":"RawFairMutex","id":"0:155:2028","glob":false}}},"2:2927:137":{"id":"2:2927:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:5:736-0:443:2019":{"id":"b:5:736-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:3787","5:739:3788","5:740:3789"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:471":{"id":"0:471","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2691:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:472:698"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:130:1707":{"id":"0:130:1707","crate_id":0,"name":"state","span":{"filename":"src/once.rs","begin":[88,4],"end":[99,5]},"visibility":"public","docs":"Returns the current state of this `Once`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3137:247-0:259:2030":{"id":"a:2:3137:247-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2929-0:155:2028":{"id":"b:2:2929-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2932:137","2:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:442-20:0:2015":{"id":"0:442-20:0:2015","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[56,0],"end":[56,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"::lock_api","name":"lock_api","id":"20:0:2015","glob":false}}},"2:13192:27914":{"id":"2:13192:27914","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12420:14854"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13198:2564":{"id":"2:13198:2564","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13263:2635":{"id":"2:13263:2635","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12873:3509","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12330:471","str::rmatches":"2:13266:34686"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44080:6912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13317:34701":{"id":"2:13317:34701","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4942:34701"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44193:6820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42079:3442-0:259:2030":{"id":"a:2:42079:3442-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42079:3442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5631:27268":{"id":"5:5631:27268","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13309:27271"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358:2533":{"id":"0:358:2533","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[16,4],"end":[16,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"RawThreadId"}}},"0:208:130":{"id":"0:208:130","crate_id":0,"name":"Duration","span":{"filename":"src/raw_mutex.rs","begin":[142,4],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44644:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2929-0:443:2019":{"id":"b:2:2929-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2932:137","2:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2914-0:259:2030":{"id":"b:2:2914-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2917:3722"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3756-0:31:2018":{"id":"b:2:3756-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42079:3442-0:155:2028":{"id":"a:2:42079:3442-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42079:3442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:363:2031":{"id":"0:363:2031","crate_id":0,"name":"const_reentrant_mutex","span":{"filename":"src/remutex.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.\n\nThis allows creating a reentrant mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:361:2034","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441-0:380:235":{"id":"0:441-0:380:235","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockWriteGuard","name":"RwLockWriteGuard","id":"0:380:235","glob":false}}},"2:13248:34685":{"id":"2:13248:34685","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12873:3509","str::split":"2:13236:28068","prim@char":"1:12330:471","str::split_terminator":"2:13245:34684"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43944:6909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2914-0:443:2019":{"id":"b:2:2914-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2917:3722"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42079:3442-0:456:2027":{"id":"a:2:42079:3442-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42079:3442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:420-0:94:186":{"id":"0:420-0:94:186","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,53],"end":[43,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::Mutex","name":"Mutex","id":"0:94:186","glob":false}}},"0:199:2014":{"id":"0:199:2014","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_mutex.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:2017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13184:996":{"id":"2:13184:996","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12330:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:2816":{"id":"0:282:2816","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/raw_rwlock.rs","begin":[210,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:2815","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433-0:365:2035":{"id":"0:433-0:365:2035","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutexGuard","name":"ReentrantMutexGuard","id":"0:365:2035","glob":false}}},"2:13236:28068":{"id":"2:13236:28068","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12873:3509","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12330:471","str::split_whitespace":"2:13214:32558","str::rsplit":"2:13242:29226"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43876:6725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2924-0:443:2019":{"id":"b:2:2924-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2927:137","2:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13216:28069":{"id":"2:13216:28069","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44130:6914","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5628:35399":{"id":"5:5628:35399","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3172:3693-0:443:2019":{"id":"a:2:3172:3693-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3172:3693","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32216:237-0:456:2027":{"id":"a:2:32216:237-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2918-0:195:2029":{"id":"b:2:2918-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2918-0:443:2019":{"id":"b:2:2918-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13222:28784":{"id":"2:13222:28784","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13219:29234":{"id":"2:13219:29234","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13316:9481":{"id":"2:13316:9481","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4945:9481"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44184:6673","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:2271":{"id":"0:43:2271","crate_id":0,"name":"wait","span":{"filename":"src/condvar.rs","begin":[255,4],"end":[257,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2914-0:125:2026":{"id":"b:2:2914-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2917:3722"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32275:3408-0:443:2019":{"id":"a:2:32275:3408-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32275:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2641-0:155:2028":{"id":"b:2:2641-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2643:2904"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:89:2023":{"id":"0:89:2023","crate_id":0,"name":"MappedFairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[100,0],"end":[100,87]},"visibility":"public","docs":"An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:848:2025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:2920:831":{"id":"2:2920:831","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2024":{"id":"0:96:2024","crate_id":0,"name":"const_mutex","span":{"filename":"src/mutex.rs","begin":[91,0],"end":[93,1]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:94:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:455:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2918-0:155:2028":{"id":"b:2:2918-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2914-0:355:2033":{"id":"b:2:2914-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2917:3722"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:373:233":{"id":"0:373:233","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[88,0],"end":[88,52]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThis lock uses a task-fair locking policy which avoids both reader and\nwriter starvation. This means that readers trying to acquire the lock will\nblock even if the lock is unlocked when there are writers waiting to acquire\nthe lock. Because of this, attempts to recursively acquire a read lock\nwithin a single thread may result in a deadlock.\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same lock in succession, which can starve\nother threads waiting to acquire the rwlock. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na rwlock it has just released, this can starve other threads.\n\nThis rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the rwlock.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`\nor `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply\ndropping the guard.\n\n# Differences from the standard library `RwLock`\n\n- Supports atomically downgrading a write lock into a read lock.\n- Task-fair locking policy instead of an unspecified platform default.\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `RwLock` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the rwlock is fair on average.\n- Optionally allows making the rwlock fair by calling\n  `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read();\n    let r2 = lock.read();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLock","id":"20:484:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:380:235":{"id":"0:380:235","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[103,0],"end":[103,80]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockWriteGuard","id":"20:880:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:386:2038":{"id":"0:386:2038","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[121,0],"end":[121,92]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockWriteGuard","id":"20:907:2038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:418-0:96:2024":{"id":"0:418-0:96:2024","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::const_mutex","name":"const_mutex","id":"0:96:2024","glob":false}}},"0:427-0:259:2030":{"id":"0:427-0:259:2030","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_rwlock::RawRwLock","name":"RawRwLock","id":"0:259:2030","glob":false}}},"0:410-0:31:2018":{"id":"0:410-0:31:2018","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,24],"end":[41,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::Condvar","name":"Condvar","id":"0:31:2018","glob":false}}},"a:2:3137:247-0:155:2028":{"id":"a:2:3137:247-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68:801":{"id":"0:68:801","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[520,4],"end":[522,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10278:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10259:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303:2844":{"id":"0:303:2844","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[441,4],"end":[451,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:429-0:363:2031":{"id":"0:429-0:363:2031","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,4],"end":[49,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::const_reentrant_mutex","name":"const_reentrant_mutex","id":"0:363:2031","glob":false}}},"0:161:2303":{"id":"0:161:2303","crate_id":0,"name":"lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2696:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32216:237-0:125:2026":{"id":"a:2:32216:237-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:129:1177":{"id":"0:129:1177","crate_id":0,"name":"new","span":{"filename":"src/once.rs","begin":[82,4],"end":[84,5]},"visibility":"public","docs":"Creates a new `Once` value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[429,0],"end":[452,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeDowngrade","id":"20:476:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:302:2843","0:303:2844"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:355:2033":{"id":"0:355:2033","crate_id":0,"name":"RawThreadId","span":{"filename":"src/remutex.rs","begin":[13,0],"end":[13,23]},"visibility":"public","docs":"Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:42079:3442-0:355:2033","a:2:32275:3408-0:355:2033","a:2:42078:3443-0:355:2033","a:2:3172:3693-0:355:2033","a:2:32216:237-0:355:2033","a:2:3137:247-0:355:2033","b:2:3756-0:355:2033","b:2:2929-0:355:2033","b:2:2924-0:355:2033","b:2:2644-0:355:2033","b:2:2641-0:355:2033","b:2:2918-0:355:2033","b:2:2914-0:355:2033","0:357"]}}},"a:2:42078:3443-0:125:2026":{"id":"a:2:42078:3443-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42078:3443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13194:336":{"id":"2:13194:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13195:29194","`u8`":"1:12349:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2928:1807":{"id":"2:2928:1807","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2318":{"id":"0:56:2318","crate_id":0,"name":"wait_while","span":{"filename":"src/condvar.rs","begin":[427,4],"end":[433,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification. If the provided condition evaluates to `false`, then the\nthread is no longer blocked and the operation is completed. If the\ncondition evaluates to `true`, then the thread is blocked again and\nwaits for another notification before repeating this process.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3383:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2914-0:195:2029":{"id":"b:2:2914-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2917:3722"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13301:34698":{"id":"2:13301:34698","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13309:27271":{"id":"2:13309:27271","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2924-0:31:2018":{"id":"b:2:2924-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2927:137","2:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[398,0],"end":[427,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_upgradable"],"trait":{"name":"RawRwLockUpgradeFair","id":"20:473:2838","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:299:2839","0:300:2840"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3137:247-0:443:2019":{"id":"a:2:3137:247-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5629:35400":{"id":"5:5629:35400","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:3409","`String`":"5:7641:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:3409","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13306:27266":{"id":"2:13306:27266","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:468":{"id":"0:468","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2696:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42078:3443-0:195:2029":{"id":"a:2:42078:3443-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42078:3443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3172:3693-0:355:2033":{"id":"a:2:3172:3693-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3172:3693","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2918-0:355:2033":{"id":"b:2:2918-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:51:2308":{"id":"0:51:2308","crate_id":0,"name":"wait_for","span":{"filename":"src/condvar.rs","begin":[381,4],"end":[388,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44644:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2643:2904":{"id":"2:2643:2904","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2914-0:155:2028":{"id":"b:2:2914-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2917:3722"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:209:162":{"id":"0:209:162","crate_id":0,"name":"Instant","span":{"filename":"src/raw_mutex.rs","begin":[143,4],"end":[143,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9426:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:62:2329":{"id":"0:62:2329","crate_id":0,"name":"wait_while_for","span":{"filename":"src/condvar.rs","begin":[498,4],"end":[509,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration. If the provided condition evaluates to `false`,\nthen the thread is no longer blocked and the operation is completed.\nIf the condition evaluates to `true`, then the thread is blocked again\nand waits for another notification before repeating this process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44644:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3383:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2555":{"id":"0:162:2555","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:2801":{"id":"0:269:2801","crate_id":0,"name":"unlock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[129,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2924-0:155:2028":{"id":"b:2:2924-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2927:137","2:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32275:3408-0:125:2026":{"id":"a:2:32275:3408-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32275:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:424-0:456:2027":{"id":"0:424-0:456:2027","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,27],"end":[44,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::OnceState","name":"OnceState","id":"0:456:2027","glob":false}}},"2:13242:29226":{"id":"2:13242:29226","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12873:3509","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12330:471","str::split":"2:13236:28068"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43894:6730","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13251:29228":{"id":"2:13251:29228","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509","str::rsplitn":"2:13254:29230"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43980:6732","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:34697":{"id":"2:13298:34697","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10304:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:474:801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:125:2026":{"id":"0:125:2026","crate_id":0,"name":"Once","span":{"filename":"src/once.rs","begin":[77,0],"end":[77,26]},"visibility":"public","docs":"A synchronization primitive which can be used to run a one-time\ninitialization. Useful for one-time initialization for globals, FFI or\nrelated functionality.\n\n# Differences from the standard library `Once`\n\n- Only requires 1 byte of space, instead of 1 word.\n- Not required to be `'static`.\n- Relaxed memory barriers in the fast path, which can significantly improve\n  performance on some architectures.\n- Efficient handling of micro-contention using adaptive spinning.\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic START: Once = Once::new();\n\nSTART.call_once(|| {\n    // run initialization here\n});\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:128","a:2:42079:3442-0:125:2026","a:2:32275:3408-0:125:2026","a:2:42078:3443-0:125:2026","a:2:3172:3693-0:125:2026","a:2:32216:237-0:125:2026","a:2:3137:247-0:125:2026","b:2:3756-0:125:2026","b:2:2929-0:125:2026","b:2:2924-0:125:2026","b:2:2644-0:125:2026","b:2:2641-0:125:2026","b:2:2918-0:125:2026","b:2:2914-0:125:2026","0:150","0:148"]}}},"b:2:2924-0:195:2029":{"id":"b:2:2924-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2927:137","2:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,31],"end":[22,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3132:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:259:2030":{"id":"0:259:2030","crate_id":0,"name":"RawRwLock","span":{"filename":"src/raw_rwlock.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Raw reader-writer lock type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:42079:3442-0:259:2030","a:2:32275:3408-0:259:2030","a:2:42078:3443-0:259:2030","a:2:3172:3693-0:259:2030","a:2:32216:237-0:259:2030","a:2:3137:247-0:259:2030","b:2:3756-0:259:2030","b:2:2929-0:259:2030","b:2:2924-0:259:2030","b:2:2644-0:259:2030","b:2:2641-0:259:2030","b:2:2918-0:259:2030","b:2:2914-0:259:2030","0:301","0:298","0:292","0:304","0:261","0:279","0:277","0:272","0:289","0:286"]}}},"0:202:2296":{"id":"0:202:2296","crate_id":0,"name":"unlock","span":{"filename":"src/raw_mutex.rs","begin":[100,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[94,0],"end":[510,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:34:1177","0:35:2233","0:39:2255","0:43:2271","0:45:2289","0:51:2308","0:56:2318","0:59:2324","0:62:2329"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13239:29224":{"id":"2:13239:29224","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12688:6727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:2296":{"id":"0:163:2296","crate_id":0,"name":"unlock","span":{"filename":"src/raw_fair_mutex.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32275:3408-0:31:2018":{"id":"a:2:32275:3408-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32275:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5632:27269":{"id":"5:5632:27269","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13310:27272"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:2807":{"id":"0:274:2807","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/raw_rwlock.rs","begin":[162,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2914-0:456:2027":{"id":"b:2:2914-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2917:3722"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13195:29194":{"id":"2:13195:29194","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12349:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431-0:355:2033":{"id":"0:431-0:355:2033","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,54],"end":[49,65]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::RawThreadId","name":"RawThreadId","id":"0:355:2033","glob":false}}},"b:2:2644-0:443:2019":{"id":"b:2:2644-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2646:2906"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42078:3443-0:155:2028":{"id":"a:2:42078:3443-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42078:3443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:296:2834":{"id":"0:296:2834","crate_id":0,"name":"upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[368,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32216:237-0:31:2018":{"id":"a:2:32216:237-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:134:2695":{"id":"0:134:2695","crate_id":0,"name":"call_once_force","span":{"filename":"src/once.rs","begin":[173,4],"end":[185,5]},"visibility":"public","docs":"Performs the same function as `call_once` except ignores poisoning.\n\nIf this `Once` has been poisoned (some initialization panicked) then\nthis function will continue to attempt to call initialization functions\nuntil one of them doesn't panic.\n\nThe closure `f` is yielded a structure which can be used to query the\nstate of this `Once` (whether initialization has previously panicked or\nnot).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3386:142","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13312:30389":{"id":"2:13312:30389","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:38883"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,9],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3132:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:295:2831":{"id":"0:295:2831","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[346,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32216:237-0:443:2019":{"id":"a:2:32216:237-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:39:2255":{"id":"0:39:2255","crate_id":0,"name":"notify_all","span":{"filename":"src/condvar.rs","begin":[187,4],"end":[195,5]},"visibility":"public","docs":"Wakes up all blocked threads on this condvar.\n\nReturns the number of threads woken up.\n\nThis method will ensure that any current waiters on the condition\nvariable are awoken. Calls to `notify_all()` are not buffered in any\nway.\n\nTo wake up only one thread, see `notify_one()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[25,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:2171"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13209:29222":{"id":"2:13209:29222","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13208:29221"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:2813":{"id":"0:278:2813","crate_id":0,"name":"downgrade","span":{"filename":"src/raw_rwlock.rs","begin":[193,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2691:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:698"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:438":{"id":"0:131:438","crate_id":0,"name":"call_once","span":{"filename":"src/once.rs","begin":[151,4],"end":[161,5]},"visibility":"public","docs":"Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.\n\nThis method will block the calling thread if another initialization\nroutine is currently running.\n\nWhen this function returns, it is guaranteed that some initialization\nhas run and completed (it may not be the closure specified). It is also\nguaranteed that any memory writes performed by the executed closure can\nbe reliably observed by other threads at this point (there is a\nhappens-before relation between the closure and code executing after the\nreturn).\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\n// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g. write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\nfn get_cached_val() -> usize {\n    unsafe {\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\nfn expensive_computation() -> usize {\n    // ...\n# 2\n}\n```\n\n# Panics\n\nThe closure `f` will only be executed once if this is called\nconcurrently amongst many threads. If that closure panics, however, then\nit will *poison* this `Once` instance, causing all future invocations of\n`call_once` to also panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3386:142","args":{"parenthesized":{"inputs":[],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[36,0],"end":[52,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:123:2634","0:124:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:307:2849":{"id":"0:307:2849","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/raw_rwlock.rs","begin":[482,4],"end":[492,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9426:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:2806":{"id":"0:273:2806","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/raw_rwlock.rs","begin":[156,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13269:34687":{"id":"2:13269:34687","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12873:3509","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12330:471","str::rmatch_indices":"2:13272:34688"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44026:6910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42079:3442-0:443:2019":{"id":"a:2:42079:3442-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42079:3442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:195:2029":{"id":"0:195:2029","crate_id":0,"name":"RawMutex","span":{"filename":"src/raw_mutex.rs","begin":[32,0],"end":[56,1]},"visibility":"public","docs":"Raw mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:42079:3442-0:195:2029","a:2:32275:3408-0:195:2029","a:2:42078:3443-0:195:2029","a:2:3172:3693-0:195:2029","a:2:32216:237-0:195:2029","a:2:3137:247-0:195:2029","b:2:3756-0:195:2029","b:2:2929-0:195:2029","b:2:2924-0:195:2029","b:2:2644-0:195:2029","b:2:2641-0:195:2029","b:2:2918-0:195:2029","b:2:2914-0:195:2029","0:204","0:207","0:197"]}}},"b:2:2918-0:456:2027":{"id":"b:2:2918-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:437-0:386:2038":{"id":"0:437-0:386:2038","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,41],"end":[53,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockWriteGuard","name":"MappedRwLockWriteGuard","id":"0:386:2038","glob":false}}},"0:302:2843":{"id":"0:302:2843","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[431,4],"end":[438,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:2634":{"id":"0:123:2634","crate_id":0,"name":"poisoned","span":{"filename":"src/once.rs","begin":[42,4],"end":[44,5]},"visibility":"public","docs":"Returns whether the associated `Once` has been poisoned.\n\nOnce an initialization routine for a `Once` has panicked it will forever\nindicate to future forced initialization routines that it is poisoned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2171":{"id":"0:30:2171","crate_id":0,"name":"timed_out","span":{"filename":"src/condvar.rs","begin":[28,4],"end":[30,5]},"visibility":"public","docs":"Returns whether the wait was known to have timed out.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2918-0:125:2026":{"id":"b:2:2918-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2929-0:355:2033":{"id":"b:2:2929-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2932:137","2:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:266:2793":{"id":"0:266:2793","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:414-0:82:2021":{"id":"0:414-0:82:2021","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,45],"end":[42,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutex","name":"FairMutex","id":"0:82:2021","glob":false}}},"0:467:475":{"id":"0:467:475","crate_id":0,"name":"clone","span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285:2819":{"id":"0:285:2819","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/raw_rwlock.rs","begin":[253,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9426:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2641-0:355:2033":{"id":"b:2:2641-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2643:2904"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:283:2817":{"id":"0:283:2817","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/raw_rwlock.rs","begin":[223,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:2815","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3137:247-0:31:2018":{"id":"a:2:3137:247-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:736-0:456:2027":{"id":"b:5:736-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:3787","5:739:3788","5:740:3789"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3137:247-0:125:2026":{"id":"a:2:3137:247-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:438-0:373:233":{"id":"0:438-0:373:233","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,65],"end":[53,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLock","name":"RwLock","id":"0:373:233","glob":false}}},"2:13272:34688":{"id":"2:13272:34688","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12873:3509","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12330:471","str::match_indices":"2:13269:34687"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44044:6911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:35396":{"id":"5:5613:35396","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:3409","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:3409","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:35397":{"id":"5:5617:35397","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[59,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked_exclusive","is_locked"],"trait":{"name":"RawRwLock","id":"20:436:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:262:2533","0:263:2014","0:264:2788","0:265:2792","0:266:2793","0:267:2796","0:268:2799","0:269:2801","0:270:2727","0:271:2804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:306:2848":{"id":"0:306:2848","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/raw_rwlock.rs","begin":[469,4],"end":[479,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44644:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2644-0:31:2018":{"id":"b:2:2644-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2646:2906"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2918-0:259:2030":{"id":"b:2:2918-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2644-0:155:2028":{"id":"b:2:2644-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2646:2906"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:171:2729":{"id":"0:171:2729","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_fair_mutex.rs","begin":[57,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:2728","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13193:34680":{"id":"2:13193:34680","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[52,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:169:130","0:170:162","0:171:2729","0:172:2730"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2040":{"id":"0:0:2040","crate_id":0,"name":"parking_lot","span":{"filename":"src/lib.rs","begin":[8,0],"end":[56,19]},"visibility":"public","docs":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n`Once` that are smaller, faster and more flexible than those in the Rust\nstandard library. It also provides a `ReentrantMutex` type.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:410-0:31:2018","0:411-0:443:2019","0:413-0:84:2020","0:414-0:82:2021","0:415-0:86:2022","0:416-0:89:2023","0:418-0:96:2024","0:419-0:101:2025","0:420-0:94:186","0:421-0:98:187","0:423-0:125:2026","0:424-0:456:2027","0:425-0:155:2028","0:426-0:195:2029","0:427-0:259:2030","0:429-0:363:2031","0:430-0:368:2032","0:431-0:355:2033","0:432-0:361:2034","0:433-0:365:2035","0:435-0:375:2036","0:436-0:383:2037","0:437-0:386:2038","0:438-0:373:233","0:439-0:377:234","0:440-0:389:2039","0:441-0:380:235","0:442-20:0:2015"],"is_stripped":false}}},"2:13232:3728":{"id":"2:13232:3728","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41986:191","prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:130":{"id":"0:280:130","crate_id":0,"name":"Duration","span":{"filename":"src/raw_rwlock.rs","begin":[206,4],"end":[206,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44644:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13183":{"id":"2:13183","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13184:996","2:13185:2436","2:13186:34677","2:13187:34678","2:13189:34679","2:13192:27914","2:13193:34680","2:13194:336","2:13195:29194","2:13196:2869","2:13198:2564","2:13200:29192","2:13202:29193","2:13204:34681","2:13205:34682","2:13206:29217","2:13207:29218","2:13208:29221","2:13209:29222","2:13211:6748","2:13212:6926","2:13213:6536","2:13214:32558","2:13215:32554","2:13216:28069","2:13217:34683","2:13218:32567","2:13219:29234","2:13222:28784","2:13225:28786","2:13228:3767","2:13232:3728","2:13236:28068","2:13239:29224","2:13242:29226","2:13245:34684","2:13248:34685","2:13251:29228","2:13254:29230","2:13257:29232","2:13260:29233","2:13263:2635","2:13266:34686","2:13269:34687","2:13272:34688","2:13275:34689","2:13277:34690","2:13279:34691","2:13281:34692","2:13282:34693","2:13283:34694","2:13286:34695","2:13289:27258","2:13292:29235","2:13295:34696","2:13298:34697","2:13301:34698","2:13304:34699","2:13306:27266","2:13307:30385","2:13308:27270","2:13309:27271","2:13310:27272","2:13311:30388","2:13312:30389","2:13313:30390","2:13314:34700","2:13316:9481","2:13317:34701"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32275:3408-0:456:2027":{"id":"a:2:32275:3408-0:456:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32275:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:290:2824":{"id":"0:290:2824","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/raw_rwlock.rs","begin":[296,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:2815","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3172:3693-0:259:2030":{"id":"a:2:3172:3693-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3172:3693","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:377:234":{"id":"0:377:234","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[99,0],"end":[99,78]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockReadGuard","id":"20:872:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:2924-0:259:2030":{"id":"b:2:2924-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2927:137","2:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[119,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2724","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:205:2726","0:206:2386"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:263:2014":{"id":"0:263:2014","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_rwlock.rs","begin":[64,4],"end":[64,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:2017","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:383:2037":{"id":"0:383:2037","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[112,0],"end":[112,90]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockReadGuard","id":"20:900:2037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13212:6926":{"id":"2:13212:6926","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12330:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43852:6906","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13215:32554":{"id":"2:13215:32554","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13214:32558"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44159:6917","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:34693":{"id":"2:13282:34693","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:60":{"id":"0:66:60","crate_id":0,"name":"default","span":{"filename":"src/condvar.rs","begin":[514,4],"end":[516,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2324":{"id":"0:59:2324","crate_id":0,"name":"wait_while_until","span":{"filename":"src/condvar.rs","begin":[463,4],"end":[474,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant. If the provided condition evaluates to\n`false`, then the thread is no longer blocked and the operation is\ncompleted. If the condition evaluates to `true`, then the thread is\nblocked again and waits for another notification before repeating\nthis process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9426:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3383:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13254:29230":{"id":"2:13254:29230","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12330:471","str::splitn":"2:13251:29228","self::pattern":"2:12873:3509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43998:6733","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:432-0:361:2034":{"id":"0:432-0:361:2034","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,67],"end":[49,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutex","name":"ReentrantMutex","id":"0:361:2034","glob":false}}},"0:45:2289":{"id":"0:45:2289","crate_id":0,"name":"wait_until","span":{"filename":"src/condvar.rs","begin":[283,4],"end":[292,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9426:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:2014":{"id":"0:160:2014","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_fair_mutex.rs","begin":[17,4],"end":[17,69]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutex","id":"20:20:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:308:2850":{"id":"0:308:2850","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/raw_rwlock.rs","begin":[495,4],"end":[505,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44644:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2929-0:125:2026":{"id":"b:2:2929-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2932:137","2:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3172:3693-0:125:2026":{"id":"a:2:3172:3693-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3172:3693","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:3756-0:443:2019":{"id":"b:2:3756-0:443:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3172:3693-0:155:2028":{"id":"a:2:3172:3693-0:155:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3172:3693","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:288:2822":{"id":"0:288:2822","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[281,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419-0:101:2025":{"id":"0:419-0:101:2025","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,35],"end":[43,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MappedMutexGuard","name":"MappedMutexGuard","id":"0:101:2025","glob":false}}},"0:474:801":{"id":"0:474:801","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10278:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10259:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2644-0:195:2029":{"id":"b:2:2644-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2646:2906"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13189:34679":{"id":"2:13189:34679","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13187:34678"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:34692":{"id":"2:13281:34692","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:162":{"id":"0:170:162","crate_id":0,"name":"Instant","span":{"filename":"src/raw_fair_mutex.rs","begin":[54,4],"end":[54,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:159:2533":{"id":"0:159:2533","crate_id":0,"name":"INIT","span":{"filename":"src/raw_fair_mutex.rs","begin":[15,4],"end":[15,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:267:2796":{"id":"0:267:2796","crate_id":0,"name":"lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[107,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13307:30385":{"id":"2:13307:30385","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39885:14916","Self::is_ascii":"2:13306:27266"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39885:14916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:463:2630":{"id":"0:463:2630","crate_id":0,"name":"Done","span":{"filename":"src/once.rs","begin":[33,4],"end":[33,8]},"visibility":"default","docs":"A closure has completed successfully.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:291:2825":{"id":"0:291:2825","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/raw_rwlock.rs","begin":[309,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:2815","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13308:27270":{"id":"2:13308:27270","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42079:3442-0:125:2026":{"id":"a:2:42079:3442-0:125:2026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42079:3442","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[270,0],"end":[292,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursive","id":"20:461:2820","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:287:2821","0:288:2822"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:375:2036":{"id":"0:375:2036","crate_id":0,"name":"const_rwlock","span":{"filename":"src/rwlock.rs","begin":[93,0],"end":[95,1]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.\n\nThis allows creating a `RwLock<T>` in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:373:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13213:6536":{"id":"2:13213:6536","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43862:4631","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13257:29232":{"id":"2:13257:29232","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13311:30388":{"id":"2:13311:30388","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:38883"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612":{"id":"5:5612","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5613:35396","5:5614:3627","5:5617:35397","5:5620:35398","5:5628:35399","5:5629:35400","5:5630:9605","5:5631:27268","5:5632:27269"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2918-0:31:2018":{"id":"b:2:2918-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32216:237-0:259:2030":{"id":"a:2:32216:237-0:259:2030","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13200:29192":{"id":"2:13200:29192","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3137:247-0:195:2029":{"id":"a:2:3137:247-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:457:2624":{"id":"0:457:2624","crate_id":0,"name":"New","span":{"filename":"src/once.rs","begin":[24,4],"end":[24,7]},"visibility":"default","docs":"A closure has not been executed yet","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:198:2533":{"id":"0:198:2533","crate_id":0,"name":"INIT","span":{"filename":"src/raw_mutex.rs","begin":[59,4],"end":[61,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"a:2:32275:3408-0:355:2033":{"id":"a:2:32275:3408-0:355:2033","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32275:3408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:435-0:375:2036":{"id":"0:435-0:375:2036","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::const_rwlock","name":"const_rwlock","id":"0:375:2036","glob":false}}},"0:206:2386":{"id":"0:206:2386","crate_id":0,"name":"bump","span":{"filename":"src/raw_mutex.rs","begin":[134,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:436-0:383:2037":{"id":"0:436-0:383:2037","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,18],"end":[53,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockReadGuard","name":"MappedRwLockReadGuard","id":"0:383:2037","glob":false}}},"5:738:3787":{"id":"5:738:3787","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"5:740:3789":{"id":"5:740:3789","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[141,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:208:130","0:209:162","0:210:2729","0:211:2730"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3758:1820":{"id":"2:3758:1820","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39699:6811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:440-0:389:2039":{"id":"0:440-0:389:2039","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockUpgradableReadGuard","name":"RwLockUpgradableReadGuard","id":"0:389:2039","glob":false}}},"2:13266:34686":{"id":"2:13266:34686","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12873:3509","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12330:471","str::matches":"2:13263:2635"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44098:6913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2020":{"id":"0:84:2020","crate_id":0,"name":"const_fair_mutex","span":{"filename":"src/fair_mutex.rs","begin":[82,0],"end":[84,1]},"visibility":"public","docs":"Creates a new fair mutex in an unlocked state ready for use.\n\nThis allows creating a fair mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"FairMutex","id":"0:82:2021","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2233":{"id":"0:35:2233","crate_id":0,"name":"notify_one","span":{"filename":"src/condvar.rs","begin":[128,4],"end":[136,5]},"visibility":"public","docs":"Wakes up one blocked thread on this condvar.\n\nReturns whether a thread was woken up.\n\nIf there is a blocked thread on this condition variable, then it will\nbe woken up from its call to `wait` or `wait_timeout`. Calls to\n`notify_one` are not buffered in any way.\n\nTo wake up all threads, see `notify_all()`.\n\n# Examples\n\n```\nuse parking_lot::Condvar;\n\nlet condvar = Condvar::new();\n\n// do something with condvar, share it with other threads\n\nif !condvar.notify_one() {\n    println!(\"Nobody was listening for this.\");\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:413-0:84:2020":{"id":"0:413-0:84:2020","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,27],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::const_fair_mutex","name":"const_fair_mutex","id":"0:84:2020","glob":false}}},"0:421-0:98:187":{"id":"0:421-0:98:187","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,60],"end":[43,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MutexGuard","name":"MutexGuard","id":"0:98:187","glob":false}}},"b:2:2929-0:31:2018":{"id":"b:2:2929-0:31:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2932:137","2:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13292:29235":{"id":"2:13292:29235","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3756-0:195:2029":{"id":"b:2:3756-0:195:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32217:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13283:34694":{"id":"2:13283:34694","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12330:471","self::pattern":"2:12873:3509"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:6718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12899:14851","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13206:29217":{"id":"2:13206:29217","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13208:29221","str::split_at_mut":"2:13207:29218"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:15126:5500":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10828:35895":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:9426:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:7878:7313":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:39662:3301":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"22:84:2757":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","release_resource"],"kind":"function"},"2:4804:3256":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:10528:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:14079:5215":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:22914:32645":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:9122:7265":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:3670:4166":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:7497:6229":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:523:7849":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10710:4782":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7656:22197":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:15023:5482":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:15748:5687":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:46422:7017":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:4511:4419":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:4641:5905":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:30350:3387":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:43835:6905":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:23142:6797":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:12043:4924":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:0:3105":{"crate_id":17,"path":["object"],"kind":"module"},"2:44614:9008":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:10976:27526":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6657:8576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"25:8263:8829":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:13723:5158":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:13802:4472":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:46505:7020":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:9413:2037":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:22826:8995":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:2469:4428":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:42109:3607":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:7485:8742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:5445:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:22:816":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"9:447:21177":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:6758:6096":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"25:5374:8280":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:11350:6731":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:11205:7266":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:7330:8685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:9343:3441":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:32186:6209":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:7703:32574":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:40824:2871":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13844:5181":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"20:900:2037":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:6504:6055":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:7664:6539":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:1788:2438":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:39534:3300":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:6342:35894":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:13624:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:3664:3310":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12851:4996":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13387:5079":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13753:5166":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:6066:5971":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"25:1515:7900":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:13109:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:4151:9621":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:10155:4767":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:42020:4166":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:6872:6122":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"20:840:187":{"crate_id":20,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"6:8328:8843":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:6460:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"25:4977:8143":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7604:5880":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"20:27:2724":{"crate_id":20,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"11:2304:6158":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:2891:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6976:6131":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:12:26452":{"crate_id":21,"path":["scopeguard","Strategy"],"kind":"trait"},"20:464:2823":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"2:46443:7018":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:8855:4165":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:15176:5517":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:5361:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6588:6059":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:6954:4436":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:44437:6931":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:14025:5207":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:10304:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:1699:8017":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:7575:8800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:41912:6864":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"25:563:7871":{"crate_id":25,"path":["libc","unix","itimerval"],"kind":"struct"},"5:6689:3732":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6120:22189":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:3254:6431":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:40705:6680":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10887:35901":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:3614:5890":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"11:1676:4376":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:1621:7974":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10769:35898":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:44644:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6532:6057":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:11075:4802":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:2462:9558":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:3750:4392":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:5831:5937":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:5612:7153":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:5226:3328":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5181:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:6775:8608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:43029:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:41183:6701":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:6900:8650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:43465:9001":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:4720:3362":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7813:6254":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:44598:9004":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:11920:7172":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:6427:6046":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:835:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13116:5021":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:42037:3439":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:10313:3702":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:23153:6798":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:16235:5806":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:4662:9648":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:8845:7142":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:2066:3819":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"16:5863:22187":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6491:8488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7397:35890":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:42946:3711":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:10985:27528":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:31005:3687":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:935:4400":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:14147:5225":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:2628:7122":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"20:880:235":{"crate_id":20,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"25:6607:8555":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:4882:5912":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12508:4973":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:968:6417":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6300:6023":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"20:452:2812":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"17:15569:5632":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:7727:5881":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:10877:4785":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10573:35900":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11825:4884":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:14131:5220":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:11224:3348":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"25:5544:8361":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:22593:9777":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:6698:8590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:14386:5277":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"25:5586:8376":{"crate_id":25,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:9886:22254":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:4797:9622":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1653:7997":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"25:4963:8135":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"25:8251:8827":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:8673:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"25:4874:8095":{"crate_id":25,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:42012:4165":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:15356:5564":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:2854:5861":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:7926:4620":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:15410:5578":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:14177:5244":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11773:4874":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:5592:7152":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:261:4634":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"9:178:9067":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:12351:1838":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:150:4380":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:13064:5014":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"25:1721:8026":{"crate_id":25,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:40548:6828":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8861:7262":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"11:710:6410":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:6172:4416":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"25:558:7869":{"crate_id":25,"path":["libc","unix","sigval"],"kind":"struct"},"5:3247:4165":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:5742:5924":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:46185:6990":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:12342:753":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:1619:6430":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5565:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:14868:5434":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5536:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:44909:6950":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10661:4781":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:10218:6861":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:4344:9646":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:40489:6824":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:8170:3350":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3600:7132":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:3183:3272":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:7396:4494":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:6347:4472":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"23:281:3732":{"crate_id":23,"path":["smallvec","IntoIter"],"kind":"struct"},"2:47107:7072":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12584:4784":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:11367:4802":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:12302:9488":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:13495:6755":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:42284:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6629:8563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:40522:6827":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:44859:6946":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:3893:7134":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:10709:7125":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"25:8339:8847":{"crate_id":25,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:44485:6940":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:10315:3703":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:23028:9573":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:40560:4631":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"18:754:4624":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:4293:32360":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12516:4975":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"25:7328:8685":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:4560:5902":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:9237:9692":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:5722:5869":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7580:6244":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:1207:4643":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:5769:5933":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:43235:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:5107:5919":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:41231:6704":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:9777:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"25:1651:7997":{"crate_id":25,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7618:6245":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4971:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11128:4758":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:8247:8826":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:47061:7068":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:5088:9668":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:465:7815":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12076:4927":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:22269:9697":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:5209:34011":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:41239:6706":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:7559:6243":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13972:4896":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"25:5526:8350":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"25:5318:8262":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8187:7183":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:491:7826":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:32207:6805":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:1762:3988":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"5:6930:4368":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"11:434:35862":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"0:0:2040":{"crate_id":0,"path":["parking_lot"],"kind":"module"},"22:228:2162":{"crate_id":22,"path":["parking_lot_core","parking_lot","RequeueOp"],"kind":"enum"},"17:11688:4864":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:10284:4628":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"25:5470:8338":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:3383:7127":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10399:4631":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:9807:22242":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"25:5304:8258":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12768:22239":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:3029:4666":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:8000:3603":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:14994:5476":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:40372:6818":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:42157:4165":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:6519:8500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"25:6503:8499":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4201:9624":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:4979:8143":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10954:22269":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:7536:6530":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:40517:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"25:6676:8582":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"9:0:3098":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:7401:4361":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:3597:4655":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"25:5264:8239":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:42182:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:7918:4496":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"25:6540:8513":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:545:7861":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"13:110:35868":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13375:5078":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:5457:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:7359:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11743:4869":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:16187:5796":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:42696:3702":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"22:210:2163":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkResult"],"kind":"struct"},"6:564:7871":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"11:2151:6422":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"25:4930:8122":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:14189:5246":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:22495:3801":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:4551:7140":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:43265:6886":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12328:4947":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11324:4824":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:45843:6959":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5630:8401":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:13766:5168":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:16069:5767":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:12342:4952":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"25:1578:7942":{"crate_id":25,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"25:4950:8131":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2306:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:12597:4979":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:13999:5204":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:4924:8120":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:7602:8806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"25:6766:8607":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"11:2352:6422":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"25:496:7829":{"crate_id":25,"path":["libc","unix","rusage"],"kind":"struct"},"2:43862:4631":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"25:6872:8635":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:15624:5651":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:4940:5914":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:2037:4644":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:2338:5831":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:6788:3333":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:40737:6842":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12189:4937":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:4587:5903":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:1855:7112":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"25:569:7874":{"crate_id":25,"path":["libc","unix","tms"],"kind":"struct"},"1:494:4475":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10251:4627":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"25:4868:8093":{"crate_id":25,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:40714:6682":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:10755:3602":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:2708:5854":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:2234:4651":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:5826:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:43748:6831":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:7606:6534":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:10503:28013":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:16138:5781":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:13473:5095":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:4775:3364":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"25:5172:8196":{"crate_id":25,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"20:30:2728":{"crate_id":20,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"17:9984:22257":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:2225:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:437:4638":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"25:5258:8236":{"crate_id":25,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"25:5189:8204":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:559:7869":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:1365:6426":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13424:5085":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:46667:7026":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:5390:8288":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:5347:5921":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:10929:7281":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:41890:32634":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"25:7982:8812":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:45911:6967":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:5046:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"25:1583:7944":{"crate_id":25,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:4468:5899":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:674:9483":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"9:424:21179":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:12297:9078":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:8259:6209":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"25:6898:8650":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:47212:7083":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:1586:6507":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3198:3275":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:3925:5895":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:5006:5916":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6471:8477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13674:5133":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6915:8661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:957:9499":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4916:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:44610:9007":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:8643:7245":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:6609:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:6738:8597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:44080:6912":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2733:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:3657:9571":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:11093:4504":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:46010:6973":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:2458:5843":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:608:4593":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12175:4933":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:5515:8349":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:26038:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:32307:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:15418:5579":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12969:5003":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13344:5074":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:5250:8230":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:39584:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"25:5000:8156":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7098:6152":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:44308:6927":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:1092:6422":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4909:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:3293:34383":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:44920:6437":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"11:811:4428":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"20:864:2032":{"crate_id":20,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"2:4529:3371":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5320:8262":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:42362:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:2660:5852":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:15214:5525":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:3667:9592":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:13568:5123":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:22548:3801":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:13959:5198":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8170:4712":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:22949:32643":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6494:6054":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:12353:1826":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:40504:6826":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:2684:5853":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3330:7125":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:3293:27022":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12251:4942":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:2318:8993":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11688:9016":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:9343:27113":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:7639:14913":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:21836:9696":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:10759:4783":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:44818:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11392:4830":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10350:4630":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:800:4361":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11115:4806":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:10321:3705":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11610:7164":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12543:4978":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:5102:9669":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13797:5175":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:5212:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:15646:5657":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12107:4783":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5200:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12572:4783":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:6562:4361":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:3210:3295":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:2528:5846":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:3290:27033":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"25:5481:8341":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:4647:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5588:8376":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:3188:3277":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"9:330:8908":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:2460:3791":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:14933:5469":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4992:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:1914:7114":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:4158:4166":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:1969:4057":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7910:22199":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"25:5312:8261":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"25:6415:8451":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5064:8188":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6466:6051":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"25:5380:8283":{"crate_id":25,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:12621:4980":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:8216:6318":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:43803:6901":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:38182:3290":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:47274:7099":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"25:6786:8615":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:5289:976":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:32218:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:5802:22186":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:14298:5264":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14449:5295":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5423:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:15273:5540":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:22876:32651":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:34375:3287":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:2734:7123":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"11:2562:8905":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7321:3439":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"25:585:7883":{"crate_id":25,"path":["libc","unix","protoent"],"kind":"struct"},"23:0:3261":{"crate_id":23,"path":["smallvec"],"kind":"module"},"1:4917:9636":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11524:4840":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:102:8985":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:7128:4446":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:46688:7027":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:3473:4654":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:46316:6997":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:11951:6737":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:15376:5570":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:2374:5839":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10612:4780":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:9156:4165":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6456:22191":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:10044:22258":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:2112:6510":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:1680:8010":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:12335:1686":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:5079:9667":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14436:5294":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:15289:5542":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:538:4583":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"25:6489:8488":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"25:8304:8838":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:15836:5705":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:3657:4165":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:10325:7113":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:40776:6692":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5146:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"25:6595:8550":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6562:8529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:8682:14961":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"14:31:6403":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:45875:6961":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:5314:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:41197:2026":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:16151:5787":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:9282:3598":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"20:461:2820":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"2:2153:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:42991:33181":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:13272:5062":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11351:7307":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:30567:4060":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:46961:7064":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13485:5098":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:13325:5069":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:40667:6835":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:7868:4640":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:8197:8825":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:96:26434":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:2203:4648":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:41924:7137":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"25:8269:8830":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:521:26445":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"20:8:2017":{"crate_id":20,"path":["lock_api","GuardNoSend"],"kind":"struct"},"2:10278:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:6785:3332":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:23007:3404":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:45796:6952":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:32747:3274":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:11313:4822":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:6880:8636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:3644:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:3259:34381":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:3572:3302":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12464:22383":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:3046:34351":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:8720:33270":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13814:5178":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"25:8004:8813":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6802:6108":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:11837:7136":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"11:1891:4361":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:7509:6230":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4837:8069":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"25:537:7858":{"crate_id":25,"path":["libc","unix","pollfd"],"kind":"struct"},"2:44893:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:44851:6944":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:485:7825":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:42323:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5083:8189":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10524:4779":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:12344:908":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:13252:5052":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4876:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:2478:5844":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:3612:32886":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:2087:3817":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:33644:3279":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:5437:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:44294:6924":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:46534:7021":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:40333:6814":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:22865:3389":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"25:5615:8395":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:3014:21328":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:4318:4165":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:11912:7172":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:6447:8468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:9148:7267":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"25:1524:7905":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"25:472:7820":{"crate_id":25,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:1180:34388":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:11277:6729":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:39712:6812":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13832:5179":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11026:22271":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6782:22193":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:40588:4450":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:750:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"20:0:2015":{"crate_id":20,"path":["lock_api"],"kind":"module"},"6:1723:8026":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:42206:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:15426:5581":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:4389:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:12281:7316":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:13606:5131":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12707:4986":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:8175:6313":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:5075:5918":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"25:1545:7920":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7111:6155":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:3648:27199":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:5954:3329":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"11:299:8986":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:10743:4462":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:44796:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:0:1712":{"crate_id":1,"path":["std"],"kind":"module"},"25:577:7879":{"crate_id":25,"path":["libc","unix","servent"],"kind":"struct"},"2:43793:6900":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"11:1910:6431":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8472:7226":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4897:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:2748:5856":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11657:7169":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:15301:5548":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:44602:9005":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:12328:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"25:5012:8162":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:6450:4488":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:9195:7269":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:832:6427":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7769:6252":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11674:4863":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:2308:7120":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:3669:4671":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:765:26444":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44184:6673":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8332:7188":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13497:5099":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:5995:5958":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:581:3687":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:12404:6738":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:6842:3337":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:219:4390":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13509:5100":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:11671:7171":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7823:22198":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"25:5398:8294":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"23:118:4365":{"crate_id":23,"path":["smallvec","SmallVec"],"kind":"struct"},"11:700:3732":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:11419:4783":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6606:6067":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:10915:35902":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8719:7254":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"11:2326:6421":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:11089:4803":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:4830:5910":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13146:5025":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:22267:9573":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:6098:22188":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:4913:5913":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:11643:7168":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:680:6504":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12900:5000":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:3810:5892":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:12352:1844":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:46555:7022":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:44098:6913":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7473:5975":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"20:855:2035":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:9105:7264":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:15799:5698":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:13024:22263":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:16079:5768":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:5236:8224":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:8306:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:1069:6158":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"25:6634:8564":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:5765:8622":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:10918:7182":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:10948:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:7562:3606":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:1614:4428":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:4:1255":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:586:7883":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"25:5210:8216":{"crate_id":25,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12225:4940":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:5415:8299":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:12345:890":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:4730:3363":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:10317:3704":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"23:164:4364":{"crate_id":23,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"17:13877:5189":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:1999:1357":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:1577:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:12947:14859":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"25:5421:8304":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:4477:4416":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:10344:7290":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:7472:31073":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:46593:7024":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:6478:8479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:4477:7139":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6634:5871":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:7986:2003":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6047:5964":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6385:6043":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:21627:32382":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:14489:5298":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"11:2369:6436":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:44594:9003":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"25:7582:8803":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:4424:5898":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11493:4837":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:4191:9623":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"25:5487:8343":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:8023:3602":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"25:5464:8335":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"11:1566:21255":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11905:27706":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:15092:5497":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:4743:5907":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:7489:3732":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:123:4382":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"25:6522:8501":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:8242:7186":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:9399:4416":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:11108:4165":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:9755:22234":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:538:7858":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:1853:7111":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"18:589:4586":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5489:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:15456:5587":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:47235:7084":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:44130:6914":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:7741:5882":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10419:4635":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:33171:3276":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13412:5084":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:7389:6527":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1735:4392":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:12116:4512":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"25:5413:8299":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"25:4798:8041":{"crate_id":25,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10317:4629":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"25:5234:8224":{"crate_id":25,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:872:4634":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:8317:8842":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:5188:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:39885:14916":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:40746:6686":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:7982:3615":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:39450:3311":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:8086:7180":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:1628:7978":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8337:7189":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:617:9480":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:4431:14894":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:5483:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:14545:5305":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:10908:9012":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:44168:6747":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:43846:6740":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:3057:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:570:7874":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:14372:5275":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:6763:8606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"8:0:3097":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7648:6248":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:46295:6996":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8528:4631":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:14847:5424":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:40409:6821":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:7366:8701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5653:8408":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:33577:3280":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:6813:6109":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:8227:3407":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:43894:6730":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"25:6469:8477":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:7428:22196":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:3130:3369":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"11:2498:21250":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"11:1066:21254":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:3383:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"25:5062:8188":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5306:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:643:4576":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:45978:6971":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"25:5342:8267":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"25:5675:8420":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:15521:5631":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:5418:4392":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:14587:5312":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6620:6069":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:13649:6760":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:21730:6765":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6335:6040":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:6707:3336":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:22534:9785":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:12388:14989":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10068:22241":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:3172:3693":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"20:215:2881":{"crate_id":20,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"5:3881:4428":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"20:447:2805":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"25:7465:8732":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:8294:8836":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"25:5334:8266":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:10563:9577":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:9772:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:938:6427":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:1437:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"25:8326:8843":{"crate_id":25,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:11918:6736":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:7139:9693":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:515:4573":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13922:5194":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:43783:6899":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10671:35899":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:2768:5857":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:22842:6769":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:21581:32386":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:9310:7275":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:5225:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:2998:5885":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:3329:5888":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:5700:5867":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"25:5634:8404":{"crate_id":25,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:6962:5874":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"25:6727:8595":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:2636:5851":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:7467:8732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"25:6696:8590":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:10638:4501":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"12:0:3101":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:598:35912":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8209:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:40303:6813":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:43876:6725":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:8234:7185":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"18:659:4599":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:46234:6993":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11016:4795":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:8463:4620":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"25:5288:8252":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:6608:4392":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21710:9573":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:2423:3732":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:8073:6303":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:4396:7138":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:2691:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8534:6725":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:43012:3711":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:46333:6998":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:6889:6693":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:46638:7025":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:40625:6831":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:12201:4938":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"25:1669:8004":{"crate_id":25,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:256:4633":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:44668:3318":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:14271:5261":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13046:5011":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:3345:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"25:5455:8329":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:1565:7930":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:5415:5922":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:38127:3289":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:888:3732":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:8351:8849":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:2123:6511":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:46039:6975":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:5686:5864":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:1916:7115":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:11099:4505":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:7578:6531":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:3280:6432":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:14284:5263":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:10137:22235":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"22:249:2771":{"crate_id":22,"path":["parking_lot_core","parking_lot","FilterOp"],"kind":"enum"},"2:11132:4166":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:11391:6732":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:7654:6538":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:46082:6985":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:5697:7155":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13785:5173":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:14325:5268":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:14402:5281":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:40598:6829":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:5725:4368":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"11:1887:3732":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:7389:8719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11753:4508":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6532:8506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:6700:6687":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:5781:5868":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:403:4636":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:9959:33271":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11293:22289":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:13399:5082":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11898:4891":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"25:5018:8165":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:718:4615":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:44622:9010":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5840:7156":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"25:6445:8468":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"25:5579:8374":{"crate_id":25,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:16032:5052":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:15400:5575":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:7348:8692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11467:4836":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:22621:9778":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"10:44:6438":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:14012:5206":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13235:5049":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:46460:7019":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12289:4945":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:10260:3700":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:5505:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:1580:7942":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:4099:9617":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"19:0:1290":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:42100:3872":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"25:7535:8781":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2898:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14356:5274":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:932:4428":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:5122:8192":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"15:0:3103":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:4143:9620":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:2303:21299":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:5578:7148":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"25:6560:8529":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"25:1626:7978":{"crate_id":25,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10092:22259":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:45957:6970":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:10412:9688":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:46887:7062":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:3816:6510":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6263:6006":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:6771:4392":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:41806:8918":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:5031:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:2175:22316":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:10309:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:5174:8196":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:9707:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:10913:9014":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:7984:8812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:9737:22236":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:12929:5001":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:7132:6157":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"25:7444:8726":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5352:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:3038:8913":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:507:4576":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:6015:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:14788:5372":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:4870:8093":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8481:7133":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:10818:4784":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"25:7427:8721":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"23:350:8851":{"crate_id":23,"path":["smallvec","ConstNonNull"],"kind":"struct"},"17:11153:4784":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:6026:3335":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"25:5044:8177":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:364:4384":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:4762:9666":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:10486:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:7537:8781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:8012:8815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:11216:27524":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:15249:5531":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:947:6411":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7168:7279":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:7546:8784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:3196:5830":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:3287:28560":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"25:4862:8092":{"crate_id":25,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:7324:4493":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"25:5628:8401":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:5914:5948":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:1320:6158":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:14968:5470":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:21639:32380":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:3042:34352":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"25:6744:8598":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:12659:4982":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:12399:4959":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"22:192:2161":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkResult"],"kind":"enum"},"1:11081:4503":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:3137:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"11:687:4166":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:9418:2038":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:43980:6732":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:12574:6741":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:22493:33188":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"16:542:5816":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:15582:5638":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:32275:3408":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:8624:7243":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"6:1503:7895":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:14516:5302":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9207:9691":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:43774:6898":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13855:5182":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:21657:9573":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"25:1705:8021":{"crate_id":25,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12671:4983":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"23:331:4368":{"crate_id":23,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"17:14876:5435":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"11:430:35866":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:22996:3390":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:13914:9500":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:1886:4416":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:42028:3732":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:1098:4641":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:16050:5062":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:8259:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8790:7257":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5466:8335":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:6895:8994":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:21610:32389":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:46120:6987":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:7630:4425":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:4248:4416":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:30631:32642":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:497:7829":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:44472:6936":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6026:5812":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5382:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6505:8499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:5385:4767":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"21:0:3259":{"crate_id":21,"path":["scopeguard"],"kind":"module"},"2:42559:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:23638:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:40416:14909":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:40382:6819":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"20:467:2770":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"2:10323:3706":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:45826:6956":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"25:6433:8464":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:7937:4498":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:10889:7299":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"11:1582:6428":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:11405:6733":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10997:4793":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:10311:3701":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"25:1661:8003":{"crate_id":25,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:32217:2272":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:3288:6430":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:1545:6427":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:396:4386":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:6561:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:23164:6799":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:11647:4861":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"25:6662:8577":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:4656:3355":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:40654:6834":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:5436:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"25:5179:8197":{"crate_id":25,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:9172:3732":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:40455:6823":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:47040:7067":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:44026:6910":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:1517:7900":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:4856:5911":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:7372:6508":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:651:4576":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:44400:6750":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11661:4862":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:8271:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:3415:3299":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:532:7855":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:46217:6992":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:4784:3365":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:3268:3286":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:15368:5567":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"14:160:6403":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11865:4888":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:2657:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:15434:5582":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"22:82:2011":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock"],"kind":"module"},"18:0:3106":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12356:1418":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"25:8195:8825":{"crate_id":25,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:7453:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"25:6517:8500":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:9178:7157":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11841:4886":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:2403:4166":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:12354:965":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:12348:883":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:44503:6751":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:9938:22256":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:5960:5956":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:40401:6673":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2537:3802":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:42165:4166":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:5158:3431":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:44932:6951":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:8702:3435":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12408:4960":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"25:5555:8367":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"25:5475:8340":{"crate_id":25,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:3018:6543":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:40676:6836":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:46393:7016":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"25:7450:8728":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:7006:6134":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:22114:9701":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:5020:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:11682:9015":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"25:1678:8010":{"crate_id":25,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11730:4868":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:0:3104":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:752:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"23:363:26462":{"crate_id":23,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"2:2885:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"25:7357:8697":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14260:5260":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:4821:4661":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:6188:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:44451:14866":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:6940:6129":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"14:214:6406":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:11307:8931":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:4447:4419":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:47133:7074":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14246:5258":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:9714:7181":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"10:36:8907":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"25:4957:8134":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"25:6754:8605":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:23400:2880":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"type_alias"},"2:42245:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:13597:34092":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12887:4998":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:3587:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"25:8292:8836":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:5904:4416":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:7014:22194":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:44618:9009":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:11433:6735":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:7618:6537":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2635:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:8282:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7633:35885":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:44590:9002":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"25:6878:8636":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14311:5265":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:5930:4361":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"25:5563:8369":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"25:8027:8824":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:7641:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"25:5144:8194":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"25:5120:8192":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"25:5388:8288":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"25:6377:8424":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:5860:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:2245:8990":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"9:502:6490":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:46990:7065":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:11616:7309":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"25:1684:8013":{"crate_id":25,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:1663:8003":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:15197:5522":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:21593:32386":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:42401:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:10715:7129":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"11:875:6419":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:22983:3403":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:23065:6790":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:4959:8134":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11816:7135":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"14:0:3102":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:47019:7066":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"25:6407:8449":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"11:2536:8900":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8491:9572":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:38292:3292":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:6671:2027":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:4994:9632":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"20:218:3260":{"crate_id":20,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"17:15701:5673":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:30620:3711":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:9408:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:11992:3815":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"22:46:4370":{"crate_id":22,"path":["parking_lot_core","parking_lot","ThreadData"],"kind":"struct"},"6:0:1001":{"crate_id":6,"path":["libc"],"kind":"module"},"5:1505:3732":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:563:4585":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"15:394:21290":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12454:4966":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"25:4990:8149":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"20:35:186":{"crate_id":20,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"17:14091:5216":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:4942:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10218:4626":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"23:344:26461":{"crate_id":23,"path":["smallvec","ToSmallVec"],"kind":"trait"},"1:8604:9647":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:896:6412":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:5477:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:6429:9788":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:11341:4827":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:4083:4361":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5283:8250":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6648:6071":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:8805:9681":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"25:5500:8348":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:6363:4487":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:9111:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:12346:896":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:14038:5209":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:12336:1720":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"25:1637:7986":{"crate_id":25,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:39562:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:1559:7928":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:9386:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:6379:8424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:289:4392":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6768:8607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:45858:6960":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:10677:4460":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:15814:5699":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:1490:7889":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:16198:5797":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:12993:22262":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"25:5663:8415":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:41778:9615":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5219:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5191:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15822:5702":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13946:5195":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"25:5327:8265":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:13779:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:7314:8673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"20:872:234":{"crate_id":20,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"6:4985:8146":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5472:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:11277:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:10963:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:16121:5779":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:2838:5860":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"20:476:2842":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"17:15635:5656":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:7570:5878":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"25:6458:8469":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"25:4914:8118":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:4113:4392":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:2534:3112":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:7431:34313":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:11776:7134":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"25:4822:8059":{"crate_id":25,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12949:4656":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"25:7364:8701":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:6191:6685":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:1838:695":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2521:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:8669:7141":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:7561:8791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10018:22238":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:7429:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13363:5075":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"11:673:4165":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"25:8315:8842":{"crate_id":25,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:2355:5833":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:39486:3308":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:1631:6432":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12530:4977":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:2638:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:7584:8803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:256:2034":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"2:13512:6758":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:13437:5086":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:1496:7892":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:888:2039":{"crate_id":20,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"1:373:3614":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"25:1557:7928":{"crate_id":25,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:80:26433":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:5247:6678":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"25:544:7861":{"crate_id":25,"path":["libc","unix","winsize"],"kind":"struct"},"2:40618:6830":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"22:292:2616":{"crate_id":22,"path":["parking_lot_core","spinwait","SpinWait"],"kind":"struct"},"5:7411:4403":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:9258:2019":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:8174:14962":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:3593:3304":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:3179:3695":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:2766:7696":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:12343:732":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:15720:5678":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"25:8298:8837":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:22467:9573":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:43682:6890":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:4288:4416":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:44193:6820":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"25:6773:8608":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:15:2974":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:6524:8501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:3801:6509":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:9462:3315":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"25:4922:8120":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:774:6412":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:689:4608":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40799:6845":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:38871:3293":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:4684:9649":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:10259:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:42173:3732":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:40838:6696":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:32182:6803":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"18:726:4618":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:8226:22200":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:23186:6801":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:40755:6843":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:3428:7130":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"25:6809:8621":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:3036:34450":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5336:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:23131:6796":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"5:5073:4416":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:40695:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:3314:6433":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:15596:5644":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4952:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:21608:32377":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:5376:8280":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:3994:3732":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:1510:7897":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"14:165:21261":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:40685:6837":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:6271:4483":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5244:8228":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:46842:7061":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:3861:4361":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:8610:7241":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8767:6881":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:1593:7949":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6991:35884":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5370:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:2808:5859":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:10760:4463":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:879:4398":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:14855:5427":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12089:4928":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6849:6121":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:33443:3278":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:40359:6817":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10185:4625":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"25:7483:8742":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"21:17:4376":{"crate_id":21,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"5:6047:3328":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:3218:3297":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:3754:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:1962:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:44793:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"18:698:4609":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:3831:9616":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"25:5434:8314":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"25:5534:8355":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:15039:5485":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"25:7600:8806":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:1475:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:1603:4165":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:3509:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:8265:8829":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:9454:6718":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"9:53:9057":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:974:6419":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:521:2377":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5266:8239":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:11503:4506":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:47159:7076":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:623:35911":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:44140:6915":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:7355:6189":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11443:4835":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"22:0:2041":{"crate_id":22,"path":["parking_lot_core"],"kind":"module"},"17:15190:5520":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44788:8928":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:5112:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:304:3409":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:8065:9487":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:40645:6833":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:41946:6713":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:670:4605":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:1336:6422":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:14503:5301":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:6706:8591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:8223:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:22405:9782":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:5466:14843":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:7461:6529":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:3582:7237":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:2098:6509":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:42068:3440":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:40848:6847":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:4377:6675":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:3055:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:10953:9573":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:44679:3349":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:8218:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:2878:5862":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:8364:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:9671:22237":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:8006:8813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:43004:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:12333:1313":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:578:7879":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:10346:7289":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:6412:22190":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:21659:9699":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:46202:6991":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:5325:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"13:229:8899":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:32193:6804":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:11715:4866":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:7533:3740":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:11239:6728":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:8309:3406":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:1610:4361":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:3842:5893":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:9858:22253":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"11:0:3100":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:5052:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:22758:6767":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"25:7573:8800":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"25:4835:8069":{"crate_id":25,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5677:8420":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:5927:5949":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:1526:7905":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2882:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:46765:7060":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4811:8049":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8553:7236":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:909:6413":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:7716:30634":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:7381:3732":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:6900:4456":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:5400:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:597:4640":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:517:7846":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:4651:3354":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:45928:6968":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:2078:8916":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:6621:8562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"11:837:6414":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"11:351:35859":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:12371:5001":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:6874:8635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2592:5849":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"25:0:1001":{"crate_id":25,"path":["libc"],"kind":"module"},"17:10622:35897":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"25:5294:8255":{"crate_id":25,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:15655:5659":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:15324:5553":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:12331:1872":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"11:2124:6158":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"25:5050:8179":{"crate_id":25,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:5248:7147":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:15778:5695":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"25:478:7823":{"crate_id":25,"path":["libc","unix","timeval"],"kind":"struct"},"1:5643:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11702:4865":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:6068:15219":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:14986:5475":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:1474:4165":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:1025:6421":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"14:187:21268":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:1692:8014":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:4432:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:12611:6744":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:4315:9643":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:15678:5672":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:2894:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:15734:5680":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"11:787:6413":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:15992:5753":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:12238:4941":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:4502:5900":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:10982:22270":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"25:6736:8597":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:1083:6421":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:15151:5509":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:531:4580":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:15281:5541":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:3778:5891":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"25:5513:8349":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:7412:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"11:844:9499":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:42710:3703":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"25:1563:7930":{"crate_id":25,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2861:9573":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:14212:5255":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"25:7387:8719":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:635:4598":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:12340:734":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:8541:6914":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"15:306:21281":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:14599:5319":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:1536:6413":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"23:328:26460":{"crate_id":23,"path":["smallvec","Array"],"kind":"trait"},"25:7514:8767":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12863:4997":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:2535:7698":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:15769:5693":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:3476:9599":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5296:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:15102:5498":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:839:4395":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:42078:3443":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"21:58:26453":{"crate_id":21,"path":["scopeguard","Always"],"kind":"enum"},"5:4278:4416":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:12347:902":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12127:4930":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5546:8361":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:40767:6691":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:42703:3701":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:43691:6892":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:30605:4061":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13738:5162":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"25:5350:8268":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:12824:22261":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"25:1690:8014":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:3896:7135":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"25:4895:8105":{"crate_id":25,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:473:2838":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"16:7799:5870":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"25:5596:8381":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:41221:4458":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8647:8701":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6756:8605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:40344:32638":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"2:3327:3307":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:3132:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:12888:4611":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:40:4388":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13089:5015":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6670:8580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:22481:9784":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:44810:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:4498:3370":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:10955:7288":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:14414:5283":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:14575:4963":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:15944:5048":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:11893:7310":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:44175:6821":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:14560:5309":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:30599:3814":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9271:7270":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:10319:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12683:4984":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:15206:5523":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1707:8021":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:5367:22185":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"25:5443:8320":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:6821:8624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:15760:5689":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11634:4860":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"25:1619:7974":{"crate_id":25,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:1686:8013":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:3358:2166":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:45811:6955":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6417:8451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:43257:6885":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8071:9529":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:13535:6842":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:13899:5190":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:9444:3314":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:4913:9633":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:12350:1832":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:43761:6897":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:9938:801":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"1:8599:9011":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:1566:6411":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:11242:4814":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:40983:6698":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:11419:6734":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:8253:8827":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11537:4841":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:14977:5474":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:39547:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:4331:9645":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:8341:8847":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:40533:14979":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6433:6047":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:2064:3818":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:5581:8374":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:8250:7187":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11764:4873":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:732:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:1891:7113":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"20:436:2030":{"crate_id":20,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"6:5014:8162":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:2476:9562":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:10712:7127":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:12278:4944":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:15116:5499":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"25:1508:7897":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:40997:6699":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"25:6619:8562":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:42963:8927":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:23109:6794":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:39642:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15168:5514":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:8180:7182":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"25:5198:8209":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11051:4798":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:513:4639":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:7461:8731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:680:4606":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:42936:8919":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"25:1533:7911":{"crate_id":25,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"25:8280:8834":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"25:5359:8272":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5665:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"25:6648:8575":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"22:83:2302":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","acquire_resource"],"kind":"function"},"16:8093:6304":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"25:7544:8784":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12557:4802":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:4718:5906":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"9:482:21176":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12808:4994":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:6000:4416":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:2712:4463":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:6317:6030":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:7445:3732":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:47144:7075":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:15383:5571":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:951:6414":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:6895:6123":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:367:3613":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:11157:6725":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:5502:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:44150:6916":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:922:4361":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"25:7337:8691":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:5897:5943":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:5981:2018":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:43722:6895":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:5307:5920":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12353:4956":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:34029:3284":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:7686:6249":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"25:5223:8220":{"crate_id":25,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"23:97:26459":{"crate_id":23,"path":["smallvec","SmallVecData"],"kind":"enum"},"16:4352:5897":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"13:0:3095":{"crate_id":13,"path":["std_detect"],"kind":"module"},"20:321:4572":{"crate_id":20,"path":["lock_api","remutex","fmt","LockedPlaceholder"],"kind":"struct"},"22:279:2772":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkToken"],"kind":"struct"},"1:4809:8714":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"22:73:2164":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_PARK_TOKEN"],"kind":"constant"},"17:11853:4887":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:7516:8767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:1603:6429":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:7052:6145":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:865:4165":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:43711:6894":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:5624:8398":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:46164:6989":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:12313:27448":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:45943:6969":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:8207:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:8229:7121":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:8051:9486":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:8175:7181":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:2206:2377":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:22579:9573":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:8521:6850":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:15608:5647":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:41964:6715":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:38237:3291":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:40496:6825":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:6077:6683":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"25:7304:8668":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:6667:2026":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:9403:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"25:5100:8190":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:12420:14854":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:15138:5503":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:15390:5572":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11142:4783":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:10775:4467":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:479:7823":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4093:9618":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"25:5110:8191":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:14111:5219":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12388:4958":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:11577:3617":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:39602:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:8136:6309":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:10568:6722":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"25:8349:8849":{"crate_id":25,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:2070:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:741:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:2004:784":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:8202:5884":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:22136:6764":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:44159:6917":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:8288:8835":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13211:5048":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11877:4889":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:7754:14957":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:5344:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:13553:5117":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:3599:3306":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12150:4931":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:1101:6426":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:8301:6325":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"25:5037:8175":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:41984:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:867:4633":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:40973:6850":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:4129:9619":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:9289:27254":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:16165:5790":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:7547:9498":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:21826:9573":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1636:6433":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"25:1494:7892":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12318:4656":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13015:4963":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:2862:14915":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:5134:8193":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:9736:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:6948:5873":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:42520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5102:8190":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:41724:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"18:735:26443":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"22:72:2617":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_UNPARK_TOKEN"],"kind":"constant"},"2:13859:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:46135:6988":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:16249:5807":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:7528:6239":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"25:5405:1242":{"crate_id":25,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:12873:3509":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:2535:3801":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"25:522:7849":{"crate_id":25,"path":["libc","unix","hostent"],"kind":"struct"},"17:11755:4872":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:4876:9648":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:43450:6887":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12695:4985":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:473:7820":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:1087:35858":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11547:4711":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:12330:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:43247:6881":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:44883:6949":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"25:5242:8228":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5002:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:4934:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"14:40:5049":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:11200:6727":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:9916:22255":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:47197:7082":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:9322:7277":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:7306:8668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"25:5641:8407":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"11:1917:6432":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12443:4965":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:43050:3712":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12300:22382":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8005:3604":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"25:8286:8835":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:16269:5084":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:5617:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:7061:6148":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:1547:7920":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"25:7459:8731":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"7:32:21163":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:14475:5297":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:2067:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:5628:7154":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12792:4732":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8618:7234":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:1997:9539":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:6409:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:3374:2379":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:8256:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:12724:22260":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:7446:8726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12362:4957":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5598:8381":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5557:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:42440:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8511:6834":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:6856:3338":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:4062:5896":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:12833:3388":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:46348:6999":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"25:484:7825":{"crate_id":25,"path":["libc","unix","timespec"],"kind":"struct"},"2:34202:3285":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:41762:6712":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6811:8621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:47118:7073":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12485:22384":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"15:288:21280":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"25:1483:7887":{"crate_id":25,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:9164:7268":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"25:6761:8606":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:23120:6795":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:3142:3368":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:32200:3363":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:39622:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:15010:5477":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13308:5067":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:43210:6874":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"25:5368:8278":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11788:4878":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"25:5158:8195":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:5846:5939":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"25:4883:8100":{"crate_id":25,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:22811:6768":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11269:22288":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:1625:6431":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"9:357:21192":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:12337:1810":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:43218:6876":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:16093:5772":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:41206:6703":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:22705:6766":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:43673:6889":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:11019:27457":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"20:454:2815":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"17:14051:5211":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4932:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:22361:9781":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:33856:3283":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:22443:9783":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"18:706:4611":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11189:4810":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:42479:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15313:5549":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7144:22195":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:43998:6733":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:10520:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11621:4858":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:7103:4443":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:2936:21327":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12422:4961":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:6398:5863":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10534:35896":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:8342:9604":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:43926:6908":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:32959:3273":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:23175:6800":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:42598:3233":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:2612:5850":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:32140:8904":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:4614:5904":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:4986:4663":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:7055:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:3213:3296":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:16105:5774":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"11:2443:4361":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"14:202:14867":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:9222:9690":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:2773:7124":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:12650:6746":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11166:4809":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:6665:22192":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:2902:21326":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13173:5033":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:12357:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:46024:6974":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:3380:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7085:6149":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:44872:32916":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"25:5081:8189":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:9781:22252":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:1671:8004":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:2696:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"11:1107:6424":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11063:4801":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"25:5248:8230":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:4365:6674":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:1968:7116":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:6542:8513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:2977:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:6927:6127":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:14235:5256":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:4531:5901":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:2231:4848":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:980:6420":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:14463:5296":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:6172:4488":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12213:4939":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:42079:3442":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12647:4981":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:5160:8195":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:4835:3366":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"23:57:4361":{"crate_id":23,"path":["smallvec","Drain"],"kind":"struct"},"2:11312:6730":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:32305:3696":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:5768:9686":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10720:35903":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13187:5034":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:15342:5557":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:46266:6995":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6442:6048":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:43822:6902":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4965:8135":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:22626:9776":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:11567:4845":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:44373:6930":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6278:6008":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:41190:6702":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"9:392:21178":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:4971:4481":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7306:35892":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:5756:5928":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:11599:27462":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"5:1200:35848":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"25:531:7855":{"crate_id":25,"path":["libc","unix","iovec"],"kind":"struct"},"1:562:2610":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:12355:1911":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:3363:3294":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:39692:3303":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"25:4983:8146":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"25:5281:8250":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7857:6262":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:11510:4839":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"25:8010:8815":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"25:6719:8594":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"25:4907:8114":{"crate_id":25,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:2216:6512":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:46932:7063":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:1007:6158":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:2383:4165":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"11:2554:35856":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:3386:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:2728:5855":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:4976:5915":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3519:6851":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:6729:8595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:3406:4428":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:2438:5842":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:42003:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:6664:8577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:11413:6487":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:42975:6281":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:6597:8550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"25:552:7866":{"crate_id":25,"path":["libc","unix","linger"],"kind":"struct"},"17:14912:5464":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:3639:3700":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"25:7410:8720":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:10938:7183":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"11:1160:6426":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:5643:8407":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:650:7103":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:1607:3732":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8592:7137":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6560:5866":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:5039:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:2572:5848":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:5817:5934":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12030:4923":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:22934:32637":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"20:484:233":{"crate_id":20,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"6:7452:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:8300:8837":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4891:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:666:7104":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:15078:5494":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13292:5063":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6746:8598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:7590:5879":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:4323:9644":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:15445:5586":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:22148:32375":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:8547:7234":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:5279:7147":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"25:5651:8408":{"crate_id":25,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:15957:5723":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:45995:6972":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:878:4166":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3426:7129":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"7:0:1901":{"crate_id":7,"path":["unwind"],"kind":"module"},"10:0:3099":{"crate_id":10,"path":["adler"],"kind":"module"},"2:46572:7023":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:9964:9076":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6441:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:30978:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:1535:7911":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11799:4879":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"25:8245:8826":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:43469:6723":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:3549:4416":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:5947:3076":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:15473:5594":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:3218:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:39699:6811":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:4807:8712":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:43852:6906":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"20:479:2846":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"17:11812:4882":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:7981:9573":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:11227:4813":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"11:328:8989":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:8188:6316":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:33510:3282":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:481:4574":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:12899:14851":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:21571:3687":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:613:35909":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:44279:6919":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4157:9622":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:5400:4768":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:12688:6727":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"25:4809:8049":{"crate_id":25,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:6749:6095":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:8258:6509":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:4915:9635":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:5462:14842":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44800:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3332:7126":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:44606:9006":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6574:5883":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:8029:8824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:6721:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"20:88:4572":{"crate_id":20,"path":["lock_api","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:2323:21325":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:11102:4804":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"25:6627:8563":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7549:6242":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:21625:32384":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:13594:5128":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:883:6420":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:44044:6911":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:3899:5894":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:7638:14912":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:7723:4428":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13526:5108":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:16259:5079":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:9317:7276":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11256:4816":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:4873:9670":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:13822:4474":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:6435:8464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"25:6668:8580":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:22976:8998":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3385:7128":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"25:6439:8467":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:21718:9698":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:40723:6839":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:14066:5214":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"9:238:6881":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:669:7106":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:8676:4167":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:6410:9787":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:1485:7887":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13774:5170":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:23076:6791":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:4811:8716":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"16:4771:5908":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5636:8404":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:2478:9563":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:11354:4828":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13581:5127":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40393:6820":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:15333:5556":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"20:848:2025":{"crate_id":20,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"11:1051:6422":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:14723:5321":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"25:6712:8593":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"25:4889:8102":{"crate_id":25,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:586:2336":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:3264:4652":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"25:6704:8591":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:7755:5872":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:4412:14827":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:1351:6421":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:426:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"25:1697:8017":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"25:1501:7895":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:6964:4438":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"18:491:4575":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:6636:8564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:10170:4768":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:2418:5841":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"25:5029:8170":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:9878:781":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"25:490:7826":{"crate_id":25,"path":["libc","unix","rlimit"],"kind":"struct"},"2:47098:7071":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:47087:7070":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:14752:5341":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"25:4785:8032":{"crate_id":25,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:14529:5303":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4885:8100":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:42717:3704":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"25:5217:8217":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5329:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:7739:4432":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:15266:5539":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2274:3820":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"24:0:3097":{"crate_id":24,"path":["cfg_if"],"kind":"module"},"25:1488:7889":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:47182:7081":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:44462:6932":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2888:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"25:5275:8247":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:46103:6986":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:41746:6710":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:12879:6718":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13538:5111":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:3582:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:40570:9542":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:21838:6765":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:1585:7944":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:23098:6793":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:4800:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:42117:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:5260:8236":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5528:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:12634:6745":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10439:4769":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:4213:9627":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:10595:7264":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:2698:4477":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:860:5825":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"11:1883:4165":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:40789:6844":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11214:4812":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11042:4796":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11574:4848":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:7481:3732":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"25:5669:8417":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:46053:6976":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:36251:3288":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:44258:14865":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:43701:6893":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"25:4940:8128":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:1839:4428":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"20:20:2029":{"crate_id":20,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"2:44325:6928":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2727:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:2508:5845":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:16212:5801":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:2488:9568":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"18:113:26435":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:1489:4166":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:15222:5527":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12494:4970":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:40297:6673":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:15931:5034":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"25:6819:8624":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"25:8257:8828":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4787:8032":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11004:7155":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:9135:7266":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"25:7346:8692":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:12894:14852":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:9719:4500":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:7379:35891":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:2569:6530":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"25:516:7846":{"crate_id":25,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"25:5622:8398":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:0:3096":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:6714:8593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:3022:4480":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:46249:6994":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"25:5132:8193":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11605:4856":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:8197:7184":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:8155:6312":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:43226:6877":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9544:7114":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:3998:7136":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"25:7312:8673":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:4802:5909":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:2394:5840":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:6650:8575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"11:1142:6425":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:7353:27252":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"15:327:9054":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:952:4165":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11583:4851":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:3627:3309":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:3475:5889":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4824:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:10996:7180":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:43944:6909":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4864:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:2548:8902":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:21712:9695":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:22890:6774":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:8118:6307":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:40808:6694":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:6678:8582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:6689:8584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:16223:5803":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"14:220:6408":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:33711:3281":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:553:7866":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6079:5818":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:2542:8901":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5407:1242":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6480:5865":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"25:7559:8791":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:1073:4392":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:9330:7279":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:12329:1173":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:12334:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:6788:8615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"20:907:2038":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:9276:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:41212:6851":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5671:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:16176:5795":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:12056:4926":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:7539:5877":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"25:6913:8661":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:7888:6266":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:4205:9625":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:32216:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11242:3314":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"18:573:4576":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:11036:7267":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:39530:3298":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:2966:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:943:6410":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:8558:9614":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11405:4831":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:15616:5650":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:2315:9555":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:45890:6962":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"14:7:6403":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:12433:4963":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13455:5094":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:7695:6250":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:2298:34288":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:9391:2025":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"25:6476:8479":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:5037:5917":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13986:5203":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6231:6001":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:747:3391":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:6160:21298":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:11259:7579":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"11:1923:6433":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"11:856:6417":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6543:6058":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5290:8252":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:742:6411":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:12341:737":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:10905:4786":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"25:6687:8584":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"11:1896:4428":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"11:2140:6421":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:22898:6775":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:5015:14903":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:14341:5270":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:6911:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11915:22358":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"11:1903:6430":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:23087:6792":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:5833:4488":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11497:4838":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:11192:7265":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:22109:9573":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"25:6655:8576":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"25:464:7815":{"crate_id":25,"path":["libc","unix","group"],"kind":"struct"},"1:9363:7575":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"25:6530:8506":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:7421:6528":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:2788:5858":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:44626:3348":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:11557:4843":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"7:79:21170":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:1527:6412":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12264:4943":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:2311:2973":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:3035:3787":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:2548:5847":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:12349:1850":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"25:4969:8138":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:6498:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:32276:3697":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12478:4968":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8872:7263":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:7339:8691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:10104:3719":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:43622:6888":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:5277:8247":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"22:266:2731":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkToken"],"kind":"struct"},"2:4577:2768":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:15463:5589":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:7591:14979":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:6395:7160":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:47078:7069":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1639:7986":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:1555:6410":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11595:4855":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10967:7133":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"25:1591:7949":{"crate_id":25,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:15058:5486":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6353:5823":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:1164:35847":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"}},"external_crates":{"23":{"name":"smallvec","html_root_url":null},"20":{"name":"lock_api","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"libc","html_root_url":null},"22":{"name":"parking_lot_core","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"21":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}