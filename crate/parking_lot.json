{"root":"0:0:1787","crate_version":"0.12.1","includes_private":false,"index":{"2:12413:32647":{"id":"2:12413:32647","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:286:2565":{"id":"0:286:2565","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/raw_rwlock.rs","begin":[236,4],"end":[250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44325:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445-20:0:1762":{"id":"0:445-20:0:1762","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[56,0],"end":[56,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"::lock_api","name":"lock_api","id":"20:0:1762","glob":false}}},"a:2:2792:250-0:127:1773":{"id":"a:2:2792:250-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:174:2477":{"id":"0:174:2477","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_fair_mutex.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:2475","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12409:32646":{"id":"2:12409:32646","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12407:32645"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1765":{"id":"0:31:1765","crate_id":0,"name":"Condvar","span":{"filename":"src/condvar.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"A Condition Variable\n\nCondition variables represent the ability to block a thread such that it\nconsumes no CPU time while waiting for an event to occur. Condition\nvariables are typically associated with a boolean predicate (a condition)\nand a mutex. The predicate is always verified inside of the mutex before\ndetermining that thread must block.\n\nNote that this module places one additional restriction over the system\ncondition variables: each condvar can be used with only one mutex at a\ntime. Any attempt to use multiple mutexes on the same condition variable\nsimultaneously will result in a runtime panic. However it is possible to\nswitch to a different mutex if there are no threads currently waiting on\nthe condition variable.\n\n# Differences from the standard library `Condvar`\n\n- No spurious wakeups: A wait will only return a non-timeout result if it\n  was woken up by `notify_one` or `notify_all`.\n- `Condvar::notify_all` will only wake up a single thread, the rest are\n  requeued to wait for the `Mutex` to be unlocked by the thread that was\n  woken up.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `Condvar` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n\n# Examples\n\n```\nuse parking_lot::{Mutex, Condvar};\nuse std::sync::Arc;\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\n// Inside of our lock, spawn a new thread, and then wait for it to start\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock();\n    *started = true;\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock();\nif !*started {\n    cvar.wait(&mut started);\n}\n// Note that we used an if instead of a while loop above. This is only\n// possible because parking_lot's Condvar will never spuriously wake up.\n// This means that wait() will only return after notify_one or notify_all is\n// called.\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:33","a:2:2792:250-0:31:1765","a:2:8605:3148-0:31:1765","a:2:2832:3061-0:31:1765","a:2:2775:240-0:31:1765","a:2:8606:3147-0:31:1765","b:2:2566-0:31:1765","b:2:3411-0:31:1765","b:2:2260-0:31:1765","b:2:2581-0:31:1765","b:2:2570-0:31:1765","b:2:2263-0:31:1765","b:2:2576-0:31:1765","0:65","0:67"]}}},"a:2:2792:250-0:460:1774":{"id":"a:2:2792:250-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2581-0:460:1774":{"id":"b:2:2581-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:302:2586":{"id":"0:302:2586","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[420,4],"end":[424,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:33330":{"id":"5:5533:33330","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:3064","`String`":"5:7487:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3064","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:6087","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2581-0:31:1765":{"id":"b:2:2581-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2576-0:31:1765":{"id":"b:2:2576-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:267:2539":{"id":"0:267:2539","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[80,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:2131":{"id":"0:208:2131","crate_id":0,"name":"bump","span":{"filename":"src/raw_mutex.rs","begin":[134,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12432:30725":{"id":"2:12432:30725","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12431:30714"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43834:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12518:32665":{"id":"2:12518:32665","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8606:3147-0:127:1773":{"id":"a:2:8606:3147-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8606:3147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:157:1775":{"id":"0:157:1775","crate_id":0,"name":"RawFairMutex","span":{"filename":"src/raw_fair_mutex.rs","begin":[12,0],"end":[12,34]},"visibility":"public","docs":"Raw fair mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2792:250-0:157:1775","a:2:8605:3148-0:157:1775","a:2:2832:3061-0:157:1775","a:2:2775:240-0:157:1775","a:2:8606:3147-0:157:1775","b:2:2566-0:157:1775","b:2:3411-0:157:1775","b:2:2260-0:157:1775","b:2:2581-0:157:1775","b:2:2570-0:157:1775","b:2:2263-0:157:1775","b:2:2576-0:157:1775","0:170","0:167","0:160"]}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:33326","5:5518:3302","5:5521:33327","5:5524:33328","5:5532:33329","5:5533:33330","5:5534:8931","5:5535:27603","5:5536:27604"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:202:2047":{"id":"0:202:2047","crate_id":0,"name":"lock","span":{"filename":"src/raw_mutex.rs","begin":[66,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383:238":{"id":"0:383:238","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[104,0],"end":[104,80]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockWriteGuard","id":"20:881:238","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:308:2594":{"id":"0:308:2594","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/raw_rwlock.rs","begin":[467,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44325:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:197:1776":{"id":"a:2:2775:240-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8605:3148-0:357:1780":{"id":"a:2:8605:3148-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8605:3148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:438-0:378:1783":{"id":"0:438-0:378:1783","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::const_rwlock","name":"const_rwlock","id":"0:378:1783","glob":false}}},"0:367:1782":{"id":"0:367:1782","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[59,0],"end":[59,98]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutexGuard","id":"20:856:1782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:2792:250-0:446:1766":{"id":"a:2:2792:250-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2576-0:460:1774":{"id":"b:2:2576-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:307:2593":{"id":"0:307:2593","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/raw_rwlock.rs","begin":[454,4],"end":[464,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9146:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:1777":{"id":"0:261:1777","crate_id":0,"name":"RawRwLock","span":{"filename":"src/raw_rwlock.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Raw reader-writer lock type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2792:250-0:261:1777","a:2:8605:3148-0:261:1777","a:2:2832:3061-0:261:1777","a:2:2775:240-0:261:1777","a:2:8606:3147-0:261:1777","b:2:2566-0:261:1777","b:2:3411-0:261:1777","b:2:2260-0:261:1777","b:2:2581-0:261:1777","b:2:2570-0:261:1777","b:2:2263-0:261:1777","b:2:2576-0:261:1777","0:306","0:291","0:281","0:303","0:274","0:279","0:263","0:294","0:300","0:288"]}}},"b:2:2570-0:446:1766":{"id":"b:2:2570-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:210:126":{"id":"0:210:126","crate_id":0,"name":"Duration","span":{"filename":"src/raw_mutex.rs","begin":[142,4],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44325:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12406:32644":{"id":"2:12406:32644","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12474:26291":{"id":"2:12474:26291","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2580:1586":{"id":"2:2580:1586","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41734:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:1767":{"id":"0:85:1767","crate_id":0,"name":"const_fair_mutex","span":{"filename":"src/fair_mutex.rs","begin":[83,0],"end":[85,1]},"visibility":"public","docs":"Creates a new fair mutex in an unlocked state ready for use.\n\nThis allows creating a fair mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"FairMutex","id":"0:83:1768","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:127:1773":{"id":"a:2:2775:240-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:205:2474":{"id":"0:205:2474","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_mutex.rs","begin":[113,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:443-0:392:1786":{"id":"0:443-0:392:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockUpgradableReadGuard","name":"RwLockUpgradableReadGuard","id":"0:392:1786","glob":false}}},"0:30:1915":{"id":"0:30:1915","crate_id":0,"name":"timed_out","span":{"filename":"src/condvar.rs","begin":[28,4],"end":[30,5]},"visibility":"public","docs":"Returns whether the wait was known to have timed out.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:868":{"id":"2:12404:868","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12066:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:32664":{"id":"2:12515:32664","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:197:1776":{"id":"b:2:3411-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1599"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12429:6482":{"id":"2:12429:6482","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43527:6462","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2566-0:31:1765":{"id":"b:2:2566-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:3404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:161:2279":{"id":"0:161:2279","crate_id":0,"name":"INIT","span":{"filename":"src/raw_fair_mutex.rs","begin":[15,4],"end":[15,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:417-0:83:1768":{"id":"0:417-0:83:1768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,45],"end":[42,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutex","name":"FairMutex","id":"0:83:1768","glob":false}}},"2:12442:26295":{"id":"2:12442:26295","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12405:2182":{"id":"2:12405:2182","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:27433":{"id":"2:12527:27433","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:2473":{"id":"0:168:2473","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_fair_mutex.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12428:6321":{"id":"2:12428:6321","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43521:6313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[59,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked","is_locked_exclusive"],"trait":{"name":"RawRwLock","id":"20:434:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:2279","0:265:1761","0:266:2535","0:267:2539","0:268:2540","0:269:2543","0:270:2546","0:271:2548","0:272:2474","0:273:2551"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:465:2374":{"id":"0:465:2374","crate_id":0,"name":"InProgress","span":{"filename":"src/once.rs","begin":[30,4],"end":[30,14]},"visibility":"default","docs":"A thread is currently executing a closure.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:441-0:376:236":{"id":"0:441-0:376:236","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,65],"end":[53,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLock","name":"RwLock","id":"0:376:236","glob":false}}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:453:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:282:126":{"id":"0:282:126","crate_id":0,"name":"Duration","span":{"filename":"src/raw_rwlock.rs","begin":[206,4],"end":[206,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44325:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:271:2548":{"id":"0:271:2548","crate_id":0,"name":"unlock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[129,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[318,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2617:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5534:8931":{"id":"5:5534:8931","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:1761":{"id":"0:162:1761","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_fair_mutex.rs","begin":[17,4],"end":[17,69]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutex","id":"20:20:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"a:2:2832:3061-0:357:1780":{"id":"a:2:2832:3061-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:3061","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2572:741":{"id":"2:2572:741","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2566-0:197:1776":{"id":"b:2:2566-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:3404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:163:2047":{"id":"0:163:2047","crate_id":0,"name":"lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[517,0],"end":[521,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9530:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:370:1779":{"id":"0:370:1779","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[68,0],"end":[69,70]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedReentrantMutexGuard","id":"20:865:1779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:8605:3148-0:446:1766":{"id":"a:2:8605:3148-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8605:3148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2570-0:197:1776":{"id":"b:2:2570-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:289:2568":{"id":"0:289:2568","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[272,4],"end":[278,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:2580":{"id":"0:298:2580","crate_id":0,"name":"upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[367,4],"end":[376,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:442-0:380:237":{"id":"0:442-0:380:237","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,73],"end":[53,88]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockReadGuard","name":"RwLockReadGuard","id":"0:380:237","glob":false}}},"0:444-0:383:238":{"id":"0:444-0:383:238","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockWriteGuard","name":"RwLockWriteGuard","id":"0:383:238","glob":false}}},"5:5524:33328":{"id":"5:5524:33328","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:2596":{"id":"0:310:2596","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/raw_rwlock.rs","begin":[493,4],"end":[503,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44325:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2260-0:157:1775":{"id":"b:2:2260-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2649"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96:178":{"id":"0:96:178","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[87,49]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same mutex in succession, which can starve\nother threads waiting to acquire the mutex. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na mutex it has just released, this can starve other threads.\n\nThis mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the mutex.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `MutexGuard::unlock_fair` when\nunlocking a mutex instead of simply dropping the `MutexGuard`.\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `Mutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the mutex is fair on average.\n- Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::Mutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(Mutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:178","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[191,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockDowngrade","id":"20:450:2559","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:2560"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:363:1781":{"id":"0:363:1781","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[41,0],"end":[41,80]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](type.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutex","id":"20:255:1781","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[36,0],"end":[58,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:2380","0:126:2383"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:471:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2576-0:127:1773":{"id":"b:2:2576-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2792:250-0:157:1775":{"id":"a:2:2792:250-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2260-0:261:1777":{"id":"b:2:2260-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2649"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[15,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"GetThreadId","id":"20:214:2626","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:360:2279","0:361:2628"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2581-0:446:1766":{"id":"b:2:2581-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8606:3147-0:197:1776":{"id":"a:2:8606:3147-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8606:3147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:90:1770":{"id":"0:90:1770","crate_id":0,"name":"MappedFairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[101,0],"end":[101,87]},"visibility":"public","docs":"An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:849:1772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:83:1768":{"id":"0:83:1768","crate_id":0,"name":"FairMutex","span":{"filename":"src/fair_mutex.rs","begin":[78,0],"end":[78,57]},"visibility":"public","docs":"A mutual exclusive primitive that is always fair, useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\nThe regular mutex provided by `parking_lot` uses eventual fairness\n(after some time it will default to the fair algorithm), but eventual\nfairness does not provide the same guarantees an always fair method would.\nFair mutexes are generally slower, but sometimes needed.\n\nIn a fair mutex the waiters form a queue, and the lock is always granted to\nthe next requester in the queue, in first-in first-out order. This ensures\nthat one thread cannot starve others by quickly re-acquiring the lock after\nreleasing it.\n\nA fair mutex may not be interesting if threads have different priorities (this is known as\npriority inversion).\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `FairMutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n\n# Examples\n\n```\nuse parking_lot::FairMutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(FairMutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:178","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:2579:132":{"id":"2:2579:132","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:683:3470":{"id":"5:683:3470","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:453:657":{"id":"0:453:657","crate_id":0,"name":"eq","span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2033":{"id":"0:45:2033","crate_id":0,"name":"wait_until","span":{"filename":"src/condvar.rs","begin":[283,4],"end":[292,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9146:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:477:657":{"id":"0:477:657","crate_id":0,"name":"eq","span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[510,0],"end":[515,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2617:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2260-0:31:1765":{"id":"b:2:2260-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2649"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2260-0:357:1780":{"id":"b:2:2260-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2649"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:392:1786":{"id":"0:392:1786","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[126,0],"end":[126,98]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockUpgradableReadGuard","id":"20:889:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:424-0:100:179":{"id":"0:424-0:100:179","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,60],"end":[43,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MutexGuard","name":"MutexGuard","id":"0:100:179","glob":false}}},"a:2:8605:3148-0:197:1776":{"id":"a:2:8605:3148-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8605:3148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12465:32652":{"id":"2:12465:32652","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12105:14180","str::split":"2:12453:26281","prim@char":"1:12066:447","str::split_terminator":"2:12462:32651"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43619:6465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12500:32661":{"id":"2:12500:32661","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12130:14177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2263-0:460:1774":{"id":"b:2:2263-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:2651"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12506:25126":{"id":"2:12506:25126","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:3061-0:446:1766":{"id":"a:2:2832:3061-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:3061","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:51:2052":{"id":"0:51:2052","crate_id":0,"name":"wait_for","span":{"filename":"src/condvar.rs","begin":[379,4],"end":[386,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44325:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12420:26249":{"id":"2:12420:26249","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12449:3410":{"id":"2:12449:3410","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41591:194","prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:27431":{"id":"2:12525:27431","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12530:8811":{"id":"2:12530:8811","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4573:8811"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43859:6250","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[52,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:171:126","0:172:155","0:173:2476","0:174:2477"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:35:1977":{"id":"0:35:1977","crate_id":0,"name":"notify_one","span":{"filename":"src/condvar.rs","begin":[128,4],"end":[136,5]},"visibility":"public","docs":"Wakes up one blocked thread on this condvar.\n\nReturns whether a thread was woken up.\n\nIf there is a blocked thread on this condition variable, then it will\nbe woken up from its call to `wait` or `wait_timeout`. Calls to\n`notify_one` are not buffered in any way.\n\nTo wake up all threads, see `notify_all()`.\n\n# Examples\n\n```\nuse parking_lot::Condvar;\n\nlet condvar = Condvar::new();\n\n// do something with condvar, share it with other threads\n\nif !condvar.notify_one() {\n    println!(\"Nobody was listening for this.\");\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[141,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:210:126","0:211:155","0:212:2476","0:213:2477"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:422-0:103:1772":{"id":"0:422-0:103:1772","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,35],"end":[43,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MappedMutexGuard","name":"MappedMutexGuard","id":"0:103:1772","glob":false}}},"0:365:1778":{"id":"0:365:1778","crate_id":0,"name":"const_reentrant_mutex","span":{"filename":"src/remutex.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.\n\nThis allows creating a reentrant mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:363:1781","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:3061-0:197:1776":{"id":"a:2:2832:3061-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:3061","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:436-0:367:1782":{"id":"0:436-0:367:1782","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutexGuard","name":"ReentrantMutexGuard","id":"0:367:1782","glob":false}}},"2:12456:26283":{"id":"2:12456:26283","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11921:6300","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:1489":{"id":"0:132:1489","crate_id":0,"name":"state","span":{"filename":"src/once.rs","begin":[94,4],"end":[105,5]},"visibility":"public","docs":"Returns the current state of this `Once`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:28388":{"id":"2:12433:28388","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43805:6470","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:32645":{"id":"2:12407:32645","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12422:26250":{"id":"2:12422:26250","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:446:1766":{"id":"b:2:3411-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1599"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:103:1772":{"id":"0:103:1772","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[110,0],"end":[110,79]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:849:1772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:295:2573":{"id":"0:295:2573","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[324,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:2615":{"id":"2:12416:2615","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41591:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433-0:370:1779":{"id":"0:433-0:370:1779","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,27],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::MappedReentrantMutexGuard","name":"MappedReentrantMutexGuard","id":"0:370:1779","glob":false}}},"0:378:1783":{"id":"0:378:1783","crate_id":0,"name":"const_rwlock","span":{"filename":"src/rwlock.rs","begin":[94,0],"end":[96,1]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.\n\nThis allows creating a `RwLock<T>` in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:376:236","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12492:32656":{"id":"2:12492:32656","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12424:32648":{"id":"2:12424:32648","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12072:1502","str::slice_mut_unchecked":"2:12425:32649","crate::ops::Index":"2:3072:3025"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:451":{"id":"0:459:451","crate_id":0,"name":"clone","span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2570-0:31:1765":{"id":"b:2:2570-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:461:2370":{"id":"0:461:2370","crate_id":0,"name":"New","span":{"filename":"src/once.rs","begin":[24,4],"end":[24,7]},"visibility":"default","docs":"A closure has not been executed yet","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:8606:3147-0:446:1766":{"id":"a:2:8606:3147-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8606:3147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2566-0:127:1773":{"id":"b:2:2566-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:3404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56:2063":{"id":"0:56:2063","crate_id":0,"name":"wait_while","span":{"filename":"src/condvar.rs","begin":[425,4],"end":[431,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification. If the provided condition evaluates to `false`, then the\nthread is no longer blocked and the operation is completed. If the\ncondition evaluates to `true`, then the thread is blocked again and\nwaits for another notification before repeating this process.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3040:2058","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:2474":{"id":"0:166:2474","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_fair_mutex.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2584:132":{"id":"2:2584:132","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32016:8370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2265:2651":{"id":"2:2265:2651","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:2569":{"id":"0:290:2569","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[281,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2792:250-0:31:1765":{"id":"a:2:2792:250-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8605:3148-0:261:1777":{"id":"a:2:8605:3148-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8605:3148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:432-0:365:1778":{"id":"0:432-0:365:1778","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,4],"end":[49,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::const_reentrant_mutex","name":"const_reentrant_mutex","id":"0:365:1778","glob":false}}},"2:12486:32654":{"id":"2:12486:32654","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12105:14180","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::rmatch_indices":"2:12489:32655"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43701:6466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:2582":{"id":"0:299:2582","crate_id":0,"name":"try_upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[379,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2581-0:261:1777":{"id":"b:2:2581-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:430-0:261:1777":{"id":"0:430-0:261:1777","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_rwlock::RawRwLock","name":"RawRwLock","id":"0:261:1777","glob":false}}},"b:2:2570-0:357:1780":{"id":"b:2:2570-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:684:3471":{"id":"5:684:3471","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:3061-0:127:1773":{"id":"a:2:2832:3061-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:3061","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:165:2040":{"id":"0:165:2040","crate_id":0,"name":"unlock","span":{"filename":"src/raw_fair_mutex.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2576-0:157:1775":{"id":"b:2:2576-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:272:2474":{"id":"0:272:2474","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_rwlock.rs","begin":[142,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:27432":{"id":"2:12526:27432","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389:1785":{"id":"0:389:1785","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[122,0],"end":[122,92]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockWriteGuard","id":"20:908:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[397,0],"end":[425,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_upgradable"],"trait":{"name":"RawRwLockUpgradeFair","id":"20:471:2584","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:301:2585","0:302:2586"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:273:2551":{"id":"0:273:2551","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[148,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427-0:460:1774":{"id":"0:427-0:460:1774","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,27],"end":[44,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::OnceState","name":"OnceState","id":"0:460:1774","glob":false}}},"2:12489:32655":{"id":"2:12489:32655","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12105:14180","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::match_indices":"2:12486:32654"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43719:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:446:1766":{"id":"a:2:2775:240-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8605:3148-0:460:1774":{"id":"a:2:8605:3148-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8605:3148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:126:2383":{"id":"0:126:2383","crate_id":0,"name":"done","span":{"filename":"src/once.rs","begin":[52,4],"end":[57,5]},"visibility":"public","docs":"Returns whether the associated `Once` has successfully executed a\nclosure.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:715":{"id":"0:479:715","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9505:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9486:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439-0:386:1784":{"id":"0:439-0:386:1784","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,18],"end":[53,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockReadGuard","name":"MappedRwLockReadGuard","id":"0:386:1784","glob":false}}},"b:2:2570-0:157:1775":{"id":"b:2:2570-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12480:2937":{"id":"2:12480:2937","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12105:14180","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::rmatches":"2:12483:32653"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43755:6468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:3302":{"id":"5:5518:3302","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284:2563":{"id":"0:284:2563","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/raw_rwlock.rs","begin":[210,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2562","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:6113":{"id":"2:12430:6113","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43537:4328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:155":{"id":"0:283:155","crate_id":0,"name":"Instant","span":{"filename":"src/raw_rwlock.rs","begin":[207,4],"end":[207,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9146:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:131:998":{"id":"0:131:998","crate_id":0,"name":"new","span":{"filename":"src/once.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a new `Once` value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:261:1777":{"id":"a:2:2775:240-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:265:1761":{"id":"0:265:1761","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_rwlock.rs","begin":[64,4],"end":[64,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:173:2476":{"id":"0:173:2476","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_fair_mutex.rs","begin":[57,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:2475","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[119,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2471","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:207:2473","0:208:2131"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2832:3061-0:460:1774":{"id":"a:2:2832:3061-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:3061","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2570-0:261:1777":{"id":"b:2:2570-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8606:3147-0:460:1774":{"id":"a:2:8606:3147-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8606:3147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8606:3147-0:157:1775":{"id":"a:2:8606:3147-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8606:3147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8606:3147-0:357:1780":{"id":"a:2:8606:3147-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8606:3147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12509:26296":{"id":"2:12509:26296","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:31:1765":{"id":"b:2:3411-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1599"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:34:998":{"id":"0:34:998","crate_id":0,"name":"new","span":{"filename":"src/condvar.rs","begin":[98,4],"end":[102,5]},"visibility":"public","docs":"Creates a new condition variable which is ready to be waited on and\nnotified.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2074":{"id":"0:62:2074","crate_id":0,"name":"wait_while_for","span":{"filename":"src/condvar.rs","begin":[496,4],"end":[507,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration. If the provided condition evaluates to `false`,\nthen the thread is no longer blocked and the operation is completed.\nIf the condition evaluates to `true`, then the thread is blocked again\nand waits for another notification before repeating this process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44325:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3040:2058","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[294,0],"end":[320,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursiveTimed","id":"20:462:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:292:2571","0:293:2572"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:429-0:197:1776":{"id":"0:429-0:197:1776","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[46,0],"end":[46,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_mutex::RawMutex","name":"RawMutex","id":"0:197:1776","glob":false}}},"b:2:2260-0:197:1776":{"id":"b:2:2260-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2649"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:301:2585":{"id":"0:301:2585","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/raw_rwlock.rs","begin":[399,4],"end":[417,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:471:451":{"id":"0:471:451","crate_id":0,"name":"clone","span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:2543":{"id":"0:269:2543","crate_id":0,"name":"lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[107,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2569:3404":{"id":"2:2569:3404","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2543:137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2576-0:357:1780":{"id":"b:2:2576-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:361:2628":{"id":"0:361:2628","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[18,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"2:22802:193","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1773":{"id":"0:127:1773","crate_id":0,"name":"Once","span":{"filename":"src/once.rs","begin":[83,0],"end":[83,26]},"visibility":"public","docs":"A synchronization primitive which can be used to run a one-time\ninitialization. Useful for one-time initialization for globals, FFI or\nrelated functionality.\n\n# Differences from the standard library `Once`\n\n- Only requires 1 byte of space, instead of 1 word.\n- Not required to be `'static`.\n- Relaxed memory barriers in the fast path, which can significantly improve\n  performance on some architectures.\n- Efficient handling of micro-contention using adaptive spinning.\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic START: Once = Once::new();\n\nSTART.call_once(|| {\n    // run initialization here\n});\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:130","a:2:2792:250-0:127:1773","a:2:8605:3148-0:127:1773","a:2:2832:3061-0:127:1773","a:2:2775:240-0:127:1773","a:2:8606:3147-0:127:1773","b:2:2566-0:127:1773","b:2:3411-0:127:1773","b:2:2260-0:127:1773","b:2:2581-0:127:1773","b:2:2570-0:127:1773","b:2:2263-0:127:1773","b:2:2576-0:127:1773","0:152","0:150"]}}},"b:2:2263-0:197:1776":{"id":"b:2:2263-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:2651"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:197:1776":{"id":"0:197:1776","crate_id":0,"name":"RawMutex","span":{"filename":"src/raw_mutex.rs","begin":[32,0],"end":[56,1]},"visibility":"public","docs":"Raw mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2792:250-0:197:1776","a:2:8605:3148-0:197:1776","a:2:2832:3061-0:197:1776","a:2:2775:240-0:197:1776","a:2:8606:3147-0:197:1776","b:2:2566-0:197:1776","b:2:3411-0:197:1776","b:2:2260-0:197:1776","b:2:2581-0:197:1776","b:2:2570-0:197:1776","b:2:2263-0:197:1776","b:2:2576-0:197:1776","0:206","0:209","0:199"]}}},"b:2:2263-0:31:1765":{"id":"b:2:2263-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:2651"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[427,0],"end":[450,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeDowngrade","id":"20:474:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:304:2589","0:305:2590"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:715":{"id":"0:68:715","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[518,4],"end":[520,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9505:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9486:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:157:1775":{"id":"a:2:2775:240-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:426-0:127:1773":{"id":"0:426-0:127:1773","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,21],"end":[44,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::Once","name":"Once","id":"0:127:1773","glob":false}}},"2:12434:32650":{"id":"2:12434:32650","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43815:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:33329":{"id":"5:5532:33329","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:2441":{"id":"0:136:2441","crate_id":0,"name":"call_once_force","span":{"filename":"src/once.rs","begin":[179,4],"end":[191,5]},"visibility":"public","docs":"Performs the same function as `call_once` except ignores poisoning.\n\nIf this `Once` has been poisoned (some initialization panicked) then\nthis function will continue to attempt to call initialization functions\nuntil one of them doesn't panic.\n\nThe closure `f` is yielded a structure which can be used to query the\nstate of this `Once` (whether initialization has previously panicked or\nnot).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3043:2430","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:458":{"id":"0:458","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:459:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[325,0],"end":[331,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9530:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2832:3061-0:261:1777":{"id":"a:2:2832:3061-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:3061","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:200:2279":{"id":"0:200:2279","crate_id":0,"name":"INIT","span":{"filename":"src/raw_mutex.rs","begin":[59,4],"end":[61,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:169:2131":{"id":"0:169:2131","crate_id":0,"name":"bump","span":{"filename":"src/raw_fair_mutex.rs","begin":[47,4],"end":[49,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2263-0:446:1766":{"id":"b:2:2263-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:2651"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8605:3148-0:31:1765":{"id":"a:2:8605:3148-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8605:3148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3411-0:460:1774":{"id":"b:2:3411-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1599"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:292:2571":{"id":"0:292:2571","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/raw_rwlock.rs","begin":[296,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2562","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2069":{"id":"0:59:2069","crate_id":0,"name":"wait_while_until","span":{"filename":"src/condvar.rs","begin":[461,4],"end":[472,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant. If the provided condition evaluates to\n`false`, then the thread is no longer blocked and the operation is\ncompleted. If the condition evaluates to `true`, then the thread is\nblocked again and waits for another notification before repeating\nthis process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9146:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3040:2058","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:357:1780":{"id":"b:2:3411-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1599"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:357:1780":{"id":"0:357:1780","crate_id":0,"name":"RawThreadId","span":{"filename":"src/remutex.rs","begin":[13,0],"end":[13,23]},"visibility":"public","docs":"Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:2792:250-0:357:1780","a:2:8605:3148-0:357:1780","a:2:2832:3061-0:357:1780","a:2:2775:240-0:357:1780","a:2:8606:3147-0:357:1780","b:2:2566-0:357:1780","b:2:3411-0:357:1780","b:2:2260-0:357:1780","b:2:2581-0:357:1780","b:2:2570-0:357:1780","b:2:2263-0:357:1780","b:2:2576-0:357:1780","0:359"]}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12445:3450":{"id":"2:12445:3450","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41591:194","prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416-0:85:1767":{"id":"0:416-0:85:1767","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,27],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::const_fair_mutex","name":"const_fair_mutex","id":"0:85:1767","glob":false}}},"b:2:2260-0:460:1774":{"id":"b:2:2260-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2649"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12468:26287":{"id":"2:12468:26287","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180","str::rsplitn":"2:12471:26289"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43655:6305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:450:715":{"id":"0:450:715","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9505:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9486:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12496:32658":{"id":"2:12496:32658","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:2301":{"id":"0:164:2301","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:26281":{"id":"2:12453:26281","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12105:14180","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::split_whitespace":"2:12431:30714","str::rsplit":"2:12459:26285"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43551:6298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12431:30714":{"id":"2:12431:30714","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12432:30725"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43825:6472","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12521:32666":{"id":"2:12521:32666","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12066:131","`FromStr`":"2:12065:3111"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41734:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12065:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12065:3111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2792:250-0:197:1776":{"id":"a:2:2792:250-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:268:2540":{"id":"0:268:2540","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:1761":{"id":"0:201:1761","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_mutex.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12412:25920":{"id":"2:12412:25920","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11665:14181"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12403":{"id":"2:12403","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12404:868","2:12405:2182","2:12406:32644","2:12407:32645","2:12409:32646","2:12412:25920","2:12413:32647","2:12414:339","2:12415:338","2:12416:2615","2:12418:2310","2:12420:26249","2:12422:26250","2:12424:32648","2:12425:32649","2:12426:26273","2:12427:26274","2:12428:6321","2:12429:6482","2:12430:6113","2:12431:30714","2:12432:30725","2:12433:28388","2:12434:32650","2:12435:30707","2:12436:26293","2:12439:26294","2:12442:26295","2:12445:3450","2:12449:3410","2:12453:26281","2:12456:26283","2:12459:26285","2:12462:32651","2:12465:32652","2:12468:26287","2:12471:26289","2:12474:26291","2:12477:26292","2:12480:2937","2:12483:32653","2:12486:32654","2:12489:32655","2:12492:32656","2:12494:32657","2:12496:32658","2:12498:32659","2:12499:32660","2:12500:32661","2:12503:32662","2:12506:25126","2:12509:26296","2:12512:32663","2:12515:32664","2:12518:32665","2:12521:32666","2:12523:27428","2:12524:27429","2:12525:27431","2:12526:27432","2:12527:27433","2:12528:32667","2:12530:8811","2:12531:32668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[85,0],"end":[316,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:998","0:132:1489","0:133:419","0:136:2441"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2570-0:460:1774":{"id":"b:2:2570-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39:1999":{"id":"0:39:1999","crate_id":0,"name":"notify_all","span":{"filename":"src/condvar.rs","begin":[187,4],"end":[195,5]},"visibility":"public","docs":"Wakes up all blocked threads on this condvar.\n\nReturns the number of threads woken up.\n\nThis method will ensure that any current waiters on the condition\nvariable are awoken. Calls to `notify_all()` are not buffered in any\nway.\n\nTo wake up only one thread, see `notify_one()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309:2595":{"id":"0:309:2595","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/raw_rwlock.rs","begin":[480,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9146:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2832:3061-0:157:1775":{"id":"a:2:2832:3061-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:3061","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:440-0:389:1785":{"id":"0:440-0:389:1785","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,41],"end":[53,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockWriteGuard","name":"MappedRwLockWriteGuard","id":"0:389:1785","glob":false}}},"2:12439:26294":{"id":"2:12439:26294","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2263-0:357:1780":{"id":"b:2:2263-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:2651"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[94,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:34:998","0:35:1977","0:39:1999","0:43:2015","0:45:2033","0:51:2052","0:56:2063","0:59:2069","0:62:2074"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:434-0:357:1780":{"id":"0:434-0:357:1780","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,54],"end":[49,65]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::RawThreadId","name":"RawThreadId","id":"0:357:1780","glob":false}}},"0:125:2380":{"id":"0:125:2380","crate_id":0,"name":"poisoned","span":{"filename":"src/once.rs","begin":[42,4],"end":[47,5]},"visibility":"public","docs":"Returns whether the associated `Once` has been poisoned.\n\nOnce an initialization routine for a `Once` has panicked it will forever\nindicate to future forced initialization routines that it is poisoned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2260-0:446:1766":{"id":"b:2:2260-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2649"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3411-0:157:1775":{"id":"b:2:3411-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1599"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:304:2589":{"id":"0:304:2589","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[429,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:413-0:31:1765":{"id":"0:413-0:31:1765","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,24],"end":[41,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::Condvar","name":"Condvar","id":"0:31:1765","glob":false}}},"2:12425:32649":{"id":"2:12425:32649","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12072:1502","crate::ops::IndexMut":"2:3076:3026","str::slice_unchecked":"2:12424:32648"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2576-0:261:1777":{"id":"b:2:2576-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:446:1766":{"id":"0:446:1766","crate_id":0,"name":"WaitTimeoutResult","span":{"filename":"src/condvar.rs","begin":[23,0],"end":[23,35]},"visibility":"public","docs":"A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:2792:250-0:446:1766","a:2:8605:3148-0:446:1766","a:2:2832:3061-0:446:1766","a:2:2775:240-0:446:1766","a:2:8606:3147-0:446:1766","b:2:2566-0:446:1766","b:2:3411-0:446:1766","b:2:2260-0:446:1766","b:2:2581-0:446:1766","b:2:2570-0:446:1766","b:2:2263-0:446:1766","b:2:2576-0:446:1766","b:5:680-0:446:1766","0:458","0:457","0:451","0:455","0:449","0:452","0:454"]}}},"b:2:2576-0:446:1766":{"id":"b:2:2576-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2775:240-0:460:1774":{"id":"a:2:2775:240-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:160":{"id":"0:160","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[14,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:161:2279","0:162:1761","0:163:2047","0:164:2301","0:165:2040","0:166:2474"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2576-0:197:1776":{"id":"b:2:2576-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:1771":{"id":"0:98:1771","crate_id":0,"name":"const_mutex","span":{"filename":"src/mutex.rs","begin":[92,0],"end":[94,1]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:96:178","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:2279":{"id":"0:360:2279","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[16,4],"end":[16,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"RawThreadId"}}},"5:5535:27603":{"id":"5:5535:27603","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12526:27432"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:2554":{"id":"0:276:2554","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/raw_rwlock.rs","begin":[162,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:2040":{"id":"0:204:2040","crate_id":0,"name":"unlock","span":{"filename":"src/raw_mutex.rs","begin":[100,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:339":{"id":"2:12414:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12415:338","`u8`":"1:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:275:2553":{"id":"0:275:2553","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/raw_rwlock.rs","begin":[156,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:2555":{"id":"0:277:2555","crate_id":0,"name":"bump_shared","span":{"filename":"src/raw_rwlock.rs","begin":[175,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[40,0],"end":[50,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2471","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:2473","0:169:2131"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:305:2590":{"id":"0:305:2590","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[439,4],"end":[449,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:2535":{"id":"0:266:2535","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[67,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12512:32663":{"id":"2:12512:32663","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:414-0:446:1766":{"id":"0:414-0:446:1766","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,33],"end":[41,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::WaitTimeoutResult","name":"WaitTimeoutResult","id":"0:446:1766","glob":false}}},"2:2262:2649":{"id":"2:2262:2649","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:467:2376":{"id":"0:467:2376","crate_id":0,"name":"Done","span":{"filename":"src/once.rs","begin":[33,4],"end":[33,8]},"visibility":"default","docs":"A closure has completed successfully.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[25,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:1915"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:87:1769":{"id":"0:87:1769","crate_id":0,"name":"FairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[92,0],"end":[92,75]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:841:179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:460:1774":{"id":"0:460:1774","crate_id":0,"name":"OnceState","span":{"filename":"src/once.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"Current state of a `Once`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:461:2370","0:463:2372","0:465:2374","0:467:2376"],"impls":["0:124","a:2:2792:250-0:460:1774","a:2:8605:3148-0:460:1774","a:2:2832:3061-0:460:1774","a:2:2775:240-0:460:1774","a:2:8606:3147-0:460:1774","b:2:2566-0:460:1774","b:2:3411-0:460:1774","b:2:2260-0:460:1774","b:2:2581-0:460:1774","b:2:2570-0:460:1774","b:2:2263-0:460:1774","b:2:2576-0:460:1774","b:5:680-0:460:1774","0:472","0:469","0:470","0:473","0:478","0:475","0:476"]}}},"0:133:419":{"id":"0:133:419","crate_id":0,"name":"call_once","span":{"filename":"src/once.rs","begin":[157,4],"end":[167,5]},"visibility":"public","docs":"Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.\n\nThis method will block the calling thread if another initialization\nroutine is currently running.\n\nWhen this function returns, it is guaranteed that some initialization\nhas run and completed (it may not be the closure specified). It is also\nguaranteed that any memory writes performed by the executed closure can\nbe reliably observed by other threads at this point (there is a\nhappens-before relation between the closure and code executing after the\nreturn).\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\n// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g. write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\nfn get_cached_val() -> usize {\n    unsafe {\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\nfn expensive_computation() -> usize {\n    // ...\n# 2\n}\n```\n\n# Panics\n\nThe closure `f` will only be executed once if this is called\nconcurrently amongst many threads. If that closure panics, however, then\nit will *poison* this `Once` instance, causing all future invocations of\n`call_once` to also panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3043:2430","args":{"parenthesized":{"inputs":[],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3413:1599":{"id":"2:3413:1599","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39358:6366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9530:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2581-0:157:1775":{"id":"b:2:2581-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:2476":{"id":"0:212:2476","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_mutex.rs","begin":[146,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9146:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:60":{"id":"0:151:60","crate_id":0,"name":"default","span":{"filename":"src/once.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:2301":{"id":"0:203:2301","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_mutex.rs","begin":[78,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:476":{"id":"0:476","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:477:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:386:1784":{"id":"0:386:1784","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[113,0],"end":[113,90]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockReadGuard","id":"20:901:1784","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12427:26274":{"id":"2:12427:26274","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12426:26273"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2792:250-0:357:1780":{"id":"a:2:2792:250-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:43:2015":{"id":"0:43:2015","crate_id":0,"name":"wait","span":{"filename":"src/condvar.rs","begin":[255,4],"end":[257,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:2560":{"id":"0:280:2560","crate_id":0,"name":"downgrade","span":{"filename":"src/raw_rwlock.rs","begin":[193,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:418-0:87:1769":{"id":"0:418-0:87:1769","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,56],"end":[42,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutexGuard","name":"FairMutexGuard","id":"0:87:1769","glob":false}}},"2:12436:26293":{"id":"2:12436:26293","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2570-0:127:1773":{"id":"b:2:2570-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:446:1766":{"id":"b:5:680-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3469","5:683:3470","5:684:3471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2585:1584":{"id":"2:2585:1584","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41734:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:155":{"id":"0:172:155","crate_id":0,"name":"Instant","span":{"filename":"src/raw_fair_mutex.rs","begin":[54,4],"end":[54,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"b:2:2581-0:127:1773":{"id":"b:2:2581-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:278:2557":{"id":"0:278:2557","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[184,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[154,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_exclusive","bump_shared"],"trait":{"name":"RawRwLockFair","id":"20:445:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:275:2553","0:276:2554","0:277:2555","0:278:2557"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12426:26273":{"id":"2:12426:26273","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12427:26274"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,31],"end":[22,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:463:2372":{"id":"0:463:2372","crate_id":0,"name":"Poisoned","span":{"filename":"src/once.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":"A closure was executed but panicked.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12459:26285":{"id":"2:12459:26285","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12105:14180","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::split":"2:12453:26281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43569:6303","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:32660":{"id":"2:12499:32660","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12503:32662":{"id":"2:12503:32662","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:14180"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:435-0:363:1781":{"id":"0:435-0:363:1781","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,67],"end":[49,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutex","name":"ReentrantMutex","id":"0:363:1781","glob":false}}},"5:5521:33327":{"id":"5:5521:33327","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2581-0:197:1776":{"id":"b:2:2581-0:197:1776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:287:2566":{"id":"0:287:2566","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/raw_rwlock.rs","begin":[253,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9146:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:32668":{"id":"2:12531:32668","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4570:32668"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43868:6375","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9530:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:479:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5536:27604":{"id":"5:5536:27604","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12527:27433"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419-0:90:1770":{"id":"0:419-0:90:1770","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,72],"end":[42,92]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::MappedFairMutexGuard","name":"MappedFairMutexGuard","id":"0:90:1770","glob":false}}},"b:2:2566-0:357:1780":{"id":"b:2:2566-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:3404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8605:3148-0:157:1775":{"id":"a:2:8605:3148-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8605:3148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2792:250-0:261:1777":{"id":"a:2:2792:250-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:1787":{"id":"0:0:1787","crate_id":0,"name":"parking_lot","span":{"filename":"src/lib.rs","begin":[8,0],"end":[56,19]},"visibility":"public","docs":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n`Once` that are smaller, faster and more flexible than those in the Rust\nstandard library. It also provides a `ReentrantMutex` type.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:413-0:31:1765","0:414-0:446:1766","0:416-0:85:1767","0:417-0:83:1768","0:418-0:87:1769","0:419-0:90:1770","0:421-0:98:1771","0:422-0:103:1772","0:423-0:96:178","0:424-0:100:179","0:426-0:127:1773","0:427-0:460:1774","0:428-0:157:1775","0:429-0:197:1776","0:430-0:261:1777","0:432-0:365:1778","0:433-0:370:1779","0:434-0:357:1780","0:435-0:363:1781","0:436-0:367:1782","0:438-0:378:1783","0:439-0:386:1784","0:440-0:389:1785","0:441-0:376:236","0:442-0:380:237","0:443-0:392:1786","0:444-0:383:238","0:445-20:0:1762"],"is_stripped":false}}},"5:5517:33326":{"id":"5:5517:33326","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3064","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:6087","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:3064","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:6087","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[270,0],"end":[292,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursive","id":"20:459:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:2568","0:290:2569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:100:179":{"id":"0:100:179","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[101,0],"end":[101,67]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:841:179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12524:27429":{"id":"2:12524:27429","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39545:27439","Self::is_ascii":"2:12523:27428"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39545:27439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:428-0:157:1775":{"id":"0:428-0:157:1775","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_fair_mutex::RawFairMutex","name":"RawFairMutex","id":"0:157:1775","glob":false}}},"a:2:2775:240-0:31:1765":{"id":"a:2:2775:240-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:293:2572":{"id":"0:293:2572","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/raw_rwlock.rs","begin":[309,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2562","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12462:32651":{"id":"2:12462:32651","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12105:14180","str::split":"2:12453:26281","prim@char":"1:12066:447","`DoubleEndedIterator`":"2:7517:125","str::rsplit_terminator":"2:12465:32652"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43601:6464","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,9],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12498:32659":{"id":"2:12498:32659","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12471:26289":{"id":"2:12471:26289","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12066:447","str::splitn":"2:12468:26287","self::pattern":"2:12105:14180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43673:6306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:60":{"id":"0:66:60","crate_id":0,"name":"default","span":{"filename":"src/condvar.rs","begin":[512,4],"end":[514,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2581-0:357:1780":{"id":"b:2:2581-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2832:3061-0:31:1765":{"id":"a:2:2832:3061-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:3061","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8606:3147-0:261:1777":{"id":"a:2:8606:3147-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8606:3147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8606:3147-0:31:1765":{"id":"a:2:8606:3147-0:31:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8606:3147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:421-0:98:1771":{"id":"0:421-0:98:1771","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::const_mutex","name":"const_mutex","id":"0:98:1771","glob":false}}},"b:2:2566-0:460:1774":{"id":"b:2:2566-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:3404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:213:2477":{"id":"0:213:2477","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_mutex.rs","begin":[163,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44325:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2263-0:127:1773":{"id":"b:2:2263-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:2651"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2566-0:157:1775":{"id":"b:2:2566-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:3404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199":{"id":"0:199","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[58,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:200:2279","0:201:1761","0:202:2047","0:203:2301","0:204:2040","0:205:2474"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2263-0:261:1777":{"id":"b:2:2263-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:2651"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:264:2279":{"id":"0:264:2279","crate_id":0,"name":"INIT","span":{"filename":"src/raw_rwlock.rs","begin":[60,4],"end":[62,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"2:12415:338":{"id":"2:12415:338","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[322,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgrade","id":"20:465:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:2573","0:296:2576","0:297:2578","0:298:2580","0:299:2582"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12418:2310":{"id":"2:12418:2310","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41591:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2473":{"id":"0:207:2473","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_mutex.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:296:2576":{"id":"0:296:2576","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[333,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:261:1777":{"id":"b:2:3411-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1599"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8605:3148-0:127:1773":{"id":"a:2:8605:3148-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8605:3148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:423-0:96:178":{"id":"0:423-0:96:178","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,53],"end":[43,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::Mutex","name":"Mutex","id":"0:96:178","glob":false}}},"b:2:2566-0:261:1777":{"id":"b:2:2566-0:261:1777","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:3404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:270:2546":{"id":"0:270:2546","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[116,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:236":{"id":"0:376:236","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[89,0],"end":[89,52]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThis lock uses a task-fair locking policy which avoids both reader and\nwriter starvation. This means that readers trying to acquire the lock will\nblock even if the lock is unlocked when there are writers waiting to acquire\nthe lock. Because of this, attempts to recursively acquire a read lock\nwithin a single thread may result in a deadlock.\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same lock in succession, which can starve\nother threads waiting to acquire the rwlock. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na rwlock it has just released, this can starve other threads.\n\nThis rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the rwlock.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`\nor `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply\ndropping the guard.\n\n# Differences from the standard library `RwLock`\n\n- Supports atomically downgrading a write lock into a read lock.\n- Task-fair locking policy instead of an unspecified platform default.\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `RwLock` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the rwlock is fair on average.\n- Optionally allows making the rwlock fair by calling\n  `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read();\n    let r2 = lock.read();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLock","id":"20:482:236","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12477:26292":{"id":"2:12477:26292","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2260-0:127:1773":{"id":"b:2:2260-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2649"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:380:237":{"id":"0:380:237","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[100,0],"end":[100,78]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockReadGuard","id":"20:873:237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[452,0],"end":[504,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeTimed","id":"20:477:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:307:2593","0:308:2594","0:309:2595","0:310:2596"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:460:1774":{"id":"b:5:680-0:460:1774","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3469","5:683:3470","5:684:3471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:682:3469":{"id":"5:682:3469","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:171:126":{"id":"0:171:126","crate_id":0,"name":"Duration","span":{"filename":"src/raw_fair_mutex.rs","begin":[53,4],"end":[53,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2475","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:285:2564":{"id":"0:285:2564","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/raw_rwlock.rs","begin":[223,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2562","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:155":{"id":"0:211:155","crate_id":0,"name":"Instant","span":{"filename":"src/raw_mutex.rs","begin":[143,4],"end":[143,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9146:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[205,0],"end":[268,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockTimed","id":"20:452:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:126","0:283:155","0:284:2563","0:285:2564","0:286:2565","0:287:2566"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2775:240-0:357:1780":{"id":"a:2:2775:240-0:357:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12483:32653":{"id":"2:12483:32653","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12105:14180","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::matches":"2:12480:2937"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43773:6469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:6293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:14178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12494:32657":{"id":"2:12494:32657","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2263-0:157:1775":{"id":"b:2:2263-0:157:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:2651"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12435:30707":{"id":"2:12435:30707","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43843:6320","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2566-0:446:1766":{"id":"b:2:2566-0:446:1766","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:3404"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3411-0:127:1773":{"id":"b:2:3411-0:127:1773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1599"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:153:715":{"id":"0:153:715","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[326,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9505:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9486:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:2578":{"id":"0:297:2578","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[346,4],"end":[364,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:27428":{"id":"2:12523:27428","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12528:32667":{"id":"2:12528:32667","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4572:32667"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43850:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:8765:21020":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"25:5980:8050":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:3401:6407":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12724:4883":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:588:7402":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13055:4950":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:44350:3044":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:22934:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"20:873:237":{"crate_id":20,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"2:44290:8471":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:4800:416":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"25:7542:8297":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:9505:136":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8879:6785":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:5782:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:43509:6461":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"11:829:8828":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"11:2351:3415":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:21390:9026":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:7249:4067":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:5808:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:14499:5374":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:13739:5161":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"25:5903:8001":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:41568:6290":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13723:5158":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12208:4776":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"25:4377:7617":{"crate_id":25,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:22272:6341":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11872:4709":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:7920:134":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:43815:6471":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4611:7714":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:11205:25500":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:6973:31755":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"25:4932:7845":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"14:187:20041":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:11651:6311":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:10397:4527":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:8134:5891":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:5743:5517":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"20:255:1781":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"17:13202:4977":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:21139:3481":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:654:14979":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"25:4344:7593":{"crate_id":25,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:43101:8465":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5727:5515":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"25:4538:7694":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:2461:7193":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:926:5993":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:44003:6484":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:5963:5542":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"25:4486:7667":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:47998:6614":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:45897:6521":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"23:344:25011":{"crate_id":23,"path":["smallvec","ToSmallVec"],"kind":"trait"},"6:119:14623":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:1641:3741":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:5474:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4641:5483":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:46914:6563":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:1288:6000":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:3234:6644":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12280:4803":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12111:4760":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"11:483:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:7436:5553":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10507:4547":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:9010:6788":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:5982:5549":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:12089:1664":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:9505:133":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"25:541:7378":{"crate_id":25,"path":["libc","unix","iovec"],"kind":"struct"},"17:12983:4939":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"25:5849:7974":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:13611:5140":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:4585:5481":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:1585:6011":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6456:5637":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:22:728":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:45759:6515":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"20:450:2559":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"1:10776:6811":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:30262:3495":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:2903:3014":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6043:8075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:22310:31018":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:4032:6252":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11201:4634":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"20:856:1782":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:42846:6430":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6151:8100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:42591:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:11511:6653":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:11088:4203":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:47873:6605":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"25:4609:7714":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:8713:21019":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"20:465:2517":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"17:9172:4324":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5790:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:9136:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:4770:8960":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:0:310":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:47412:6596":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:7555:4337":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10278:4518":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:1817:6633":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"20:27:2471":{"crate_id":20,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"5:676:253":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11215:4639":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"25:1499:7413":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:43843:6320":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:1557:3849":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:41793:3415":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:7284:3144":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:1691:7534":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9102:4322":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:2165:4535":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:4393:4121":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:8490:6437":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4759:7754":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:9085:25507":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:1781:6632":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:41406:8384":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:4745:5485":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:10214:4514":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:10982:6066":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:30356:31017":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:4385:7619":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:7587:4136":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:14335:5332":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:9201:3292":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:12130:14177":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:2913:3016":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:4234:3849":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:2012:4341":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:10185:8903":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:12701:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10698:4571":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:3288:3036":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:41343:6285":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:1562:6008":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"25:4952:7856":{"crate_id":25,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11971:4738":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:7463:6114":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"23:350:8318":{"crate_id":23,"path":["smallvec","ConstNonNull"],"kind":"struct"},"1:7885:6699":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6051:8077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2498:14240":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:2366:204":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:10520:4548":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"10:44:6017":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:7090:5737":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10726:4574":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:1507:7416":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7782:5833":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:46644:6558":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"25:4331:7583":{"crate_id":25,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:1482:6006":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13792:5173":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11351:4655":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:2504:5423":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:755:4321":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12184:4774":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:3830:5471":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2881:5439":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:7544:8297":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"25:6638:8165":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:7555:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:3248:139":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8269:6754":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:7512:6116":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5056:7906":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:8887:3849":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"25:1574:7454":{"crate_id":25,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4621:7715":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:7269:33771":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:1718:7545":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:2467:8367":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"11:1036:6001":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12373:4809":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4913:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:7907:6702":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4960:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:2382:8892":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12079:791":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:12810:4895":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:4164:4121":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"20:865:1779":{"crate_id":20,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"1:8572:6661":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:1922:3501":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:12943:146":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:4210:2515":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:4208:8970":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:87:4269":{"crate_id":20,"path":["lock_api","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:20951:31954":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:5816:5526":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:5420:4121":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:2368:8888":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:2918:3018":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"25:5806:7959":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:47522:6597":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:10795:8476":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:8973:9021":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"9:507:6069":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4400:7626":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5994:8057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:400:4333":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:1924:8868":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"18:766:24994":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12846:4901":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:40124:31741":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"22:230:1907":{"crate_id":22,"path":["parking_lot_core","parking_lot","RequeueOp"],"kind":"enum"},"20:471:2584":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"17:10588:4553":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:11316:4652":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:652:4273":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:7953:6704":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"25:4813:7782":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12024:4745":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4721:7740":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4823:7785":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:20934:31957":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:41674:3144":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4488:7667":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:40074:14236":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:2321:5409":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:427:33749":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:507:4273":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:5781:3053":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13422:4997":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:7571:4132":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:8686:21018":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"25:5788:7946":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:1604:7473":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:122:4089":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13174:4973":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"0:0:1787":{"crate_id":0,"path":["parking_lot"],"kind":"module"},"1:5596:8086":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:12484:4849":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4978:7868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:2428:5420":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:43449:6456":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13890:5196":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"25:4383:7619":{"crate_id":25,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:13897:5198":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:3330:4132":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:11665:14181":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:1579:6010":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"25:6661:8183":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:42581:8385":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:22802:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:7434:31741":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:5508:4121":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:45820:6517":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6753:5689":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:8588:6780":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:207:4097":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"25:4681:7720":{"crate_id":25,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11162:4632":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11023:4618":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7613:5827":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:2970:33611":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:1138:33629":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:8659:21005":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:6385:178":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:4435:2988":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:8115:5888":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6332:5441":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"25:595:7407":{"crate_id":25,"path":["libc","unix","protoent"],"kind":"struct"},"25:5933:8024":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:12778:4891":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:1869:6010":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:1184:4340":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4501:7673":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:7406:25270":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:1697:7537":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6017:20961":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:1573:6009":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:8183:6744":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11261:4645":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:7523:5822":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13286:4988":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:39297:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:4056:8948":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:5156:206":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4296:7556":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:5403:4456":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:46410:6540":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:43655:6305":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7041:5729":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4805:7779":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:3065:4360":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:2141:6090":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:6981:4146":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"11:298:8450":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11951:4728":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:7513:5821":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:7403:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3076:3026":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:40338:6261":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"25:1708:7541":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2360:197":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"11:324:8453":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:1471:2184":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:13693:5152":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:2854:3005":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:364:3290":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12196:4775":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:4655:7718":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:2924:3019":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:12071:1470":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:10009:6417":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:3201:28211":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:39193:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:14083:5247":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"25:4966:7862":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11111:4628":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"25:4732:7744":{"crate_id":25,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"9:330:8374":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"20:849:1772":{"crate_id":20,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"25:1519:7421":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:41944:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:46387:6539":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:40415:2617":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:895:3849":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"25:6184:8125":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11535:4672":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:2406:5419":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"11:1862:6009":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:43850:6376":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:3523:25169":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:32063:6359":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:2670:5430":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:46258:6536":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:8195:5897":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:7768:5448":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:32070:3087":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:13040:4946":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11910:4724":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:10511:4199":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:9003:21028":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:42646:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:1671:1151":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4829:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:2209:4348":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:21388:8903":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"25:5862:7983":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:4497:5478":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:5935:8024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:736:24993":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:14056:5240":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:10850:123":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:1986:199":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:43278:6444":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4373:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:40306:6257":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:782:4102":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:41905:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12293:4804":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:44278:8468":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:5049:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"20:563:4269":{"crate_id":20,"path":["lock_api","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:14076:5246":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12123:4761":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:5858:4067":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:0:2839":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:40817:4158":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:5384:20958":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13071:4951":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:22670:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:1912:15970":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"25:4836:7789":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"25:4416:7638":{"crate_id":25,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10685:4569":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:45657:6511":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12911:4931":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6901:5451":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:7938:14274":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:14324:5327":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13989:5218":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11173:21152":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:62:14569":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:20893:3372":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2223:8885":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"25:6007:8059":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:21847:31767":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"25:562:7389":{"crate_id":25,"path":["libc","unix","linger"],"kind":"struct"},"1:11342:6681":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:1548:4121":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"25:4920:7836":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2840:3382":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"14:40:4725":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"25:4619:7715":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:12723:32010":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:2461:8366":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:3441:4351":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:5905:5536":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:6638:1782":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"18:582:3372":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13973:5216":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:1496:7411":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:863:3415":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11381:4660":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:2849:3008":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:11647:6689":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:44163:6496":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:13085:4953":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13188:4974":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:14355:5335":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:504:4336":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:5878:7994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:7890:6700":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12621:4870":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"22:83:2046":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","acquire_resource"],"kind":"function"},"1:10818:6817":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:43673:6306":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13981:5217":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:13010:4941":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:12225:4784":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:2959:3469":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:35:4095":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"25:4466:7658":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:5774:2811":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6425:5635":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"25:4553:7701":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43086:6443":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"25:547:7381":{"crate_id":25,"path":["libc","unix","pollfd"],"kind":"struct"},"1:12091:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:41707:3145":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:5079:6666":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"25:6733:8195":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:7975:31942":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:46212:6534":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"11:2473:8368":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:8926:21025":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:45689:6512":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"18:521:24995":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10661:4565":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"25:4827:7786":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"25:1672:7527":{"crate_id":25,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:20906:31764":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:13949:5207":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:4992:3136":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:2359:5417":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6401:5443":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:44078:6323":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:3276:6647":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:42609:113":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:505:2122":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6002:8058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:1525:20029":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:8181:5462":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6703:8185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:46090:6530":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:30860:3372":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:9823:21039":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:6909:14277":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"25:1732:7550":{"crate_id":25,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"25:6757:8206":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:46490:6541":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:11661:4679":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10265:4517":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"25:4527:7689":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:7442:14275":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4753:7752":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:2934:3021":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:4597:8990":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"25:6028:8071":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:43459:6457":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:2170:3481":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:2891:3012":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:20936:31955":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"25:4751:7752":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:3514:3385":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:44481:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:3581:3849":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"14:202:14194":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:49866:9041":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"18:113:24985":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:7479:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"22:84:2504":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","release_resource"],"kind":"function"},"18:531:4277":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:3669:4099":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:0:2831":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:39209:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:2214:133":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6968:20966":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:39131:3035":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"25:6724:8192":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:11153:6309":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:1842:6634":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:22637:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:10468:6782":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:527:7369":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:12067:1624":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"25:1637:7502":{"crate_id":25,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"15:327:8517":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:1273:6001":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:21410:6331":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"25:7565:8303":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:10193:6802":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"25:4398:7626":{"crate_id":25,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:40060:6378":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:4282:3078":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:7488:3063":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9852:21040":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:7660:5829":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:45611:6509":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:1561:3415":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:44140:6488":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2534:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:3800:4132":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"14:31:5982":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:10840:134":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:563:7389":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:4167:3096":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5088:5496":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:9051:21006":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:7517:125":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:14448:5363":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:30832:198":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:8263:6752":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:4053:5474":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:555:7384":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:0:528":{"crate_id":2,"path":["core"],"kind":"module"},"2:22703:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13876:5193":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:4287:3079":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:2783:3094":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"25:1716:7545":{"crate_id":25,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:12048:25512":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7792:20970":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:4157:29951":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:47600:6598":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"9:177:8530":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13758:5162":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:7024:14270":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12496:4851":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5588:5445":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:6277:4188":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:40827:6279":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4433:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:44051:6486":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11473:4424":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:9754:151":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:7475:138":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:11375:6685":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4529:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:43430:6454":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:2582:4164":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:48060:6616":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12997:4940":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"25:6881:8273":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:14001:5224":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:7162:29948":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"25:1662:7521":{"crate_id":25,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:43537:4328":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:22128:6333":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"25:1589:7466":{"crate_id":25,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:4772:8961":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:3274:6646":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10456:4538":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:6352:5627":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:6580:8132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13024:4944":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"25:4976:7868":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2644:6641":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:1855:4132":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"25:1594:7468":{"crate_id":25,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:41360:6287":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:3037:2152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:2810:5436":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:45879:6520":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:43569:6303":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"25:6000:8058":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:41726:208":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:822:4105":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:5653:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:256:4330":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"25:4423:7642":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11407:21029":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:43404:6386":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:11654:6689":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:41866:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2257:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:533:7372":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:907:4132":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:9137:4323":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:7474:5810":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"25:4803:7779":{"crate_id":25,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:4:1075":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12711:4882":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:6261:5619":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:9028:25124":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"25:6739:8196":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:22264:6340":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12598:4866":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12513:4854":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13685:5151":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"25:7518:8293":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:7554:5457":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:8206:8902":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:8167:5895":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:30298:31020":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"22:298:2362":{"crate_id":22,"path":["parking_lot_core","spinwait","SpinWait"],"kind":"struct"},"2:2669:6120":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"25:4431:7644":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:2969:20100":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"20:482:236":{"crate_id":20,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"17:12422:4834":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:641:6625":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:7128:6797":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:4067:14154":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13487:5048":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:1674:7527":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:40593:6273":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43601:6464":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:5892:7995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6243:5609":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7884:20971":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8323:8971":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:10376:26085":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"25:4882:1061":{"crate_id":25,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:9564:4468":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:7011:26068":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6600:20964":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10628:4559":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"25:1689:7534":{"crate_id":25,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:7293:8282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:4613:5482":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:4070:8950":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:4719:5484":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:7743:8816":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:6824:4142":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"25:5054:7906":{"crate_id":25,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:0:1494":{"crate_id":1,"path":["std"],"kind":"module"},"1:1840:3935":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12473:4846":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:9242:4326":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:7375:6107":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:32164:3383":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:9146:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:5419:4457":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"25:4590:7713":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:7796:6358":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:8909:6676":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:5752:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10084:4499":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4461:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:39253:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4922:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:5660:4188":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"25:5028:7889":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:4709:7733":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:8953:21026":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"18:96:24984":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:8154:5892":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:4986:5493":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"25:1602:7473":{"crate_id":25,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:42883:6437":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:45741:6514":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"25:7553:8301":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:1632:7498":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:8594:21007":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:1558:7444":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:7579:8305":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:2223:33672":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:9372:4458":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:13778:5170":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11617:4677":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:7544:5823":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:5423:6671":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:8605:3148":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:7532:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:14126:5257":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11423:8480":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:40347:6399":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"20:477:2592":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"2:41589:196":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:5864:7983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:1492:5989":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:12080:792":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:6186:8125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:40429:6270":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:2546:260":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:4835:5488":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"22:192:1906":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkResult"],"kind":"enum"},"2:5568:6258":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:2883:3011":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:261:4331":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:5853:3059":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:1596:7468":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:7237:6105":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:9445:4466":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8146:6743":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:8174:4317":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:12176:14186":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5049:5495":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11761:4690":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:9141:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"25:4707:7733":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"25:6701:8185":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:41640:3414":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"25:4851:7796":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:8895:21024":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12237:4787":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"25:4790:7774":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:7614:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:12084:1605":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"25:7308:8291":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"25:6854:8267":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:3233:3029":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13259:4985":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:1590:6012":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:41649:3849":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:5373:14170":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:22197:8459":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:3033:2124":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4346:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:2766:5434":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:21738:9031":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"21:0:2991":{"crate_id":21,"path":["scopeguard"],"kind":"module"},"2:11227:3496":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:6458:1774":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:43986:6483":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:4639:14229":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7582:5824":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:5673:5446":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:727:4315":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"25:4571:7712":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:4066:8949":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:9574:33777":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:12125:14178":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6741:8196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"25:7612:8314":{"crate_id":25,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:47904:6608":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"11:1072:33747":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"25:6169:8114":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:2887:3010":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"25:1556:7444":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13914:5201":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:11269:155":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"5:2243:8457":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8903:3415":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:536:5397":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"25:4546:7699":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:10626:6305":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:1737:3499":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:42637:72":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:11488:4206":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:15:2716":{"crate_id":2,"path":["core","write"],"kind":"macro"},"23:328:25010":{"crate_id":23,"path":["smallvec","Array"],"kind":"trait"},"2:11186:6310":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:11417:8479":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"10:36:8373":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:2035:6088":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:1501:7413":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:43551:6298":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"11:703:5989":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:6720:8190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:918:5989":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:6672:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6415:5634":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:44574:6016":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"7:31:19937":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:14522:5378":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4700:7728":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:7566:6829":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:6023:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:2942:3023":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:3072:3025":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:6663:4099":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:1503:5990":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:21489:8903":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:6584:3415":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10012:4470":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:9650:4470":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"25:7622:8316":{"crate_id":25,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9701:4471":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:2548:5425":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"25:4439:7646":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:14434:5356":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"23:331:4074":{"crate_id":23,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"17:12698:4880":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:10978:6698":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:8895:6786":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:41657:3850":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:10980:4470":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:6332:9115":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:10991:6674":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"20:0:1762":{"crate_id":20,"path":["lock_api"],"kind":"module"},"17:12790:4892":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:7476:4129":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:42686:74":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:3273:32138":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6083:20071":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:4949:5492":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5915:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13851:5185":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11991:4739":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:636:4295":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:897:4067":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:2837:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:7568:5458":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4333:7583":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"25:5890:7995":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:9312:3935":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:10738:4575":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:646:8813":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:43357:6449":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:43619:6465":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:46234:6535":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:3457:6755":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:9535:124":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:5667:6675":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:40268:6391":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:1850:4067":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10420:4403":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:12088:843":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:5830:5527":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:7265:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:11250:7091":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:47968:6612":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"25:6057:8079":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:4653:8947":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:7269:33627":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:10869:25508":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:2596:5427":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:7438:3075":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12765:4890":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12098:4758":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:1145:6005":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:9277:4327":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"22:73:1909":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_PARK_TOKEN"],"kind":"constant"},"17:2150:21086":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:1541:6007":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"25:1680:7528":{"crate_id":25,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10165:21059":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:7501:6115":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:5017:5494":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"13:110:33753":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:40579:6272":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:22075:6332":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13868:5190":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10340:4523":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10059:4497":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:40048:14235":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14033:5232":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:596:7407":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"25:4726:7741":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6499:5461":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12685:4879":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:12110:6293":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12576:4865":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13676:5150":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:12090:1211":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:6189:5585":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"25:61:14569":{"crate_id":25,"path":["libc","unix","DIR"],"kind":"enum"},"1:12077:689":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"18:614:33784":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:9070:4456":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:7624:8316":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:43773:6469":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:8274:8939":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:7758:8817":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:40107:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:42664:132":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12543:4857":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4968:7862":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5897:7996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:3532:8901":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:622:6622":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:10512:6302":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:21396:9028":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:9976:4163":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:1521:7421":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"11:423:33748":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:14013:5225":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:1751:8382":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"11:2058:5738":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:4665:8178":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:6663:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:7590:8309":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:3212:6009":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4731:8972":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:1776:4132":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:3049:20101":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:41827:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"22:72:2363":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_UNPARK_TOKEN"],"kind":"constant"},"17:10949:4614":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12452:4842":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:6174:4173":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:5995:5399":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:759:5991":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:3888:5472":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:10359:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:1514:7419":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:3183:33620":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:40217:6386":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"25:6847:8264":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:10771:4578":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:7897:6701":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:44325:126":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5020:7884":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:58:25003":{"crate_id":21,"path":["scopeguard","Always"],"kind":"enum"},"17:13632:5145":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:14420:5354":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:660:4296":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4815:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:475:7338":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"25:4641:7717":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:21522:6331":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:8329:6759":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:43347:6448":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"9:0:2833":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:47919:6609":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4954:7856":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13113:4959":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:3236:6645":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"25:5071:7910":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:9071:6797":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:7708:5460":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"3:0:472":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:40112:6383":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"25:5750:7919":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:6211:8458":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"18:690:4305":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"25:4773:7763":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13244:4981":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"25:4757:7754":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:149:4086":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:10474:6301":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:2929:132":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:4339:6658":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11086:4626":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:3260:3033":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:515:4270":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"25:7285:8280":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:22868:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:123:14624":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:7862:5845":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"25:4987:7874":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:14536:5381":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:40439:6403":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:12331:115":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:4480:7662":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12645:4871":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:2305:20098":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:11337:21153":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:12078:794":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:42061:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8318:8475":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:3764:5469":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:3409:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:2472:5422":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:9746:147":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:2254:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:4728:8999":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:9222:8539":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4943:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:4900:7820":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:2537:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:11405:6688":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:624:33785":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"25:4559:7703":{"crate_id":25,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:10240:4489":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:12998:8829":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:21272:3481":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:40197:6385":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:9543:3389":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"25:6143:8099":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:9021:3276":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:7194:4317":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:9512:6699":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:4769:7760":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:12906:4173":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:44282:8469":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:22213:6335":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:10367:3850":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:949:5998":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:42022:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:5798:5521":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:44306:3073":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:8036:6706":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:9030:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:21520:9034":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"11:2479:33743":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:6145:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"25:5831:7964":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5063:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:45565:6507":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:5712:5512":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:4663:8176":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:40793:1773":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"25:5018:7884":{"crate_id":25,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:10616:3280":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:2864:5438":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4683:7720":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:6856:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:3594:3850":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:7621:20969":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:2178:4345":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:11847:6317":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:14090:5248":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:3238:6012":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8311:6656":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:2049:6089":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4320:7573":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:3195:25484":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:22289:31014":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7694:5459":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"23:281:3415":{"crate_id":23,"path":["smallvec","IntoIter"],"kind":"struct"},"5:5325:4099":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2908:3015":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12830:4896":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:2238:5738":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"20:841:179":{"crate_id":20,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"11:2334:3850":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:9752:4472":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:21957:8903":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:3600:5468":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6569:5449":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"25:6041:8075":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:1734:7550":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:7776:8857":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:47945:6611":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:14134:5258":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6204:5587":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:1650:7510":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4853:7796":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:46356:6538":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:14145:5262":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"11:992:5738":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10112:4501":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"10:0:2834":{"crate_id":10,"path":["adler"],"kind":"module"},"16:2907:5440":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:2219:2715":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:12073:1589":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"11:344:33744":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"25:4797:7776":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4379:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"20:459:2567":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"2:2797:3093":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:10135:6800":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"17:10672:4566":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"25:5876:7994":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:11071:4201":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:12015:6832":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:9998:4447":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:1058:6000":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4631:7716":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:21835:6329":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11000:4617":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:4527:5479":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:9217:31941":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:39973:31028":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:8530:9010":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:13906:5199":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"25:4995:7876":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:7299:6106":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:9184:3041":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"25:488:7346":{"crate_id":25,"path":["libc","unix","timeval"],"kind":"struct"},"2:47864:6604":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:44532:6501":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:5135:3052":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:46850:6561":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:2894:4180":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:0:2835":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:3461:5467":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:7715:3280":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6268:33769":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:44489:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:1570:7452":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:12037:8818":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:772:5992":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:7764:6630":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:8050:5882":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:46166:6532":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9959:4490":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6721:20965":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:43105:6296":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11687:21032":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:5322:5498":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:2896:3017":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10097:4500":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:6624:1781":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:6686:8184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40025:6375":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:4394:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13215:4978":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:1011:4099":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:9972:4491":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:2574:5426":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:44274:8467":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"11:2317:3849":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:10435:6300":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:41734:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"25:579:7397":{"crate_id":25,"path":["libc","unix","tms"],"kind":"struct"},"2:4136:3095":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:12688:142":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:12087:1604":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:2170:8454":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"25:6684:8184":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:6465:4067":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:943:5996":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6893:5709":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:2927:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:2628:132":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"18:719:4312":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:41320:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"25:4459:7655":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9617:33780":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:9607:4469":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7067:5735":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:5788:254":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10903:4610":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:7570:3062":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11490:4670":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:21181:9037":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:5994:14543":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:23000:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:42219:2965":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:14173:5270":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:3204:6011":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6485:5444":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40067:6379":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:6622:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10646:4561":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:10800:8478":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"20:901:1784":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"5:878:4107":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2450:5421":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:7567:8303":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:1764:654":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:40315:6395":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11742:4687":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:5612:5447":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:3325:3037":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:6956:4143":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:44115:6487":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:2722:5432":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:14478:5371":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:8996:1766":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"21:17:4082":{"crate_id":21,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"5:7283:3415":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:6604:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:7318:5769":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:1931:700":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:4734:7744":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:9233:8397":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"20:35:178":{"crate_id":20,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"1:2366:3473":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:1411:3849":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6531:5647":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12934:4932":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:9896:21041":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"25:6049:8077":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"25:500:7349":{"crate_id":25,"path":["libc","unix","rlimit"],"kind":"struct"},"2:40329:6398":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:10392:6298":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:47884:6606":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:6790:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:1442:3415":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4892:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:7961:6088":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:22376:3113":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:43834:6473":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"11:2286:6001":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:6454:1773":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:22967:182":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:7420:6108":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:9131:179":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:8072:5883":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:3217:33626":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:4361:3087":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:3171:3849":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:46020:6528":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:4016:8946":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8513:6775":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:4415:3089":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12888:4922":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:43972:6480":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11639:4353":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:2303:6015":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:10285:9017":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:10878:25503":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7462:5809":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:9487:3385":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:44562:6504":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:46614:6557":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:39989:6372":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:40786:6276":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:5435:5500":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:46136:6531":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:3698:8941":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:9488:33778":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"25:6602:8149":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"25:4784:7771":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:5999:4188":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:3797:5470":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:14221:5307":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:276:3064":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:7503:5455":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:2788:5435":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10186:4509":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:9780:4473":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:22355:8462":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8941:9020":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3539:8919":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:12082:789":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11306:4650":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:10366:4524":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:20921:31764":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:40277:6392":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"20:881:238":{"crate_id":20,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12136:4762":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:21311:9029":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:11586:4676":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:12119:4308":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8422:3140":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:12064:398":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:14469:5369":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"25:4911:7830":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:7342:33770":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:1075:4338":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:41785:3850":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2324:203":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:44286:8470":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:45842:6518":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"9:393:19952":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:4768:8958":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:9933:4488":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:1473:5992":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:10654:6307":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:4847:849":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:5110:6666":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:8281:5904":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:4074:3850":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:39178:3027":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:5942:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:47662:6599":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:2859:3004":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:932:8828":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"18:574:4273":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8957:9019":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13667:5146":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11850:4210":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:6222:6679":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:4411:6659":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:1682:7528":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:10195:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13554:5103":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:1876:6011":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"25:4472:7659":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10561:4551":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:10478:4543":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:6571:3057":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:3315:5466":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:491:4272":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"25:4857:7799":{"crate_id":25,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:46309:6537":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:39372:6367":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:80:24983":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:42862:6433":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:14378:5348":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:40390:6401":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:40287:6394":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:12065:3111":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:21125:9032":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"25:4318:7573":{"crate_id":25,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"25:4941:7851":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:2540:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"15:306:20054":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:3043:2430":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:42854:6432":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:14110:5254":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:2696:5431":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:43957:6475":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:44302:8474":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:41377:8940":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:12465:4844":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:9196:715":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"2:21087:8903":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:871:5991":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12007:4743":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:582:4337":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:40154:8872":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:42901:6442":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:4417:5476":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:14024:5229":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:2526:5424":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:2644:5429":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:11886:4710":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:542:7378":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"25:5895:7996":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:6513:5639":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:1591:7466":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:7328:3415":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:14269:5308":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:42180:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:5982:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4786:7771":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11327:4653":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:574:7394":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4745:7748":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:564:4282":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"25:6586:8137":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4406:7629":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11788:4691":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:5336:124":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"15:394:20063":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:3720:6088":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:42100:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:7669:8903":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4523:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:7538:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"25:6788:8231":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:2368:4067":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:14296:5320":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:21959:9027":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"25:4865:7804":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:7606:4194":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6279:5622":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:4774:5486":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5574:5442":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:3518:4067":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:5443:6672":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:40808:6407":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"25:568:7392":{"crate_id":25,"path":["libc","unix","sigval"],"kind":"struct"},"17:8978:21027":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:25849:269":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:3232:5408":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13451:5017":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:2329:129":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"20:445:2552":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"25:6021:8070":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:43495:6458":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:580:7397":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"25:4767:7760":{"crate_id":25,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9762:33776":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:40033:6250":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"25:5047:7903":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:0:2840":{"crate_id":17,"path":["object"],"kind":"module"},"17:8794:21021":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4643:7717":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10575:4552":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:41526:6656":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:9136:697":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"1:8345:6761":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:6849:8264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:8848:21023":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:8205:20972":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:1576:7454":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"7:0:1654":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:1635:4082":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:43755:6468":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:39275:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:1102:33628":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:2785:248":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"25:4688:7721":{"crate_id":25,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:40013:6374":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5844:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:1664:7521":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6346:5626":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:21225:9038":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:12531:4855":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:6098:4183":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"20:20:1776":{"crate_id":20,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"1:9015:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"25:4898:7820":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:7945:6703":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:45719:6513":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"8:0:2832":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:3760:6653":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:3198:28223":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:495:7348":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"22:82:1758":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock"],"kind":"module"},"25:7476:8292":{"crate_id":25,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:6839:9022":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:2543:137":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:14163:5265":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12737:4885":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:22249:31743":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:11348:6825":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:4259:6657":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:7769:6695":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"25:0:873":{"crate_id":25,"path":["libc"],"kind":"module"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"25:4307:7565":{"crate_id":25,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:44150:6492":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:40041:6376":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:40367:6266":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:47983:6613":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10197:4511":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:22326:31013":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"25:4449:7652":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"25:7263:8279":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:11074:4625":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:2865:3007":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:43378:6451":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:922:5990":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:1546:7435":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:4519:8973":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:10494:4545":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"25:7559:8302":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:3040:2058":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6041:20962":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:2550:259":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11934:4725":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:10410:4528":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:7006:5725":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:1703:7538":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8250:6298":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:4889:5490":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:40835:6281":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:261:4099":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:9985:4493":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13101:4957":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:11226:4643":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:4934:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:14316:5326":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11295:4648":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:8606:3147":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"25:1648:7510":{"crate_id":25,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:20953:31952":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:0:2832":{"crate_id":24,"path":["cfg_if"],"kind":"module"},"25:6611:8155":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:7450:6111":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:7792:6698":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6560:4088":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:6511:4099":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11551:6654":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6696:5676":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:1076:6005":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:6171:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:534:2356":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:8257:6470":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:43701:6466":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:7601:8310":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:9035:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:434:4335":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:5973:3052":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:1568:4132":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:10962:4615":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12305:4807":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10547:4550":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:46188:6533":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:39092:3038":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:2879:3013":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:10343:3849":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:21328:8903":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:10603:4555":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"11:785:4067":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:590:4283":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:5459:6673":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:9912:4483":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:1639:7502":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10714:4573":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:8237:6406":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:4494:7670":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:2260:6000":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:40802:6277":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6030:8071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:2497:8903":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:46726:6559":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:44545:173":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"25:5077:7912":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:44587:6505":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"25:4890:7815":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:43859:6250":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:22237:3112":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:7053:4192":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"25:122:14624":{"crate_id":25,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:2832:5437":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"25:1544:7435":{"crate_id":25,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:43329:6445":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:8839:201":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13710:5153":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"25:573:7394":{"crate_id":25,"path":["libc","unix","itimerval"],"kind":"struct"},"11:101:8449":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:30268:3745":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:1528:7424":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"25:6631:8161":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4847:7795":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:4989:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:357:4091":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:1779:6631":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"9:486:19950":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"25:526:7369":{"crate_id":25,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11191:4353":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:23447:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:589:8810":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:42355:3388":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12074:4754":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:4561:7703":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:4462:5477":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"25:6149:8100":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6792:5701":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"23:118:4071":{"crate_id":23,"path":["smallvec","SmallVec"],"kind":"struct"},"17:9711:33775":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:1523:6086":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12154:4770":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:6795:4074":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"15:288:20053":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:42141:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:6726:8192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4511:7680":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:9455:33779":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4555:7701":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:4667:8180":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"25:1512:7419":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:489:7346":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:44183:6324":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:671:4302":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11367:4657":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:8363:6763":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"25:1568:7452":{"crate_id":25,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:6924:4191":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:507:7352":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:9549:3391":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:11628:6826":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:42621:5860":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:6588:8137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:1257:5738":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:39358:6366":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:2160:631":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:21137:31606":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:5073:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:47846:6603":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:8097:5886":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:7229:3415":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:46042:6529":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:39961:6369":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5760:20960":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"14:215:5985":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:7015:5728":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:4806:5487":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"20:908:1785":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"25:5818:7963":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"25:1494:7411":{"crate_id":25,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:6205:6267":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:9058:6794":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:9547:3390":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:3948:4121":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:2991:3034":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:7287:8280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12750:4887":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:43719:6467":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:599:33783":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:5626:6260":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:841:5996":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9328:4328":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:2618:5428":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:2172:3482":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:4497:8972":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:9790:33773":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"7:78:19944":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2284:20072":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:10133:6801":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4792:7774":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:32077:6360":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"25:118:14623":{"crate_id":25,"path":["libc","unix","FILE"],"kind":"enum"},"25:6620:8156":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"25:1701:7538":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:4179:8967":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:10637:4560":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:32056:5789":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:9993:4164":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:4187:8968":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:9910:4160":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:9086:4457":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7391:20968":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:12750:207":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:45790:6516":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7828:5841":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:7625:4196":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:3565:4352":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:4462:3090":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:46804:6560":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:4943:8998":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:7597:33767":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"25:7530:8295":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"25:7571:8304":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:2835:3380":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:4821:31532":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:9794:6295":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"25:494:7348":{"crate_id":25,"path":["libc","unix","timespec"],"kind":"struct"},"1:12072:1502":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:6960:5714":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:39351:3030":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:4997:7876":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13966:5215":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"11:2074:6000":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:10547:6303":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:41717:3561":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4540:7694":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:1118:33605":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:3915:5473":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:6318:5624":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:21743:9039":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:12076:687":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:41802:198":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:4985:4121":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:14100:5251":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"15:0:2838":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:558:2081":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:11179:6783":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:10534:4549":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"22:284:2519":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkToken"],"kind":"struct"},"17:13162:4972":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"25:6833:8255":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"25:4653:7718":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"25:4743:7748":{"crate_id":25,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10292:4470":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11572:6655":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"25:6578:8132":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4573:7712":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6879:5707":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:39545:27439":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:11235:4644":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:7694:3282":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:6808:3423":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:569:7392":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:12065:995":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:39233:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13298:4995":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"12:0:2836":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"25:4875:7810":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:1672:4099":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:9517:4198":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:6156:5580":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:5820:7963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:840:3849":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4775:7763":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13575:5111":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:3763:6654":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13816:5175":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:731:5990":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"25:506:7352":{"crate_id":25,"path":["libc","unix","rusage"],"kind":"struct"},"2:12775:6327":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"25:4698:7728":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4451:7652":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:2423:20024":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"22:46:4076":{"crate_id":22,"path":["parking_lot_core","parking_lot","ThreadData"],"kind":"struct"},"6:4592:7713":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:46880:6562":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:11870:6318":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:43805:6470":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:48021:6615":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"23:0:2993":{"crate_id":23,"path":["smallvec"],"kind":"module"},"2:3170:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4728:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:2744:5433":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:44362:3074":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:8582:3849":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:0:873":{"crate_id":6,"path":["libc"],"kind":"module"},"6:4441:7646":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12945:4934":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:5085:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:3022:1910":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10440:4532":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:6844:5703":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"20:319:4269":{"crate_id":20,"path":["lock_api","remutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:12066:447":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:1825:181":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:5970:8045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:10008:4168":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:9531:33774":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:4032:4099":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12658:4874":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:7651:5828":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:9921:4485":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:2384:8893":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"25:5968:8045":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:41513:6420":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:45944:6522":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"25:4294:7556":{"crate_id":25,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:1710:7541":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:6494:3060":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:10576:6648":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:358:3289":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4877:7810":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:40779:6275":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"18:681:4303":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:22835:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:4344:5475":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:4078:8952":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:44524:6499":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"25:4509:7680":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:5808:1765":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:44129:14193":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:21344:9024":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:11281:4647":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:12081:793":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:7880:4404":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"22:252:2518":{"crate_id":22,"path":["parking_lot_core","parking_lot","FilterOp"],"kind":"enum"},"17:10023:4471":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:39952:6368":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:3315:6649":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:7689:3281":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"11:666:3849":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:44471:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"25:587:7402":{"crate_id":25,"path":["libc","unix","servent"],"kind":"struct"},"2:32052:6358":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:6814:4140":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:44294:8472":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:10668:6308":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11389:4662":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:14346:5333":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"23:164:4070":{"crate_id":23,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"2:42348:3386":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13802:5174":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:40003:6373":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:7259:4110":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:5079:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11719:21033":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:32016:8370":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"11:796:4132":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:21494:9025":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:30013:3110":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:5528:6674":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4867:7804":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"25:7599:8310":{"crate_id":25,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:22736:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:11325:4204":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11710:4650":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"25:482:7343":{"crate_id":25,"path":["libc","unix","utimbuf"],"kind":"struct"},"25:7588:8309":{"crate_id":25,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:41983:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40399:6268":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:10114:6633":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"25:6809:8245":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:1067:6001":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"14:160:5982":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"9:52:8520":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"25:7536:8296":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"25:7577:8305":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:21258:9033":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:5599:9015":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:4468:7658":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:955:5999":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"25:4404:7629":{"crate_id":25,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8244:4328":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:6811:8245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5013:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:1842:3849":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10573:6646":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:7478:8292":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"25:6090:8088":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"20:30:2475":{"crate_id":20,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"1:6325:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"11:1882:6012":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:3032:5463":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6820:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4669:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:14308:5323":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:6216:4156":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:6818:5702":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6226:5602":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:14068:5243":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:7931:3851":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:2131:2122":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"25:7524:8294":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2938:3022":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"25:5061:7909":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:3653:3415":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"11:1051:20028":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"25:4629:7716":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"9:237:6437":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:8825:21022":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2829:3378":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"18:609:4290":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:2930:3020":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"25:4371:7616":{"crate_id":25,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:9223:30025":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:12070:336":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:2962:8379":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"20:217:2992":{"crate_id":20,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"6:6059:8079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:693:3415":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:1044:5738":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:40187:4150":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"20:214:2626":{"crate_id":20,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"16:6386:5631":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:30462:31025":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:40259:6390":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:30284:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:9350:4332":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:6092:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10916:4611":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:2966:33609":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12876:4920":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"25:5083:7915":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"11:1846:3415":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:5369:14169":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:12105:14180":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:21089:9030":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:44298:8473":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:7487:246":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11272:4646":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"25:652:14979":{"crate_id":25,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:3735:6089":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:11390:6686":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9886:4482":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11815:4697":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:7320:3415":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"23:363:25012":{"crate_id":23,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"17:14514:5375":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:6376:20963":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:6915:5452":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"25:1526:7424":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3865:6655":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:40246:6389":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:45635:6510":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:45860:6519":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:481:4271":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:538:4280":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:2775:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:483:7343":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"25:5011:7881":{"crate_id":25,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2792:250":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:3125:6642":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:10036:4496":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"25:554:7384":{"crate_id":25,"path":["libc","unix","winsize"],"kind":"struct"},"1:7937:123":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"25:4492:7670":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:43417:6453":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:10640:6306":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"25:4499:7673":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:7573:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:707:4308":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7360:33768":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"25:4947:7854":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:11082:4202":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:913:6006":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12043:4750":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:638:6623":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:1010:6000":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:11024:6785":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:41665:3415":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:14282:5314":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"22:0:1788":{"crate_id":22,"path":["parking_lot_core"],"kind":"module"},"17:10430:4530":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:8607:3146":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:41549:6288":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:10570:6644":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:8239:5789":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:483:4175":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:727:148":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"25:6035:8072":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11547:4673":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:1302:6005":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"20:452:2562":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"2:44270:8466":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:10585:6304":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:2604:6640":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:11845:4701":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13546:5100":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:10805:6700":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:2394:8898":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:5363:5499":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:42871:151":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"25:1910:15970":{"crate_id":25,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:3964:8942":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:1687:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:39319:3028":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:6613:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"25:5913:8008":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:7254:1750":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"18:699:4306":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:868:5999":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6467:5638":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:6098:4121":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:9051:6793":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:4195:8969":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6687:5675":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:5939:5393":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4690:7721":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:12970:4937":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:501:7349":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12671:4583":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7054:5732":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4949:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:7934:3852":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10616:4556":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:46568:6556":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:22181:6334":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"9:357:19966":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:6735:8195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:853:3850":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:12086:1607":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:3958:8943":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"14:7:5982":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:884:5992":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:4862:5489":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4799:7776":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:4008:8945":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:4363:4123":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:43868:6375":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"13:226:8365":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:47724:6600":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:4022:8947":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8367:8165":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12252:4793":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:6082:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12959:4936":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"11:2394:4132":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:45545:6506":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:9530:115":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:12172:4771":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:7561:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:2568:4177":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"25:474:7338":{"crate_id":25,"path":["libc","unix","group"],"kind":"struct"},"25:4478:7662":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8851:6783":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:416:177":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10139:21058":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:6912:266":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:5866:5534":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13838:5179":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:9486:229":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:10227:4515":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6742:5688":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:7310:8291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13148:4971":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11151:4631":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:1537:7429":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:1426:3850":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:12032:8541":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"23:57:4067":{"crate_id":23,"path":["smallvec","Drain"],"kind":"struct"},"17:13567:5110":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"14:0:2837":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:6640:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11062:4624":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:3313:6648":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4838:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12554:4858":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:40569:6406":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:9207:4325":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11448:21030":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:4425:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:1634:630":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:3655:4365":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:2690:7191":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:7520:8293":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2782:2016":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:11048:4620":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:4351:3086":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:11006:25509":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:12086:4755":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6929:5711":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:2380:5418":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"25:1695:7537":{"crate_id":25,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:11921:6300":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11507:21031":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"18:644:4273":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:4406:3088":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:21513:8903":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10447:4535":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"25:4521:7686":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11124:4629":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:8928:6787":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:40237:6388":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:4426:4123":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:22901:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"11:2487:8371":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"25:4719:7740":{"crate_id":25,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:1464:5991":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13922:5203":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"25:4845:7795":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:822:5993":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:4002:4067":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"25:532:7372":{"crate_id":25,"path":["libc","unix","hostent"],"kind":"struct"},"16:6545:5649":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:2085:6001":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:9541:3388":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:6865:8270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:7670:3291":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:4194:4121":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:2947:3024":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:43935:14192":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"14:165:20034":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"25:1535:7429":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2875:3009":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:4884:1061":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12085:1606":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:43338:6446":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:2409:2847":{"crate_id":1,"path":["std","io"],"kind":"module"},"25:6818:8248":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:45589:6508":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:40140:6384":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:47930:6610":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:3429:4121":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:4278:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8227:6389":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:41777:3849":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:40380:6400":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:6361:5628":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:11213:3073":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"11:1092:6003":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:12069:1112":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:12083:1608":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:47770:6601":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"11:860:5998":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:11635:14311":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"25:5842:7972":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2832:3061":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:9106:7087":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:11886:6319":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:42893:6441":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4934:8997":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"23:97:25009":{"crate_id":23,"path":["smallvec","SmallVecData"],"kind":"enum"},"22:270:2478":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkToken"],"kind":"struct"},"2:22362:3114":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:43527:6462":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:40358:6265":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:1895:6635":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:7102:20967":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6944:33766":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10788:21128":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:6759:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:2960:33610":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:4557:5480":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:7626:171":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:11810:6314":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"25:7291:8282":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:1983:200":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:2787:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:40297:6255":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11232:3040":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:11137:4630":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:42341:3387":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"11:2494:6107":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:9539:3387":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:4020:6251":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:2617:120":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:8041:8930":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:30228:3744":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12267:4799":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:5814:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:14118:5255":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8440:6772":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13135:4970":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:1760:3498":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:5661:5511":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:3009:121":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:47064:6564":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2871:3006":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10468:4542":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:6568:3056":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2339:5411":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:4348:267":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:10860:6652":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:4418:7638":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"25:4667:7719":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:4921:5491":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"25:5780:7944":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:548:7381":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:43521:6313":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:9545:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:9660:33781":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:5121:5497":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"25:6863:8270":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:9789:14244":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:9063:6795":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:3994:8944":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:8337:6752":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:47893:6607":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"20:889:1786":{"crate_id":20,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"17:13274:4650":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:7387:8827":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:389:4093":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:8194:6652":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"11:1127:6004":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12062:4751":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:41490:31737":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:1564:4067":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:3358:8927":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:3243:256":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"25:5812:7962":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11573:4674":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:3475:6651":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5851:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9521:4467":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:434:1777":{"crate_id":20,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"25:6718:8190":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4474:7659":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:9165:3040":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:6633:8161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14460:5365":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:7291:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:1429:150":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:2844:3003":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:39946:6250":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"22:211:1908":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkResult"],"kind":"struct"},"5:3178:6010":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:6835:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:7736:5831":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"14:221:5987":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:47808:6602":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14042:5233":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"25:1630:7498":{"crate_id":25,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:45990:6527":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:817:6006":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:42362:3389":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"19:0:1092":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5648:5506":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:11193:6784":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"20:474:2588":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"1:5268:205":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:3254:3031":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"9:450:19951":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4859:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:6015:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:7492:5818":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:2786:247":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:6190:4187":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:13228:4979":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7722:5450":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"25:4392:7624":{"crate_id":25,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:43367:6450":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:4309:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:5409:6667":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:6037:8072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:14156:5263":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5030:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:10316:4522":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:2933:20099":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"20:462:2570":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"18:0:2841":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:10929:4613":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:5696:20959":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:8865:6784":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43439:6455":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4548:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:629:6083":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:5905:8001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:40093:6382":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"11:680:3850":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11098:4627":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8031:6705":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"25:5992:8057":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:8389:6660":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"13:0:2830":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:4826:4181":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:10830:6701":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:8715:6293":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"25:6080:8085":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:9867:4480":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10383:4526":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6883:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:9537:3386":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:6583:5651":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:8599:6781":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:14401:5349":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:2501:6639":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:10370:4525":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:43825:6472":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:2216:6638":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:3232:4349":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:12895:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:11640:28543":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:13826:5176":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10750:4576":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2276:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:5631:4074":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"25:4821:7785":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10126:4503":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:5634:5502":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"25:4958:7857":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9945:4489":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11244:4677":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8833:6782":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:5833:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:22388:3115":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"9:426:19953":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:7220:6087":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"21:12:25002":{"crate_id":21,"path":["scopeguard","Strategy"],"kind":"trait"},"16:7534:5456":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"20:8:1764":{"crate_id":20,"path":["lock_api","GuardNoSend"],"kind":"struct"},"6:6009:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"25:1505:7416":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:47270:6595":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:6027:6262":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:4044:105":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:12437:4838":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:7526:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4849:8957":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11358:21154":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:22769:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"}},"external_crates":{"23":{"name":"smallvec","html_root_url":null},"20":{"name":"lock_api","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"libc","html_root_url":null},"22":{"name":"parking_lot_core","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"21":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}