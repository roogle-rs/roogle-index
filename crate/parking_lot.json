{"root":"0:0:1721","crate_version":"0.12.1","includes_private":false,"index":{"0:162:1695":{"id":"0:162:1695","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_fair_mutex.rs","begin":[17,4],"end":[17,69]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutex","id":"20:20:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"a:2:2755:223-0:197:1710":{"id":"a:2:2755:223-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:96:166":{"id":"0:96:166","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[87,49]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same mutex in succession, which can starve\nother threads waiting to acquire the mutex. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na mutex it has just released, this can starve other threads.\n\nThis mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the mutex.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `MutexGuard::unlock_fair` when\nunlocking a mutex instead of simply dropping the `MutexGuard`.\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `Mutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the mutex is fair on average.\n- Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::Mutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(Mutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12246:320":{"id":"2:12246:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12247:319","`u8`":"1:12052:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12244:26697":{"id":"2:12244:26697","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11497:14084"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12318:32071":{"id":"2:12318:32071","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11937:14083","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::rmatch_indices":"2:12321:32072"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43866:6390","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2561-0:261:1711":{"id":"b:2:2561-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2546-0:157:1709":{"id":"b:2:2546-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:3328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2255:2584":{"id":"2:2255:2584","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:2214":{"id":"0:200:2214","crate_id":0,"name":"INIT","span":{"filename":"src/raw_mutex.rs","begin":[59,4],"end":[61,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:2561-0:357:1714":{"id":"b:2:2561-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12247:319":{"id":"2:12247:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12052:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1986":{"id":"0:51:1986","crate_id":0,"name":"wait_for","span":{"filename":"src/condvar.rs","begin":[379,4],"end":[386,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44490:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:418-0:87:1703":{"id":"0:418-0:87:1703","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,56],"end":[42,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutexGuard","name":"FairMutexGuard","id":"0:87:1703","glob":false}}},"a:2:8471:3083-0:261:1711":{"id":"a:2:8471:3083-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:3083","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2772:231-0:31:1699":{"id":"a:2:2772:231-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:423-0:96:166":{"id":"0:423-0:96:166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,53],"end":[43,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::Mutex","name":"Mutex","id":"0:96:166","glob":false}}},"0:103:1706":{"id":"0:103:1706","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[110,0],"end":[110,79]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:849:1706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:172:1845":{"id":"0:172:1845","crate_id":0,"name":"Instant","span":{"filename":"src/raw_fair_mutex.rs","begin":[54,4],"end":[54,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"a:2:8472:3082-0:31:1699":{"id":"a:2:8472:3082-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:278:2492":{"id":"0:278:2492","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[184,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2812:2997-0:157:1709":{"id":"a:2:2812:2997-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2812:2997-0:197:1710":{"id":"a:2:2812:2997-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:363:1715":{"id":"0:363:1715","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[41,0],"end":[41,80]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](type.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutex","id":"20:255:1715","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:2556-0:197:1710":{"id":"b:2:2556-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:453:627":{"id":"0:453:627","crate_id":0,"name":"eq","span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268:2475":{"id":"0:268:2475","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:685":{"id":"0:68:685","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[518,4],"end":[520,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:32741","5:5511:3235","5:5514:32742","5:5517:32743","5:5525:32744","5:5526:32745","5:5527:8834","5:5528:25111","5:5529:25112"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:309:2530":{"id":"0:309:2530","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/raw_rwlock.rs","begin":[480,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9120:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8471:3083-0:446:1700":{"id":"a:2:8471:3083-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:3083","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:682:3393":{"id":"5:682:3393","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:304:2524":{"id":"0:304:2524","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[429,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:219":{"id":"0:376:219","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[89,0],"end":[89,52]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThis lock uses a task-fair locking policy which avoids both reader and\nwriter starvation. This means that readers trying to acquire the lock will\nblock even if the lock is unlocked when there are writers waiting to acquire\nthe lock. Because of this, attempts to recursively acquire a read lock\nwithin a single thread may result in a deadlock.\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same lock in succession, which can starve\nother threads waiting to acquire the rwlock. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na rwlock it has just released, this can starve other threads.\n\nThis rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the rwlock.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`\nor `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply\ndropping the guard.\n\n# Differences from the standard library `RwLock`\n\n- Supports atomically downgrading a write lock into a read lock.\n- Task-fair locking policy instead of an unspecified platform default.\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `RwLock` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the rwlock is fair on average.\n- Optionally allows making the rwlock fair by calling\n  `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read();\n    let r2 = lock.read();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLock","id":"20:482:219","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:378:1717":{"id":"0:378:1717","crate_id":0,"name":"const_rwlock","span":{"filename":"src/rwlock.rs","begin":[94,0],"end":[96,1]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.\n\nThis allows creating a `RwLock<T>` in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:376:219","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8471:3083-0:357:1714":{"id":"a:2:8471:3083-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:3083","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2556-0:157:1709":{"id":"b:2:2556-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:450:685":{"id":"0:450:685","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:3394":{"id":"5:683:3394","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:2318":{"id":"0:126:2318","crate_id":0,"name":"done","span":{"filename":"src/once.rs","begin":[52,4],"end":[57,5]},"visibility":"public","docs":"Returns whether the associated `Once` has successfully executed a\nclosure.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:2470":{"id":"0:266:2470","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[67,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:1967":{"id":"0:45:1967","crate_id":0,"name":"wait_until","span":{"filename":"src/condvar.rs","begin":[283,4],"end":[292,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9120:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:357:1714":{"id":"b:2:2546-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:3328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:440-0:389:1719":{"id":"0:440-0:389:1719","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,41],"end":[53,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockWriteGuard","name":"MappedRwLockWriteGuard","id":"0:389:1719","glob":false}}},"0:442-0:380:220":{"id":"0:442-0:380:220","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,73],"end":[53,88]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockReadGuard","name":"RwLockReadGuard","id":"0:380:220","glob":false}}},"0:427-0:460:1708":{"id":"0:427-0:460:1708","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,27],"end":[44,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::OnceState","name":"OnceState","id":"0:460:1708","glob":false}}},"0:125:2315":{"id":"0:125:2315","crate_id":0,"name":"poisoned","span":{"filename":"src/once.rs","begin":[42,4],"end":[47,5]},"visibility":"public","docs":"Returns whether the associated `Once` has been poisoned.\n\nOnce an initialization routine for a `Once` has panicked it will forever\nindicate to future forced initialization routines that it is poisoned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:2214":{"id":"0:161:2214","crate_id":0,"name":"INIT","span":{"filename":"src/raw_fair_mutex.rs","begin":[15,4],"end":[15,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:204:1974":{"id":"0:204:1974","crate_id":0,"name":"unlock","span":{"filename":"src/raw_mutex.rs","begin":[100,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:386:1718":{"id":"0:386:1718","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[113,0],"end":[113,90]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockReadGuard","id":"20:901:1718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:2812:2997-0:446:1700":{"id":"a:2:2812:2997-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2561-0:31:1699":{"id":"b:2:2561-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:443-0:392:1720":{"id":"0:443-0:392:1720","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockUpgradableReadGuard","name":"RwLockUpgradableReadGuard","id":"0:392:1720","glob":false}}},"a:2:2772:231-0:197:1710":{"id":"a:2:2772:231-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12259:27087":{"id":"2:12259:27087","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12258:27086"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12271:27105":{"id":"2:12271:27105","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:197:1710":{"id":"b:2:2546-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:3328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:361:2563":{"id":"0:361:2563","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[18,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"2:22678:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12321:32072":{"id":"2:12321:32072","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11937:14083","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::match_indices":"2:12318:32071"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43884:6391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12347:32081":{"id":"2:12347:32081","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[59,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked","is_locked_exclusive"],"trait":{"name":"RawRwLock","id":"20:434:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:2214","0:265:1695","0:266:2470","0:267:2474","0:268:2475","0:269:2478","0:270:2481","0:271:2483","0:272:2409","0:273:2486"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:308:2529":{"id":"0:308:2529","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/raw_rwlock.rs","begin":[467,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44490:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:463:2307":{"id":"0:463:2307","crate_id":0,"name":"Poisoned","span":{"filename":"src/once.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":"A closure was executed but panicked.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2317:190","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:453:627"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8472:3082-0:460:1708":{"id":"a:2:8472:3082-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2556-0:446:1700":{"id":"b:2:2556-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2556-0:127:1707":{"id":"b:2:2556-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[318,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2597:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:202:1981":{"id":"0:202:1981","crate_id":0,"name":"lock","span":{"filename":"src/raw_mutex.rs","begin":[66,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:261:1711":{"id":"b:2:2546-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:3328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:275:2488":{"id":"0:275:2488","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/raw_rwlock.rs","begin":[156,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12241:32061":{"id":"2:12241:32061","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12239:32060"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12350:32082":{"id":"2:12350:32082","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:3082-0:157:1709":{"id":"a:2:8472:3082-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[517,0],"end":[521,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1721":{"id":"0:0:1721","crate_id":0,"name":"parking_lot","span":{"filename":"src/lib.rs","begin":[8,0],"end":[56,19]},"visibility":"public","docs":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n`Once` that are smaller, faster and more flexible than those in the Rust\nstandard library. It also provides a `ReentrantMutex` type.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:413-0:31:1699","0:414-0:446:1700","0:416-0:85:1701","0:417-0:83:1702","0:418-0:87:1703","0:419-0:90:1704","0:421-0:98:1705","0:422-0:103:1706","0:423-0:96:166","0:424-0:100:167","0:426-0:127:1707","0:427-0:460:1708","0:428-0:157:1709","0:429-0:197:1710","0:430-0:261:1711","0:432-0:365:1712","0:433-0:370:1713","0:434-0:357:1714","0:435-0:363:1715","0:436-0:367:1716","0:438-0:378:1717","0:439-0:386:1718","0:440-0:389:1719","0:441-0:376:219","0:442-0:380:220","0:443-0:392:1720","0:444-0:383:221","0:445-20:0:1696"],"is_stripped":false}}},"b:2:2556-0:31:1699":{"id":"b:2:2556-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12254:27064":{"id":"2:12254:27064","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12248:2550":{"id":"2:12248:2550","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:446:1700":{"id":"b:2:2256-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:2586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2755:223-0:357:1714":{"id":"a:2:2755:223-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:164:2236":{"id":"0:164:2236","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8471:3083-0:157:1709":{"id":"a:2:8471:3083-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:3083","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2556-0:261:1711":{"id":"b:2:2556-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[191,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockDowngrade","id":"20:450:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:2495"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5514:32742":{"id":"5:5514:32742","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[36,0],"end":[58,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:2315","0:126:2318"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:471:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:39:1933":{"id":"0:39:1933","crate_id":0,"name":"notify_all","span":{"filename":"src/condvar.rs","begin":[187,4],"end":[195,5]},"visibility":"public","docs":"Wakes up all blocked threads on this condvar.\n\nReturns the number of threads woken up.\n\nThis method will ensure that any current waiters on the condition\nvariable are awoken. Calls to `notify_all()` are not buffered in any\nway.\n\nTo wake up only one thread, see `notify_one()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8471:3083-0:460:1708":{"id":"a:2:8471:3083-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:3083","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:289:2503":{"id":"0:289:2503","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[272,4],"end":[278,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[15,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"GetThreadId","id":"20:214:2561","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:360:2214","0:361:2563"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12239:32060":{"id":"2:12239:32060","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:32744":{"id":"5:5525:32744","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2408":{"id":"0:207:2408","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_mutex.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:685":{"id":"0:479:685","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:1701":{"id":"0:85:1701","crate_id":0,"name":"const_fair_mutex","span":{"filename":"src/fair_mutex.rs","begin":[83,0],"end":[85,1]},"visibility":"public","docs":"Creates a new fair mutex in an unlocked state ready for use.\n\nThis allows creating a fair mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"FairMutex","id":"0:83:1702","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[510,0],"end":[515,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2597:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2812:2997-0:31:1699":{"id":"a:2:2812:2997-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2765:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2561-0:127:1707":{"id":"b:2:2561-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2253-0:157:1709":{"id":"b:2:2253-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2550-0:197:1710":{"id":"b:2:2550-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:444-0:383:221":{"id":"0:444-0:383:221","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockWriteGuard","name":"RwLockWriteGuard","id":"0:383:221","glob":false}}},"a:2:2755:223-0:157:1709":{"id":"a:2:2755:223-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2755:223-0:31:1699":{"id":"a:2:2755:223-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:380:220":{"id":"0:380:220","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[100,0],"end":[100,78]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockReadGuard","id":"20:873:220","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12252:27063":{"id":"2:12252:27063","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12267:30280":{"id":"2:12267:30280","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44008:6118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:2412":{"id":"0:213:2412","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_mutex.rs","begin":[163,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44490:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:3082-0:446:1700":{"id":"a:2:8472:3082-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:83:1702":{"id":"0:83:1702","crate_id":0,"name":"FairMutex","span":{"filename":"src/fair_mutex.rs","begin":[78,0],"end":[78,57]},"visibility":"public","docs":"A mutual exclusive primitive that is always fair, useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\nThe regular mutex provided by `parking_lot` uses eventual fairness\n(after some time it will default to the fair algorithm), but eventual\nfairness does not provide the same guarantees an always fair method would.\nFair mutexes are generally slower, but sometimes needed.\n\nIn a fair mutex the waiters form a queue, and the lock is always granted to\nthe next requester in the queue, in first-in first-out order. This ensures\nthat one thread cannot starve others by quickly re-acquiring the lock after\nreleasing it.\n\nA fair mutex may not be interesting if threads have different priorities (this is known as\npriority inversion).\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `FairMutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n\n# Examples\n\n```\nuse parking_lot::FairMutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(FairMutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:467:2311":{"id":"0:467:2311","crate_id":0,"name":"Done","span":{"filename":"src/once.rs","begin":[33,4],"end":[33,8]},"visibility":"default","docs":"A closure has completed successfully.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2561-0:460:1708":{"id":"b:2:2561-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[52,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:171:122","0:172:1845","0:173:2411","0:174:2412"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[141,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:210:122","0:211:1845","0:212:2411","0:213:2412"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:293:2507":{"id":"0:293:2507","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/raw_rwlock.rs","begin":[309,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2497","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:1981":{"id":"0:163:1981","crate_id":0,"name":"lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:122":{"id":"0:282:122","crate_id":0,"name":"Duration","span":{"filename":"src/raw_rwlock.rs","begin":[206,4],"end":[206,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44490:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:132:1428":{"id":"0:132:1428","crate_id":0,"name":"state","span":{"filename":"src/once.rs","begin":[94,4],"end":[105,5]},"visibility":"public","docs":"Returns the current state of this `Once`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:2478":{"id":"0:269:2478","crate_id":0,"name":"lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[107,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:2486":{"id":"0:273:2486","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[148,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:2515":{"id":"0:298:2515","crate_id":0,"name":"upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[367,4],"end":[376,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2552:711":{"id":"2:2552:711","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465:2309":{"id":"0:465:2309","crate_id":0,"name":"InProgress","span":{"filename":"src/once.rs","begin":[30,4],"end":[30,14]},"visibility":"default","docs":"A thread is currently executing a closure.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12358:25114":{"id":"2:12358:25114","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:261:1711":{"id":"b:2:2253-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:471:431":{"id":"0:471:431","crate_id":0,"name":"clone","span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2812:2997-0:127:1707":{"id":"a:2:2812:2997-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12360:32084":{"id":"2:12360:32084","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4523:32084"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44015:6301","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:460:1708":{"id":"b:2:2253-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12338:24928":{"id":"2:12338:24928","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12264:30293":{"id":"2:12264:30293","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12263:30289"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43999:6397","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:231-0:261:1711":{"id":"a:2:2772:231-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:434-0:357:1714":{"id":"0:434-0:357:1714","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,54],"end":[49,65]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::RawThreadId","name":"RawThreadId","id":"0:357:1714","glob":false}}},"b:2:2556-0:357:1714":{"id":"b:2:2556-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:438-0:378:1717":{"id":"0:438-0:378:1717","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::const_rwlock","name":"const_rwlock","id":"0:378:1717","glob":false}}},"2:12266:32065":{"id":"2:12266:32065","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43980:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:2409":{"id":"0:272:2409","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_rwlock.rs","begin":[142,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:428-0:157:1709":{"id":"0:428-0:157:1709","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_fair_mutex::RawFairMutex","name":"RawFairMutex","id":"0:157:1709","glob":false}}},"5:684:3395":{"id":"5:684:3395","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:2490":{"id":"0:277:2490","crate_id":0,"name":"bump_shared","span":{"filename":"src/raw_rwlock.rs","begin":[175,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:31:1699":{"id":"b:2:2550-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:271:2483":{"id":"0:271:2483","crate_id":0,"name":"unlock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[129,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:446:1700":{"id":"b:2:2550-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2550-0:157:1709":{"id":"b:2:2550-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2561-0:157:1709":{"id":"b:2:2561-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:283:1845":{"id":"0:283:1845","crate_id":0,"name":"Instant","span":{"filename":"src/raw_rwlock.rs","begin":[207,4],"end":[207,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9120:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:276:2489":{"id":"0:276:2489","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/raw_rwlock.rs","begin":[162,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:430-0:261:1711":{"id":"0:430-0:261:1711","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_rwlock::RawRwLock","name":"RawRwLock","id":"0:261:1711","glob":false}}},"2:2549:3328":{"id":"2:2549:3328","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2523:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:2408":{"id":"0:168:2408","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_fair_mutex.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:1705":{"id":"0:98:1705","crate_id":0,"name":"const_mutex","span":{"filename":"src/mutex.rs","begin":[92,0],"end":[94,1]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:96:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[397,0],"end":[425,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_upgradable"],"trait":{"name":"RawRwLockUpgradeFair","id":"20:471:2519","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:301:2520","0:302:2521"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12268:27104":{"id":"2:12268:27104","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2008":{"id":"0:62:2008","crate_id":0,"name":"wait_while_for","span":{"filename":"src/condvar.rs","begin":[496,4],"end":[507,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration. If the provided condition evaluates to `false`,\nthen the thread is no longer blocked and the operation is completed.\nIf the condition evaluates to `true`, then the thread is blocked again\nand waits for another notification before repeating this process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44490:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3000:1992","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:3082-0:197:1710":{"id":"a:2:8472:3082-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12256:32063":{"id":"2:12256:32063","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12041:1441","str::slice_mut_unchecked":"2:12257:32064","crate::ops::Index":"2:3052:2960"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12341:27107":{"id":"2:12341:27107","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:1845":{"id":"0:211:1845","crate_id":0,"name":"Instant","span":{"filename":"src/raw_mutex.rs","begin":[143,4],"end":[143,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9120:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2253-0:197:1710":{"id":"b:2:2253-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:34:960":{"id":"0:34:960","crate_id":0,"name":"new","span":{"filename":"src/condvar.rs","begin":[98,4],"end":[102,5]},"visibility":"public","docs":"Creates a new condition variable which is ready to be waited on and\nnotified.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12238:32059":{"id":"2:12238:32059","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:399":{"id":"0:133:399","crate_id":0,"name":"call_once","span":{"filename":"src/once.rs","begin":[157,4],"end":[167,5]},"visibility":"public","docs":"Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.\n\nThis method will block the calling thread if another initialization\nroutine is currently running.\n\nWhen this function returns, it is guaranteed that some initialization\nhas run and completed (it may not be the closure specified). It is also\nguaranteed that any memory writes performed by the executed closure can\nbe reliably observed by other threads at this point (there is a\nhappens-before relation between the closure and code executing after the\nreturn).\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\n// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g. write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\nfn get_cached_val() -> usize {\n    unsafe {\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\nfn expensive_computation() -> usize {\n    // ...\n# 2\n}\n```\n\n# Panics\n\nThe closure `f` will only be executed once if this is called\nconcurrently amongst many threads. If that closure panics, however, then\nit will *poison* this `Once` instance, causing all future invocations of\n`call_once` to also panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3003:2365","args":{"parenthesized":{"inputs":[],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3391-0:31:1699":{"id":"b:2:3391-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90:1704":{"id":"0:90:1704","crate_id":0,"name":"MappedFairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[101,0],"end":[101,87]},"visibility":"public","docs":"An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:849:1706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:264:2214":{"id":"0:264:2214","crate_id":0,"name":"INIT","span":{"filename":"src/raw_rwlock.rs","begin":[60,4],"end":[62,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:2546-0:446:1700":{"id":"b:2:2546-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:3328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:136:2376":{"id":"0:136:2376","crate_id":0,"name":"call_once_force","span":{"filename":"src/once.rs","begin":[179,4],"end":[191,5]},"visibility":"public","docs":"Performs the same function as `call_once` except ignores poisoning.\n\nIf this `Once` has been poisoned (some initialization panicked) then\nthis function will continue to attempt to call initialization functions\nuntil one of them doesn't panic.\n\nThe closure `f` is yielded a structure which can be used to query the\nstate of this `Once` (whether initialization has previously panicked or\nnot).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3003:2365","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[119,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:207:2408","0:208:2066"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:459:431":{"id":"0:459:431","crate_id":0,"name":"clone","span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:1711":{"id":"0:261:1711","crate_id":0,"name":"RawRwLock","span":{"filename":"src/raw_rwlock.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Raw reader-writer lock type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2772:231-0:261:1711","a:2:2755:223-0:261:1711","a:2:2812:2997-0:261:1711","a:2:8471:3083-0:261:1711","a:2:8472:3082-0:261:1711","b:2:2253-0:261:1711","b:2:2556-0:261:1711","b:2:2550-0:261:1711","b:2:2561-0:261:1711","b:2:2546-0:261:1711","b:2:2256-0:261:1711","b:2:3391-0:261:1711","0:306","0:291","0:288","0:281","0:263","0:274","0:294","0:303","0:279","0:300"]}}},"0:392:1720":{"id":"0:392:1720","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[126,0],"end":[126,98]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockUpgradableReadGuard","id":"20:889:1720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12260:6119":{"id":"2:12260:6119","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12035:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43686:6111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:2517":{"id":"0:299:2517","crate_id":0,"name":"try_upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[379,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:25111":{"id":"5:5528:25111","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12358:25114"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[294,0],"end":[320,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursiveTimed","id":"20:462:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:292:2506","0:293:2507"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:446:1700":{"id":"0:446:1700","crate_id":0,"name":"WaitTimeoutResult","span":{"filename":"src/condvar.rs","begin":[23,0],"end":[23,35]},"visibility":"public","docs":"A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:2772:231-0:446:1700","a:2:2755:223-0:446:1700","a:2:2812:2997-0:446:1700","a:2:8471:3083-0:446:1700","a:2:8472:3082-0:446:1700","b:2:2253-0:446:1700","b:2:2556-0:446:1700","b:2:2550-0:446:1700","b:2:2561-0:446:1700","b:2:2546-0:446:1700","b:2:2256-0:446:1700","b:2:3391-0:446:1700","b:5:680-0:446:1700","0:455","0:449","0:451","0:454","0:458","0:457","0:452"]}}},"b:2:2256-0:31:1699":{"id":"b:2:2256-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:2586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3391-0:460:1708":{"id":"b:2:3391-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2253-0:357:1714":{"id":"b:2:2253-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2812:2997-0:357:1714":{"id":"a:2:2812:2997-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:203:2236":{"id":"0:203:2236","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_mutex.rs","begin":[78,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1997":{"id":"0:56:1997","crate_id":0,"name":"wait_while","span":{"filename":"src/condvar.rs","begin":[425,4],"end":[431,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification. If the provided condition evaluates to `false`, then the\nthread is no longer blocked and the operation is completed. If the\ncondition evaluates to `true`, then the thread is blocked again and\nwaits for another notification before repeating this process.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3000:1992","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:2501":{"id":"0:287:2501","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/raw_rwlock.rs","begin":[253,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9120:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2755:223-0:261:1711":{"id":"a:2:2755:223-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:301:2520":{"id":"0:301:2520","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/raw_rwlock.rs","begin":[399,4],"end":[417,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12306:32068":{"id":"2:12306:32068","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[427,0],"end":[450,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeDowngrade","id":"20:474:2523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:304:2524","0:305:2525"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:367:1716":{"id":"0:367:1716","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[59,0],"end":[59,98]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutexGuard","id":"20:856:1716","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12294:32066":{"id":"2:12294:32066","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11937:14083","str::split":"2:12285:27094","prim@char":"1:12035:427","`DoubleEndedIterator`":"2:7388:121","str::rsplit_terminator":"2:12297:32067"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43766:6388","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:2528":{"id":"0:307:2528","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/raw_rwlock.rs","begin":[454,4],"end":[464,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9120:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:460:1708":{"id":"b:2:2546-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:3328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:365:1712":{"id":"0:365:1712","crate_id":0,"name":"const_reentrant_mutex","span":{"filename":"src/remutex.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.\n\nThis allows creating a reentrant mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:363:1715","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12291:27098":{"id":"2:12291:27098","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11937:14083","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::split":"2:12285:27094"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43734:6101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12335:32079":{"id":"2:12335:32079","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:2066":{"id":"0:208:2066","crate_id":0,"name":"bump","span":{"filename":"src/raw_mutex.rs","begin":[134,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3391-0:446:1700":{"id":"b:2:3391-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2766:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3393:1535":{"id":"2:3393:1535","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39599:6164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:458":{"id":"0:458","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:459:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[325,0],"end":[331,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12357:25113":{"id":"2:12357:25113","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12312:2873":{"id":"2:12312:2873","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11937:14083","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::rmatches":"2:12315:32070"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43920:6392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12236:832":{"id":"2:12236:832","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12035:427"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441-0:376:219":{"id":"0:441-0:376:219","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,65],"end":[53,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLock","name":"RwLock","id":"0:376:219","glob":false}}},"2:12263:30289":{"id":"2:12263:30289","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12264:30293"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43990:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12235":{"id":"2:12235","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12236:832","2:12237:2117","2:12238:32059","2:12239:32060","2:12241:32061","2:12244:26697","2:12245:32062","2:12246:320","2:12247:319","2:12248:2550","2:12250:2245","2:12252:27063","2:12254:27064","2:12256:32063","2:12257:32064","2:12258:27086","2:12259:27087","2:12260:6119","2:12261:6406","2:12262:6038","2:12263:30289","2:12264:30293","2:12265:30139","2:12266:32065","2:12267:30280","2:12268:27104","2:12271:27105","2:12274:27106","2:12277:3374","2:12281:3334","2:12285:27094","2:12288:27096","2:12291:27098","2:12294:32066","2:12297:32067","2:12300:27100","2:12303:27102","2:12306:32068","2:12309:32069","2:12312:2873","2:12315:32070","2:12318:32071","2:12321:32072","2:12324:32073","2:12326:32074","2:12328:32075","2:12330:32076","2:12331:32077","2:12332:32078","2:12335:32079","2:12338:24928","2:12341:27107","2:12344:32080","2:12347:32081","2:12350:32082","2:12353:32083","2:12355:25109","2:12356:27005","2:12357:25113","2:12358:25114","2:12359:25115","2:12360:32084","2:12362:8717","2:12363:32085"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8471:3083-0:127:1707":{"id":"a:2:8471:3083-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:3083","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5511:3235":{"id":"5:5511:3235","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12261:6406":{"id":"2:12261:6406","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12035:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43692:6386","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:197:1710":{"id":"b:2:2256-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:2586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:31:1699":{"id":"0:31:1699","crate_id":0,"name":"Condvar","span":{"filename":"src/condvar.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"A Condition Variable\n\nCondition variables represent the ability to block a thread such that it\nconsumes no CPU time while waiting for an event to occur. Condition\nvariables are typically associated with a boolean predicate (a condition)\nand a mutex. The predicate is always verified inside of the mutex before\ndetermining that thread must block.\n\nNote that this module places one additional restriction over the system\ncondition variables: each condvar can be used with only one mutex at a\ntime. Any attempt to use multiple mutexes on the same condition variable\nsimultaneously will result in a runtime panic. However it is possible to\nswitch to a different mutex if there are no threads currently waiting on\nthe condition variable.\n\n# Differences from the standard library `Condvar`\n\n- No spurious wakeups: A wait will only return a non-timeout result if it\n  was woken up by `notify_one` or `notify_all`.\n- `Condvar::notify_all` will only wake up a single thread, the rest are\n  requeued to wait for the `Mutex` to be unlocked by the thread that was\n  woken up.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `Condvar` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n\n# Examples\n\n```\nuse parking_lot::{Mutex, Condvar};\nuse std::sync::Arc;\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\n// Inside of our lock, spawn a new thread, and then wait for it to start\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock();\n    *started = true;\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock();\nif !*started {\n    cvar.wait(&mut started);\n}\n// Note that we used an if instead of a while loop above. This is only\n// possible because parking_lot's Condvar will never spuriously wake up.\n// This means that wait() will only return after notify_one or notify_all is\n// called.\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:33","a:2:2772:231-0:31:1699","a:2:2755:223-0:31:1699","a:2:2812:2997-0:31:1699","a:2:8471:3083-0:31:1699","a:2:8472:3082-0:31:1699","b:2:2253-0:31:1699","b:2:2556-0:31:1699","b:2:2550-0:31:1699","b:2:2561-0:31:1699","b:2:2546-0:31:1699","b:2:2256-0:31:1699","b:2:3391-0:31:1699","0:65","0:67"]}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2765:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:286:2500":{"id":"0:286:2500","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/raw_rwlock.rs","begin":[236,4],"end":[250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44490:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424-0:100:167":{"id":"0:424-0:100:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,60],"end":[43,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MutexGuard","name":"MutexGuard","id":"0:100:167","glob":false}}},"b:2:2546-0:31:1699":{"id":"b:2:2546-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:3328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2253-0:127:1707":{"id":"b:2:2253-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:445-20:0:1696":{"id":"0:445-20:0:1696","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[56,0],"end":[56,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"::lock_api","name":"lock_api","id":"20:0:1696","glob":false}}},"2:12330:32076":{"id":"2:12330:32076","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2560:1522":{"id":"2:2560:1522","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:2495":{"id":"0:280:2495","crate_id":0,"name":"downgrade","span":{"filename":"src/raw_rwlock.rs","begin":[193,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8471:3083-0:31:1699":{"id":"a:2:8471:3083-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:3083","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12344:32080":{"id":"2:12344:32080","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2561-0:446:1700":{"id":"b:2:2561-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:285:2499":{"id":"0:285:2499","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/raw_rwlock.rs","begin":[223,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2497","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:127:1707":{"id":"b:2:2550-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12257:32064":{"id":"2:12257:32064","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12041:1441","crate::ops::IndexMut":"2:3056:2961","str::slice_unchecked":"2:12256:32063"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:1710":{"id":"0:197:1710","crate_id":0,"name":"RawMutex","span":{"filename":"src/raw_mutex.rs","begin":[32,0],"end":[56,1]},"visibility":"public","docs":"Raw mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2772:231-0:197:1710","a:2:2755:223-0:197:1710","a:2:2812:2997-0:197:1710","a:2:8471:3083-0:197:1710","a:2:8472:3082-0:197:1710","b:2:2253-0:197:1710","b:2:2556-0:197:1710","b:2:2550-0:197:1710","b:2:2561-0:197:1710","b:2:2546-0:197:1710","b:2:2256-0:197:1710","b:2:3391-0:197:1710","0:206","0:209","0:199"]}}},"2:12328:32075":{"id":"2:12328:32075","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:231-0:127:1707":{"id":"a:2:2772:231-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2755:223-0:460:1708":{"id":"a:2:2755:223-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:35:1911":{"id":"0:35:1911","crate_id":0,"name":"notify_one","span":{"filename":"src/condvar.rs","begin":[128,4],"end":[136,5]},"visibility":"public","docs":"Wakes up one blocked thread on this condvar.\n\nReturns whether a thread was woken up.\n\nIf there is a blocked thread on this condition variable, then it will\nbe woken up from its call to `wait` or `wait_timeout`. Calls to\n`notify_one` are not buffered in any way.\n\nTo wake up all threads, see `notify_all()`.\n\n# Examples\n\n```\nuse parking_lot::Condvar;\n\nlet condvar = Condvar::new();\n\n// do something with condvar, share it with other threads\n\nif !condvar.notify_one() {\n    println!(\"Nobody was listening for this.\");\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2003":{"id":"0:59:2003","crate_id":0,"name":"wait_while_until","span":{"filename":"src/condvar.rs","begin":[461,4],"end":[472,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant. If the provided condition evaluates to\n`false`, then the thread is no longer blocked and the operation is\ncompleted. If the condition evaluates to `true`, then the thread is\nblocked again and waits for another notification before repeating\nthis process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9120:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3000:1992","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:305:2525":{"id":"0:305:2525","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[439,4],"end":[449,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:3082-0:357:1714":{"id":"a:2:8472:3082-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:296:2511":{"id":"0:296:2511","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[333,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12331:32077":{"id":"2:12331:32077","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:25109":{"id":"2:12355:25109","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[85,0],"end":[316,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:960","0:132:1428","0:133:399","0:136:2376"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:302:2521":{"id":"0:302:2521","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[420,4],"end":[424,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:25115":{"id":"2:12359:25115","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:460:1708":{"id":"b:2:2550-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:205:2409":{"id":"0:205:2409","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_mutex.rs","begin":[113,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:2504":{"id":"0:290:2504","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[281,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12285:27094":{"id":"2:12285:27094","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11937:14083","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::split_whitespace":"2:12263:30289","str::rsplit":"2:12291:27098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43716:6096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2322:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12303:27102":{"id":"2:12303:27102","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12035:427","str::splitn":"2:12300:27100","self::pattern":"2:11937:14083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43838:6104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12258:27086":{"id":"2:12258:27086","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12259:27087"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:2508":{"id":"0:295:2508","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[324,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8471:3083-0:197:1710":{"id":"a:2:8471:3083-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8471:3083","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[94,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:34:960","0:35:1911","0:39:1933","0:43:1949","0:45:1967","0:51:1986","0:56:1997","0:59:2003","0:62:2008"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2256-0:157:1709":{"id":"b:2:2256-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:2586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3391-0:197:1710":{"id":"b:2:3391-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2253-0:31:1699":{"id":"b:2:2253-0:31:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:416-0:85:1701":{"id":"0:416-0:85:1701","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,27],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::const_fair_mutex","name":"const_fair_mutex","id":"0:85:1701","glob":false}}},"2:12315:32070":{"id":"2:12315:32070","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11937:14083","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::matches":"2:12312:2873"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43938:6393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:2513":{"id":"0:297:2513","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[346,4],"end":[364,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12288:27096":{"id":"2:12288:27096","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11753:6098","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160":{"id":"0:160","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[14,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:161:2214","0:162:1695","0:163:1981","0:164:2236","0:165:1974","0:166:2409"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:421-0:98:1705":{"id":"0:421-0:98:1705","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::const_mutex","name":"const_mutex","id":"0:98:1705","glob":false}}},"2:12353:32083":{"id":"2:12353:32083","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11898:127","`FromStr`":"2:11897:3046"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11897:3046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11897:3046","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:8717":{"id":"2:12362:8717","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4524:8717"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44024:6048","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3391-0:127:1707":{"id":"b:2:3391-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2322:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:417-0:83:1702":{"id":"0:417-0:83:1702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,45],"end":[42,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutex","name":"FairMutex","id":"0:83:1702","glob":false}}},"a:2:8472:3082-0:261:1711":{"id":"a:2:8472:3082-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[40,0],"end":[50,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:2408","0:169:2066"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12300:27100":{"id":"2:12300:27100","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083","str::rsplitn":"2:12303:27102"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43820:6103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370:1713":{"id":"0:370:1713","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[68,0],"end":[69,70]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedReentrantMutexGuard","id":"20:865:1713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:5:680-0:446:1700":{"id":"b:5:680-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3393","5:683:3394","5:684:3395"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:201:1695":{"id":"0:201:1695","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_mutex.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:5529:25112":{"id":"5:5529:25112","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12359:25115"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12332:32078":{"id":"2:12332:32078","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11962:14080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8472:3082-0:127:1707":{"id":"a:2:8472:3082-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8472:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[25,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:1849"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2772:231-0:157:1709":{"id":"a:2:2772:231-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:389:1719":{"id":"0:389:1719","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[122,0],"end":[122,92]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockWriteGuard","id":"20:908:1719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:157:1709":{"id":"0:157:1709","crate_id":0,"name":"RawFairMutex","span":{"filename":"src/raw_fair_mutex.rs","begin":[12,0],"end":[12,34]},"visibility":"public","docs":"Raw fair mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2772:231-0:157:1709","a:2:2755:223-0:157:1709","a:2:2812:2997-0:157:1709","a:2:8471:3083-0:157:1709","a:2:8472:3082-0:157:1709","b:2:2253-0:157:1709","b:2:2556-0:157:1709","b:2:2550-0:157:1709","b:2:2561-0:157:1709","b:2:2546-0:157:1709","b:2:2256-0:157:1709","b:2:3391-0:157:1709","0:167","0:160","0:170"]}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:151:60":{"id":"0:151:60","crate_id":0,"name":"default","span":{"filename":"src/once.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:461:2305":{"id":"0:461:2305","crate_id":0,"name":"New","span":{"filename":"src/once.rs","begin":[24,4],"end":[24,7]},"visibility":"default","docs":"A closure has not been executed yet","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:476":{"id":"0:476","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2317:190","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:477:627"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:174:2412":{"id":"0:174:2412","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_fair_mutex.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:2410","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2755:223-0:127:1707":{"id":"a:2:2755:223-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12265:30139":{"id":"2:12265:30139","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43970:6394","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3391-0:157:1709":{"id":"b:2:3391-0:157:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2772:231-0:357:1714":{"id":"a:2:2772:231-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12363:32085":{"id":"2:12363:32085","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4521:32085"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44033:6300","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12281:3334":{"id":"2:12281:3334","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:446:1700":{"id":"b:2:2253-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2584"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:477:627":{"id":"0:477:627","crate_id":0,"name":"eq","span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:960":{"id":"0:131:960","crate_id":0,"name":"new","span":{"filename":"src/once.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a new `Once` value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:2409":{"id":"0:166:2409","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_fair_mutex.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[154,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_exclusive","bump_shared"],"trait":{"name":"RawRwLockFair","id":"20:445:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:275:2488","0:276:2489","0:277:2490","0:278:2492"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:87:1703":{"id":"0:87:1703","crate_id":0,"name":"FairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[92,0],"end":[92,75]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:841:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:157:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12297:32067":{"id":"2:12297:32067","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11937:14083","str::split":"2:12285:27094","prim@char":"1:12035:427","str::split_terminator":"2:12294:32066"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43784:6389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,31],"end":[22,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2767:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2772:231-0:446:1700":{"id":"a:2:2772:231-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:426-0:127:1707":{"id":"0:426-0:127:1707","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,21],"end":[44,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::Once","name":"Once","id":"0:127:1707","glob":false}}},"b:2:2561-0:197:1710":{"id":"b:2:2561-0:197:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2564:128","2:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2256-0:261:1711":{"id":"b:2:2256-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:2586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:171:122":{"id":"0:171:122","crate_id":0,"name":"Duration","span":{"filename":"src/raw_fair_mutex.rs","begin":[53,4],"end":[53,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"5:5527:8834":{"id":"5:5527:8834","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:479:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:169:2066":{"id":"0:169:2066","crate_id":0,"name":"bump","span":{"filename":"src/raw_fair_mutex.rs","begin":[47,4],"end":[49,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12326:32074":{"id":"2:12326:32074","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:32743":{"id":"5:5517:32743","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12324:32073":{"id":"2:12324:32073","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436-0:367:1716":{"id":"0:436-0:367:1716","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutexGuard","name":"ReentrantMutexGuard","id":"0:367:1716","glob":false}}},"a:2:2812:2997-0:261:1711":{"id":"a:2:2812:2997-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2812:2997-0:460:1708":{"id":"a:2:2812:2997-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2812:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:360:2214":{"id":"0:360:2214","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[16,4],"end":[16,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"RawThreadId"}}},"5:5526:32745":{"id":"5:5526:32745","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:3000","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3000","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:6012","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:429-0:197:1710":{"id":"0:429-0:197:1710","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[46,0],"end":[46,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_mutex::RawMutex","name":"RawMutex","id":"0:197:1710","glob":false}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[270,0],"end":[292,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursive","id":"20:459:2502","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:2503","0:290:2504"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:100:167":{"id":"0:100:167","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[101,0],"end":[101,67]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:841:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:153:685":{"id":"0:153:685","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[326,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:2481":{"id":"0:270:2481","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[116,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383:221":{"id":"0:383:221","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[104,0],"end":[104,80]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockWriteGuard","id":"20:881:221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:413-0:31:1699":{"id":"0:413-0:31:1699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,24],"end":[41,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::Condvar","name":"Condvar","id":"0:31:1699","glob":false}}},"0:414-0:446:1700":{"id":"0:414-0:446:1700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,33],"end":[41,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::WaitTimeoutResult","name":"WaitTimeoutResult","id":"0:446:1700","glob":false}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,9],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2767:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:419-0:90:1704":{"id":"0:419-0:90:1704","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,72],"end":[42,92]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::MappedFairMutexGuard","name":"MappedFairMutexGuard","id":"0:90:1704","glob":false}}},"0:66:60":{"id":"0:66:60","crate_id":0,"name":"default","span":{"filename":"src/condvar.rs","begin":[512,4],"end":[514,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12250:2245":{"id":"2:12250:2245","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2564:128":{"id":"2:2564:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32257:8281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2565:1521":{"id":"2:2565:1521","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:357:1714":{"id":"b:2:2550-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2256-0:357:1714":{"id":"b:2:2256-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:2586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:460:1708":{"id":"b:5:680-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3393","5:683:3394","5:684:3395"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2256-0:127:1707":{"id":"b:2:2256-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:2586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:433-0:370:1713":{"id":"0:433-0:370:1713","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,27],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::MappedReentrantMutexGuard","name":"MappedReentrantMutexGuard","id":"0:370:1713","glob":false}}},"5:5510:32741":{"id":"5:5510:32741","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3000","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:6012","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:3000","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:6012","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2559:128":{"id":"2:2559:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2766:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199":{"id":"0:199","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[58,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:200:2214","0:201:1695","0:202:1981","0:203:2236","0:204:1974","0:205:2409"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2556-0:460:1708":{"id":"b:2:2556-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2559:128","2:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:267:2474":{"id":"0:267:2474","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[80,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:127:1707":{"id":"b:2:2546-0:127:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:3328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[322,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgrade","id":"20:465:2452","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:2508","0:296:2511","0:297:2513","0:298:2515","0:299:2517"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:212:2411":{"id":"0:212:2411","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_mutex.rs","begin":[146,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9120:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3391-0:261:1711":{"id":"b:2:3391-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2755:223-0:446:1700":{"id":"a:2:2755:223-0:446:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2550-0:261:1711":{"id":"b:2:2550-0:261:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12356:27005":{"id":"2:12356:27005","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39786:26989","Self::is_ascii":"2:12355:25109"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39786:26989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:27106":{"id":"2:12274:27106","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460:1708":{"id":"0:460:1708","crate_id":0,"name":"OnceState","span":{"filename":"src/once.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"Current state of a `Once`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:461:2305","0:463:2307","0:465:2309","0:467:2311"],"impls":["0:124","a:2:2772:231-0:460:1708","a:2:2755:223-0:460:1708","a:2:2812:2997-0:460:1708","a:2:8471:3083-0:460:1708","a:2:8472:3082-0:460:1708","b:2:2253-0:460:1708","b:2:2556-0:460:1708","b:2:2550-0:460:1708","b:2:2561-0:460:1708","b:2:2546-0:460:1708","b:2:2256-0:460:1708","b:2:3391-0:460:1708","b:5:680-0:460:1708","0:473","0:470","0:478","0:469","0:475","0:472","0:476"]}}},"0:43:1949":{"id":"0:43:1949","crate_id":0,"name":"wait","span":{"filename":"src/condvar.rs","begin":[255,4],"end":[257,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:1849":{"id":"0:30:1849","crate_id":0,"name":"timed_out","span":{"filename":"src/condvar.rs","begin":[28,4],"end":[30,5]},"visibility":"public","docs":"Returns whether the wait was known to have timed out.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:231-0:460:1708":{"id":"a:2:2772:231-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2256-0:460:1708":{"id":"b:2:2256-0:460:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:2586"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:173:2411":{"id":"0:173:2411","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_fair_mutex.rs","begin":[57,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:2410","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[452,0],"end":[504,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeTimed","id":"20:477:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:307:2528","0:308:2529","0:309:2530","0:310:2531"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:292:2506":{"id":"0:292:2506","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/raw_rwlock.rs","begin":[296,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2497","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284:2498":{"id":"0:284:2498","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/raw_rwlock.rs","begin":[210,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2497","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[205,0],"end":[268,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockTimed","id":"20:452:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:122","0:283:1845","0:284:2498","0:285:2499","0:286:2500","0:287:2501"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:439-0:386:1718":{"id":"0:439-0:386:1718","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,18],"end":[53,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockReadGuard","name":"MappedRwLockReadGuard","id":"0:386:1718","glob":false}}},"2:12237:2117":{"id":"2:12237:2117","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12245:32062":{"id":"2:12245:32062","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12309:32069":{"id":"2:12309:32069","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:14081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:1695":{"id":"0:265:1695","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_rwlock.rs","begin":[64,4],"end":[64,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:1698","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:422-0:103:1706":{"id":"0:422-0:103:1706","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,35],"end":[43,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MappedMutexGuard","name":"MappedMutexGuard","id":"0:103:1706","glob":false}}},"0:432-0:365:1712":{"id":"0:432-0:365:1712","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,4],"end":[49,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::const_reentrant_mutex","name":"const_reentrant_mutex","id":"0:365:1712","glob":false}}},"0:310:2531":{"id":"0:310:2531","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/raw_rwlock.rs","begin":[493,4],"end":[503,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44490:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:357:1714":{"id":"0:357:1714","crate_id":0,"name":"RawThreadId","span":{"filename":"src/remutex.rs","begin":[13,0],"end":[13,23]},"visibility":"public","docs":"Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:2772:231-0:357:1714","a:2:2755:223-0:357:1714","a:2:2812:2997-0:357:1714","a:2:8471:3083-0:357:1714","a:2:8472:3082-0:357:1714","b:2:2253-0:357:1714","b:2:2556-0:357:1714","b:2:2550-0:357:1714","b:2:2561-0:357:1714","b:2:2546-0:357:1714","b:2:2256-0:357:1714","b:2:3391-0:357:1714","0:359"]}}},"2:2258:2586":{"id":"2:2258:2586","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3391-0:357:1714":{"id":"b:2:3391-0:357:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2762:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:165:1974":{"id":"0:165:1974","crate_id":0,"name":"unlock","span":{"filename":"src/raw_fair_mutex.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:122":{"id":"0:210:122","crate_id":0,"name":"Duration","span":{"filename":"src/raw_mutex.rs","begin":[142,4],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44490:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:127:1707":{"id":"0:127:1707","crate_id":0,"name":"Once","span":{"filename":"src/once.rs","begin":[83,0],"end":[83,26]},"visibility":"public","docs":"A synchronization primitive which can be used to run a one-time\ninitialization. Useful for one-time initialization for globals, FFI or\nrelated functionality.\n\n# Differences from the standard library `Once`\n\n- Only requires 1 byte of space, instead of 1 word.\n- Not required to be `'static`.\n- Relaxed memory barriers in the fast path, which can significantly improve\n  performance on some architectures.\n- Efficient handling of micro-contention using adaptive spinning.\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic START: Once = Once::new();\n\nSTART.call_once(|| {\n    // run initialization here\n});\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:130","a:2:2772:231-0:127:1707","a:2:2755:223-0:127:1707","a:2:2812:2997-0:127:1707","a:2:8471:3083-0:127:1707","a:2:8472:3082-0:127:1707","b:2:2253-0:127:1707","b:2:2556-0:127:1707","b:2:2550-0:127:1707","b:2:2561-0:127:1707","b:2:2546-0:127:1707","b:2:2256-0:127:1707","b:2:3391-0:127:1707","0:152","0:150"]}}},"0:435-0:363:1715":{"id":"0:435-0:363:1715","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,67],"end":[49,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutex","name":"ReentrantMutex","id":"0:363:1715","glob":false}}},"2:12262:6038":{"id":"2:12262:6038","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43702:4256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12277:3374":{"id":"2:12277:3374","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12035:427","self::pattern":"2:11937:14083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:2035:6013":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"25:4522:7599":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12997:4868":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14163:5193":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:32318:6158":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"22:46:4003":{"crate_id":22,"path":["parking_lot_core","parking_lot","ThreadData"],"kind":"struct"},"2:48182:6539":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:40303:6303":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:8931:8922":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:2883:2949":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:22546:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:4500:8876":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:9037:6719":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13554:5031":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:21618:8942":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:1814:6557":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:2864:5366":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:8157:6668":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"25:4444:7562":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:7359:2999":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10603:4483":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"25:5072:7822":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13868:5118":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:8902:6711":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:4986:5421":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7492:5746":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:10021:8809":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"25:1707:7451":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:43582:6377":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:2839:2939":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7884:20859":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:40549:6055":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:123:14527":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:10166:6726":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:7694:5387":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:39419:2962":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:44439:8378":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:30503:3421":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7544:5751":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"20:8:1698":{"crate_id":20,"path":["lock_api","GuardNoSend"],"kind":"struct"},"2:22202:30735":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:8825:20910":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2477:8809":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2772:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"11:1826:3994":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:40623:6325":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:14173:5198":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:9102:4250":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:9070:4384":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:11897:3046":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:7599:8225":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:7717:8722":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6569:5377":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:3228:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:3600:5396":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4463:7568":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:9032:6718":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:1918:3427":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:14056:5168":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:7540:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7006:5653":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10227:4443":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:6615:1716":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:6268:33616":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6915:5380":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:7337:6032":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:12041:1441":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:45981:6441":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:9175:3225":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:3565:4280":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5384:20846":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:8195:5825":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5979:7967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:13259:4913":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:0:837":{"crate_id":6,"path":["libc"],"kind":"module"},"16:5049:5423":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:12059:1159":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:2898:2953":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12671:4511":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7768:5376":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"20:214:2561":{"crate_id":20,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"11:0:2770":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:434:4263":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3939:8846":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:8765:20908":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:4003:8850":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:3744:6578":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2353:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:10929:4541":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:798:5921":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"11:403:33591":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:40601:6063":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:500:7259":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:671:4230":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:35:4022":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:531:2291":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:48065:6532":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12750:4815":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8231:6394":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:5673:5374":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:2933:19987":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:8659:20893":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13244:4909":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:878:4034":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:9377:3311":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:10974:25297":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:1426:3775":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:1527:7334":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"25:5791:7869":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:4743:8861":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"22:252:2453":{"crate_id":22,"path":["parking_lot_core","parking_lot","FilterOp"],"kind":"enum"},"2:10310:6099":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12024:4673":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11547:4601":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"25:1679:7438":{"crate_id":25,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:6893:5637":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10547:4478":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:22073:8370":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:919:5918":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:12001:8452":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9921:4413":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:9711:33618":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"25:4467:7569":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"25:122:14527":{"crate_id":25,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:11623:6613":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:6720:8106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13055:4878":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:2186:33596":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:7067:5663":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:1558:3339":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:2243:8368":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4833:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:0:2775":{"crate_id":17,"path":["object"],"kind":"module"},"2:40489:6314":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:12775:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:574:4201":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13792:5101":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:4590:14133":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:7911:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12043:4678":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10962:4543":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:43716:6096":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12172:4699":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:41706:6580":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"25:4936:7761":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:23323:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:2150:20974":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"21:17:4009":{"crate_id":21,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"16:2548:5353":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:3669:4026":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:2722:5360":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:1838:5937":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6332:5369":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:2365:8794":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:7854:4332":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8989:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:2520:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10456:4466":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:44151:6407":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11872:4637":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:9381:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4587:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"13:110:33598":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"25:4426:7554":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6456:5565":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"11:657:3339":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:4703:8902":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:1464:5919":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:4640:8089":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:2997:2087":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11761:4618":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:3223:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:43884:6391":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13567:5038":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12111:4688":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4787:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10370:4453":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:3065:4288":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:723:5919":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:20826:31984":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:1776:6555":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:8926:20913":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:44632:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11597:6749":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"11:2194:8282":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:8794:20909":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:3000:1992":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:9829:4091":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:43766:6388":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:2596:5355":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:6076:4112":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:7474:6041":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:3183:33552":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"25:1567:7362":{"crate_id":25,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13274:4578":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14478:5299":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:8285:6580":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:39560:2963":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:3253:30714":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:7278:8193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:2618:5356":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"25:7562:8216":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:40610:6064":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:6688:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:2969:19988":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:2670:5358":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:62:14472":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:40189:6048":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"25:4798:7689":{"crate_id":25,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:6200:6603":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:11173:21040":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:1011:4026":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11086:4554":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:4745:8863":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:12033:378":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"25:1555:7354":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6386:5559":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:40658:2552":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13693:5080":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"23:362:24900":{"crate_id":23,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"2:45818:6435":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:48025:6528":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:149:4013":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:40826:6070":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:8839:6708":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:10766:8387":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"22:298:2297":{"crate_id":22,"path":["parking_lot_core","spinwait","SpinWait"],"kind":"struct"},"2:43027:6357":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:2595:6564":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:10087:6557":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:30525:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:2893:2951":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:46775:6481":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:2824:2938":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:40682:6328":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:10348:6100":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:6944:33612":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:7575:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6705:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:2767:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"25:6042:7990":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:12738:4100":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10637:4488":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:46373:6458":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3504:3308":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"18:531:4205":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:40812:6331":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11215:4567":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:9945:4417":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:1839:6558":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:1892:6559":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"25:5834:7884":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:5568:8918":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:8825:6707":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:22645:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:6318:5552":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:547:7291":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:2918:2957":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"25:6703:8101":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:3315:5394":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:22113:3047":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:41023:6073":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"23:57:3994":{"crate_id":23,"path":["smallvec","Drain"],"kind":"struct"},"1:8243:6678":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:3888:5400":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:43494:6369":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:7388:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"25:4387:7534":{"crate_id":25,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:11541:6579":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:5088:5424":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:46349:6457":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:43019:6356":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:4985:4048":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:2209:4276":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11535:4600":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:10575:4480":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:4436:7556":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:2690:7105":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:11343:6609":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:2876:2952":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:3419:4048":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:41741:6088":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:11124:4557":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:5975:14446":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"25:1694:7447":{"crate_id":25,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:40204:6294":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5760:20848":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:11815:4625":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:10036:4424":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:41604:6085":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10186:4437":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:1921:8774":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:40633:6326":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:841:167":{"crate_id":20,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"16:2644:5357":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"25:4971:7778":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:47225:6488":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:2130:19911":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:3234:2967":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13174:4901":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:2982:1843":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:6821:14180":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13802:5102":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4794:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:653:14881":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:8148:4245":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"25:4434:7556":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"15:306:19942":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"25:1909:15872":{"crate_id":25,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:554:7294":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:46105:6446":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:14469:5297":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:10383:6101":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"11:1538:5936":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:40246:6298":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11281:4575":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"25:4399:7539":{"crate_id":25,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:41942:3774":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:21834:8930":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:1523:6011":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:7552:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:10031:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12846:4829":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:44435:8377":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:6165:4083":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:12598:4794":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:7558:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:6844:5631":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:44328:6420":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11639:4281":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"23:349:8229":{"crate_id":23,"path":["smallvec","ConstNonNull"],"kind":"struct"},"16:3232:5336":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"25:6686:8096":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12293:4732":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:7272:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"0:0:1721":{"crate_id":0,"path":["parking_lot"],"kind":"module"},"16:7651:5756":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4848:7706":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:9375:3310":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8970:1700":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:22186:30718":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:11679:6115":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:8167:5823":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"25:586:7312":{"crate_id":25,"path":["libc","unix","servent"],"kind":"struct"},"1:2363:3397":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:7862:5773":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13685:5079":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"22:284:2454":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkToken"],"kind":"struct"},"1:638:6549":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"20:217:2927":{"crate_id":20,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"6:4781:7681":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:8303:6683":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"13:0:2765":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:881:5920":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4824:7696":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"25:1498:7323":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:9115:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2755:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:7438:4056":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:22843:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:2141:6015":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4638:8087":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"18:699:4234":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:1818:3774":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"25:7597:8225":{"crate_id":25,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:940:5924":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"25:4885:7725":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:1733:3425":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:7546:8213":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6726:8107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:48106:6535":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:4234:3774":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:44348:6122":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:41823:3775":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"23:343:24899":{"crate_id":23,"path":["smallvec","ToSmallVec"],"kind":"trait"},"2:43066:6366":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:41037:1707":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6036:7988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:44315:6416":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:9896:20929":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:1928:670":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:929:8734":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:14090:5176":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:6168:4116":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:3305:6573":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:7919:6627":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"25:4454:7565":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:43270:6094":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:10561:4479":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"25:594:7317":{"crate_id":25,"path":["libc","unix","protoent"],"kind":"struct"},"1:11520:6578":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:43838:6104":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:3391:6332":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2910:2955":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:7805:3777":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:805:8734":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4862:7714":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:41899:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"20:482:219":{"crate_id":20,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"18:80:24871":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:10432:6706":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:3217:33551":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:9780:4401":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"20:465:2452":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"2:4239:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8010:6630":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:1673:7437":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:14308:5251":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:8319:6685":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:11173:28858":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:47683:6521":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7792:20858":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"9:507:5994":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:5384:6591":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"25:7515:8206":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:2012:4269":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:6226:5530":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:1681:7438":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:7396:30747":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8877:3339":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:1980:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:47885:6524":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:43624:6381":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:8861:3774":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:9373:3309":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:9933:4416":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:7600:4124":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"25:4372:7527":{"crate_id":25,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:3264:6570":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:14448:5291":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14118:5183":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:5622:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:41958:3339":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:9207:4253":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:44243:6121":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:12008:14089":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:22089:6133":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6721:20853":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:21265:8929":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40232:6297":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:2216:2650":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:43543:6375":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:44216:6410":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:2305:19986":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:11687:20920":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"25:4877:1022":{"crate_id":25,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"20:87:4197":{"crate_id":20,"path":["lock_api","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:494:7258":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:14134:5186":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"25:651:14881":{"crate_id":25,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:30703:30751":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:22513:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:3465:6575":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:2817:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:21014:3405":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"4:0:2766":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:1582:5939":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:7523:8207":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:43532:6374":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"11:365:4020":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:42851:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:46297:6455":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"14:31:5910":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9852:20928":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:4955:7767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"22:211:1841":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkResult"],"kind":"struct"},"6:6671:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:1733:7460":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:8594:20895":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"25:4942:7764":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:7350:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:42513:3309":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"22:230:1840":{"crate_id":22,"path":["parking_lot_core","parking_lot","RequeueOp"],"kind":"enum"},"17:11226:4571":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:7463:6040":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:2914:2956":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:3266:6571":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:2406:2782":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:48129:6536":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11337:21041":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:12050:762":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"25:6026:7986":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11062:4552":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:4818:7695":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"9:450:19839":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1638:7412":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:21263:8809":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"7:79:19832":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"14:215:5913":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:7609:8227":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:4007:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:12576:4793":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:44748:6429":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:6079:4048":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:8579:6091":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14068:5171":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"25:4648:7628":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"25:4541:7609":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"25:5847:7893":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:9983:6342":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:4059:8855":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:48054:6531":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:9041:685":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"22:82:1692":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock"],"kind":"module"},"25:4768:7673":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:3224:6568":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40530:6319":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13202:4905":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"25:4516:7596":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:43674:6385":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4917:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:43048:6361":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"25:4418:7552":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:6869:30600":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:6425:5563":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:41046:6075":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"15:288:19941":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11910:4652":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:3213:2965":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10316:4450":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:10811:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:4949:5420":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3056:2961":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11788:4619":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11661:4607":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11367:4585":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"25:4746:7662":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5836:7884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:5612:5375":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:14499:5302":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:504:4264":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"25:1511:7329":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:8713:20907":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4895:7730":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"25:5066:7820":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13113:4887":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"25:4289:7466":{"crate_id":25,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:2201:6032":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:5831:2995":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:14536:5309":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:3305:2973":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:7318:5697":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:11050:4130":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4606:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"25:4870:7720":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:44305:6412":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:44455:8382":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10383:4454":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5805:7873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:2166:3405":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:30597:30753":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:12056:1540":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:9521:4395":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:644:4201":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:10962:6599":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:6531:5575":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:13071:4879":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4291:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:4641:5411":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:7015:5656":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7545:4063":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:9287:3860":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:12373:4737":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:12911:4859":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:46517:6462":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:4032:4026":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:43522:6373":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:43938:6393":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9059:25305":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:860:3339":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14013:5153":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10698:4499":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:1138:32057":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10628:4487":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"11:986:5928":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"25:7538:8212":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6171:8036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:40440:6310":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:41891:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:904:4059":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:1696:7447":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:5612:4001":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"25:561:7299":{"crate_id":25,"path":["libc","unix","linger"],"kind":"struct"},"16:4862:5417":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:4967:3071":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:6560:4015":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:2526:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"20:20:1710":{"crate_id":20,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"16:4806:5415":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4401:7539":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:11718:6117":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:46003:6442":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5987:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:4240:6581":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:21722:31789":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:6130:8010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:3049:19989":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:1603:7383":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:2180:8279":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:5759:2989":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:40430:4077":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:13422:4925":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8464:6361":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:9985:4421":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:39592:2966":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13922:5131":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:2496:6563":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4949:7766":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5829:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:44706:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:609:4218":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11845:4629":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13546:5028":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:1467:2119":{"crate_id":2,"path":["core","mem"],"kind":"module"},"25:5049:7816":{"crate_id":25,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:6558:3339":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:2834:2940":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:1821:3029":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:2380:5346":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10023:4399":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:14355:5263":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:46395:6459":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:14401:5277":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"20:856:1716":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"25:5875:7905":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13906:5127":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"25:4504:7590":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:915:5917":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13723:5086":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"22:192:1839":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkResult"],"kind":"enum"},"6:5890:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:4745:5413":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:12830:8735":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"11:1845:5938":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:9488:33624":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:3389:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:40672:6068":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:21219:8927":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"11:2049:5928":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"11:817:5924":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:40256:6299":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:285:8361":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10478:4471":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:11056:4131":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:3232:4277":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"25:6134:8011":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:41840:3079":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:42226:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"25:4727:7654":{"crate_id":25,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"25:1661:7431":{"crate_id":25,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:538:4208":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:41755:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:6136:8011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"25:4302:7475":{"crate_id":25,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6361:5556":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"20:889:1720":{"crate_id":20,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"1:3989:8848":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:8292:8386":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:42384:2900":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"22:270:2413":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkToken"],"kind":"struct"},"5:5366:14073":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:21951:6130":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13101:4885":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:14269:5236":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:5967:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:2810:5364":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"20:881:221":{"crate_id":20,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:3441:4279":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:1761:624":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:2450:5349":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11389:4590":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:47573:6520":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:4417:5404":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"23:0:2928":{"crate_id":23,"path":["smallvec"],"kind":"module"},"17:10366:4452":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:10468:4470":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:1561:3994":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:44443:8379":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:4392:6583":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:12049:761":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:11310:6605":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:3348:8830":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:10490:6105":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:0:1433":{"crate_id":1,"path":["std"],"kind":"module"},"20:450:2494":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"2:2820:3305":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:4973:7778":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:32257:8281":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:3003:2365":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10916:4539":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:30509:3670":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:46887:6483":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:564:4210":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:5503:6599":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:4160:8870":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:12048:760":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:9002:24936":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:3330:4059":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:10789:6741":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:3741:6577":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:22810:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:5565:7997":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6600:20852":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:2223:33157":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:5994:7969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:48144:6537":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12225:4712":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:7349:8733":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:44642:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12970:4865":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6499:5389":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12765:4818":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"25:4953:7767":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:40284:6301":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:2472:5350":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10750:4504":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:10271:6098":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:46651:6465":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:6008:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"25:4494:7583":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:43443:6368":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11111:4556":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:6834:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:3052:2960":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"25:6013:7982":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:44451:8381":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:20811:31983":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:11937:14083":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:12959:4864":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:6346:5554":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:8504:8913":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"25:6866:8184":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2530:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:2993:2059":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"25:7293:8202":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5863:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:22238:3049":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12531:4783":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:4320:6582":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:4719:5412":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11719:20921":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:47431:6519":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:11984:6755":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"25:4548:7611":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:1544:4048":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"25:4816:7695":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4754:7664":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:39450:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11951:4656":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12876:4848":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:42187:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"25:1593:7378":{"crate_id":25,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:41950:3775":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:14156:5191":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:12036:1560":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:850:3775":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:7128:6721":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10494:4473":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:12888:4850":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:8883:6600":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:3032:5391":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"25:1601:7383":{"crate_id":25,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6028:7986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:2829:2943":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:9172:4252":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13778:5098":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:30539:30752":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:8807:6706":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12945:4862":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:5131:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:6601:1715":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"14:160:5910":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"25:4614:7625":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12123:4689":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"25:572:7304":{"crate_id":25,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7245:3339":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10012:4398":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12305:4735":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:2406:5347":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:42506:3310":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:20964:8933":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:21369:8928":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:13897:5126":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:7346:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:5629:4110":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:502:2057":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"25:6848:8181":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:43266:8376":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"25:4779:7681":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12007:4671":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"25:4533:7604":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:39786:26989":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:20781:31786":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:12698:4808":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11407:20917":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"25:4326:7493":{"crate_id":25,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:0:2767":{"crate_id":24,"path":["cfg_if"],"kind":"module"},"6:5793:7869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10714:4501":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"23:163:3997":{"crate_id":23,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"17:9086:4385":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:10747:6735":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:14296:5248":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:4394:2923":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"25:4481:7577":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7708:5388":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"11:1027:19916":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:12054:1542":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11181:3010":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"11:1831:4059":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"9:330:8285":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:2049:6014":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"25:6803:8159":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:9812:4090":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:923:5921":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:7663:3214":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:46965:6484":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11971:4666":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:41967:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:47041:6486":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:48007:6527":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:10440:4460":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"11:793:5934":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:13228:4907":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"25:6623:8076":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:4527:5407":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:12052:1544":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"18:719:4240":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:782:4029":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:14346:5261":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12724:4811":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4475:7572":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6376:20851":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:4421:3025":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6156:5508":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:43036:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"25:6724:8107":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:97:8360":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:9045:6721":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:12039:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:41564:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:5575:6058":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6696:5604":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:41061:4085":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:7534:5384":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6415:5562":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:910:5934":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:11479:6577":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:636:4223":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:40502:6315":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:46470:6461":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4374:7527":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4626:7626":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:30279:3045":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2922:2958":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:2574:5354":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:11373:6612":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:568:7302":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4524:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:10776:6624":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"11:1517:5935":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:41873:3080":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:7182:6012":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5799:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:21613:8934":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:32304:6157":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:5696:20847":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:12533:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"9:0:2768":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:1118:32046":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:9617:33620":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:7743:6619":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"25:118:14526":{"crate_id":25,"path":["libc","unix","FILE"],"kind":"enum"},"2:39538:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:46058:6445":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4984:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:6744:8117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:1121:5933":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:6649:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"25:553:7294":{"crate_id":25,"path":["libc","unix","winsize"],"kind":"struct"},"1:11385:8390":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:2428:5348":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"25:7521:8207":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:4002:3994":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5015:7794":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:7935:6013":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:8915:8923":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:12006:8724":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"25:4378:7529":{"crate_id":25,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"23:330:4001":{"crate_id":23,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"1:3997:8849":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:4921:5419":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:12607:6125":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:6467:5566":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:4:1035":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:42774:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"25:1647:7420":{"crate_id":25,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"25:4860:7714":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:4374:3024":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:5074:7822":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"25:481:7253":{"crate_id":25,"path":["libc","unix","utimbuf"],"kind":"struct"},"14:0:2772":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10430:4458":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:5727:5443":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"25:4714:7650":{"crate_id":25,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:9120:1845":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:7054:5660":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"20:908:1719":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:4462:5405":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:44490:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:1184:4268":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:1852:5939":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7436:5481":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"11:1068:5931":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"25:4313:7483":{"crate_id":25,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:5449:6598":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:1576:5938":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"25:7527:8208":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12645:4799":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:8311:6676":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11351:4583":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:4310:3021":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4992:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:44723:6428":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"25:1731:7460":{"crate_id":25,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:526:7279":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:9025:6717":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:5866:5462":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"10:36:8284":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:47761:6522":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:45706:6430":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:256:4258":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:10726:4502":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:6816:8925":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:3846:6579":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:7864:6624":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:4393:4048":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:624:33633":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:6901:4119":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:2907:5368":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2765:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:43686:6111":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13676:5078":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:5017:5422":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:3226:6569":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"25:5898:7918":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:736:5920":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:2763:3028":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:3212:5937":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:837:3774":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"25:4585:7623":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:2170:8365":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5068:7820":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13010:4869":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:11957:14081":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"25:1493:7321":{"crate_id":25,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"25:6773:8142":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10084:4427":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:14324:5255":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:20809:31981":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2573:4091":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"25:1534:7339":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:2211:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:11316:4580":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:43820:6103":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12778:4819":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:10228:6096":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:45951:6440":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:1717:7455":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:4164:4048":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:1702:7448":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"20:319:4197":{"crate_id":20,"path":["lock_api","remutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:13981:5145":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4872:7720":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13876:5121":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:11702:6116":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:45902:6438":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"20:27:2406":{"crate_id":20,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"2:46571:6464":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"11:1103:5932":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:44294:14096":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:4320:3022":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11507:20919":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:1649:7420":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6044:7990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:7090:5665":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:11022:6108":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:44735:5941":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:7809:14177":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:10580:3213":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:9350:4260":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:42802:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13085:4881":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:22579:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:3915:5401":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:14282:5242":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7782:5761":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:9062:32010":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"20:474:2523":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"2:41670:30744":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"25:6616:8072":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:2881:5367":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11261:4573":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:21395:8937":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:1557:7354":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4568:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13611:5068":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:1482:5934":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:7766:6622":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:6303:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"25:7607:8227":{"crate_id":25,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"25:567:7302":{"crate_id":25,"path":["libc","unix","sigval"],"kind":"struct"},"2:41815:3774":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:12184:4702":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6879:5635":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5051:7816":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:11991:4667":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"25:4676:7630":{"crate_id":25,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:22004:6131":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:43970:6394":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:4963:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:44463:8384":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10672:4494":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8120:6667":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"25:5880:7906":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:6439:3994":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:8472:3082":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"11:844:5927":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:5816:5454":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:9701:4399":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"25:4366:7526":{"crate_id":25,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:4747:8864":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:48080:6533":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14145:5190":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3679:8844":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"25:5765:7854":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40355:6308":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:261:4259":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"22:83:1980":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","acquire_resource"],"kind":"function"},"17:13914:5129":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:7859:6623":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6792:5629":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"25:4566:7622":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:3204:5939":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:10421:6102":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"11:749:3994":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:8556:3774":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8224:6096":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4535:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:3188:30087":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:9607:4397":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:3191:30096":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12543:4785":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:9207:8308":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:2060:5929":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:2863:2946":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11098:4555":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:6565:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:3735:6014":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13816:5103":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:3115:6566":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"11:311:8364":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:2478:14144":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"25:4554:7613":{"crate_id":25,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:10265:4445":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:2321:5337":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:667:5917":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"25:5888:7911":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"25:4411:7548":{"crate_id":25,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:21285:6129":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"25:5042:7813":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:10475:4127":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:5775:7856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12237:4715":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:42786:5788":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:8341:8076":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:1520:7331":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12513:4782":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:10106:6725":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:10447:4463":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:12040:1411":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"25:531:7282":{"crate_id":25,"path":["libc","unix","hostent"],"kind":"struct"},"2:9383:3313":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:1709:7451":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:7927:6628":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:4344:5403":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:10256:8920":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:5435:5428":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"25:505:7262":{"crate_id":25,"path":["libc","unix","rusage"],"kind":"struct"},"2:45850:6436":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:7191:3339":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10980:4398":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:2859:2948":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"25:5953:7955":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"20:471:2519":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"6:4695:7638":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:4613:5410":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"25:4785:7684":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:39474:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:12047:763":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:5712:5440":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8947:8924":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:40336:6307":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:1442:3339":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:9480:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:2220:8791":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"14:221:5915":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:21000:8935":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:11039:4129":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:6589:8060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2391:8804":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6753:5617":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:7523:5750":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:12038:1073":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:11609:29941":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:5403:4384":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:8154:5820":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:1672:4026":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:7041:5657":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:755:4249":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:10771:8389":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:48221:6540":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4315:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:822:4032":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:707:4236":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:6255:4110":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:6077:7999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:11497:14084":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:6818:5630":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"21:12:24890":{"crate_id":21,"path":["scopeguard","Strategy"],"kind":"trait"},"17:10197:4439":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"11:1012:5929":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:4138:26695":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:7282:3339":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"11:1858:5940":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6618:8072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4810:7692":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13838:5107":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:2696:5359":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:1473:5920":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:3178:5938":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:11951:4236":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5900:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:12196:4703":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6625:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:8895:20912":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:2317:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:31073:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"25:7503:8204":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:12555:30428":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4729:7654":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:3581:3774":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6648:8094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:11316:6748":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"25:7550:8214":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2156:601":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5882:7906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:14522:5306":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:42520:3311":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12790:4820":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6204:5515":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:1575:7364":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8573:6705":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:894:3994":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:113:24873":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:14316:5254":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11934:4653":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:2517:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"25:578:7307":{"crate_id":25,"path":["libc","unix","tms"],"kind":"struct"},"17:12136:4690":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"25:4604:7624":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:41052:6332":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11074:4553":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:4716:7650":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:4706:8875":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:9330:212":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:4557:5408":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:22777:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:4770:30462":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:7474:5738":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:6732:3347":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4456:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:96:24872":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4664:7629":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"25:4906:7740":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13667:5074":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:1411:3774":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10097:4428":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:482:7253":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"22:72:2298":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_UNPARK_TOKEN"],"kind":"constant"},"17:10292:4398":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:6154:6065":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:7871:6625":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:22678:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:8050:5810":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"25:4636:7627":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:44447:8380":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"25:6065:7996":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:8894:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43614:6380":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"25:1629:7408":{"crate_id":25,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:2379:8798":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:7564:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:5322:5426":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:5905:5464":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:4047:8852":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:14076:5174":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:946:5926":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"9:52:8431":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:8218:4256":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4380:7529":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:20828:31986":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:5369:4048":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:9137:4251":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:5128:2988":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"25:1504:7326":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11306:4578":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"20:477:2527":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"16:5743:5445":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:44511:2980":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:10410:4456":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:21056:8940":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:5418:6596":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1690:7444":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"11:2168:8277":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:5318:4026":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:1756:3424":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"25:4947:7766":{"crate_id":25,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10646:4489":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:5993:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"25:4473:7572":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:32405:3306":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"25:5803:7873":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:21012:30473":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:1595:7378":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:1630:600":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:26133:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"25:6075:7999":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6968:20854":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:41693:6345":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:10139:20946":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:7313:14178":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5798:5449":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:491:4200":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5877:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:3498:3994":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11473:4352":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:9564:4396":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:40511:6316":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:10849:28856":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"25:6034:7988":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:42811:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13973:5144":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:2871:2947":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:1747:8293":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:10179:3774":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:5939:5321":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:7529:4059":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:9341:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13298:4923":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10059:4425":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:4365:3023":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:2359:5345":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12465:4772":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"25:7270:8191":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:7295:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:8181:5390":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:10504:6106":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:4796:814":{"crate_id":2,"path":["core","iter"],"kind":"module"},"14:165:19922":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"23:280:3339":{"crate_id":23,"path":["smallvec","IntoIter"],"kind":"struct"},"17:9242:4254":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8546:6585":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:7750:8763":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:7597:33611":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11358:21042":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:11293:4132":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"11:1611:4009":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"15:0:2773":{"crate_id":15,"path":["addr2line"],"kind":"module"},"25:4852:7709":{"crate_id":25,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:42756:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"7:0:1589":{"crate_id":7,"path":["unwind"],"kind":"module"},"25:1525:7334":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9867:4408":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10126:4431":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:44467:8385":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12280:4731":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:22148:6139":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:2461:7107":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46548:6463":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4506:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:9331:3308":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:7503:5383":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:45920:6439":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:32311:3022":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:8072:5811":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:582:3295":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:21147:3405":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:9372:4386":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:41071:6077":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"25:7509:8205":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7541:6752":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:9630:6093":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:47011:6485":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"10:44:5942":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:6916:14173":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13890:5124":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:579:7307":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4518:7596":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:7511:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:736:24881":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"8:0:2767":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6189:5513":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:10992:6709":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:9000:667":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"1:1055:5928":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4051:8853":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11448:20918":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:2178:4273":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:11358:6610":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"25:5078:7825":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:21710:6127":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"25:4487:7580":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14024:5157":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:2766:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:573:7304":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"12:0:2771":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:1041:5666":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"18:515:4198":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4764:7670":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:3655:4293":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"11:1501:19917":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:7689:3213":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:2970:32044":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:40317:14140":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:10534:6568":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"25:4840:7705":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"25:1671:7437":{"crate_id":25,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:4168:8871":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:9445:4394":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"23:97:24897":{"crate_id":23,"path":["smallvec","SmallVecData"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1590:7376":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"25:4982:7784":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:8363:6584":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:14001:5152":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:9379:3312":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:7211:3994":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"25:1700:7448":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12452:4770":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:2504:5351":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5995:5327":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:11642:6112":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:9998:4375":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"25:5023:7799":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6545:5577":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:3995:6050":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:3800:4059":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:11573:4602":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:8471:3083":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:6769:4001":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:4189:8873":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:11391:8391":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11162:4560":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8015:8833":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:7894:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:41587:6083":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:11467:14214":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:6868:8184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43604:6379":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"11:119:4016":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:12046:659":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:5954:2988":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:12058:1599":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:7643:8809":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"20:462:2505":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"17:12934:4860":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:9650:4398":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:2131:2057":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:43058:6365":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:6820:8166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2649:6045":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:7505:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"25:61:14472":{"crate_id":25,"path":["libc","unix","DIR"],"kind":"enum"},"6:4638:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12267:4727":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:42031:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11886:4638":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10685:4497":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:2959:3393":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:12983:4867":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:6472:2996":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:8686:20906":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:4176:8872":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:6152:4100":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:7309:3012":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:599:33631":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6775:8142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:10462:6103":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:7621:20857":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:590:4211":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:7530:4265":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:8134:5819":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:6261:5547":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"25:6571:8048":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:2845:2942":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8813:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"25:1688:7444":{"crate_id":25,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:652:4201":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10278:4446":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7391:20856":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"25:6718:8106":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:12035:427":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:48034:6529":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:11063:3422":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:11456:4134":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:9105:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"25:5013:7794":{"crate_id":25,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"25:1636:7412":{"crate_id":25,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:43866:6390":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:12582:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:5839:3994":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6243:5537":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"25:7544:8213":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"25:7461:8203":{"crate_id":25,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:46805:6482":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:1073:5933":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"9:177:8441":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:4585:5409":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10616:4484":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:13215:4906":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:630:3774":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"25:0:837":{"crate_id":25,"path":["libc"],"kind":"module"},"17:11295:4576":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11244:4605":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:10953:5991":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:4428:7554":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:4556:7613":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:10903:4538":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:11490:4598":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:12045:657":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:4642:8091":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:46251:6454":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:6067:7996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:7290:3339":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"23:118:3998":{"crate_id":23,"path":["smallvec","SmallVec"],"kind":"struct"},"17:10788:21016":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:14460:5293":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14335:5260":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:14514:5303":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:9080:7008":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:9625:14148":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12473:4774":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:5419:4385":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"25:1573:7364":{"crate_id":25,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12484:4777":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:8869:6710":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:44280:6411":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9277:4255":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:8205:20860":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10112:4429":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:3632:3339":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:20768:3295":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"23:327:24898":{"crate_id":23,"path":["smallvec","Array"],"kind":"trait"},"16:7828:5769":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"22:0:1722":{"crate_id":22,"path":["parking_lot_core"],"kind":"module"},"6:5920:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:20962:8809":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:481:4102":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12086:4683":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4800:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:6929:5639":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14042:5161":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10520:4476":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"25:6709:8103":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:41079:6079":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:6545:2992":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:2886:4107":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:1554:3774":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12737:4813":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:44168:6408":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"14:40:4653":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:8414:6696":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:10203:3775":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:46729:6480":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:8115:5816":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:41831:3339":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:40367:30747":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9660:33622":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"18:0:2776":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:5648:5434":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:40460:6311":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"25:5735:7829":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:2867:2945":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:4171:2450":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:207:4024":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:4194:4048":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:43990:6396":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4550:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:22165:30732":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:1570:5937":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:4483:7577":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11000:4545":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8853:6709":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13989:5146":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:22744:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:39494:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4328:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:44471:3010":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:46021:6443":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:39372:2971":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:10540:6572":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:47075:6487":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:2608:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:40268:6300":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:5636:4111":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:11753:6098":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:2888:2950":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"25:5985:7968":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"25:4721:7651":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:44024:6048":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:43784:6389":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:22125:30746":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13487:4976":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:1257:5666":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"25:7276:8193":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:488:7256":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:8953:20914":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:5008:7791":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3513:29468":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:46419:6460":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10588:4481":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"20:849:1706":{"crate_id":20,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"17:9003:20916":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4723:7651":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:47823:6523":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:9385:3314":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12711:4810":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"21:58:24891":{"crate_id":21,"path":["scopeguard","Always"],"kind":"enum"},"25:6128:8010":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8005:6629":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:2766:5362":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:7582:5752":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4678:7630":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:22252:3048":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13949:5135":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:3720:6013":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"11:644:3775":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:332:4018":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:9823:20927":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:39599:6164":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:6041:20850":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:1503:5918":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5634:5430":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:44459:8383":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:1587:5940":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11742:4615":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:12520:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:276:3000":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:629:6008":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:7360:33614":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13162:4900":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:506:7262":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:7463:8203":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:1273:5929":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:5661:5439":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8995:3209":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:40590:6324":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:619:6546":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:2339:5339":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:40558:6320":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:6432:1707":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:261:4026":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"14:7:5910":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:12830:4824":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:14033:5160":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:42306:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:2174:8278":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:47931:6525":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:2762:1950":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6711:8103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:40480:6313":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10738:4503":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"19:0:1053":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:42746:8296":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:22140:6138":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12685:4807":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:5398:6595":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"14:187:19929":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"20:452:2497":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"6:7586:8221":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:4426:4050":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:42109:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"25:5797:7872":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"25:1543:7345":{"crate_id":25,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:1492:5917":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"25:4738:7658":{"crate_id":25,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:2559:4104":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"25:546:7291":{"crate_id":25,"path":["libc","unix","pollfd"],"kind":"struct"},"5:4363:4050":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:10108:6724":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:8297:8874":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:10214:4442":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:22612:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:536:5325":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11161:6708":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:6955:4073":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5058:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4650:7628":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:5830:5455":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:1565:4059":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:32293:6156":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:2812:2997":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:45750:6432":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:10831:6576":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:1302:5933":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"22:84:2439":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","release_resource"],"kind":"function"},"1:1064:5929":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4395:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5982:5477":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:766:24882":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44033:6300":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:43702:4256":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"13:226:8276":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:3240:2969":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:22711:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:6015:7982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10165:20947":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:119:14526":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:4248:3016":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:12017:25302":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:41729:6086":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11048:4548":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:43011:6354":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"25:6669:8095":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4446:7562":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:507:4201":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:43595:6378":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:614:33630":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:8097:5814":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:7517:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:865:1713":{"crate_id":20,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"1:5311:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:10821:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:12163:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"20:873:220":{"crate_id":20,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11586:4604":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:4824:8860":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:532:7282":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:1102:32054":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:8487:6699":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"7:32:19825":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:2359:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"20:445:2487":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"2:44685:6423":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:481:4199":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:6548:2993":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:9972:4419":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:40310:6304":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"25:6794:8156":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"25:7248:8190":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:12055:1543":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:541:7288":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:4944:7764":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"11:1048:33597":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:1778:6556":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:40540:6053":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:1637:3666":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4879:1022":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12053:1541":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"25:4693:7638":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:40350:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"25:4662:7629":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10240:4417":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:21388:8809":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6573:8048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:40216:30734":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:356:3222":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:5025:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:8978:20915":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:40276:6048":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:50027:8944":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"3:0:452":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:7802:3776":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:44122:6399":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:952:5927":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4469:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:582:4265":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:400:4261":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:11617:4605":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:43980:6395":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6607:8067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:40520:6317":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:5457:4048":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13148:4899":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:5517:6056":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:7261:6031":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:42070:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:46327:6456":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4543:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:43920:6392":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13632:5073":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:586:8716":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:12554:4786":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11191:4281":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:42527:3312":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:7738:6554":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:6306:9018":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:4842:7705":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:3594:3775":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"25:4752:7664":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2815:3303":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:40383:6309":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8562:6704":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:5767:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11710:4578":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:44137:6404":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"25:4915:7746":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:7732:8723":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:3185:29420":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:41650:8295":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:7221:4037":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"22:73:1842":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_PARK_TOKEN"],"kind":"constant"},"2:5976:6060":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:12057:808":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:7342:33617":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:2168:3406":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:9067:8450":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:42265:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:45796:6434":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:43569:6311":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:11962:14080":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:643:8719":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:7497:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11235:4572":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:43503:6370":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2855:2944":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:21133:8936":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:13826:5104":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2744:5361":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:11942:6091":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:5977:4110":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:41992:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:22264:3050":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"25:6742:8117":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:40572:6323":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1500:7323":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:48159:6538":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:2962:8290":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"25:1715:7455":{"crate_id":25,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:9371:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:1288:5928":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:44008:6118":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:40840:6071":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:7554:5385":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7102:20855":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:6985:24944":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:4572:8893":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:46203:6453":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:7269:33615":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9492:4126":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:5818:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12621:4798":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:362:3223":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:2777:3027":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:48045:6530":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"25:4846:7706":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"20:459:2502":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"1:7881:6626":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:3764:5397":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"25:6154:8025":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"25:5827:7882":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:9110:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:6798:4069":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:4774:5414":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13024:4872":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:5121:5425":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:4918:8901":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5849:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:4037:8851":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:4938:7761":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"25:6596:8066":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"15:394:19951":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:44650:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:2809:3301":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11151:4559":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10397:4455":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:5243:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:968:5666":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:32297:5717":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:6841:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10949:4542":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:6850:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:44693:6425":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:0:507":{"crate_id":2,"path":["core"],"kind":"module"},"11:695:5918":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:3797:5398":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"25:1588:7376":{"crate_id":25,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9051:20894":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:895:3774":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:7027:4120":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:4478:8875":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7613:5755":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"25:4624:7626":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"25:4792:7686":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"25:6646:8094":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"25:6832:8175":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:3238:5940":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"25:6563:8043":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4413:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1631:7408":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6598:8066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:44523:3011":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:14126:5185":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:7529:8208":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12252:4721":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7644:3224":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"21:0:2926":{"crate_id":21,"path":["scopeguard"],"kind":"module"},"17:8848:20911":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:8473:3081":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4420:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:1663:7431":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13758:5090":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:10801:6625":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:11200:2976":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"25:5918:7934":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"25:4461:7568":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:3522:8807":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9328:4256":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2523:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"25:6839:8178":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:11218:7012":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:595:7317":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3975:8847":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6017:20849":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:521:24883":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:868:5919":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:1536:7339":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"25:6818:8166":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:43692:6386":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13188:4902":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8237:6676":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:5786:1699":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:30469:3669":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"9:486:19838":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:2213:6562":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:3830:5399":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:10476:6104":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:8396:3075":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3529:8825":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:1983:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"25:4831:7699":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11381:4588":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:0:2774":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:12034:957":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"25:4990:7786":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9531:33623":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:6436:1708":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11327:4581":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"25:499:7259":{"crate_id":25,"path":["libc","unix","rlimit"],"kind":"struct"},"2:2969:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:10340:4451":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14100:5179":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:3268:2972":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:42148:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:3919:4048":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4908:7740":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:12208:4704":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:5080:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"25:5816:7874":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:5434:6597":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:9574:33626":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:2904:2954":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:4835:5416":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:1837:3860":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:10420:4331":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:1075:4266":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4341:7503":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"25:4339:7503":{"crate_id":25,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:4243:3015":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9762:33621":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:2635:6565":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"25:6605:8067":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:41806:3338":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:43734:6101":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:14420:5282":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:11147:6707":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:46181:6452":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:3150:2964":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:4030:14057":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11023:4546":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12810:4823":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"20:901:1718":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:21100:8941":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:40642:6066":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:3461:5395":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:6363:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11272:4574":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"25:487:7256":{"crate_id":25,"path":["libc","unix","timeval"],"kind":"struct"},"5:7412:6036":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:4497:5406":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:727:4243":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:41621:8843":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:14:2651":{"crate_id":2,"path":["core","write"],"kind":"macro"},"25:7573:8220":{"crate_id":25,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:9139:2976":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:21271:8931":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:6930:4070":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:39516:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"25:7556:8215":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:2832:5365":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:4616:7625":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12154:4698":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:5054:6590":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:22231:8373":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:21186:8932":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"25:4393:7536":{"crate_id":25,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:9366:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4770:7673":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10534:4477":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:41030:6074":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:42829:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:6485:4026":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:43251:6367":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:555:2015":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9158:2977":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:1513:7329":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8337:6687":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10771:4506":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:39613:6165":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:3034:2970":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:40397:8778":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:7379:28942":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"9:393:19840":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:7135:26691":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"25:4822:7696":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:7250:8190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:4496:7583":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:8239:5717":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"25:5965:7960":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6485:5372":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12437:4766":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:8180:8808":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:9844:4095":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"25:5977:7967":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"20:255:1715":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"5:6788:4067":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:11201:4562":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:474:7248":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:13739:5089":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"25:5773:7856":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7568:5386":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:587:7312":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:4074:3775":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7736:5759":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:11237:1845":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:3171:3774":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"25:6587:8060":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"9:426:19841":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:12042:1525":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:6156:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4704:7643":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:7382:6033":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:21203:8809":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:43512:6372":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:8201:6314":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:635:6547":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:39434:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:7199:6030":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:45772:6433":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:1495:7321":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:5955:7955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:5963:5470":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"20:563:4197":{"crate_id":20,"path":["lock_api","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:5363:5427":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"15:327:8428":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:7581:4122":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"25:1518:7331":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:10327:6598":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:12060:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:2851:2941":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:660:4224":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:20796:31786":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:6687:5603":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:2927:2959":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13040:4874":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"25:525:7279":{"crate_id":25,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:5362:14072":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44015:6301":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:7425:6039":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:9746:4087":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"20:30:2410":{"crate_id":20,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"6:1911:15872":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:8211:6331":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:7513:5749":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"25:5861:7904":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7722:5378":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:4749:396":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"25:7584:8221":{"crate_id":25,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"11:399:33590":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:2381:8799":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:10661:4493":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:6401:5371":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"14:202:14097":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:21364:8809":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"25:6169:8036":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:46151:6451":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:14110:5182":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"25:473:7248":{"crate_id":25,"path":["libc","unix","group"],"kind":"struct"},"2:39333:2974":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"25:4762:7670":{"crate_id":25,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7462:5737":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:10949:6622":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"11:760:4059":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:3447:6679":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"25:4808:7692":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:4628:8850":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"25:4683:7631":{"crate_id":25,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:1667:1111":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:6022:7983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6583:5579":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:43999:6397":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"9:357:19854":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:10537:6570":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:4889:5418":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:11137:4558":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:2788:5363":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:10344:25321":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9752:4400":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:21:698":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"10:0:2769":{"crate_id":10,"path":["adler"],"kind":"module"},"6:1569:7362":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13966:5143":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:47969:6526":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4740:7658":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5737:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1545:7345":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:6960:5642":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7284:3079":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:1506:7326":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4929:7755":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6742:5616":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:3303:6572":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4304:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4389:7534":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:7846:32008":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:9455:33625":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:40581:6059":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:9886:4410":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12496:4779":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9959:4418":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:45880:6437":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4854:7709":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:4098:3030":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4489:7580":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:8281:5832":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:562:7299":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13575:5039":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:7065:4245":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:41882:3486":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13286:4916":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:8168:6576":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:10507:4475":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:12727:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:42345:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7660:5757":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:6901:5379":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:40195:6293":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:2284:19960":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:14434:5284":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"25:5056:7819":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:8248:8842":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:9912:4411":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:45726:6431":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"25:4702:7643":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"25:4893:7730":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12074:4682":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2597:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:10989:6107":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:4909:8900":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:43660:6382":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"11:2033:5666":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:7125:1684":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4368:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:7770:6156":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:9197:29053":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"11:1822:3339":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:21832:8809":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:48091:6534":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:4053:5402":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:44100:14095":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:9790:33619":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13451:4945":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"25:6020:7983":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:7231:33176":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:7441:2998":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:9590:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:6160:8369":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:2526:5352":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:6637:4026":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6805:8159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:5588:5373":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6513:5567":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:1776:4059":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:690:4233":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:22876:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:2966:32045":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"20:0:1696":{"crate_id":20,"path":["lock_api"],"kind":"module"},"16:6352:5555":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:9582:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"25:5006:7791":{"crate_id":25,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"20:35:166":{"crate_id":20,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"6:4887:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:6796:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11616:6613":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4685:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:40291:14139":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:681:4231":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12658:4802":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"11:836:5926":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:4748:7662":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:9487:6623":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:6279:5550":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:46040:6444":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:4129:3031":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:13135:4898":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:5752:2746":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5574:5370":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:8899:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5044:7813":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:7668:3215":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"25:493:7258":{"crate_id":25,"path":["libc","unix","timespec"],"kind":"struct"},"2:21397:6129":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"20:434:1711":{"crate_id":20,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"17:14221:5235":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:2514:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:12051:758":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13710:5081":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:4801:4108":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"25:5992:7969":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:5085:6590":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:31101:3295":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"25:4927:7755":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:14083:5175":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12422:4762":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:22057:6132":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12098:4686":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:2960:32041":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:3945:8845":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"25:540:7288":{"crate_id":25,"path":["libc","unix","iovec"],"kind":"struct"},"25:6006:7980":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:3983:6049":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13851:5113":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"9:237:6361":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12062:4679":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:11483:6109":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:14378:5276":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:8984:6712":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:11819:4138":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:10840:28860":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"25:4961:7772":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6083:19959":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"}},"external_crates":{"23":{"name":"smallvec","html_root_url":null},"20":{"name":"lock_api","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"libc","html_root_url":null},"22":{"name":"parking_lot_core","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"21":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}