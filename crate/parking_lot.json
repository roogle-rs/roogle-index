{"root":"0:0:1666","crate_version":"0.12.1","includes_private":false,"index":{"a:2:8212:3032-0:197:1655":{"id":"a:2:8212:3032-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8212:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2699:228-0:460:1653":{"id":"a:2:2699:228-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:96:166":{"id":"0:96:166","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[87,49]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same mutex in succession, which can starve\nother threads waiting to acquire the mutex. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na mutex it has just released, this can starve other threads.\n\nThis mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the mutex.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `MutexGuard::unlock_fair` when\nunlocking a mutex instead of simply dropping the `MutexGuard`.\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `Mutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the mutex is fair on average.\n- Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::Mutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(Mutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::Mutex","id":"20:35:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:268:2413":{"id":"0:268:2413","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:273:2424":{"id":"0:273:2424","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[148,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2739:2943-0:357:1659":{"id":"a:2:2739:2943-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2943","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:429-0:197:1655":{"id":"0:429-0:197:1655","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[46,0],"end":[46,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::raw_mutex::RawMutex","name":"RawMutex","id":"0:197:1655","glob":false}},"2:11962:3279":{"id":"2:11962:3279","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41272:179","prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:14028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2699:228-0:261:1656":{"id":"a:2:2699:228-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8213:3031-0:261:1656":{"id":"a:2:8213:3031-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8213:3031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11943:5964":{"id":"2:11943:5964","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:43219:4215","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:34897":{"id":"2:11978:34897","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11618:14030","str::split":"2:11966:26267","prim@char":"1:11878:419","str::split_terminator":"2:11975:34896"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:43301:6314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:14028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5401:28422":{"id":"5:5401:28422","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12040:28289"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:314":{"id":"2:11927:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11928:27164","`u8`":"1:11895:1493"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5382:35565":{"id":"5:5382:35565","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2946","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:5940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2946","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:5940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2540-0:127:1652":{"id":"b:2:2540-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2536-0:446:1645":{"id":"b:2:2536-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:3273"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:467:2249":{"id":"0:467:2249","crate_id":0,"name":"Done","span":{"filename":"src/once.rs","begin":[33,4],"end":[33,8]},"visibility":"default","docs":"A closure has completed successfully.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:292:2444":{"id":"0:292:2444","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/raw_rwlock.rs","begin":[296,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2435","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131:939":{"id":"0:131:939","crate_id":0,"name":"new","span":{"filename":"src/once.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a new `Once` value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:465:2247":{"id":"0:465:2247","crate_id":0,"name":"InProgress","span":{"filename":"src/once.rs","begin":[30,4],"end":[30,14]},"visibility":"default","docs":"A thread is currently executing a closure.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2546-0:197:1655":{"id":"b:2:2546-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:423-0:96:166":{"id":"0:423-0:96:166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,53],"end":[43,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::Mutex","name":"Mutex","id":"0:96:166","glob":false}},"b:2:3316-0:197:1655":{"id":"b:2:3316-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:459:423":{"id":"0:459:423","crate_id":0,"name":"clone","span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:27205":{"id":"2:11952:27205","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:34898":{"id":"2:11987:34898","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5397:35568":{"id":"5:5397:35568","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2249-0:31:1644":{"id":"b:2:2249-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2525"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:126:2256":{"id":"0:126:2256","crate_id":0,"name":"done","span":{"filename":"src/once.rs","begin":[52,4],"end":[57,5]},"visibility":"public","docs":"Returns whether the associated `Once` has successfully executed a\nclosure.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164:2174":{"id":"0:164:2174","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8213:3031-0:127:1652":{"id":"a:2:8213:3031-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8213:3031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2739:2943-0:446:1645":{"id":"a:2:2739:2943-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2943","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2246-0:31:1644":{"id":"b:2:2246-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2523"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8213:3031-0:157:1654":{"id":"a:2:8213:3031-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8213:3031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2551-0:261:1656":{"id":"b:2:2551-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:310:2469":{"id":"0:310:2469","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/raw_rwlock.rs","begin":[493,4],"end":[503,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:44007:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12028:34911":{"id":"2:12028:34911","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12009:34905":{"id":"2:12009:34905","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:302:2459":{"id":"0:302:2459","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[420,4],"end":[424,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2540-0:357:1659":{"id":"b:2:2540-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2540-0:197:1655":{"id":"b:2:2540-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:280:2433":{"id":"0:280:2433","crate_id":0,"name":"downgrade","span":{"filename":"src/raw_rwlock.rs","begin":[193,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:307:2466":{"id":"0:307:2466","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/raw_rwlock.rs","begin":[454,4],"end":[464,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9040:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132:1382":{"id":"0:132:1382","crate_id":0,"name":"state","span":{"filename":"src/once.rs","begin":[94,4],"end":[105,5]},"visibility":"public","docs":"Returns the current state of this `Once`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:433-0:370:1658":{"id":"0:433-0:370:1658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,27],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::MappedReentrantMutexGuard","name":"MappedReentrantMutexGuard","id":"0:370:1658","glob":false}},"0:363:1660":{"id":"0:363:1660","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[41,0],"end":[41,80]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](type.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::ReentrantMutex","id":"20:268:1660","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11922:34891":{"id":"2:11922:34891","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11920:34890"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12012:34907":{"id":"2:12012:34907","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5383:3357":{"id":"5:5383:3357","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:27163":{"id":"2:11935:27163","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2682:220-0:127:1652":{"id":"a:2:2682:220-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2249-0:460:1653":{"id":"b:2:2249-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2525"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2246-0:261:1656":{"id":"b:2:2246-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2523"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:275:2426":{"id":"0:275:2426","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/raw_rwlock.rs","begin":[156,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:269:2416":{"id":"0:269:2416","crate_id":0,"name":"lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[107,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45:1904":{"id":"0:45:1904","crate_id":0,"name":"wait_until","span":{"filename":"src/condvar.rs","begin":[283,4],"end":[292,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9040:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1940":{"id":"0:59:1940","crate_id":0,"name":"wait_while_until","span":{"filename":"src/condvar.rs","begin":[461,4],"end":[472,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant. If the provided condition evaluates to\n`false`, then the thread is no longer blocked and the operation is\ncompleted. If the condition evaluates to `true`, then the thread is\nblocked again and waits for another notification before repeating\nthis process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["condition",{"kind":"generic","inner":"F"}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9040:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2926:1929","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8213:3031-0:197:1655":{"id":"a:2:8213:3031-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8213:3031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:265:1640":{"id":"0:265:1640","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_rwlock.rs","begin":[64,4],"end":[64,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"20:8:1643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:213:2350":{"id":"0:213:2350","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_mutex.rs","begin":[163,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:44007:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2682:220-0:157:1654":{"id":"a:2:2682:220-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2549:128":{"id":"2:2549:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"a:2:2739:2943-0:157:1654":{"id":"a:2:2739:2943-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2943","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:308:2467":{"id":"0:308:2467","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/raw_rwlock.rs","begin":[467,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:44007:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12007:34904":{"id":"2:12007:34904","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2682:220-0:261:1656":{"id":"a:2:2682:220-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:39:1870":{"id":"0:39:1870","crate_id":0,"name":"notify_all","span":{"filename":"src/condvar.rs","begin":[187,4],"end":[195,5]},"visibility":"public","docs":"Wakes up all blocked threads on this condvar.\n\nReturns the number of threads woken up.\n\nThis method will ensure that any current waiters on the condition\nvariable are awoken. Calls to `notify_all()` are not buffered in any\nway.\n\nTo wake up only one thread, see `notify_one()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:169:2004":{"id":"0:169:2004","crate_id":0,"name":"bump","span":{"filename":"src/raw_fair_mutex.rs","begin":[47,4],"end":[49,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:305:2463":{"id":"0:305:2463","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[439,4],"end":[449,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8212:3032-0:261:1656":{"id":"a:2:8212:3032-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8212:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2310:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:453:613"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[59,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked_exclusive","is_locked"],"trait":{"name":"RawRwLock","id":"20:462:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:2152","0:265:1640","0:266:2408","0:267:2412","0:268:2413","0:269:2416","0:270:2419","0:271:2421","0:272:2347","0:273:2424"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8213:3031-0:31:1644":{"id":"a:2:8213:3031-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8213:3031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[318,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2587:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:60"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:261:1656":{"id":"0:261:1656","crate_id":0,"name":"RawRwLock","span":{"filename":"src/raw_rwlock.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Raw reader-writer lock type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2699:228-0:261:1656","a:2:2682:220-0:261:1656","a:2:2739:2943-0:261:1656","a:2:8212:3032-0:261:1656","a:2:8213:3031-0:261:1656","b:2:2246-0:261:1656","b:2:2540-0:261:1656","b:2:2536-0:261:1656","b:2:2551-0:261:1656","b:2:3316-0:261:1656","b:2:2249-0:261:1656","b:2:2546-0:261:1656","0:288","0:303","0:279","0:300","0:274","0:291","0:294","0:306","0:281","0:263"]}},"2:11984:27202":{"id":"2:11984:27202","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11878:419","str::splitn":"2:11981:27200","self::pattern":"2:11618:14030"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:43355:6029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:14028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:161:2152":{"id":"0:161:2152","crate_id":0,"name":"INIT","span":{"filename":"src/raw_fair_mutex.rs","begin":[15,4],"end":[15,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":"_"}},"0:297:2451":{"id":"0:297:2451","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[346,4],"end":[364,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:444-0:383:219":{"id":"0:444-0:383:219","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLockWriteGuard","name":"RwLockWriteGuard","id":"0:383:219","glob":false}},"b:2:2551-0:357:1659":{"id":"b:2:2551-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12022:27207":{"id":"2:12022:27207","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:14028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2246-0:357:1659":{"id":"b:2:2246-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2523"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[517,0],"end":[521,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9105:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:276:2427":{"id":"0:276:2427","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/raw_rwlock.rs","begin":[162,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2540-0:446:1645":{"id":"b:2:2540-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:125:2253":{"id":"0:125:2253","crate_id":0,"name":"poisoned","span":{"filename":"src/once.rs","begin":[42,4],"end":[47,5]},"visibility":"public","docs":"Returns whether the associated `Once` has been poisoned.\n\nOnce an initialization routine for a `Once` has panicked it will forever\nindicate to future forced initialization routines that it is poisoned.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12011:34906":{"id":"2:12011:34906","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2551-0:197:1655":{"id":"b:2:2551-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2546-0:31:1644":{"id":"b:2:2546-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2249-0:197:1655":{"id":"b:2:2249-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2525"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3316-0:261:1656":{"id":"b:2:3316-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[191,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockDowngrade","id":"20:478:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:2433"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2699:228-0:446:1645":{"id":"a:2:2699:228-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2249-0:446:1645":{"id":"b:2:2249-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2525"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2539:3273":{"id":"2:2539:3273","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2513:133"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:286:2438":{"id":"0:286:2438","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/raw_rwlock.rs","begin":[236,4],"end":[250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:44007:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[36,0],"end":[58,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:2253","0:126:2256"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:471:423"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:201:1640":{"id":"0:201:1640","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_mutex.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"20:8:1643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:272:2347":{"id":"0:272:2347","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_rwlock.rs","begin":[142,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:298:2453":{"id":"0:298:2453","crate_id":0,"name":"upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[367,4],"end":[376,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8212:3032-0:357:1659":{"id":"a:2:8212:3032-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8212:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:683-0:446:1645":{"id":"b:5:683-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:3337","5:686:3338","5:687:3339"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:43:1886":{"id":"0:43:1886","crate_id":0,"name":"wait","span":{"filename":"src/condvar.rs","begin":[255,4],"end":[257,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:285:2437":{"id":"0:285:2437","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/raw_rwlock.rs","begin":[223,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2435","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277:2428":{"id":"0:277:2428","crate_id":0,"name":"bump_shared","span":{"filename":"src/raw_rwlock.rs","begin":[175,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:266:2408":{"id":"0:266:2408","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[67,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2249-0:357:1659":{"id":"b:2:2249-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2525"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[15,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"GetThreadId","id":"20:227:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:360:2152","0:361:2502"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:365:1657":{"id":"0:365:1657","crate_id":0,"name":"const_reentrant_mutex","span":{"filename":"src/remutex.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.\n\nThis allows creating a reentrant mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"ReentrantMutex","id":"0:363:1660","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:426-0:127:1652":{"id":"0:426-0:127:1652","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,21],"end":[44,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::once::Once","name":"Once","id":"0:127:1652","glob":false}},"0:68:668":{"id":"0:68:668","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[518,4],"end":[520,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9080:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9069:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[510,0],"end":[515,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2587:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:60"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2692:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2536-0:127:1652":{"id":"b:2:2536-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:3273"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11938:34894":{"id":"2:11938:34894","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11884:1395","crate::ops::IndexMut":"2:2982:2907","str::slice_unchecked":"2:11937:34893"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:27200":{"id":"2:11981:27200","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030","str::rsplitn":"2:11984:27202"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:43337:6028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:205:2347":{"id":"0:205:2347","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_mutex.rs","begin":[113,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:453:613":{"id":"0:453:613","crate_id":0,"name":"eq","span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2551-0:127:1652":{"id":"b:2:2551-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:204:1911":{"id":"0:204:1911","crate_id":0,"name":"unlock","span":{"filename":"src/raw_mutex.rs","begin":[100,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:34889":{"id":"2:11919:34889","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:27188":{"id":"2:11940:27188","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11939:27187"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2699:228-0:197:1655":{"id":"a:2:2699:228-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[52,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:171:122","0:172:1782","0:173:2349","0:174:2350"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[141,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:210:122","0:211:1782","0:212:2349","0:213:2350"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:282:122":{"id":"0:282:122","crate_id":0,"name":"Duration","span":{"filename":"src/raw_rwlock.rs","begin":[206,4],"end":[206,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:44007:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11996:34900":{"id":"2:11996:34900","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11618:14030","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::matches":"2:11993:2812"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:43455:6318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:14028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:35:1848":{"id":"0:35:1848","crate_id":0,"name":"notify_one","span":{"filename":"src/condvar.rs","begin":[128,4],"end":[136,5]},"visibility":"public","docs":"Wakes up one blocked thread on this condvar.\n\nReturns whether a thread was woken up.\n\nIf there is a blocked thread on this condition variable, then it will\nbe woken up from its call to `wait` or `wait_timeout`. Calls to\n`notify_one` are not buffered in any way.\n\nTo wake up all threads, see `notify_all()`.\n\n# Examples\n\n```\nuse parking_lot::Condvar;\n\nlet condvar = Condvar::new();\n\n// do something with condvar, share it with other threads\n\nif !condvar.notify_one() {\n    println!(\"Nobody was listening for this.\");\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:299:2455":{"id":"0:299:2455","crate_id":0,"name":"try_upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[379,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:271:2421":{"id":"0:271:2421","crate_id":0,"name":"unlock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[129,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:27164":{"id":"2:11928:27164","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11895:1493"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2550:1472":{"id":"2:2550:1472","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:290:2442":{"id":"0:290:2442","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[281,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2546-0:357:1659":{"id":"b:2:2546-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2536-0:197:1655":{"id":"b:2:2536-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:3273"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:212:2349":{"id":"0:212:2349","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_mutex.rs","begin":[146,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9040:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2551-0:31:1644":{"id":"b:2:2551-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:438-0:378:1662":{"id":"0:438-0:378:1662","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::const_rwlock","name":"const_rwlock","id":"0:378:1662","glob":false}},"0:413-0:31:1644":{"id":"0:413-0:31:1644","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,24],"end":[41,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::condvar::Condvar","name":"Condvar","id":"0:31:1644","glob":false}},"2:11955:27206":{"id":"2:11955:27206","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:14028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:26267":{"id":"2:11966:26267","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11618:14030","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::split_whitespace":"2:11944:32383","str::rsplit":"2:11972:27198"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:43233:6021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:301:2458":{"id":"0:301:2458","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/raw_rwlock.rs","begin":[399,4],"end":[417,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:441-0:376:217":{"id":"0:441-0:376:217","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,65],"end":[53,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLock","name":"RwLock","id":"0:376:217","glob":false}},"0:287:2439":{"id":"0:287:2439","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/raw_rwlock.rs","begin":[253,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9040:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:34893":{"id":"2:11937:34893","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11884:1395","str::slice_mut_unchecked":"2:11938:34894","crate::ops::Index":"2:2978:2906"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:27196":{"id":"2:11969:27196","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11441:6023","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:435-0:363:1660":{"id":"0:435-0:363:1660","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,67],"end":[49,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::ReentrantMutex","name":"ReentrantMutex","id":"0:363:1660","glob":false}},"2:11958:3318":{"id":"2:11958:3318","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41272:179","prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:34909":{"id":"2:12016:34909","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:35565","5:5383:3357","5:5386:35566","5:5389:35567","5:5397:35568","5:5398:35569","5:5399:8778","5:5400:28421","5:5401:28422"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5398:35569":{"id":"5:5398:35569","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:2946","`String`":"5:7252:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2946","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:5940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12043:8663":{"id":"2:12043:8663","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4537:8663"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:43541:5974","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3316-0:157:1654":{"id":"b:2:3316-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2542:694":{"id":"2:2542:694","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1650":{"id":"0:98:1650","crate_id":0,"name":"const_mutex","span":{"filename":"src/mutex.rs","begin":[92,0],"end":[94,1]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Mutex","id":"0:96:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:34890":{"id":"2:11920:34890","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:284:2436":{"id":"0:284:2436","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/raw_rwlock.rs","begin":[210,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2435","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[397,0],"end":[425,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_upgradable"],"trait":{"name":"RawRwLockUpgradeFair","id":"20:499:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:301:2458","0:302:2459"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:264:2152":{"id":"0:264:2152","crate_id":0,"name":"INIT","span":{"filename":"src/raw_rwlock.rs","begin":[60,4],"end":[62,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"a:2:8213:3031-0:357:1659":{"id":"a:2:8213:3031-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8213:3031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2554:128":{"id":"2:2554:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31912:8196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2246-0:446:1645":{"id":"b:2:2246-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2523"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2536-0:357:1659":{"id":"b:2:2536-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:3273"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:360:2152":{"id":"0:360:2152","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[16,4],"end":[16,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"RawThreadId"}},"2:2251:2525":{"id":"2:2251:2525","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2739:2943-0:31:1644":{"id":"a:2:2739:2943-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2943","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3316-0:446:1645":{"id":"b:2:3316-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:197:1655":{"id":"0:197:1655","crate_id":0,"name":"RawMutex","span":{"filename":"src/raw_mutex.rs","begin":[32,0],"end":[56,1]},"visibility":"public","docs":"Raw mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2699:228-0:197:1655","a:2:2682:220-0:197:1655","a:2:2739:2943-0:197:1655","a:2:8212:3032-0:197:1655","a:2:8213:3031-0:197:1655","b:2:2246-0:197:1655","b:2:2540-0:197:1655","b:2:2536-0:197:1655","b:2:2551-0:197:1655","b:2:3316-0:197:1655","b:2:2249-0:197:1655","b:2:2546-0:197:1655","0:199","0:209","0:206"]}},"b:2:3316-0:127:1652":{"id":"b:2:3316-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8212:3032-0:157:1654":{"id":"a:2:8212:3032-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8212:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:378:1662":{"id":"0:378:1662","crate_id":0,"name":"const_rwlock","span":{"filename":"src/rwlock.rs","begin":[94,0],"end":[96,1]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.\n\nThis allows creating a `RwLock<T>` in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"RwLock","id":"0:376:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8212:3032-0:446:1645":{"id":"a:2:8212:3032-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8212:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11990:34899":{"id":"2:11990:34899","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:14028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2699:228-0:157:1654":{"id":"a:2:2699:228-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12005:34903":{"id":"2:12005:34903","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:295:2446":{"id":"0:295:2446","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[324,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:203:2174":{"id":"0:203:2174","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_mutex.rs","begin":[78,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[119,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:207:2346","0:208:2004"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:173:2349":{"id":"0:173:2349","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_fair_mutex.rs","begin":[57,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:30:2348","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:27187":{"id":"2:11939:27187","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11940:27188"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12041:34914":{"id":"2:12041:34914","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4536:34914"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:43532:6226","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:289:2441":{"id":"0:289:2441","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[272,4],"end":[278,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8212:3032-0:31:1644":{"id":"a:2:8212:3032-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8212:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2249-0:127:1652":{"id":"b:2:2249-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2525"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[294,0],"end":[320,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursiveTimed","id":"20:490:2443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:292:2444","0:293:2445"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2551-0:460:1653":{"id":"b:2:2551-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3318:1485":{"id":"2:3318:1485","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:39214:6088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12037:28285":{"id":"2:12037:28285","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39428:27113","Self::is_ascii":"2:12036:28284"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"2:39428:27113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1644":{"id":"0:31:1644","crate_id":0,"name":"Condvar","span":{"filename":"src/condvar.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"A Condition Variable\n\nCondition variables represent the ability to block a thread such that it\nconsumes no CPU time while waiting for an event to occur. Condition\nvariables are typically associated with a boolean predicate (a condition)\nand a mutex. The predicate is always verified inside of the mutex before\ndetermining that thread must block.\n\nNote that this module places one additional restriction over the system\ncondition variables: each condvar can be used with only one mutex at a\ntime. Any attempt to use multiple mutexes on the same condition variable\nsimultaneously will result in a runtime panic. However it is possible to\nswitch to a different mutex if there are no threads currently waiting on\nthe condition variable.\n\n# Differences from the standard library `Condvar`\n\n- No spurious wakeups: A wait will only return a non-timeout result if it\n  was woken up by `notify_one` or `notify_all`.\n- `Condvar::notify_all` will only wake up a single thread, the rest are\n  requeued to wait for the `Mutex` to be unlocked by the thread that was\n  woken up.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `Condvar` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n\n# Examples\n\n```\nuse parking_lot::{Mutex, Condvar};\nuse std::sync::Arc;\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\n// Inside of our lock, spawn a new thread, and then wait for it to start\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock();\n    *started = true;\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock();\nif !*started {\n    cvar.wait(&mut started);\n}\n// Note that we used an if instead of a while loop above. This is only\n// possible because parking_lot's Condvar will never spuriously wake up.\n// This means that wait() will only return after notify_one or notify_all is\n// called.\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:33","a:2:2699:228-0:31:1644","a:2:2682:220-0:31:1644","a:2:2739:2943-0:31:1644","a:2:8212:3032-0:31:1644","a:2:8213:3031-0:31:1644","b:2:2246-0:31:1644","b:2:2540-0:31:1644","b:2:2536-0:31:1644","b:2:2551-0:31:1644","b:2:3316-0:31:1644","b:2:2249-0:31:1644","b:2:2546-0:31:1644","0:67","0:65"]}},"0:421-0:98:1650":{"id":"0:421-0:98:1650","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::const_mutex","name":"const_mutex","id":"0:98:1650","glob":false}},"0:168:2346":{"id":"0:168:2346","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_fair_mutex.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[427,0],"end":[450,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeDowngrade","id":"20:502:2461","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:304:2462","0:305:2463"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:683-0:460:1653":{"id":"b:5:683-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:3337","5:686:3338","5:687:3339"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:296:2449":{"id":"0:296:2449","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[333,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:686:3338":{"id":"5:686:3338","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:32382":{"id":"2:11945:32382","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11944:32383"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:43516:6322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2693:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2540-0:157:1654":{"id":"b:2:2540-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:458":{"id":"0:458","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:459:423"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[325,0],"end":[331,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9105:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:357:1659":{"id":"0:357:1659","crate_id":0,"name":"RawThreadId","span":{"filename":"src/remutex.rs","begin":[13,0],"end":[13,23]},"visibility":"public","docs":"Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:2699:228-0:357:1659","a:2:2682:220-0:357:1659","a:2:2739:2943-0:357:1659","a:2:8212:3032-0:357:1659","a:2:8213:3031-0:357:1659","b:2:2246-0:357:1659","b:2:2540-0:357:1659","b:2:2536-0:357:1659","b:2:2551-0:357:1659","b:2:3316-0:357:1659","b:2:2249-0:357:1659","b:2:2546-0:357:1659","0:359"]}},"2:11933:27162":{"id":"2:11933:27162","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:2812":{"id":"2:11993:2812","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11618:14030","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::matches":"2:11993:2812"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:43437:6317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2536-0:31:1644":{"id":"b:2:2536-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:3273"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:270:2419":{"id":"0:270:2419","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[116,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:424-0:100:167":{"id":"0:424-0:100:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,60],"end":[43,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::MutexGuard","name":"MutexGuard","id":"0:100:167","glob":false}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2692:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:87:1648":{"id":"0:87:1648","crate_id":0,"name":"FairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[92,0],"end":[92,75]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MutexGuard","id":"20:91:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:361:2502":{"id":"0:361:2502","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[18,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:22284:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:430-0:261:1656":{"id":"0:430-0:261:1656","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::raw_rwlock::RawRwLock","name":"RawRwLock","id":"0:261:1656","glob":false}},"2:2248:2523":{"id":"2:2248:2523","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3316-0:357:1659":{"id":"b:2:3316-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12039:28288":{"id":"2:12039:28288","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916":{"id":"2:11916","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11917:811","2:11918:2055","2:11919:34889","2:11920:34890","2:11922:34891","2:11925:27086","2:11926:34892","2:11927:314","2:11928:27164","2:11929:2488","2:11931:2183","2:11933:27162","2:11935:27163","2:11937:34893","2:11938:34894","2:11939:27187","2:11940:27188","2:11941:6044","2:11942:6331","2:11943:5964","2:11944:32383","2:11945:32382","2:11946:26268","2:11947:34895","2:11948:32439","2:11949:27204","2:11952:27205","2:11955:27206","2:11958:3318","2:11962:3279","2:11966:26267","2:11969:27196","2:11972:27198","2:11975:34896","2:11978:34897","2:11981:27200","2:11984:27202","2:11987:34898","2:11990:34899","2:11993:2812","2:11996:34900","2:11999:34901","2:12002:34902","2:12005:34903","2:12007:34904","2:12009:34905","2:12011:34906","2:12012:34907","2:12013:34908","2:12016:34909","2:12019:25902","2:12022:27207","2:12025:34910","2:12028:34911","2:12031:34912","2:12034:34913","2:12036:28284","2:12037:28285","2:12038:28287","2:12039:28288","2:12040:28289","2:12041:34914","2:12043:8663","2:12044:34915"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2546-0:157:1654":{"id":"b:2:2546-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2536-0:261:1656":{"id":"b:2:2536-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:3273"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:34:939":{"id":"0:34:939","crate_id":0,"name":"new","span":{"filename":"src/condvar.rs","begin":[98,4],"end":[102,5]},"visibility":"public","docs":"Creates a new condition variable which is ready to be waited on and\nnotified.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:1934":{"id":"0:56:1934","crate_id":0,"name":"wait_while","span":{"filename":"src/condvar.rs","begin":[425,4],"end":[431,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification. If the provided condition evaluates to `false`, then the\nthread is no longer blocked and the operation is completed. If the\ncondition evaluates to `true`, then the thread is blocked again and\nwaits for another notification before repeating this process.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["condition",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2926:1929","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2546-0:261:1656":{"id":"b:2:2546-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2536-0:460:1653":{"id":"b:2:2536-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:3273"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2246-0:197:1655":{"id":"b:2:2246-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2523"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:443-0:392:1665":{"id":"0:443-0:392:1665","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLockUpgradableReadGuard","name":"RwLockUpgradableReadGuard","id":"0:392:1665","glob":false}},"2:12036:28284":{"id":"2:12036:28284","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[85,0],"end":[316,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:939","0:132:1382","0:133:392","0:136:2314"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:386:1663":{"id":"0:386:1663","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[113,0],"end":[113,90]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedRwLockReadGuard","id":"20:771:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11929:2488":{"id":"2:11929:2488","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41272:179"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:309:2468":{"id":"0:309:2468","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/raw_rwlock.rs","begin":[480,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9040:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:90:1649":{"id":"0:90:1649","crate_id":0,"name":"MappedFairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[101,0],"end":[101,87]},"visibility":"public","docs":"An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedMutexGuard","id":"20:151:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"a:2:2682:220-0:460:1653":{"id":"a:2:2682:220-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2315:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2739:2943-0:127:1652":{"id":"a:2:2739:2943-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2943","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8213:3031-0:446:1645":{"id":"a:2:8213:3031-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8213:3031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2739:2943-0:197:1655":{"id":"a:2:2739:2943-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2943","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:416-0:85:1646":{"id":"0:416-0:85:1646","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,27],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::const_fair_mutex","name":"const_fair_mutex","id":"0:85:1646","glob":false}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[94,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:34:939","0:35:1848","0:39:1870","0:43:1886","0:45:1904","0:51:1923","0:56:1934","0:59:1940","0:62:1945"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11946:26268":{"id":"2:11946:26268","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:43487:6319","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:389:1664":{"id":"0:389:1664","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[122,0],"end":[122,92]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedRwLockWriteGuard","id":"20:822:1664","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"b:2:2246-0:127:1652":{"id":"b:2:2246-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2523"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:103:1651":{"id":"0:103:1651","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[110,0],"end":[110,79]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedMutexGuard","id":"20:151:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:157:1654":{"id":"0:157:1654","crate_id":0,"name":"RawFairMutex","span":{"filename":"src/raw_fair_mutex.rs","begin":[12,0],"end":[12,34]},"visibility":"public","docs":"Raw fair mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2699:228-0:157:1654","a:2:2682:220-0:157:1654","a:2:2739:2943-0:157:1654","a:2:8212:3032-0:157:1654","a:2:8213:3031-0:157:1654","b:2:2246-0:157:1654","b:2:2540-0:157:1654","b:2:2536-0:157:1654","b:2:2551-0:157:1654","b:2:3316-0:157:1654","b:2:2249-0:157:1654","b:2:2546-0:157:1654","0:167","0:170","0:160"]}},"b:2:2540-0:460:1653":{"id":"b:2:2540-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:414-0:446:1645":{"id":"0:414-0:446:1645","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,33],"end":[41,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::condvar::WaitTimeoutResult","name":"WaitTimeoutResult","id":"0:446:1645","glob":false}},"b:2:2546-0:127:1652":{"id":"b:2:2546-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8212:3032-0:460:1653":{"id":"a:2:8212:3032-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8212:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:211:1782":{"id":"0:211:1782","crate_id":0,"name":"Instant","span":{"filename":"src/raw_mutex.rs","begin":[143,4],"end":[143,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9040:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:267:2412":{"id":"0:267:2412","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[80,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:445-20:0:1641":{"id":"0:445-20:0:1641","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[56,0],"end":[56,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"::lock_api","name":"lock_api","id":"20:0:1641","glob":false}},"0:165:1911":{"id":"0:165:1911","crate_id":0,"name":"unlock","span":{"filename":"src/raw_fair_mutex.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:160":{"id":"0:160","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[14,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:161:2152","0:162:1640","0:163:1918","0:164:2174","0:165:1911","0:166:2347"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:370:1658":{"id":"0:370:1658","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[68,0],"end":[69,70]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedReentrantMutexGuard","id":"20:398:1658","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:85:1646":{"id":"0:85:1646","crate_id":0,"name":"const_fair_mutex","span":{"filename":"src/fair_mutex.rs","begin":[83,0],"end":[85,1]},"visibility":"public","docs":"Creates a new fair mutex in an unlocked state ready for use.\n\nThis allows creating a fair mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"FairMutex","id":"0:83:1647","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12038:28287":{"id":"2:12038:28287","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:450:668":{"id":"0:450:668","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9080:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9069:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2315:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:136:2314":{"id":"0:136:2314","crate_id":0,"name":"call_once_force","span":{"filename":"src/once.rs","begin":[179,4],"end":[191,5]},"visibility":"public","docs":"Performs the same function as `call_once` except ignores poisoning.\n\nIf this `Once` has been poisoned (some initialization panicked) then\nthis function will continue to attempt to call initialization functions\nuntil one of them doesn't panic.\n\nThe closure `f` is yielded a structure which can be used to query the\nstate of this `Once` (whether initialization has previously panicked or\nnot).","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:2303","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:811":{"id":"2:11917:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11878:419"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[40,0],"end":[50,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:2346","0:169:2004"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11975:34896":{"id":"2:11975:34896","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11618:14030","str::split":"2:11966:26267","prim@char":"1:11878:419","`DoubleEndedIterator`":"2:7203:121","str::rsplit_terminator":"2:11978:34897"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:43283:6313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12002:34902":{"id":"2:12002:34902","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11618:14030","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::match_indices":"2:11999:34901"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:43401:6316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:14028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:208:2004":{"id":"0:208:2004","crate_id":0,"name":"bump","span":{"filename":"src/raw_mutex.rs","begin":[134,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:428-0:157:1654":{"id":"0:428-0:157:1654","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::raw_fair_mutex::RawFairMutex","name":"RawFairMutex","id":"0:157:1654","glob":false}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[25,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:1786"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3316-0:31:1644":{"id":"b:2:3316-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:463:2245":{"id":"0:463:2245","crate_id":0,"name":"Poisoned","span":{"filename":"src/once.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":"A closure was executed but panicked.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:479:668":{"id":"0:479:668","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9080:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9069:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:461:2243":{"id":"0:461:2243","crate_id":0,"name":"New","span":{"filename":"src/once.rs","begin":[24,4],"end":[24,7]},"visibility":"default","docs":"A closure has not been executed yet","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9105:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:376:217":{"id":"0:376:217","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[89,0],"end":[89,52]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThis lock uses a task-fair locking policy which avoids both reader and\nwriter starvation. This means that readers trying to acquire the lock will\nblock even if the lock is unlocked when there are writers waiting to acquire\nthe lock. Because of this, attempts to recursively acquire a read lock\nwithin a single thread may result in a deadlock.\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same lock in succession, which can starve\nother threads waiting to acquire the rwlock. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na rwlock it has just released, this can starve other threads.\n\nThis rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the rwlock.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`\nor `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply\ndropping the guard.\n\n# Differences from the standard library `RwLock`\n\n- Supports atomically downgrading a write lock into a read lock.\n- Task-fair locking policy instead of an unspecified platform default.\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `RwLock` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the rwlock is fair on average.\n- Optionally allows making the rwlock fair by calling\n  `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read();\n    let r2 = lock.read();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here\n```","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLock","id":"20:510:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:200:2152":{"id":"0:200:2152","crate_id":0,"name":"INIT","span":{"filename":"src/raw_mutex.rs","begin":[59,4],"end":[61,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:151:60":{"id":"0:151:60","crate_id":0,"name":"default","span":{"filename":"src/once.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:422-0:103:1651":{"id":"0:422-0:103:1651","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,35],"end":[43,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::MappedMutexGuard","name":"MappedMutexGuard","id":"0:103:1651","glob":false}},"0:476":{"id":"0:476","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2310:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:477:613"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11947:34895":{"id":"2:11947:34895","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:43497:6320","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:34908":{"id":"2:12013:34908","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11643:14027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:283:1782":{"id":"0:283:1782","crate_id":0,"name":"Instant","span":{"filename":"src/raw_rwlock.rs","begin":[207,4],"end":[207,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9040:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2551-0:446:1645":{"id":"b:2:2551-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:202:1918":{"id":"0:202:1918","crate_id":0,"name":"lock","span":{"filename":"src/raw_mutex.rs","begin":[66,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:304:2462":{"id":"0:304:2462","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[429,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11999:34901":{"id":"2:11999:34901","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11618:14030","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::rmatch_indices":"2:12002:34902"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:43383:6315","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2246-0:157:1654":{"id":"b:2:2246-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2523"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[154,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_shared","bump_exclusive"],"trait":{"name":"RawRwLockFair","id":"20:473:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:275:2426","0:276:2427","0:277:2428","0:278:2430"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2682:220-0:446:1645":{"id":"a:2:2682:220-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2246-0:460:1653":{"id":"b:2:2246-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2523"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2551-0:157:1654":{"id":"b:2:2551-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2249-0:261:1656":{"id":"b:2:2249-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2525"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11941:6044":{"id":"2:11941:6044","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11878:419"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:43203:6036","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12040:28289":{"id":"2:12040:28289","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,31],"end":[22,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2694:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:0:1666":{"id":"0:0:1666","crate_id":0,"name":"parking_lot","span":{"filename":"src/lib.rs","begin":[8,0],"end":[56,19]},"visibility":"public","docs":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n`Once` that are smaller, faster and more flexible than those in the Rust\nstandard library. It also provides a `ReentrantMutex` type.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:413-0:31:1644","0:414-0:446:1645","0:416-0:85:1646","0:417-0:83:1647","0:418-0:87:1648","0:419-0:90:1649","0:421-0:98:1650","0:422-0:103:1651","0:423-0:96:166","0:424-0:100:167","0:426-0:127:1652","0:427-0:460:1653","0:428-0:157:1654","0:429-0:197:1655","0:430-0:261:1656","0:432-0:365:1657","0:433-0:370:1658","0:434-0:357:1659","0:435-0:363:1660","0:436-0:367:1661","0:438-0:378:1662","0:439-0:386:1663","0:440-0:389:1664","0:441-0:376:217","0:442-0:380:218","0:443-0:392:1665","0:444-0:383:219","0:445-20:0:1641"],"is_stripped":false}},"0:434-0:357:1659":{"id":"0:434-0:357:1659","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,54],"end":[49,65]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::RawThreadId","name":"RawThreadId","id":"0:357:1659","glob":false}},"0:432-0:365:1657":{"id":"0:432-0:365:1657","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,4],"end":[49,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::const_reentrant_mutex","name":"const_reentrant_mutex","id":"0:365:1657","glob":false}},"0:440-0:389:1664":{"id":"0:440-0:389:1664","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,41],"end":[53,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::MappedRwLockWriteGuard","name":"MappedRwLockWriteGuard","id":"0:389:1664","glob":false}},"2:11944:32383":{"id":"2:11944:32383","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11945:32382"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:43507:6321","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:439-0:386:1663":{"id":"0:439-0:386:1663","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,18],"end":[53,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::MappedRwLockReadGuard","name":"MappedRwLockReadGuard","id":"0:386:1663","glob":false}},"0:171:122":{"id":"0:171:122","crate_id":0,"name":"Duration","span":{"filename":"src/raw_fair_mutex.rs","begin":[53,4],"end":[53,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:2682:220-0:357:1659":{"id":"a:2:2682:220-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9105:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:479:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:417-0:83:1647":{"id":"0:417-0:83:1647","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,45],"end":[42,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::FairMutex","name":"FairMutex","id":"0:83:1647","glob":false}},"5:5400:28421":{"id":"5:5400:28421","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12039:28288"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2546-0:460:1653":{"id":"b:2:2546-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2682:220-0:197:1655":{"id":"a:2:2682:220-0:197:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:436-0:367:1661":{"id":"0:436-0:367:1661","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::ReentrantMutexGuard","name":"ReentrantMutexGuard","id":"0:367:1661","glob":false}},"5:687:3339":{"id":"5:687:3339","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:83:1647":{"id":"0:83:1647","crate_id":0,"name":"FairMutex","span":{"filename":"src/fair_mutex.rs","begin":[78,0],"end":[78,57]},"visibility":"public","docs":"A mutual exclusive primitive that is always fair, useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\nThe regular mutex provided by `parking_lot` uses eventual fairness\n(after some time it will default to the fair algorithm), but eventual\nfairness does not provide the same guarantees an always fair method would.\nFair mutexes are generally slower, but sometimes needed.\n\nIn a fair mutex the waiters form a queue, and the lock is always granted to\nthe next requester in the queue, in first-in first-out order. This ensures\nthat one thread cannot starve others by quickly re-acquiring the lock after\nreleasing it.\n\nA fair mutex may not be interesting if threads have different priorities (this is known as\npriority inversion).\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `FairMutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n\n# Examples\n\n```\nuse parking_lot::FairMutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(FairMutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::Mutex","id":"20:35:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:62:1945":{"id":"0:62:1945","crate_id":0,"name":"wait_while_for","span":{"filename":"src/condvar.rs","begin":[496,4],"end":[507,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration. If the provided condition evaluates to `false`,\nthen the thread is no longer blocked and the operation is completed.\nIf the condition evaluates to `true`, then the thread is blocked again\nand waits for another notification before repeating this process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["condition",{"kind":"generic","inner":"F"}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:44007:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2926:1929","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:477:613":{"id":"0:477:613","crate_id":0,"name":"eq","span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:446:1645":{"id":"0:446:1645","crate_id":0,"name":"WaitTimeoutResult","span":{"filename":"src/condvar.rs","begin":[23,0],"end":[23,35]},"visibility":"public","docs":"A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:2699:228-0:446:1645","a:2:2682:220-0:446:1645","a:2:2739:2943-0:446:1645","a:2:8212:3032-0:446:1645","a:2:8213:3031-0:446:1645","b:2:2246-0:446:1645","b:2:2540-0:446:1645","b:2:2536-0:446:1645","b:2:2551-0:446:1645","b:2:3316-0:446:1645","b:2:2249-0:446:1645","b:2:2546-0:446:1645","b:5:683-0:446:1645","0:458","0:454","0:452","0:449","0:455","0:457","0:451"]}},"5:685:3337":{"id":"5:685:3337","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"a:2:2682:220-0:31:1644":{"id":"a:2:2682:220-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8212:3032-0:127:1652":{"id":"a:2:8212:3032-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8212:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:100:167":{"id":"0:100:167","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[101,0],"end":[101,67]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MutexGuard","id":"20:91:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:153:668":{"id":"0:153:668","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[326,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9080:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9069:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:174:2350":{"id":"0:174:2350","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_fair_mutex.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:30:2348","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207:2346":{"id":"0:207:2346","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_mutex.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:30:1786":{"id":"0:30:1786","crate_id":0,"name":"timed_out","span":{"filename":"src/condvar.rs","begin":[28,4],"end":[30,5]},"visibility":"public","docs":"Returns whether the wait was known to have timed out.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2546-0:446:1645":{"id":"b:2:2546-0:446:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[270,0],"end":[292,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursive","id":"20:487:2440","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:2441","0:290:2442"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:278:2430":{"id":"0:278:2430","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[184,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,9],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2694:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:166:2347":{"id":"0:166:2347","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_fair_mutex.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2699:228-0:357:1659":{"id":"a:2:2699:228-0:357:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:66:60":{"id":"0:66:60","crate_id":0,"name":"default","span":{"filename":"src/condvar.rs","begin":[512,4],"end":[514,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:392":{"id":"0:133:392","crate_id":0,"name":"call_once","span":{"filename":"src/once.rs","begin":[157,4],"end":[167,5]},"visibility":"public","docs":"Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.\n\nThis method will block the calling thread if another initialization\nroutine is currently running.\n\nWhen this function returns, it is guaranteed that some initialization\nhas run and completed (it may not be the closure specified). It is also\nguaranteed that any memory writes performed by the executed closure can\nbe reliably observed by other threads at this point (there is a\nhappens-before relation between the closure and code executing after the\nreturn).\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\n// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g. write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\nfn get_cached_val() -> usize {\n    unsafe {\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\nfn expensive_computation() -> usize {\n    // ...\n# 2\n}\n```\n\n# Panics\n\nThe closure `f` will only be executed once if this is called\nconcurrently amongst many threads. If that closure panics, however, then\nit will *poison* this `Once` instance, causing all future invocations of\n`call_once` to also panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2929:2303","args":{"parenthesized":{"inputs":[],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:27204":{"id":"2:11949:27204","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:380:218":{"id":"0:380:218","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[100,0],"end":[100,78]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLockReadGuard","id":"20:595:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:12019:25902":{"id":"2:12019:25902","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12044:34915":{"id":"2:12044:34915","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4534:34915"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:43550:6225","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5399:8778":{"id":"5:5399:8778","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:1652":{"id":"0:127:1652","crate_id":0,"name":"Once","span":{"filename":"src/once.rs","begin":[83,0],"end":[83,26]},"visibility":"public","docs":"A synchronization primitive which can be used to run a one-time\ninitialization. Useful for one-time initialization for globals, FFI or\nrelated functionality.\n\n# Differences from the standard library `Once`\n\n- Only requires 1 byte of space, instead of 1 word.\n- Not required to be `'static`.\n- Relaxed memory barriers in the fast path, which can significantly improve\n  performance on some architectures.\n- Efficient handling of micro-contention using adaptive spinning.\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic START: Once = Once::new();\n\nSTART.call_once(|| {\n    // run initialization here\n});\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:130","a:2:2699:228-0:127:1652","a:2:2682:220-0:127:1652","a:2:2739:2943-0:127:1652","a:2:8212:3032-0:127:1652","a:2:8213:3031-0:127:1652","b:2:2246-0:127:1652","b:2:2540-0:127:1652","b:2:2536-0:127:1652","b:2:2551-0:127:1652","b:2:3316-0:127:1652","b:2:2249-0:127:1652","b:2:2546-0:127:1652","0:152","0:150"]}},"0:419-0:90:1649":{"id":"0:419-0:90:1649","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,72],"end":[42,92]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::MappedFairMutexGuard","name":"MappedFairMutexGuard","id":"0:90:1649","glob":false}},"0:367:1661":{"id":"0:367:1661","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[59,0],"end":[59,98]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::ReentrantMutexGuard","id":"20:336:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"b:2:2249-0:157:1654":{"id":"b:2:2249-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2525"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11918:2055":{"id":"2:11918:2055","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:2183":{"id":"2:11931:2183","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41272:179"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2693:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:199":{"id":"0:199","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[58,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:200:2152","0:201:1640","0:202:1918","0:203:2174","0:204:1911","0:205:2347"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:418-0:87:1648":{"id":"0:418-0:87:1648","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,56],"end":[42,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::FairMutexGuard","name":"FairMutexGuard","id":"0:87:1648","glob":false}},"2:11942:6331":{"id":"2:11942:6331","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11878:419"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:43209:6311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:27198":{"id":"2:11972:27198","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11618:14030","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::split":"2:11966:26267"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:43251:6026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:14028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:163:1918":{"id":"0:163:1918","crate_id":0,"name":"lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[322,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgrade","id":"20:493:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:2446","0:296:2449","0:297:2451","0:298:2453","0:299:2455"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:383:219":{"id":"0:383:219","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[104,0],"end":[104,80]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLockWriteGuard","id":"20:645:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:51:1923":{"id":"0:51:1923","crate_id":0,"name":"wait_for","span":{"filename":"src/condvar.rs","begin":[379,4],"end":[386,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:44007:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:442-0:380:218":{"id":"0:442-0:380:218","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,73],"end":[53,88]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLockReadGuard","name":"RwLockReadGuard","id":"0:380:218","glob":false}},"2:11926:34892":{"id":"2:11926:34892","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12031:34912":{"id":"2:12031:34912","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:14028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5386:35566":{"id":"5:5386:35566","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:27086":{"id":"2:11925:27086","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11185:14031"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2739:2943-0:261:1656":{"id":"a:2:2739:2943-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2943","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[452,0],"end":[504,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeTimed","id":"20:505:2465","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:307:2466","0:308:2467","0:309:2468","0:310:2469"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:427-0:460:1653":{"id":"0:427-0:460:1653","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,27],"end":[44,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::once::OnceState","name":"OnceState","id":"0:460:1653","glob":false}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[205,0],"end":[268,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockTimed","id":"20:480:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:122","0:283:1782","0:284:2436","0:285:2437","0:286:2438","0:287:2439"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:392:1665":{"id":"0:392:1665","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[126,0],"end":[126,98]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLockUpgradableReadGuard","id":"20:710:1665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"a:2:2699:228-0:31:1644":{"id":"a:2:2699:228-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2540-0:31:1644":{"id":"b:2:2540-0:31:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:471:423":{"id":"0:471:423","crate_id":0,"name":"clone","span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2536-0:157:1654":{"id":"b:2:2536-0:157:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:3273"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:172:1782":{"id":"0:172:1782","crate_id":0,"name":"Instant","span":{"filename":"src/raw_fair_mutex.rs","begin":[54,4],"end":[54,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:8213:3031-0:460:1653":{"id":"a:2:8213:3031-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8213:3031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11948:32439":{"id":"2:11948:32439","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:43525:6043","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12034:34913":{"id":"2:12034:34913","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11579:127","`FromStr`":"2:11578:2992"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11578:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11578:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:293:2445":{"id":"0:293:2445","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/raw_rwlock.rs","begin":[309,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2435","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:460:1653":{"id":"0:460:1653","crate_id":0,"name":"OnceState","span":{"filename":"src/once.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"Current state of a `Once`.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:461:2243","0:463:2245","0:465:2247","0:467:2249"],"impls":["0:124","a:2:2699:228-0:460:1653","a:2:2682:220-0:460:1653","a:2:2739:2943-0:460:1653","a:2:8212:3032-0:460:1653","a:2:8213:3031-0:460:1653","b:2:2246-0:460:1653","b:2:2540-0:460:1653","b:2:2536-0:460:1653","b:2:2551-0:460:1653","b:2:3316-0:460:1653","b:2:2249-0:460:1653","b:2:2546-0:460:1653","b:5:683-0:460:1653","0:472","0:476","0:478","0:470","0:469","0:475","0:473"]}},"0:162:1640":{"id":"0:162:1640","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_fair_mutex.rs","begin":[17,4],"end":[17,69]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutex","id":"20:20:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2540-0:261:1656":{"id":"b:2:2540-0:261:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12025:34910":{"id":"2:12025:34910","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:14030"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:14028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2555:1471":{"id":"2:2555:1471","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:35567":{"id":"5:5389:35567","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3316-0:460:1653":{"id":"b:2:3316-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2739:2943-0:460:1653":{"id":"a:2:2739:2943-0:460:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2943","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:210:122":{"id":"0:210:122","crate_id":0,"name":"Duration","span":{"filename":"src/raw_mutex.rs","begin":[142,4],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:44007:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:2699:228-0:127:1652":{"id":"a:2:2699:228-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"paths":{"2:43507:6321":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:10689:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4527:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12236:4778":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:10413:6492":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"11:675:5846":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:8212:3032":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"25:4369:7447":{"crate_id":25,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:44149:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:40162:6242":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"25:5957:7888":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:6373:1653":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11319:4594":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:4400:5336":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:4507:8837":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:21008:6054":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"25:5841:7825":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:515:4157":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"25:493:7178":{"crate_id":25,"path":["libc","unix","timespec"],"kind":"struct"},"25:6576:7987":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:6637:14136":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"25:4717:7572":{"crate_id":25,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:1568:3938":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:5724:5377":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:46134:6407":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:2802:2898":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"25:4569:7544":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:43039:6298":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10402:4476":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:10625:6657":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"25:5855:7826":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12358:4797":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:7001:5940":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:2744:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:2911:34264":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:7147:5958":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:9734:4389":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12059:4738":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:43984:8283":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:4638:8846":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:1715:3966":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:8759:6632":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4836:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:917:5863":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12331:4795":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:22449:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:13399:5100":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:2386:2721":{"crate_id":1,"path":["std","io"],"kind":"module"},"25:4939:7683":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:40172:6244":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:9322:35795":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"25:4958:7693":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40200:6245":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:11330:6037":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6218:5466":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4439:7478":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4492:7502":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"24:0:2706":{"crate_id":24,"path":["cfg_if"],"kind":"module"},"6:587:7232":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:11069:20848":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"25:4705:7565":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"25:1586:7282":{"crate_id":25,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11813:4700":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:9258:6018":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:9907:4408":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:41338:3719":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"7:32:19762":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:4952:7688":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:10068:4429":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:3160:2913":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:6628:8015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"25:5075:7746":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"25:4686:7553":{"crate_id":25,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:3246:6496":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:2786:5294":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"25:4849:7628":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:8904:6636":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:4667:7551":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7543:5317":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"25:5860:7827":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:6443:3973":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7437:5668":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:614:35810":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"25:6812:8096":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"25:1517:7243":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:1080:5862":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:1555:7259":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:46052:6406":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"18:599:35811":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:40275:6251":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"9:502:5922":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:43964:8278":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"20:0:1641":{"crate_id":20,"path":["lock_api"],"kind":"module"},"17:12902:4959":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:21719:2995":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:44040:2957":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:43516:6322":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:2978:2906":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:5944:5401":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:3128:35706":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:3640:4250":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:45149:6362":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:11618:14030":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:8109:5750":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:6236:5476":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:2343:3341":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:1057:34266":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:9098:4346":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:21792:32437":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:43832:6340":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"20:462:1656":{"crate_id":20,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"17:9478:4364":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:2219:5958":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:9108:35796":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11888:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4797:7608":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"25:0:816":{"crate_id":25,"path":["libc"],"kind":"module"},"11:0:2709":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11369:6503":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:4970:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11090:4543":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"18:624:35808":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"25:4375:7448":{"crate_id":25,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:41587:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:42774:6292":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:6830:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8138:4215":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4681:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:47327:6457":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11032:2956":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:43437:6317":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:703:5847":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:7569:3172":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:2797:2893":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:3149:5868":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:9117:25911":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:11234:8288":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6800:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:45764:6386":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10649:4506":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:11012:6632":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:7520:8133":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7697:5309":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10721:4515":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:632:5936":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13689:5193":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:2243:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:2298:19891":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"25:6689:8024":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:39065:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:2746:3249":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"25:7530:8135":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:42279:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12550:4833":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:40300:2490":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"14:221:5844":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:2573:6488":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:10670:4510":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4521:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:39428:27113":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:40265:6250":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:6776:8077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"14:31:5839":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:6904:5570":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11903:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43654:6329":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10465:4484":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:707:4195":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:4510:5339":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:2905:34265":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:9265:4350":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13211:5050":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:8151:6319":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:9596:4376":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"25:4819:7617":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"25:578:7227":{"crate_id":25,"path":["libc","unix","tms"],"kind":"struct"},"17:9895:4404":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13744:5209":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11532:4630":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:2520:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:13791:5223":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10142:20927":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:11902:1124":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:1650:7328":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:1583:5867":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:10223:25298":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:8548:20841":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"9:0:2707":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:2212:8197":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:7159:8678":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:1544:3998":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:40324:6253":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:4445:5337":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:39049:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"15:180:19872":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:41270:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:6201:5459":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"25:4490:7502":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"25:4639:7549":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:12448:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"7:79:19769":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4472:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13249:5059":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:8965:6645":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:10237:6029":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:8867:8869":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:8256:20820":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:8424:8858":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:5557:5301":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10936:4533":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:8180:20787":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"20:499:2457":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:6684:32483":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"11:665:3284":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:2750:2884":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"25:6704:8028":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"23:343:24712":{"crate_id":23,"path":["smallvec","ToSmallVec"],"kind":"trait"},"17:975:4225":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13488:5122":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"11:326:3962":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:41627:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:40546:5998":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"23:97:24710":{"crate_id":23,"path":["smallvec","SmallVecData"],"kind":"enum"},"6:1614:7298":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:5385:6523":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:7165:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:29933:2991":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:20662:3349":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"5:1980:5941":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:5798:7795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:3639:3284":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:43049:6299":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"25:5030:7721":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9409:20855":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:9443:4361":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:9876:4287":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:43203:6036":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4416:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:44953:6354":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:6552:1661":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:4902:3020":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:573:7224":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:11678:4084":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"22:84:2377":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","release_resource"],"kind":"function"},"2:45428:6376":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:46820:6444":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:676:8666":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:40575:6257":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11885:1475":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:9534:4372":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:5779:5381":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"25:5878:7839":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:2310:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4941:7683":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"25:1592:7284":{"crate_id":25,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"25:6006:7907":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:3291:8774":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:2470:5281":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:6907:4066":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:660:4183":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4546:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:8801:31472":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:45097:6360":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:1783:6479":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:21323:6052":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:40335:6256":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:5370:6522":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:10798:20845":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13842:5234":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:2507:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:10316:4471":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:11878:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:20882:8876":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:9188:35801":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"25:4968:7699":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:9683:4386":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:42581:6290":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:1561:3718":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"25:7536:8136":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:41707:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"20:91:167":{"crate_id":20,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"6:5959:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11785:4694":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:7042:5594":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7077:20782":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6728:5548":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:6409:2942":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:8476:3718":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:5995:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:4789:5347":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"25:4381:7450":{"crate_id":25,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11653:4663":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:4323:2967":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"20:487:2440":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"2:22251:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"11:393:35770":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10691:20953":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:30180:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:4206:3718":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6488:5498":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:49274:8890":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:40153:6241":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"25:6114:7932":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5785:7794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"12:0:2710":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6558:5510":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:7015:31306":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:21451:8753":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:9080:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:10416:6494":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:12607:4841":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:12407:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:7100:3284":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:5686:2685":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:3520:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:6132:5437":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:45976:6404":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:4682:8808":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:1412:5849":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:47376:6460":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:8745:6631":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12072:4739":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:2765:2885":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:4184:2388":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:20652:8878":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:482:7173":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:5386:4336":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12510:4828":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10428:4481":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"11:991:5597":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:6485:2939":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:10832:6524":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:10104:4432":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6981:5584":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4653:7550":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7498:5681":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:41507:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"14:160:5839":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:7835:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7519:5682":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:7859:5941":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:47292:6454":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:2967:19918":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:5816:2934":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:22482:2997":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13240:5058":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:2198:8194":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11422:4610":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:7572:35789":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:39898:6224":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3131:25874":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:8780:668":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"1:4103:8815":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:2613:6489":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4111:8816":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:1839:3718":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"9:234:6286":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:39959:14096":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12622:4508":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:10897:4530":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4845:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8223:6607":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2789:2892":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"13:110:35777":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:8945:6641":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10705:4513":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8773:6633":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"18:736:24694":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:154:3957":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"20:151:1651":{"crate_id":20,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"1:11390:6504":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:4904:5351":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:8858:4214":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:9973:4415":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:8803:6525":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:11643:14027":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:7595:31470":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:39034:2908":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:9112:3254":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4726:7573":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:7788:6549":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:538:4167":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"13:0:2704":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:7349:4013":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"25:5972:7890":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13461:5115":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13385:5093":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:3439:3253":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:7235:5965":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"25:1523:7246":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:42793:6020":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:40569:6000":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:43383:6315":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:41165:8210":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"25:586:7232":{"crate_id":25,"path":["libc","unix","servent"],"kind":"struct"},"15:0:2712":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:7497:8127":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:8025:5741":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8072:4204":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"11:305:8263":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:2149:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"25:6022:7911":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12259:4787":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11355:4599":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:6621:4156":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:13477:5118":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11641:4660":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:8979:35804":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:2771:2888":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"25:4429:7475":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:44167:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:2836:2901":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:1611:3973":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:8482:6628":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:43960:8277":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13194:5045":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:1241:5862":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:40025:6234":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:41330:3718":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:3275:3966":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"22:83:1917":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","acquire_resource"],"kind":"function"},"1:2371:8748":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"11:768:3966":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:6460:5303":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:3116:3718":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:8072:5745":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:6057:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6535:3959":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:11446:4614":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:42309:5719":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:4423:7473":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:45642:6383":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"9:388:19777":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:3972:8795":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:40560:1652":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:2546:5284":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"25:4390:7455":{"crate_id":25,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:39234:5648":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:8261:7997":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"25:473:7168":{"crate_id":25,"path":["libc","unix","group"],"kind":"struct"},"2:2516:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"25:4755:7586":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:7934:6555":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:959:5856":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:7525:4070":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:10649:8287":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:20486:31532":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"25:4447:7484":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:12263:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:3183:5869":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:2240:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11471:4617":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:31952:6082":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:11901:1547":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:13324:5077":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:7128:14134":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:4540:5340":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"15:219:8326":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"25:1698:7358":{"crate_id":25,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:46472:6412":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:6151:7957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:38987:2917":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:1665:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:2594:5286":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:10989:4239":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5935:7876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:9379:6548":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:43988:2956":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:13015:5002":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:2345:8738":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:1919:20885":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4609:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2504:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:4678:8805":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"25:5745:7775":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:7266:5966":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:1914:3372":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:5811:5386":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:41321:3283":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"25:7566:8142":{"crate_id":25,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8283:6509":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:9116:3256":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11883:1365":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:500:7179":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:42269:8211":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:4371:7447":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"25:5965:7889":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:3162:35705":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:526:7199":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:1924:8720":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:13443:5111":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:8638:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:10109:6025":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"9:174:8339":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:8788:4212":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:9372:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:41256:6013":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:10626:4504":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:9489:4033":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:2616:5287":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:43685:6333":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"25:6819:8099":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11011:4536":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"25:5933:7876":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:1700:7358":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4294:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:8256:5763":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:2693:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:39910:6225":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:9325:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:9772:4393":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:40553:5999":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:12282:4788":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11299:4584":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13721:5208":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:42550:6282":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12894:4956":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:5655:5305":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:9218:4349":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"25:4329:7414":{"crate_id":25,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7259:3028":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"25:6603:7997":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"25:4730:7576":{"crate_id":25,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"25:546:7211":{"crate_id":25,"path":["libc","unix","pollfd"],"kind":"struct"},"1:11159:6530":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5870:7832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:9070:3253":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:45228:6365":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4619:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:22218:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"11:1540:5864":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:9853:4398":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:7281:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:5021:6515":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:1453:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:9000:6928":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:2262:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:25739:2994":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:3142:4237":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"25:4476:7494":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"25:5049:7735":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6376:5302":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:43487:6319":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:41547:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"25:499:7179":{"crate_id":25,"path":["libc","unix","rlimit"],"kind":"struct"},"1:10311:6630":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:2699:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:21844:2998":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:3139:2911":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:43020:6295":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:2406:7027":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"25:4497:7505":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:5643:5371":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:47070:6447":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:7635:5688":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:4480:5338":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:6482:2938":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:7230:8111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8316:3024":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:7818:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:862:3981":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"25:4880:1001":{"crate_id":25,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:7641:8667":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9498:4368":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:20830:8872":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:13639:5180":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:44159:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:8739:650":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"16:3063:4246":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:9577:4375":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:7674:8709":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:7538:8136":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4803:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:5905:3998":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:41465:3719":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:43112:6303":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:911:3966":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:3128:29993":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:20874:8753":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:8733:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:3880:8789":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10712:20954":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:9178:4348":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"18:755:4208":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6431:5496":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:5418:5360":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"25:7483:8125":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:279:2946":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4857:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:8667:4337":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:5305:5358":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:7226:2944":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:21557:6055":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:7467:5677":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:1873:5868":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:936:8679":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:3207:6494":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"25:5777:7793":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:10270:4467":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"14:202:14044":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:3899:5333":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:5998:20776":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:11305:4080":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:42571:6286":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"9:421:19778":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4865:7636":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:3300:5326":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:7366:20783":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4991:7706":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5015:7713":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:9886:4401":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"25:5986:7901":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:2923:2025":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:3672:5941":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:10819:6547":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:8195:20822":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5843:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7033:3984":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:7778:4288":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:2904:3337":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:9095:3173":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:6848:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"25:4316:7404":{"crate_id":25,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9488:4367":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10545:4239":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8168:8786":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11573:4640":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:4844:8844":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:9641:4380":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:39131:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:39997:6233":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:11881:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:2359:8742":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:4046:3719":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:9986:4416":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"8:0:2706":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:4913:3998":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46288:6410":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:4575:8010":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"11:279:8260":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:30164:3614":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:6605:4018":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:3910:8791":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:1431:5846":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:9875:6267":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"11:1859:5866":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:10048:6648":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:12236:32365":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1728:7371":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:1852:3966":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:9025:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"20:493:2390":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"1:1594:5869":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13367:5089":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11544:4631":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:4004:3973":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3324:6257":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"22:298:2235":{"crate_id":22,"path":["parking_lot_core","spinwait","SpinWait"],"kind":"struct"},"16:4327:5335":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"25:5868:7832":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:3782:5330":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:11900:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"11:744:5849":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:1546:7254":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11600:4649":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:44007:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:5693:2935":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:2755:2889":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:43121:6304":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:39153:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:3749:5329":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:44202:6347":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:21610:6056":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11220:4565":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:4486:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"25:7228:8111":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10580:4499":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:20428:3239":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:1622:7303":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:11844:8350":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:30728:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"25:1648:7328":{"crate_id":25,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:9333:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12388:4802":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"15:198:19873":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:43976:8281":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13066:5018":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:7041:34673":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:30756:3239":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:43011:6294":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:1035:5858":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"20:398:1658":{"crate_id":20,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"16:5963:5408":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4449:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:21453:8875":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4499:7505":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3123:5867":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:2907:8205":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6575:20779":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:45198:6364":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"25:7489:8126":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:21229:8887":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:4175:6506":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:636:4182":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:5071:5356":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6293:5482":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:11165:6670":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:0:2715":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:5104:5357":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:1634:3953":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7244:35794":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:13082:5021":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8822:6635":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:816:5863":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:47312:6456":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5402:4337":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:39926:6226":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:652:4160":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"25:4292:7387":{"crate_id":25,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8231:6600":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:3314:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:4333:2968":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2809:2895":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:3030:5322":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:20488:31534":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"25:4588:7545":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:7092:3284":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:2668:5289":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12419:4807":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:7457:4224":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"9:52:8329":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:9792:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6321:5484":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:2830:5296":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:123:14481":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:39214:6088":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:1009:5857":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:43233:6021":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"25:567:7222":{"crate_id":25,"path":["libc","unix","sigval"],"kind":"struct"},"17:11861:4710":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:4166:3998":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:8632:20821":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:4043:14004":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:4969:5353":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:8090:5747":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:6731:14129":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"25:561:7219":{"crate_id":25,"path":["libc","unix","linger"],"kind":"struct"},"1:11897:1491":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:9696:4368":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"25:487:7176":{"crate_id":25,"path":["libc","unix","timeval"],"kind":"struct"},"20:502:2461":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"2:43177:6307":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:6651:8016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"23:0:2874":{"crate_id":23,"path":["smallvec"],"kind":"module"},"2:10223:6028":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:47178:6449":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:7252:8112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6990:5587":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:21771:32469":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13433:5108":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:501:1995":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6008:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11585:4643":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:40182:5979":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"25:4811:7614":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11136:4547":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"25:7576:8144":{"crate_id":25,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:43455:6318":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:7055:3284":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:5976:5259":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4851:7628":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:4387:2970":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:45498:6378":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:40314:5993":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"25:6543:7964":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:2448:5280":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4960:7693":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:8909:4215":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6400:5494":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:21746:6063":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:46930:6445":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:7526:8134":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:1467:2057":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:7555:8141":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:41414:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"22:270:2351":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkToken"],"kind":"struct"},"11:828:8679":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:43219:4215":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:42960:6293":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:20696:8884":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:12576:4835":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13344:5084":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:13219:5053":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:2204:35776":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:5910:4057":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13857:5235":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8890:1645":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:1365:3719":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:5920:5253":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:43811:14043":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:41473:3284":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"25:7501:8128":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:11483:6538":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:5741:20775":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:5847:5393":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11434:4611":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7293:5628":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13865:5238":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:1594:7284":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:47391:6461":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"25:4918:7668":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2467:8753":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:2905:5299":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10699:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:1947:4231":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:119:14480":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:5499:7918":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13053:5013":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"25:1750:7380":{"crate_id":25,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"25:6626:8015":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:2929:2303":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"25:6698:8027":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:11884:1395":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:6696:20780":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:5563:4057":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:39109:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:6814:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4377:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:1462:5939":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11896:1490":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:6177:4010":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:10478:4485":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:962:3973":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:5346:5359":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:14:2590":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:13033:5007":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4318:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12522:4829":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"20:710:1665":{"crate_id":20,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11969:4726":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:6693:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:43337:6028":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11628:4659":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5717:7750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12046:4736":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13419:5106":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4784:7603":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:2087:5858":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1532:7249":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:20771:3349":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:5484:3945":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"11:1071:35775":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12646:4851":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:8957:6643":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:420:4222":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:12201:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4398:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7065:5596":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:4845:5349":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"20:595:218":{"crate_id":20,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"16:4702:5344":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:859:5855":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:39992:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:42559:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6935:5573":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:10144:6026":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:11024:25903":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:44028:2926":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:43550:6225":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:731:5848":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:5677:20774":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:6332:4156":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:10589:4500":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"25:5827:7814":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"25:4834:7621":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:2814:2896":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:8100:8752":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1908:15825":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:2760:2886":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:4624:5343":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"25:6108:7931":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6116:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"14:0:2711":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:22383:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:47468:6464":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:7656:8668":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:532:7202":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:7317:35791":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:44997:6356":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"25:4464:7490":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:562:7219":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:5900:7855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"25:4457:7487":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"14:215:5842":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:5693:5372":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:541:7208":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:4947:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:20761:8879":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:20441:31435":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:5077:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4821:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"25:1620:7303":{"crate_id":25,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:39945:6228":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:7277:5967":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:21335:31440":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:30252:32480":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:40191:5981":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:11406:6042":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:41208:6270":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:38948:2920":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4466:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:6009:4059":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:2549:4037":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"22:192:1776":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkResult"],"kind":"enum"},"2:43980:8282":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:2848:2904":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:4568:5341":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11877:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:3679:6503":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:2524:5283":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13651:5183":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"25:4825:7618":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:42589:6291":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4413:8819":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:2115:8264":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:5710:3938":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:8239:6609":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:5886:5395":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11502:4626":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:7175:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13879:5241":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11258:4580":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:9796:4394":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11556:4632":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"25:7507:8129":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:43525:6043":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:3621:3973":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4288:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9424:4359":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:8170:5756":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13145:5034":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:7690:6547":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"11:2076:5857":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:688:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13698:5195":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5071:7743":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"25:4551:7533":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:922:5846":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:11578:2992":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5779:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"25:4771:7595":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4882:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:20975:8753":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:1844:3804":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:5502:8863":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:4680:8807":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4688:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:8931:4219":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:8727:6630":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:6819:5562":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4698:7560":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"25:4396:7457":{"crate_id":25,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:5549:5984":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:12418:4046":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:9182:3804":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:11490:6538":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4478:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:2476:6487":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"25:4989:7706":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:9979:6481":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"13:226:8192":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9628:4379":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:9959:4414":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:2315:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"25:5753:7777":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:21679:8268":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:6553:7969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:3457:8751":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:7506:4068":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:7588:5686":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:11155:14166":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:1525:7246":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:2168:34679":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:21663:6057":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:43760:6046":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:13625:5174":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:45167:6363":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"25:4997:7708":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:8922:25548":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:9069:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"25:4724:7573":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:1564:7265":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:5832:14400":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"25:4617:7547":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6047:7917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:2404:5278":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"20:473:2425":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"17:13564:5167":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:9035:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:44265:6353":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12959:4996":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:9469:4362":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"0:0:1666":{"crate_id":0,"path":["parking_lot"],"kind":"module"},"16:7596:20784":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:11894:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"20:87:4156":{"crate_id":20,"path":["lock_api","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:2086:5943":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:43733:6334":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:47132:6448":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:46022:6405":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:43099:6302":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:8129:5751":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:7016:5588":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"25:7524:8134":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"25:7441:8124":{"crate_id":25,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:6569:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:361:3171":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:3354:3998":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:11328:6502":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:9670:4385":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"20:20:1655":{"crate_id":20,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"2:41346:3284":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"11:1879:5869":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:618:6470":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:41388:3029":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:10750:6032":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:4256:2961":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:10862:6633":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:6880:4204":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:487:4223":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:40131:6239":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:5594:5306":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:40584:4031":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:43060:6300":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:6605:7997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:5950:5986":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:2468:14100":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:47281:6453":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:10206:6523":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7859:20786":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:39918:5974":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:45596:6381":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"22:73:1779":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_PARK_TOKEN"],"kind":"constant"},"16:6890:5311":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:2915:34258":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9350:35798":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9340:4352":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"25:4525:7521":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:6245:3938":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5058:7738":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:6364:3284":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11844:4707":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:6868:5568":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6361:5490":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:11484:4618":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:5051:7735":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"25:6649:8016":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:8952:6642":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:13612:5168":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:1048:5597":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"25:1666:7340":{"crate_id":25,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7669:5318":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:9917:4409":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:1787:4227":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11222:6537":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:2205:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:11849:8669":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:2635:7025":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7488:5680":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:1381:3284":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:10840:4527":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:264:3973":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4404:7460":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:1736:7375":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:7010:3284":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:4853:8845":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:43952:8275":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:10303:4470":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:564:4169":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9453:20856":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:3533:3718":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:7544:8137":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:3400:6500":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"18:574:4160":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:10823:5919":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:12019:4439":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:491:4159":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:9114:3255":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8407:6623":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:9603:4041":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:2831:4054":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:5719:1644":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:7332:3966":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:10419:6496":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:43541:5974":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"25:4627:7548":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8212:8284":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10000:4417":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:1524:19854":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:42352:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8789:6634":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13233:5056":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:9588:4037":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:8915:3157":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8217:8818":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:10667:6663":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:45352:6370":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:10527:20952":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:1126:5861":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"25:5814:7805":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:3169:6493":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10505:4487":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:8389:20836":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5755:7777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:2720:5291":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:10644:8285":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"11:1050:19853":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"10:44:5871":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:814:3979":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"25:4741:7580":{"crate_id":25,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:2346:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11037:20847":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:7568:8142":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4707:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4719:7572":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:5491:5982":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"7:0:1537":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7411:5412":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4344:7424":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9866:4399":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"25:4795:7608":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6717:5547":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"20:645:219":{"crate_id":20,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:21754:6064":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:2378:5277":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10257:4466":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:6940:1629":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3874:8790":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"25:4843:7627":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8781:3718":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:535:5257":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:888:5849":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:4762:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:3448:25367":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:47338:6458":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:926:5847":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:41747:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12113:4746":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:10615:4503":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:12345:4796":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"25:553:7214":{"crate_id":25,"path":["libc","unix","winsize"],"kind":"struct"},"1:0:1387":{"crate_id":1,"path":["std"],"kind":"module"},"2:2587:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:530:2229":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:7335:35793":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:6351:20778":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11800:4698":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:2513:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:43141:6306":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:42789:8274":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:11689:14036":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"23:330:3945":{"crate_id":23,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"17:10555:4490":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:11892:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:3365:14064":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"25:4855:7631":{"crate_id":25,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:41079:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:60:35774":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"25:1544:7254":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"25:6774:8077":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5022:7716":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:32017:3251":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3059:6490":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:8521:20840":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:1565:3284":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11832:4705":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13426:5107":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:8753:4211":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:9946:4413":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:595:7237":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"18:671:4189":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:6390:5493":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4307:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"11:840:5853":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13332:5078":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:4736:4055":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:43301:6314":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"25:4507:7512":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"25:1607:7296":{"crate_id":25,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13257:5061":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:531:4164":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12178:4752":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:7258:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:11088:1782":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"18:699:4193":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:41457:3718":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:7694:6081":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:40122:6238":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"25:505:7182":{"crate_id":25,"path":["libc","unix","rusage"],"kind":"struct"},"18:681:4190":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:11390:6041":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:11891:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:39175:2909":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2207:6486":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:6548:3292":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:6706:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"9:325:8200":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10377:4474":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:2188:8267":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:5640:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"22:252:2391":{"crate_id":22,"path":["parking_lot_core","parking_lot","FilterOp"],"kind":"enum"},"17:8718:4210":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:2742:3247":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:45398:6375":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4538:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12770:4853":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11770:4690":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:43845:6344":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:2682:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:3179:31829":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:11891:4713":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:7192:5959":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11142:4078":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:6821:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:507:4160":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:11367:6040":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:3872:5332":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:2157:19847":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"25:4749:7584":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:41102:6008":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:11882:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:45019:6357":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12835:4904":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:4559:7535":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"25:4437:7478":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:40102:6236":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:43497:6320":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11193:4557":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:43639:6324":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:359:3964":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:4932:5352":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:679:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:45898:6389":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:40232:6249":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11721:4665":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:10939:4076":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"25:4978:7700":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"25:4286:7386":{"crate_id":25,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9512:4369":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:55:5732":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:4008:5976":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:2830:2900":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:43251:6026":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"9:445:19776":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6755:8063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"25:6828:8102":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:11458:8224":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:8651:4336":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:30194:32481":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12915:4966":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:2319:5268":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:41397:3431":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:7805:6551":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:879:3718":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:6865:29809":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:7783:6548":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:1843:3284":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:4335:4000":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:1144:5862":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11282:4581":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:11069:6932":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"11:1866:5867":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:40144:6240":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:3087:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2781:2890":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:9040:1782":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:4037:5334":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13812:5229":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:3815:5331":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:10459:3161":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:43972:8280":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:521:24696":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6254:5479":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4827:7618":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:41221:6505":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:11171:6034":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"18:609:4177":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:10679:6550":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:8806:8348":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:11185:14031":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"25:6045:7917":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:547:7211":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"25:531:7202":{"crate_id":25,"path":["libc","unix","hostent"],"kind":"struct"},"17:9557:4349":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:2808:5295":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:1978:4234":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:1227:5857":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:8633:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:21224:8877":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:11459:4616":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5829:7814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:7252:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12799:4873":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8909:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"25:1553:7259":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:10928:4075":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:30158:3366":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:579:7227":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6943:20781":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"20:510:217":{"crate_id":20,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"2:43209:6311":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"23:327:24711":{"crate_id":23,"path":["smallvec","Array"],"kind":"trait"},"2:2704:2973":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:1034:4226":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12318:4793":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:638:6473":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:1846:6482":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:1668:7340":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"20:332:4156":{"crate_id":20,"path":["lock_api","remutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:9368:14104":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:6133:6528":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4732:7576":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:727:4202":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12403:4806":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12098:4743":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:9748:4349":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:6002:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:9120:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:1754:3369":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:7275:8123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:20456:31435":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:42029:3255":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"20:771:1663":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"11:2060:5597":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"21:19:3953":{"crate_id":21,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"1:4990:6515":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47353:6459":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:45043:6358":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:757:3938":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"10:36:8199":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:9030:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:5439:6524":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:6085:4046":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10967:4534":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10452:4483":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4509:7512":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:930:5850":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:1576:7274":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:2785:2894":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:4602:14089":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:13763:5214":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10923:4531":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"25:5063:7741":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:39933:14095":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:10080:4430":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13499:5123":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:20621:8881":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:4641:8819":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:41827:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:9384:4072":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:7468:6672":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13678:5192":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:4757:5346":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:3248:6497":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"14:40:4581":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13101:5022":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:8157:6600":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:8573:20842":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"25:4519:7518":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7803:5700":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:39207:2912":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:3047:19919":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11899:1489":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:3194:2918":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:2840:2902":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"25:122:14481":{"crate_id":25,"path":["libc","unix","fpos_t"],"kind":"enum"},"11:2192:8193":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"25:6055:7920":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12158:4751":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:1819:2975":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:11240:8289":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:3225:5325":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"25:6783:8080":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"25:540:7208":{"crate_id":25,"path":["libc","unix","iovec"],"kind":"struct"},"2:43968:8279":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:7851:6553":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"25:4782:7603":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"25:4607:7546":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12085:4741":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:1577:5866":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:39846:6219":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:7124:2958":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:20469:31531":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:2764:5293":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12372:4800":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:47254:6451":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"25:4470:7491":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"25:651:14835":{"crate_id":25,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:39978:6232":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:7662:6478":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:5616:5362":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"25:6722:8038":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:7578:8144":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:3167:6492":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:8490:20839":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7029:5591":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"25:4536:7526":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:554:7214":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11163:4553":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:7509:5315":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:554:1952":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:47429:6463":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6724:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"25:4557:7535":{"crate_id":25,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:2862:5297":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:45450:6377":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10125:4434":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3994:8799":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2159:3349":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:13159:5035":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:2844:2903":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:2352:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"25:1530:7249":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8384:6286":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"25:6134:7946":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12449:4813":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:5334:6520":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:1421:5863":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:1561:5865":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10569:4495":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:10783:6033":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7767:20785":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:9148:35799":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:8214:3030":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:1519:7243":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:45818:6388":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"25:5020:7716":{"crate_id":25,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:4365:3998":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:5367:19889":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:4434:2971":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:30358:32482":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:7711:5690":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:9964:3719":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:6685:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:9105:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"25:1574:7274":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:9110:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"22:46:3947":{"crate_id":22,"path":["parking_lot_core","parking_lot","ThreadData"],"kind":"struct"},"2:20471:31529":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5857:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:20801:8886":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:1752:7380":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"25:5715:7750":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:11893:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:5570:4058":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"25:4651:7550":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6061:19890":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:22284:2499":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:42374:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:488:7176":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:7587:3162":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:10416:4480":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:40252:5990":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:506:7182":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"25:1562:7265":{"crate_id":25,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"25:7542:8137":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"25:4696:7560":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:9078:2923":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11410:4607":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"25:4765:7592":{"crate_id":25,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:1731:3370":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"22:230:1777":{"crate_id":22,"path":["parking_lot_core","parking_lot","RequeueOp"],"kind":"enum"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"25:4665:7551":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"25:6551:7969":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:20634:8882":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"17:13453:5114":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"25:4873:7642":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:4111:2976":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:20876:8874":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:12503:8685":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:1572:3966":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"25:4402:7460":{"crate_id":25,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:22317:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13135:5033":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1721:7368":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:43822:6336":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:39858:32445":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10743:4520":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:3446:5327":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:7449:5669":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:1657:7332":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:9068:35802":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:4728:5345":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:7063:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:644:4160":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4629:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:3974:3938":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6767:5560":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:9571:4036":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:8214:5648":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:7443:8124":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:1994:5942":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:40214:6248":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:10182:6027":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10516:4488":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:6506:5506":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:7016:5956":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"25:4863:7636":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:653:14835":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"20:822:1664":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:45574:6380":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"25:6666:8017":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:39888:6223":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10015:4421":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:8598:20843":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"25:4342:7424":{"crate_id":25,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:1821:6481":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:44973:6355":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12461:4815":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:8953:4338":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:0:2713":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:1628:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"25:1690:7357":{"crate_id":25,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:6110:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:3982:8796":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:399:35771":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:7554:3721":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13309:5075":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13292:5067":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:7667:6544":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:9545:4331":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:1350:3718":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:8213:3031":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:3932:3998":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"25:1512:7241":{"crate_id":25,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:591:4156":{"crate_id":20,"path":["lock_api","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:11946:4722":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:21731:32471":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8257:6611":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:41482:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:10265:6031":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:45544:6379":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:11207:6535":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"20:480:2435":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"16:3585:5328":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6671:5535":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:10052:4427":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:2692:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:4596:5342":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11391:4606":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"25:6683:8022":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:40602:6004":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:4073:31305":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:857:3719":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:821:5850":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11879:4711":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:42534:6279":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:7613:3161":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:2960:2916":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:9122:3258":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3986:8797":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:10354:4073":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4898:7652":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5947:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:45795:6387":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:6369:1652":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"18:582:3239":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:21837:8271":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:47216:6450":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:9721:4388":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:46258:6409":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12033:4735":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12433:4809":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:690:4192":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:8283:20833":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:5234:14019":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10735:4518":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:7478:5314":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:10681:4511":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:11632:4195":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"25:4414:7469":{"crate_id":25,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"25:6567:7981":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:474:7168":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:4817:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:3505:3938":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:8044:6592":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:45620:6382":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:568:7222":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6243:35792":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:1847:3938":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:80:24684":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9275:35800":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:1539:7251":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:7509:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"20:8:1643":{"crate_id":20,"path":["lock_api","GuardNoSend"],"kind":"struct"},"2:43797:6335":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:7529:5316":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:4759:8804":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"20:336:1661":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:8047:5742":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:11827:6675":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:2739:2943":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:2777:2887":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:10071:6024":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4920:7668":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:3614:8788":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:8683:4209":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2502:5282":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:39089:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:2824:2899":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:3231:2919":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13821:5231":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:96:24685":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:7558:14133":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:45127:6361":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:1745:8208":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11860:25900":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:562:4224":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"20:505:2465":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"25:481:7173":{"crate_id":25,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6336:5486":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:6576:3945":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:7929:6554":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:4435:8820":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"25:1719:7368":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:7222:5962":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:40009:32470":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13411:5103":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:11890:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:13041:5008":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"20:227:2500":{"crate_id":20,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"2:3166:2915":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:39837:6218":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:4783:34165":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:4327:6508":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"20:490:2443":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"22:284:2392":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkToken"],"kind":"struct"},"2:4261:2962":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:9038:35803":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:62:14426":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"25:1734:7375":{"crate_id":25,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:4407:2869":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"25:4930:7677":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:2736:3245":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:6545:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"23:349:24713":{"crate_id":23,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"16:6919:35790":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4813:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:1715:7367":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:11623:6016":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:3781:6504":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:1071:5858":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"25:1655:7332":{"crate_id":25,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:7939:8777":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6662:5534":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:7683:5319":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:44240:6352":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:4573:8008":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:4398:4000":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:9373:6019":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6474:5320":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:11000:6631":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:45717:6385":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:9998:25302":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11993:4727":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"25:4544:7531":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:42334:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4331:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:3774:3973":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:45268:6367":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:10598:4534":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:9028:4345":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"25:6798:8087":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:20814:8753":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:8835:8868":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:40284:5991":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:5032:5355":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:97:8259":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:44210:6349":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:4124:8817":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:43029:6297":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3209:6495":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"22:211:1778":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkResult"],"kind":"struct"},"2:9124:3259":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:31948:6081":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:44223:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:8088:6501":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:4142:2977":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:6179:5444":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:43131:6305":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:113:24686":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:4872:5350":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:41244:6011":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:6700:8027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:39831:5974":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:7071:5957":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"25:4945:7686":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:6291:3973":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:5034:2934":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:45065:6359":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"25:4950:7688":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:2337:5270":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:7592:3163":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"9:352:19791":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:5796:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:1609:7296":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:7161:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6691:8024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:47008:6446":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:20733:8885":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"25:7250:8112":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"25:61:14426":{"crate_id":25,"path":["libc","unix","DIR"],"kind":"enum"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:9617:4378":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:6188:4057":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:3924:8792":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:4136:3998":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:5816:7805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:1709:7364":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"25:1906:15825":{"crate_id":25,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:9312:4351":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"20:230:2873":{"crate_id":20,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"6:1588:7282":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:766:24695":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"25:6014:7909":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12224:4776":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8797:3284":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:0:2714":{"crate_id":17,"path":["object"],"kind":"module"},"2:39248:2968":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:22152:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:43865:6047":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"25:1726:7371":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:8443:20838":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10761:20844":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12563:4834":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:119:3960":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10026:4422":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:11446:6671":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:1403:5848":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:901:3938":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:6016:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11372:4601":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6578:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:46212:6408":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:3546:3719":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"25:6149:7957":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:6101:4063":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"20:27:2344":{"crate_id":20,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"6:4553:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:6022:20777":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:7503:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10092:4431":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5065:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6544:5308":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4751:7584":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:1077:35763":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:4378:2969":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:9566:4350":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:10251:6030":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12194:4757":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2690:2974":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13356:5085":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4255:6507":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:22119:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:10491:4486":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5974:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12483:4826":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:1442:5847":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"25:6000:7904":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:3266:4238":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:652:3719":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:22929:2993":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4095:8814":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:46322:6411":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:43355:6029":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:6737:4010":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6136:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:42043:3256":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6793:5561":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"22:82:1637":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock"],"kind":"module"},"17:12980:5001":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:8420:20837":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4743:7580":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"14:187:19866":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13376:5092":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:6307:5300":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:2510:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:1682:7351":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:21808:32446":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5862:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:2572:5285":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"18:719:4199":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:10945:4077":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12496:4827":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"25:4421:7473":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9228:35797":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:22416:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:3932:8793":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:3157:5866":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"21:60:24704":{"crate_id":21,"path":["scopeguard","Always"],"kind":"enum"},"23:280:3284":{"crate_id":23,"path":["smallvec","IntoIter"],"kind":"struct"},"1:11889:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:2214:8735":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:11895:1493":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:10709:6501":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:5708:5375":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"25:594:7237":{"crate_id":25,"path":["libc","unix","protoent"],"kind":"struct"},"17:10885:4529":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8851:8867":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6164:5442":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12536:4830":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:844:3718":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6442:5497":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11520:4627":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:41119:6010":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:2793:2891":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:1196:5597":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4590:7545":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:3382:6603":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13777:5216":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:43086:6236":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:242:4217":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:2819:2897":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:638:3718":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:42036:3254":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4980:7700":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11234:4566":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12006:4730":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:1589:5868":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:2539:4051":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:7485:8125":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:10844:25891":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:2361:8743":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:43668:6332":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"25:4801:7611":{"crate_id":25,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:585:8662":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4911:7662":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:2868:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"18:590:4170":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:43283:6313":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:6785:8080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:11192:6534":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:47301:6455":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"10:0:2708":{"crate_id":10,"path":["adler"],"kind":"module"},"6:4392:7455":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:8156:5321":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:9933:4411":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:480:4048":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"25:6585:7988":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10660:4508":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:10857:20846":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:2426:5279":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:8360:20835":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:41406:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:5354:6521":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:40349:5995":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4459:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3464:8769":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:4320:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"14:7:5839":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:2357:5276":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:4767:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:40594:6002":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:8079:6499":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:867:3284":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"25:7256:8114":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"25:525:7199":{"crate_id":25,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:1635:3610":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:386:4220":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:9782:8753":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:20999:8753":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8163:6602":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:10654:6549":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:30:2348":{"crate_id":20,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"25:1537:7251":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:6762:4021":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:1692:7357":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:44252:5870":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:41185:32461":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:41867:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"25:5807:7803":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11876:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:5747:7775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:40363:5996":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:40223:5985":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:35:3969":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:2210:2589":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:7551:3720":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"25:1713:7367":{"crate_id":25,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4790:7606":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:43191:6310":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:6595:4016":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:953:5855":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13506:5125":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"25:4305:7396":{"crate_id":25,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:39255:6090":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:1041:35765":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:3076:2910":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:42325:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"21:14:24703":{"crate_id":21,"path":["scopeguard","Strategy"],"kind":"trait"},"17:2933:4235":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12126:4747":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"25:6846:8105":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:40039:8722":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:13803:5225":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:1895:6483":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:45287:6368":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:5880:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13659:5186":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6876:5310":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:43401:6316":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:5773:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"25:5069:7743":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:10032:6023":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"20:268:1660":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"1:4577:8012":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4773:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:45250:6366":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:21858:2996":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:3996:5975":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11821:4702":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:40082:6235":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"21:0:2872":{"crate_id":21,"path":["scopeguard"],"kind":"module"},"6:4757:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:47406:6462":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:0:2705":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:20980:8873":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11902:4714":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10823:4308":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43956:8276":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:43532:6226":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9138:4347":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"25:4788:7606":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:11844:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:8131:6256":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:46678:6443":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1514:7241":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:4809:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:9826:4396":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:39952:6229":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:7837:5704":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"25:4679:7552":{"crate_id":25,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10635:4505":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:2694:5290":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:41136:8787":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"25:572:7224":{"crate_id":25,"path":["libc","unix","itimerval"],"kind":"struct"},"2:4020:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"25:4888:7647":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"11:867:5856":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:9839:4397":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9653:4382":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:3676:6502":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"25:4896:7652":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:13516:5130":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:43617:14042":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:7568:8753":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:2642:5288":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"25:6596:7993":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:2866:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8205:6505":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:947:5853":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7103:6645":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:20660:31575":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:7491:8126":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2982:2907":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:8334:6620":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:4252:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:3687:5942":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:9380:20854":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:21006:8880":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:782:3976":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:12214:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11060:4508":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"25:5898:7855":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:11879:1509":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:8121:6239":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:1785:6480":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:247:4218":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"25:1612:7298":{"crate_id":25,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:2931:19917":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:42542:6281":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:5238:14020":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"25:1680:7351":{"crate_id":25,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:4818:5348":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"22:72:2236":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_UNPARK_TOKEN"],"kind":"constant"},"25:1707:7364":{"crate_id":25,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6024:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:5764:2941":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"25:7495:8127":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6520:5508":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:30124:3613":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:3377:5973":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:5571:5304":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:1212:5858":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:2694:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"25:5056:7738":{"crate_id":25,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"22:0:1667":{"crate_id":22,"path":["parking_lot_core"],"kind":"module"},"2:42297:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:11898:1492":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2161:3350":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:12307:4792":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:21695:6058":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:41787:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:635:6471":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:8466:6510":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:2689:1887":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:5190:3973":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"23:57:3938":{"crate_id":23,"path":["smallvec","Drain"],"kind":"struct"},"1:8493:6629":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:2601:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:6668:8017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:355:3170":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:21870:2999":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4431:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"1:10719:25909":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:7174:2945":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11615:4655":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:5000:5354":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:22185:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13265:5063":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"25:4484:7499":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13121:5030":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9523:4370":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:7757:5692":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:47272:6452":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:7626:5687":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:10135:8865":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:1062:5857":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:9989:6021":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:2879:5298":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:6757:8870":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"25:7518:8133":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4890:7647":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4383:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:40243:5989":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:7206:32470":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:8142:5754":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10283:4469":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"25:5783:7794":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"25:7273:8123":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:7203:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4932:7677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"11:783:3968":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:2742:5292":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5967:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:45305:6369":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:42050:3257":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"25:5945:7881":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"25:5796:7795":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"25:7553:8141":{"crate_id":25,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7557:5683":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13024:5006":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"9:481:19775":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:9118:3257":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6327:5485":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"25:6753:8063":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:11638:14028":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6598:7993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10039:4425":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4999:7708":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:41667:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12634:4844":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13667:5187":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:643:8665":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:5630:5366":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:12288:6050":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"11:1091:5860":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:3938:8794":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11109:4546":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"25:5993:7903":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:8823:4213":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:2076:1995":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12138:4748":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12592:4837":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:31912:8196":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:8319:6016":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:6094:8964":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:210:3971":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12923:4967":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7743:5307":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4571:7544":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:9940:3718":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"25:5771:7790":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13181:5039":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:39241:6089":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"23:163:3941":{"crate_id":23,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"6:4641:7549":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:20896:6054":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:45666:6384":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:39874:6222":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"25:118:14480":{"crate_id":25,"path":["libc","unix","FILE"],"kind":"enum"},"16:6854:5566":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:35:166":{"crate_id":20,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"20:478:2432":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"17:10334:4349":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:5797:5385":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:7843:6552":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:41907:2839":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3134:25884":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:7795:6550":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:7532:8135":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6587:7988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:875:5848":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:22350:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:2908:1780":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:7256:25133":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"25:4909:7662":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:9059:2922":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:494:7178":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:6538:1660":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:8144:6021":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:12293:4790":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10354:4473":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:2926:1929":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:9822:4395":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:11051:2922":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:10440:4482":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4875:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:7025:3938":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"14:165:19859":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:4563:8794":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5032:7721":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:481:4158":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:5320:6516":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:2853:2905":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:5809:7803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2919:1997":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11924:4721":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5988:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:41355:3028":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:11339:4595":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"25:5013:7713":{"crate_id":25,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:40072:4025":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:11441:6023":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13316:5076":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:13469:5117":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13169:5036":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:3752:3966":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:8310:20834":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:1313:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"23:118:3942":{"crate_id":23,"path":["smallvec","SmallVec"],"kind":"struct"},"1:8979:25621":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"}},"external_crates":{"23":{"name":"smallvec","html_root_url":null},"20":{"name":"lock_api","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"libc","html_root_url":null},"22":{"name":"parking_lot_core","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"21":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":25}