{"root":"0:0:1659","crate_version":"0.12.1","includes_private":false,"index":{"0:442-0:380:216":{"id":"0:442-0:380:216","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,73],"end":[53,88]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLockReadGuard","name":"RwLockReadGuard","id":"0:380:216","glob":false}},"2:11902:34830":{"id":"2:11902:34830","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12001:25414":{"id":"2:12001:25414","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11948:28736":{"id":"2:11948:28736","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11600:13924","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::split_whitespace":"2:11926:31904","str::rsplit":"2:11954:29496"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:43160:5967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:363:1653":{"id":"0:363:1653","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[41,0],"end":[41,80]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](type.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::ReentrantMutex","id":"20:268:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:310:2462":{"id":"0:310:2462","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/raw_rwlock.rs","begin":[493,4],"end":[503,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43934:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2731:2936-0:157:1647":{"id":"a:2:2731:2936-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2936","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11960:34837":{"id":"2:11960:34837","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11600:13924","str::split":"2:11948:28736","prim@char":"1:11871:415","str::split_terminator":"2:11957:34836"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:43228:6259","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:13922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2674:218-0:357:1652":{"id":"a:2:2674:218-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2674:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:416-0:85:1639":{"id":"0:416-0:85:1639","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,27],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::const_fair_mutex","name":"const_fair_mutex","id":"0:85:1639","glob":false}},"2:12010:34851":{"id":"2:12010:34851","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:3026-0:31:1637":{"id":"a:2:8202:3026-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:3026","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2238-0:197:1648":{"id":"b:2:2238-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2516"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2547:1465":{"id":"2:2547:1465","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41339:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:446:1638":{"id":"b:2:2241-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:2518"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:683-0:460:1646":{"id":"b:5:683-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2254:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:3333","5:686:3334","5:687:3335"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:62:1938":{"id":"0:62:1938","crate_id":0,"name":"wait_while_for","span":{"filename":"src/condvar.rs","begin":[496,4],"end":[507,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration. If the provided condition evaluates to `false`,\nthen the thread is no longer blocked and the operation is completed.\nIf the condition evaluates to `true`, then the thread is blocked again\nand waits for another notification before repeating this process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:165","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["condition",{"kind":"generic","inner":"F"}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43934:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2917:1922","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:35507":{"id":"5:5389:35507","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8203:3025-0:261:1649":{"id":"a:2:8203:3025-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2538-0:261:1649":{"id":"b:2:2538-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:126","2:2542:1466"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2532-0:460:1646":{"id":"b:2:2532-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2674:218-0:127:1645":{"id":"a:2:2674:218-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2674:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11898":{"id":"2:11898","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11899:807","2:11900:2048","2:11901:34829","2:11902:34830","2:11904:34831","2:11907:29451","2:11908:34832","2:11909:312","2:11910:29463","2:11911:2481","2:11913:2176","2:11915:29461","2:11917:29462","2:11919:34833","2:11920:34834","2:11921:29485","2:11922:29486","2:11923:5990","2:11924:6276","2:11925:5910","2:11926:31904","2:11927:31893","2:11928:28737","2:11929:34835","2:11930:31908","2:11931:29502","2:11934:29117","2:11937:29119","2:11940:3314","2:11944:3275","2:11948:28736","2:11951:29494","2:11954:29496","2:11957:34836","2:11960:34837","2:11963:29498","2:11966:29500","2:11969:34838","2:11972:34839","2:11975:2805","2:11978:34840","2:11981:34841","2:11984:34842","2:11987:34843","2:11989:34844","2:11991:34845","2:11993:34846","2:11994:34847","2:11995:34848","2:11998:34849","2:12001:25414","2:12004:29503","2:12007:34850","2:12010:34851","2:12013:34852","2:12016:34853","2:12018:28957","2:12019:30568","2:12020:28958","2:12021:28954","2:12022:28953","2:12023:34854","2:12025:8611","2:12026:34855"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:210:120":{"id":"0:210:120","crate_id":0,"name":"Duration","span":{"filename":"src/raw_mutex.rs","begin":[142,4],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43934:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:459:419":{"id":"0:459:419","crate_id":0,"name":"clone","span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:261:1649":{"id":"b:2:2241-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:2518"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:414-0:446:1638":{"id":"0:414-0:446:1638","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,33],"end":[41,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::condvar::WaitTimeoutResult","name":"WaitTimeoutResult","id":"0:446:1638","glob":false}},"0:127:1645":{"id":"0:127:1645","crate_id":0,"name":"Once","span":{"filename":"src/once.rs","begin":[83,0],"end":[83,26]},"visibility":"public","docs":"A synchronization primitive which can be used to run a one-time\ninitialization. Useful for one-time initialization for globals, FFI or\nrelated functionality.\n\n# Differences from the standard library `Once`\n\n- Only requires 1 byte of space, instead of 1 word.\n- Not required to be `'static`.\n- Relaxed memory barriers in the fast path, which can significantly improve\n  performance on some architectures.\n- Efficient handling of micro-contention using adaptive spinning.\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic START: Once = Once::new();\n\nSTART.call_once(|| {\n    // run initialization here\n});\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:130","a:2:8202:3026-0:127:1645","a:2:2674:218-0:127:1645","a:2:8203:3025-0:127:1645","a:2:2731:2936-0:127:1645","a:2:2691:226-0:127:1645","b:2:2538-0:127:1645","b:2:2532-0:127:1645","b:2:2528-0:127:1645","b:2:2238-0:127:1645","b:2:2543-0:127:1645","b:2:2241-0:127:1645","b:2:3307-0:127:1645","0:152","0:150"]}},"0:197:1648":{"id":"0:197:1648","crate_id":0,"name":"RawMutex","span":{"filename":"src/raw_mutex.rs","begin":[32,0],"end":[56,1]},"visibility":"public","docs":"Raw mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8202:3026-0:197:1648","a:2:2674:218-0:197:1648","a:2:8203:3025-0:197:1648","a:2:2731:2936-0:197:1648","a:2:2691:226-0:197:1648","b:2:2538-0:197:1648","b:2:2532-0:197:1648","b:2:2528-0:197:1648","b:2:2238-0:197:1648","b:2:2543-0:197:1648","b:2:2241-0:197:1648","b:2:3307-0:197:1648","0:206","0:199","0:209"]}},"5:5399:8725":{"id":"5:5399:8725","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:446:1638":{"id":"0:446:1638","crate_id":0,"name":"WaitTimeoutResult","span":{"filename":"src/condvar.rs","begin":[23,0],"end":[23,35]},"visibility":"public","docs":"A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:8202:3026-0:446:1638","a:2:2674:218-0:446:1638","a:2:8203:3025-0:446:1638","a:2:2731:2936-0:446:1638","a:2:2691:226-0:446:1638","b:2:2538-0:446:1638","b:2:2532-0:446:1638","b:2:2528-0:446:1638","b:2:2238-0:446:1638","b:2:2543-0:446:1638","b:2:2241-0:446:1638","b:2:3307-0:446:1638","b:5:683-0:446:1638","0:452","0:458","0:451","0:455","0:454","0:449","0:457"]}},"0:286:2431":{"id":"0:286:2431","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/raw_rwlock.rs","begin":[236,4],"end":[250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43934:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:445-20:0:1634":{"id":"0:445-20:0:1634","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[56,0],"end":[56,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"::lock_api","name":"lock_api","id":"20:0:1634","glob":false}},"0:308:2460":{"id":"0:308:2460","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/raw_rwlock.rs","begin":[467,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43934:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3307-0:197:1648":{"id":"b:2:3307-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3305:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3309:1479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:161:2145":{"id":"0:161:2145","crate_id":0,"name":"INIT","span":{"filename":"src/raw_fair_mutex.rs","begin":[15,4],"end":[15,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":"_"}},"0:277:2421":{"id":"0:277:2421","crate_id":0,"name":"bump_shared","span":{"filename":"src/raw_rwlock.rs","begin":[175,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:266:2401":{"id":"0:266:2401","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[67,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166:2340":{"id":"0:166:2340","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_fair_mutex.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:34844":{"id":"2:11989:34844","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5382:35505":{"id":"5:5382:35505","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2939","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:5886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2939","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:5886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:34853":{"id":"2:12016:34853","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11561:125","`FromStr`":"2:11560:2985"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41339:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11560:2985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11560:2985","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8203:3025-0:197:1648":{"id":"a:2:8203:3025-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11931:29502":{"id":"2:11931:29502","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:3275":{"id":"2:11944:3275","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41197:177","prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:13922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:453:609":{"id":"0:453:609","crate_id":0,"name":"eq","span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:446:1638":{"id":"b:5:683-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2254:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:3333","5:686:3334","5:687:3335"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2674:218-0:31:1637":{"id":"a:2:2674:218-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2674:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:477:609":{"id":"0:477:609","crate_id":0,"name":"eq","span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43:1879":{"id":"0:43:1879","crate_id":0,"name":"wait","span":{"filename":"src/condvar.rs","begin":[255,4],"end":[257,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:165","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:444-0:383:217":{"id":"0:444-0:383:217","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLockWriteGuard","name":"RwLockWriteGuard","id":"0:383:217","glob":false}},"2:11937:29119":{"id":"2:11937:29119","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:13922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12018:28957":{"id":"2:12018:28957","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12021:28954":{"id":"2:12021:28954","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:31:1637":{"id":"b:2:2528-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3269"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2528-0:261:1649":{"id":"b:2:2528-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3269"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2532-0:357:1652":{"id":"b:2:2532-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11978:34840":{"id":"2:11978:34840","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11600:13924","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::matches":"2:11975:2805"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:43382:6263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:13922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:30568":{"id":"2:12019:30568","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39353:29450","Self::is_ascii":"2:12018:28957"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"2:39353:29450","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:272:2340":{"id":"0:272:2340","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_rwlock.rs","begin":[142,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12022:28953":{"id":"2:12022:28953","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5398:35509":{"id":"5:5398:35509","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:2939","`String`":"5:7250:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2939","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:5886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[59,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked","is_locked_exclusive"],"trait":{"name":"RawRwLock","id":"20:462:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:2145","0:265:1633","0:266:2401","0:267:2405","0:268:2406","0:269:2409","0:270:2412","0:271:2414","0:272:2340","0:273:2417"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:289:2434":{"id":"0:289:2434","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[272,4],"end":[278,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:446:1638":{"id":"b:2:2538-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:126","2:2542:1466"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2302:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:453:609"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3307-0:460:1646":{"id":"b:2:3307-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3305:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3309:1479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:68:664":{"id":"0:68:664","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[518,4],"end":[520,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9057:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[318,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2579:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:285:2430":{"id":"0:285:2430","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/raw_rwlock.rs","begin":[223,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2428","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2731:2936-0:127:1645":{"id":"a:2:2731:2936-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2936","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:59:1933":{"id":"0:59:1933","crate_id":0,"name":"wait_while_until","span":{"filename":"src/condvar.rs","begin":[461,4],"end":[472,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant. If the provided condition evaluates to\n`false`, then the thread is no longer blocked and the operation is\ncompleted. If the condition evaluates to `true`, then the thread is\nblocked again and waits for another notification before repeating\nthis process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:165","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["condition",{"kind":"generic","inner":"F"}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9033:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2917:1922","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:471:419":{"id":"0:471:419","crate_id":0,"name":"clone","span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:370:1651":{"id":"0:370:1651","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[68,0],"end":[69,70]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedReentrantMutexGuard","id":"20:398:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:440-0:389:1657":{"id":"0:440-0:389:1657","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,41],"end":[53,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::MappedRwLockWriteGuard","name":"MappedRwLockWriteGuard","id":"0:389:1657","glob":false}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[517,0],"end":[521,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9093:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11911:2481":{"id":"2:11911:2481","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41197:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:432-0:365:1650":{"id":"0:432-0:365:1650","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,4],"end":[49,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::const_reentrant_mutex","name":"const_reentrant_mutex","id":"0:365:1650","glob":false}},"2:11921:29485":{"id":"2:11921:29485","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11922:29486"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:31:1637":{"id":"b:2:2238-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2516"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:460:1646":{"id":"b:2:2238-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2516"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:435-0:363:1653":{"id":"0:435-0:363:1653","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,67],"end":[49,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::ReentrantMutex","name":"ReentrantMutex","id":"0:363:1653","glob":false}},"2:11900:2048":{"id":"2:11900:2048","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:165:1904":{"id":"0:165:1904","crate_id":0,"name":"unlock","span":{"filename":"src/raw_fair_mutex.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11957:34836":{"id":"2:11957:34836","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11600:13924","str::split":"2:11948:28736","prim@char":"1:11871:415","`DoubleEndedIterator`":"2:7193:119","str::rsplit_terminator":"2:11960:34837"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:43210:6258","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:284:2429":{"id":"0:284:2429","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/raw_rwlock.rs","begin":[210,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2428","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[191,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockDowngrade","id":"20:478:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:2426"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:685:3333":{"id":"5:685:3333","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:2241-0:31:1637":{"id":"b:2:2241-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:2518"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[36,0],"end":[58,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:2246","0:126:2249"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2254:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:471:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8203:3025-0:127:1645":{"id":"a:2:8203:3025-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:282:120":{"id":"0:282:120","crate_id":0,"name":"Duration","span":{"filename":"src/raw_rwlock.rs","begin":[206,4],"end":[206,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43934:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:8202:3026-0:357:1652":{"id":"a:2:8202:3026-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:3026","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2238-0:127:1645":{"id":"b:2:2238-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2516"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:261:1649":{"id":"b:2:2238-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2516"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[15,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"GetThreadId","id":"20:227:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:360:2145","0:361:2495"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11925:5910":{"id":"2:11925:5910","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:43146:4161","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1644":{"id":"0:103:1644","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[110,0],"end":[110,79]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedMutexGuard","id":"20:151:1644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:202:1911":{"id":"0:202:1911","crate_id":0,"name":"lock","span":{"filename":"src/raw_mutex.rs","begin":[66,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:687:3335":{"id":"5:687:3335","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[510,0],"end":[515,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2579:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2684:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2674:218-0:460:1646":{"id":"a:2:2674:218-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2674:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:203:2167":{"id":"0:203:2167","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_mutex.rs","begin":[78,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:35:1841":{"id":"0:35:1841","crate_id":0,"name":"notify_one","span":{"filename":"src/condvar.rs","begin":[128,4],"end":[136,5]},"visibility":"public","docs":"Wakes up one blocked thread on this condvar.\n\nReturns whether a thread was woken up.\n\nIf there is a blocked thread on this condition variable, then it will\nbe woken up from its call to `wait` or `wait_timeout`. Calls to\n`notify_one` are not buffered in any way.\n\nTo wake up all threads, see `notify_all()`.\n\n# Examples\n\n```\nuse parking_lot::Condvar;\n\nlet condvar = Condvar::new();\n\n// do something with condvar, share it with other threads\n\nif !condvar.notify_one() {\n    println!(\"Nobody was listening for this.\");\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2542:1466":{"id":"2:2542:1466","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41339:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2691:226-0:127:1645":{"id":"a:2:2691:226-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[52,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:171:120","0:172:1775","0:173:2342","0:174:2343"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[141,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:210:120","0:211:1775","0:212:2342","0:213:2343"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:151:59":{"id":"0:151:59","crate_id":0,"name":"default","span":{"filename":"src/once.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8203:3025-0:460:1646":{"id":"a:2:8203:3025-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8202:3026-0:261:1649":{"id":"a:2:8202:3026-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:3026","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:287:2432":{"id":"0:287:2432","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/raw_rwlock.rs","begin":[253,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9033:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:302:2452":{"id":"0:302:2452","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[420,4],"end":[424,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:2176":{"id":"2:11913:2176","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41197:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2543-0:446:1638":{"id":"b:2:2543-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:126","2:2547:1465"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:45:1897":{"id":"0:45:1897","crate_id":0,"name":"wait_until","span":{"filename":"src/condvar.rs","begin":[283,4],"end":[292,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:165","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9033:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132:1376":{"id":"0:132:1376","crate_id":0,"name":"state","span":{"filename":"src/once.rs","begin":[94,4],"end":[105,5]},"visibility":"public","docs":"Returns the current state of this `Once`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:34838":{"id":"2:11969:34838","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12026:34855":{"id":"2:12026:34855","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4524:34855"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:43477:6170","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:168:2339":{"id":"0:168:2339","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_fair_mutex.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:31904":{"id":"2:11926:31904","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11927:31893"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:43434:6266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162:1633":{"id":"0:162:1633","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_fair_mutex.rs","begin":[17,4],"end":[17,69]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutex","id":"20:20:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:11917:29462":{"id":"2:11917:29462","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:460:1646":{"id":"b:2:2538-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:126","2:2542:1466"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:174:2343":{"id":"0:174:2343","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_fair_mutex.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:30:2341","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2691:226-0:446:1638":{"id":"a:2:2691:226-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2543-0:460:1646":{"id":"b:2:2543-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:126","2:2547:1465"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11928:28737":{"id":"2:11928:28737","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:43414:6264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12004:29503":{"id":"2:12004:29503","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:13922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:34843":{"id":"2:11987:34843","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5397:35508":{"id":"5:5397:35508","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:35505","5:5383:3353","5:5386:35506","5:5389:35507","5:5397:35508","5:5398:35509","5:5399:8725","5:5400:28956","5:5401:28955"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:463:2238":{"id":"0:463:2238","crate_id":0,"name":"Poisoned","span":{"filename":"src/once.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":"A closure was executed but panicked.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"2:11901:34829":{"id":"2:11901:34829","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:29451":{"id":"2:11907:29451","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11167:13925"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:34835":{"id":"2:11929:34835","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:43424:6265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2731:2936-0:31:1637":{"id":"a:2:2731:2936-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2936","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11995:34848":{"id":"2:11995:34848","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11625:13921","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2543-0:197:1648":{"id":"b:2:2543-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:126","2:2547:1465"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[397,0],"end":[425,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_upgradable"],"trait":{"name":"RawRwLockUpgradeFair","id":"20:499:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:301:2451","0:302:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:428-0:157:1647":{"id":"0:428-0:157:1647","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::raw_fair_mutex::RawFairMutex","name":"RawFairMutex","id":"0:157:1647","glob":false}},"0:426-0:127:1645":{"id":"0:426-0:127:1645","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,21],"end":[44,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::once::Once","name":"Once","id":"0:127:1645","glob":false}},"0:441-0:376:215":{"id":"0:441-0:376:215","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,65],"end":[53,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLock","name":"RwLock","id":"0:376:215","glob":false}},"0:171:120":{"id":"0:171:120","crate_id":0,"name":"Duration","span":{"filename":"src/raw_fair_mutex.rs","begin":[53,4],"end":[53,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:11919:34833":{"id":"2:11919:34833","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11877:1389","str::slice_mut_unchecked":"2:11920:34834","crate::ops::Index":"2:2969:2899"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:96:164":{"id":"0:96:164","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[87,49]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same mutex in succession, which can starve\nother threads waiting to acquire the mutex. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na mutex it has just released, this can starve other threads.\n\nThis mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the mutex.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `MutexGuard::unlock_fair` when\nunlocking a mutex instead of simply dropping the `MutexGuard`.\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `Mutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the mutex is fair on average.\n- Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::Mutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(Mutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::Mutex","id":"20:35:164","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:276:2420":{"id":"0:276:2420","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/raw_rwlock.rs","begin":[162,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2674:218-0:197:1648":{"id":"a:2:2674:218-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2674:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2691:226-0:357:1652":{"id":"a:2:2691:226-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2240:2516":{"id":"2:2240:2516","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1637":{"id":"0:31:1637","crate_id":0,"name":"Condvar","span":{"filename":"src/condvar.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"A Condition Variable\n\nCondition variables represent the ability to block a thread such that it\nconsumes no CPU time while waiting for an event to occur. Condition\nvariables are typically associated with a boolean predicate (a condition)\nand a mutex. The predicate is always verified inside of the mutex before\ndetermining that thread must block.\n\nNote that this module places one additional restriction over the system\ncondition variables: each condvar can be used with only one mutex at a\ntime. Any attempt to use multiple mutexes on the same condition variable\nsimultaneously will result in a runtime panic. However it is possible to\nswitch to a different mutex if there are no threads currently waiting on\nthe condition variable.\n\n# Differences from the standard library `Condvar`\n\n- No spurious wakeups: A wait will only return a non-timeout result if it\n  was woken up by `notify_one` or `notify_all`.\n- `Condvar::notify_all` will only wake up a single thread, the rest are\n  requeued to wait for the `Mutex` to be unlocked by the thread that was\n  woken up.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `Condvar` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n\n# Examples\n\n```\nuse parking_lot::{Mutex, Condvar};\nuse std::sync::Arc;\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\n// Inside of our lock, spawn a new thread, and then wait for it to start\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock();\n    *started = true;\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock();\nif !*started {\n    cvar.wait(&mut started);\n}\n// Note that we used an if instead of a while loop above. This is only\n// possible because parking_lot's Condvar will never spuriously wake up.\n// This means that wait() will only return after notify_one or notify_all is\n// called.\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:33","a:2:8202:3026-0:31:1637","a:2:2674:218-0:31:1637","a:2:8203:3025-0:31:1637","a:2:2731:2936-0:31:1637","a:2:2691:226-0:31:1637","b:2:2538-0:31:1637","b:2:2532-0:31:1637","b:2:2528-0:31:1637","b:2:2238-0:31:1637","b:2:2543-0:31:1637","b:2:2241-0:31:1637","b:2:3307-0:31:1637","0:65","0:67"]}},"0:125:2246":{"id":"0:125:2246","crate_id":0,"name":"poisoned","span":{"filename":"src/once.rs","begin":[42,4],"end":[47,5]},"visibility":"public","docs":"Returns whether the associated `Once` has been poisoned.\n\nOnce an initialization routine for a `Once` has panicked it will forever\nindicate to future forced initialization routines that it is poisoned.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:157:1647":{"id":"b:2:2238-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2516"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2532-0:197:1648":{"id":"b:2:2532-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2731:2936-0:446:1638":{"id":"a:2:2731:2936-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2936","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:309:2461":{"id":"0:309:2461","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/raw_rwlock.rs","begin":[480,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9033:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8203:3025-0:157:1647":{"id":"a:2:8203:3025-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11910:29463":{"id":"2:11910:29463","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11888:1487"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[119,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:207:2339","0:208:1997"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:357:1652":{"id":"0:357:1652","crate_id":0,"name":"RawThreadId","span":{"filename":"src/remutex.rs","begin":[13,0],"end":[13,23]},"visibility":"public","docs":"Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:8202:3026-0:357:1652","a:2:2674:218-0:357:1652","a:2:8203:3025-0:357:1652","a:2:2731:2936-0:357:1652","a:2:2691:226-0:357:1652","b:2:2538-0:357:1652","b:2:2532-0:357:1652","b:2:2528-0:357:1652","b:2:2238-0:357:1652","b:2:2543-0:357:1652","b:2:2241-0:357:1652","b:2:3307-0:357:1652","0:359"]}},"2:11963:29498":{"id":"2:11963:29498","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924","str::rsplitn":"2:11966:29500"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:43264:5974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2543-0:157:1647":{"id":"b:2:2543-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:126","2:2547:1465"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:365:1650":{"id":"0:365:1650","crate_id":0,"name":"const_reentrant_mutex","span":{"filename":"src/remutex.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.\n\nThis allows creating a reentrant mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"ReentrantMutex","id":"0:363:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:460:1646":{"id":"b:2:2528-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3269"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5401:28955":{"id":"5:5401:28955","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12022:28953"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:298:2446":{"id":"0:298:2446","crate_id":0,"name":"upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[367,4],"end":[376,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:267:2405":{"id":"0:267:2405","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[80,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:34:935":{"id":"0:34:935","crate_id":0,"name":"new","span":{"filename":"src/condvar.rs","begin":[98,4],"end":[102,5]},"visibility":"public","docs":"Creates a new condition variable which is ready to be waited on and\nnotified.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:270:2412":{"id":"0:270:2412","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[116,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[294,0],"end":[320,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursiveTimed","id":"20:490:2436","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:292:2437","0:293:2438"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:293:2438":{"id":"0:293:2438","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/raw_rwlock.rs","begin":[309,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2428","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:85:1639":{"id":"0:85:1639","crate_id":0,"name":"const_fair_mutex","span":{"filename":"src/fair_mutex.rs","begin":[83,0],"end":[85,1]},"visibility":"public","docs":"Creates a new fair mutex in an unlocked state ready for use.\n\nThis allows creating a fair mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"FairMutex","id":"0:83:1640","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:205:2340":{"id":"0:205:2340","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_mutex.rs","begin":[113,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207:2339":{"id":"0:207:2339","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_mutex.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:157:1647":{"id":"b:2:2538-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:126","2:2542:1466"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3307-0:157:1647":{"id":"b:2:3307-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3305:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3309:1479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:433-0:370:1651":{"id":"0:433-0:370:1651","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,27],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::MappedReentrantMutexGuard","name":"MappedReentrantMutexGuard","id":"0:370:1651","glob":false}},"2:11991:34845":{"id":"2:11991:34845","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:136:2307":{"id":"0:136:2307","crate_id":0,"name":"call_once_force","span":{"filename":"src/once.rs","begin":[179,4],"end":[191,5]},"visibility":"public","docs":"Performs the same function as `call_once` except ignores poisoning.\n\nIf this `Once` has been poisoned (some initialization panicked) then\nthis function will continue to attempt to call initialization functions\nuntil one of them doesn't panic.\n\nThe closure `f` is yielded a structure which can be used to query the\nstate of this `Once` (whether initialization has previously panicked or\nnot).","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2920:2296","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:295:2439":{"id":"0:295:2439","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[324,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:460:1646":{"id":"b:2:2241-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:2518"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[427,0],"end":[450,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeDowngrade","id":"20:502:2454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:304:2455","0:305:2456"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:204:1904":{"id":"0:204:1904","crate_id":0,"name":"unlock","span":{"filename":"src/raw_mutex.rs","begin":[100,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:361:2495":{"id":"0:361:2495","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[18,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:22247:2492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:392:1658":{"id":"0:392:1658","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[126,0],"end":[126,98]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLockUpgradableReadGuard","id":"20:710:1658","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"b:2:2528-0:197:1648":{"id":"b:2:2528-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3269"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:307:2459":{"id":"0:307:2459","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/raw_rwlock.rs","begin":[454,4],"end":[464,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9033:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:430-0:261:1649":{"id":"0:430-0:261:1649","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::raw_rwlock::RawRwLock","name":"RawRwLock","id":"0:261:1649","glob":false}},"a:2:2674:218-0:261:1649":{"id":"a:2:2674:218-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2674:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2685:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:208:1997":{"id":"0:208:1997","crate_id":0,"name":"bump","span":{"filename":"src/raw_mutex.rs","begin":[134,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:458":{"id":"0:458","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2254:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:459:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2531:3269":{"id":"2:2531:3269","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2505:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:87:1641":{"id":"0:87:1641","crate_id":0,"name":"FairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[92,0],"end":[92,75]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MutexGuard","id":"20:91:165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"a:2:2731:2936-0:460:1646":{"id":"a:2:2731:2936-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2936","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:460:1646":{"id":"0:460:1646","crate_id":0,"name":"OnceState","span":{"filename":"src/once.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"Current state of a `Once`.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:461:2236","0:463:2238","0:465:2240","0:467:2242"],"impls":["0:124","a:2:8202:3026-0:460:1646","a:2:2674:218-0:460:1646","a:2:8203:3025-0:460:1646","a:2:2731:2936-0:460:1646","a:2:2691:226-0:460:1646","b:2:2538-0:460:1646","b:2:2532-0:460:1646","b:2:2528-0:460:1646","b:2:2238-0:460:1646","b:2:2543-0:460:1646","b:2:2241-0:460:1646","b:2:3307-0:460:1646","b:5:683-0:460:1646","0:472","0:478","0:476","0:470","0:469","0:473","0:475"]}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[325,0],"end":[331,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9093:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:169:1997":{"id":"0:169:1997","crate_id":0,"name":"bump","span":{"filename":"src/raw_fair_mutex.rs","begin":[47,4],"end":[49,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:157:1647":{"id":"0:157:1647","crate_id":0,"name":"RawFairMutex","span":{"filename":"src/raw_fair_mutex.rs","begin":[12,0],"end":[12,34]},"visibility":"public","docs":"Raw fair mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8202:3026-0:157:1647","a:2:2674:218-0:157:1647","a:2:8203:3025-0:157:1647","a:2:2731:2936-0:157:1647","a:2:2691:226-0:157:1647","b:2:2538-0:157:1647","b:2:2532-0:157:1647","b:2:2528-0:157:1647","b:2:2238-0:157:1647","b:2:2543-0:157:1647","b:2:2241-0:157:1647","b:2:3307-0:157:1647","0:167","0:160","0:170"]}},"a:2:2691:226-0:261:1649":{"id":"a:2:2691:226-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:271:2414":{"id":"0:271:2414","crate_id":0,"name":"unlock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[129,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8203:3025-0:357:1652":{"id":"a:2:8203:3025-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:450:664":{"id":"0:450:664","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9057:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:436-0:367:1654":{"id":"0:436-0:367:1654","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::ReentrantMutexGuard","name":"ReentrantMutexGuard","id":"0:367:1654","glob":false}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2684:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:265:1633":{"id":"0:265:1633","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_rwlock.rs","begin":[64,4],"end":[64,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"20:8:1636","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:3307-0:127:1645":{"id":"b:2:3307-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3305:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3309:1479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:438-0:378:1655":{"id":"0:438-0:378:1655","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::const_rwlock","name":"const_rwlock","id":"0:378:1655","glob":false}},"2:11908:34832":{"id":"2:11908:34832","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:29486":{"id":"2:11922:29486","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11921:29485"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2543-0:357:1652":{"id":"b:2:2543-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:126","2:2547:1465"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:268:2406":{"id":"0:268:2406","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:5990":{"id":"2:11923:5990","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11871:415"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:43130:5982","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12025:8611":{"id":"2:12025:8611","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4527:8611"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:43468:5920","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:3026-0:127:1645":{"id":"a:2:8202:3026-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:3026","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:66:59":{"id":"0:66:59","crate_id":0,"name":"default","span":{"filename":"src/condvar.rs","begin":[512,4],"end":[514,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:429-0:197:1648":{"id":"0:429-0:197:1648","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[46,0],"end":[46,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::raw_mutex::RawMutex","name":"RawMutex","id":"0:197:1648","glob":false}},"a:2:2691:226-0:197:1648":{"id":"a:2:2691:226-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2532-0:157:1647":{"id":"b:2:2532-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2691:226-0:460:1646":{"id":"a:2:2691:226-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:280:2426":{"id":"0:280:2426","crate_id":0,"name":"downgrade","span":{"filename":"src/raw_rwlock.rs","begin":[193,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:3314":{"id":"2:11940:3314","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41197:177","prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1863":{"id":"0:39:1863","crate_id":0,"name":"notify_all","span":{"filename":"src/condvar.rs","begin":[187,4],"end":[195,5]},"visibility":"public","docs":"Wakes up all blocked threads on this condvar.\n\nReturns the number of threads woken up.\n\nThis method will ensure that any current waiters on the condition\nvariable are awoken. Calls to `notify_all()` are not buffered in any\nway.\n\nTo wake up only one thread, see `notify_one()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[85,0],"end":[316,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:935","0:132:1376","0:133:389","0:136:2307"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:200:2145":{"id":"0:200:2145","crate_id":0,"name":"INIT","span":{"filename":"src/raw_mutex.rs","begin":[59,4],"end":[61,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:201:1633":{"id":"0:201:1633","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_mutex.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"20:8:1636","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2528-0:157:1647":{"id":"b:2:2528-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3269"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2307:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12020:28958":{"id":"2:12020:28958","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:283:1775":{"id":"0:283:1775","crate_id":0,"name":"Instant","span":{"filename":"src/raw_rwlock.rs","begin":[207,4],"end":[207,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9033:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:278:2423":{"id":"0:278:2423","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[184,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:292:2437":{"id":"0:292:2437","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/raw_rwlock.rs","begin":[296,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2428","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3307-0:357:1652":{"id":"b:2:3307-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3305:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3309:1479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[94,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:34:935","0:35:1841","0:39:1863","0:43:1879","0:45:1897","0:51:1916","0:56:1927","0:59:1933","0:62:1938"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8203:3025-0:446:1638":{"id":"a:2:8203:3025-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2532-0:127:1645":{"id":"b:2:2532-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:213:2343":{"id":"0:213:2343","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_mutex.rs","begin":[163,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43934:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:376:215":{"id":"0:376:215","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[89,0],"end":[89,52]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThis lock uses a task-fair locking policy which avoids both reader and\nwriter starvation. This means that readers trying to acquire the lock will\nblock even if the lock is unlocked when there are writers waiting to acquire\nthe lock. Because of this, attempts to recursively acquire a read lock\nwithin a single thread may result in a deadlock.\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same lock in succession, which can starve\nother threads waiting to acquire the rwlock. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na rwlock it has just released, this can starve other threads.\n\nThis rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the rwlock.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`\nor `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply\ndropping the guard.\n\n# Differences from the standard library `RwLock`\n\n- Supports atomically downgrading a write lock into a read lock.\n- Task-fair locking policy instead of an unspecified platform default.\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `RwLock` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the rwlock is fair on average.\n- Optionally allows making the rwlock fair by calling\n  `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read();\n    let r2 = lock.read();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here\n```","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLock","id":"20:510:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:383:217":{"id":"0:383:217","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[104,0],"end":[104,80]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLockWriteGuard","id":"20:645:217","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:443-0:392:1658":{"id":"0:443-0:392:1658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLockUpgradableReadGuard","name":"RwLockUpgradableReadGuard","id":"0:392:1658","glob":false}},"2:11934:29117":{"id":"2:11934:29117","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:127:1645":{"id":"b:2:2241-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:2518"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2538-0:127:1645":{"id":"b:2:2538-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:126","2:2542:1466"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:446:1638":{"id":"b:2:2238-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2516"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:133:389":{"id":"0:133:389","crate_id":0,"name":"call_once","span":{"filename":"src/once.rs","begin":[157,4],"end":[167,5]},"visibility":"public","docs":"Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.\n\nThis method will block the calling thread if another initialization\nroutine is currently running.\n\nWhen this function returns, it is guaranteed that some initialization\nhas run and completed (it may not be the closure specified). It is also\nguaranteed that any memory writes performed by the executed closure can\nbe reliably observed by other threads at this point (there is a\nhappens-before relation between the closure and code executing after the\nreturn).\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\n// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g. write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\nfn get_cached_val() -> usize {\n    unsafe {\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\nfn expensive_computation() -> usize {\n    // ...\n# 2\n}\n```\n\n# Panics\n\nThe closure `f` will only be executed once if this is called\nconcurrently amongst many threads. If that closure panics, however, then\nit will *poison* this `Once` instance, causing all future invocations of\n`call_once` to also panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2920:2296","args":{"parenthesized":{"inputs":[],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:29496":{"id":"2:11954:29496","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11600:13924","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::split":"2:11948:28736"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:43178:5972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:13922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:686:3334":{"id":"5:686:3334","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:160":{"id":"0:160","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[14,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:161:2145","0:162:1633","0:163:1911","0:164:2167","0:165:1904","0:166:2340"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11984:34842":{"id":"2:11984:34842","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11600:13924","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::match_indices":"2:11981:34841"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:43328:6261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:13922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172:1775":{"id":"0:172:1775","crate_id":0,"name":"Instant","span":{"filename":"src/raw_fair_mutex.rs","begin":[54,4],"end":[54,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:5383:3353":{"id":"5:5383:3353","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3307-0:261:1649":{"id":"b:2:3307-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3305:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3309:1479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1659":{"id":"0:0:1659","crate_id":0,"name":"parking_lot","span":{"filename":"src/lib.rs","begin":[8,0],"end":[56,19]},"visibility":"public","docs":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n`Once` that are smaller, faster and more flexible than those in the Rust\nstandard library. It also provides a `ReentrantMutex` type.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:413-0:31:1637","0:414-0:446:1638","0:416-0:85:1639","0:417-0:83:1640","0:418-0:87:1641","0:419-0:90:1642","0:421-0:98:1643","0:422-0:103:1644","0:423-0:96:164","0:424-0:100:165","0:426-0:127:1645","0:427-0:460:1646","0:428-0:157:1647","0:429-0:197:1648","0:430-0:261:1649","0:432-0:365:1650","0:433-0:370:1651","0:434-0:357:1652","0:435-0:363:1653","0:436-0:367:1654","0:438-0:378:1655","0:439-0:386:1656","0:440-0:389:1657","0:441-0:376:215","0:442-0:380:216","0:443-0:392:1658","0:444-0:383:217","0:445-20:0:1634"],"is_stripped":false}},"5:5400:28956":{"id":"5:5400:28956","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12021:28954"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:3026-0:460:1646":{"id":"a:2:8202:3026-0:460:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:3026","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2238-0:357:1652":{"id":"b:2:2238-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2516"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2307:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2528-0:127:1645":{"id":"b:2:2528-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3269"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3307-0:446:1638":{"id":"b:2:3307-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3305:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3309:1479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[40,0],"end":[50,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:2339","0:169:1997"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:163:1911":{"id":"0:163:1911","crate_id":0,"name":"lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:173:2342":{"id":"0:173:2342","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_fair_mutex.rs","begin":[57,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:30:2341","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:3026-0:197:1648":{"id":"a:2:8202:3026-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:3026","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2731:2936-0:261:1649":{"id":"a:2:2731:2936-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2936","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:378:1655":{"id":"0:378:1655","crate_id":0,"name":"const_rwlock","span":{"filename":"src/rwlock.rs","begin":[94,0],"end":[96,1]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.\n\nThis allows creating a `RwLock<T>` in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"RwLock","id":"0:376:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11994:34847":{"id":"2:11994:34847","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:423-0:96:164":{"id":"0:423-0:96:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,53],"end":[43,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::Mutex","name":"Mutex","id":"0:96:164","glob":false}},"0:479:664":{"id":"0:479:664","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9057:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[25,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:1779"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:131:935":{"id":"0:131:935","crate_id":0,"name":"new","span":{"filename":"src/once.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a new `Once` value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2532-0:261:1649":{"id":"b:2:2532-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11951:29494":{"id":"2:11951:29494","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11423:5969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9093:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11966:29500":{"id":"2:11966:29500","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11871:415","str::splitn":"2:11963:29498","self::pattern":"2:11600:13924"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:43282:5975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:13922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90:1642":{"id":"0:90:1642","crate_id":0,"name":"MappedFairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[101,0],"end":[101,87]},"visibility":"public","docs":"An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedMutexGuard","id":"20:151:1644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:3309:1479":{"id":"2:3309:1479","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:39139:6033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:476":{"id":"0:476","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2302:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:477:609"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11993:34846":{"id":"2:11993:34846","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:2805":{"id":"2:11975:2805","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11600:13924","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::matches":"2:11975:2805"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:43364:6262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:261:1649":{"id":"0:261:1649","crate_id":0,"name":"RawRwLock","span":{"filename":"src/raw_rwlock.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Raw reader-writer lock type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8202:3026-0:261:1649","a:2:2674:218-0:261:1649","a:2:8203:3025-0:261:1649","a:2:2731:2936-0:261:1649","a:2:2691:226-0:261:1649","b:2:2538-0:261:1649","b:2:2532-0:261:1649","b:2:2528-0:261:1649","b:2:2238-0:261:1649","b:2:2543-0:261:1649","b:2:2241-0:261:1649","b:2:3307-0:261:1649","0:281","0:274","0:300","0:291","0:263","0:294","0:306","0:279","0:288","0:303"]}},"b:2:2543-0:31:1637":{"id":"b:2:2543-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:126","2:2547:1465"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[154,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_shared","bump_exclusive"],"trait":{"name":"RawRwLockFair","id":"20:473:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:275:2419","0:276:2420","0:277:2421","0:278:2423"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:413-0:31:1637":{"id":"0:413-0:31:1637","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,24],"end":[41,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::condvar::Condvar","name":"Condvar","id":"0:31:1637","glob":false}},"a:2:2731:2936-0:197:1648":{"id":"a:2:2731:2936-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2936","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8202:3026-0:446:1638":{"id":"a:2:8202:3026-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:3026","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2541:126":{"id":"2:2541:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:296:2442":{"id":"0:296:2442","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[333,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,31],"end":[22,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2686:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:305:2456":{"id":"0:305:2456","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[439,4],"end":[449,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:290:2435":{"id":"0:290:2435","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[281,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2731:2936-0:357:1652":{"id":"a:2:2731:2936-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2936","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2543-0:127:1645":{"id":"b:2:2543-0:127:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:126","2:2547:1465"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:380:216":{"id":"0:380:216","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[100,0],"end":[100,78]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLockReadGuard","id":"20:595:216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:297:2444":{"id":"0:297:2444","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[346,4],"end":[364,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:417-0:83:1640":{"id":"0:417-0:83:1640","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,45],"end":[42,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::FairMutex","name":"FairMutex","id":"0:83:1640","glob":false}},"b:2:3307-0:31:1637":{"id":"b:2:3307-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3305:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3309:1479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:419-0:90:1642":{"id":"0:419-0:90:1642","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,72],"end":[42,92]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::MappedFairMutexGuard","name":"MappedFairMutexGuard","id":"0:90:1642","glob":false}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9093:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:479:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:422-0:103:1644":{"id":"0:422-0:103:1644","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,35],"end":[43,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::MappedMutexGuard","name":"MappedMutexGuard","id":"0:103:1644","glob":false}},"2:11904:34831":{"id":"2:11904:34831","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11902:34830"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:312":{"id":"2:11909:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11910:29463","`u8`":"1:11888:1487"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:34852":{"id":"2:12013:34852","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:13922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:31:1637":{"id":"b:2:2538-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:126","2:2542:1466"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2538-0:197:1648":{"id":"b:2:2538-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:126","2:2542:1466"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11972:34839":{"id":"2:11972:34839","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:13922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:197:1648":{"id":"b:2:2241-0:197:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:2518"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:153:664":{"id":"0:153:664","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[326,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9057:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:807":{"id":"2:11899:807","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11871:415"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[270,0],"end":[292,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursive","id":"20:487:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:2434","0:290:2435"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11924:6276":{"id":"2:11924:6276","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11871:415"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:43136:6256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:30:1779":{"id":"0:30:1779","crate_id":0,"name":"timed_out","span":{"filename":"src/condvar.rs","begin":[28,4],"end":[30,5]},"visibility":"public","docs":"Returns whether the wait was known to have timed out.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:461:2236":{"id":"0:461:2236","crate_id":0,"name":"New","span":{"filename":"src/once.rs","begin":[24,4],"end":[24,7]},"visibility":"default","docs":"A closure has not been executed yet","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2241-0:357:1652":{"id":"b:2:2241-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:2518"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2532-0:446:1638":{"id":"b:2:2532-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:83:1640":{"id":"0:83:1640","crate_id":0,"name":"FairMutex","span":{"filename":"src/fair_mutex.rs","begin":[78,0],"end":[78,57]},"visibility":"public","docs":"A mutual exclusive primitive that is always fair, useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\nThe regular mutex provided by `parking_lot` uses eventual fairness\n(after some time it will default to the fair algorithm), but eventual\nfairness does not provide the same guarantees an always fair method would.\nFair mutexes are generally slower, but sometimes needed.\n\nIn a fair mutex the waiters form a queue, and the lock is always granted to\nthe next requester in the queue, in first-in first-out order. This ensures\nthat one thread cannot starve others by quickly re-acquiring the lock after\nreleasing it.\n\nA fair mutex may not be interesting if threads have different priorities (this is known as\npriority inversion).\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `FairMutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n\n# Examples\n\n```\nuse parking_lot::FairMutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(FairMutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::Mutex","id":"20:35:164","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,9],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2686:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11920:34834":{"id":"2:11920:34834","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11877:1389","crate::ops::IndexMut":"2:2973:2900","str::slice_unchecked":"2:11919:34833"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2543-0:261:1649":{"id":"b:2:2543-0:261:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:126","2:2547:1465"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11930:31908":{"id":"2:11930:31908","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:43452:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2532-0:31:1637":{"id":"b:2:2532-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:211:1775":{"id":"0:211:1775","crate_id":0,"name":"Instant","span":{"filename":"src/raw_mutex.rs","begin":[143,4],"end":[143,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9033:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:126:2249":{"id":"0:126:2249","crate_id":0,"name":"done","span":{"filename":"src/once.rs","begin":[52,4],"end":[57,5]},"visibility":"public","docs":"Returns whether the associated `Once` has successfully executed a\nclosure.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164:2167":{"id":"0:164:2167","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:421-0:98:1643":{"id":"0:421-0:98:1643","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::const_mutex","name":"const_mutex","id":"0:98:1643","glob":false}},"2:11927:31893":{"id":"2:11927:31893","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11926:31904"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:43443:6267","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11998:34849":{"id":"2:11998:34849","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2243:2518":{"id":"2:2243:2518","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:367:1654":{"id":"0:367:1654","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[59,0],"end":[59,98]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::ReentrantMutexGuard","id":"20:336:1654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2685:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:199":{"id":"0:199","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[58,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:200:2145","0:201:1633","0:202:1911","0:203:2167","0:204:1904","0:205:2340"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:212:2342":{"id":"0:212:2342","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_mutex.rs","begin":[146,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9033:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100:165":{"id":"0:100:165","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[101,0],"end":[101,67]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MutexGuard","id":"20:91:165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:301:2451":{"id":"0:301:2451","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/raw_rwlock.rs","begin":[399,4],"end":[417,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:427-0:460:1646":{"id":"0:427-0:460:1646","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,27],"end":[44,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::once::OnceState","name":"OnceState","id":"0:460:1646","glob":false}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[322,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgrade","id":"20:493:2383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:2439","0:296:2442","0:297:2444","0:298:2446","0:299:2448"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:439-0:386:1656":{"id":"0:439-0:386:1656","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,18],"end":[53,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::MappedRwLockReadGuard","name":"MappedRwLockReadGuard","id":"0:386:1656","glob":false}},"a:2:8203:3025-0:31:1637":{"id":"a:2:8203:3025-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2674:218-0:157:1647":{"id":"a:2:2674:218-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2674:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2691:226-0:157:1647":{"id":"a:2:2691:226-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:418-0:87:1641":{"id":"0:418-0:87:1641","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,56],"end":[42,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::FairMutexGuard","name":"FairMutexGuard","id":"0:87:1641","glob":false}},"2:11981:34841":{"id":"2:11981:34841","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11600:13924","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::rmatch_indices":"2:11984:34842"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:43310:6260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:434-0:357:1652":{"id":"0:434-0:357:1652","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,54],"end":[49,65]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::RawThreadId","name":"RawThreadId","id":"0:357:1652","glob":false}},"2:11915:29461":{"id":"2:11915:29461","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:389:1657":{"id":"0:389:1657","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[122,0],"end":[122,92]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedRwLockWriteGuard","id":"20:822:1657","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:299:2448":{"id":"0:299:2448","crate_id":0,"name":"try_upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[379,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[452,0],"end":[504,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeTimed","id":"20:505:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:307:2459","0:308:2460","0:309:2461","0:310:2462"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12023:34854":{"id":"2:12023:34854","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4526:34854"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:43459:6171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:3026-0:157:1647":{"id":"a:2:8202:3026-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:3026","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[205,0],"end":[268,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockTimed","id":"20:480:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:120","0:283:1775","0:284:2429","0:285:2430","0:286:2431","0:287:2432"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:275:2419":{"id":"0:275:2419","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/raw_rwlock.rs","begin":[156,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:157:1647":{"id":"b:2:2241-0:157:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:2518"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:273:2417":{"id":"0:273:2417","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[148,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:357:1652":{"id":"b:2:2528-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3269"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2534:690":{"id":"2:2534:690","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:269:2409":{"id":"0:269:2409","crate_id":0,"name":"lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[107,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2674:218-0:446:1638":{"id":"a:2:2674:218-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2674:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:264:2145":{"id":"0:264:2145","crate_id":0,"name":"INIT","span":{"filename":"src/raw_rwlock.rs","begin":[60,4],"end":[62,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:467:2242":{"id":"0:467:2242","crate_id":0,"name":"Done","span":{"filename":"src/once.rs","begin":[33,4],"end":[33,8]},"visibility":"default","docs":"A closure has completed successfully.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"2:12007:34850":{"id":"2:12007:34850","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:13924"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:13922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5386:35506":{"id":"5:5386:35506","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:5962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1643":{"id":"0:98:1643","crate_id":0,"name":"const_mutex","span":{"filename":"src/mutex.rs","begin":[92,0],"end":[94,1]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Mutex","id":"0:96:164","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:304:2455":{"id":"0:304:2455","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[429,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:56:1927":{"id":"0:56:1927","crate_id":0,"name":"wait_while","span":{"filename":"src/condvar.rs","begin":[425,4],"end":[431,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification. If the provided condition evaluates to `false`, then the\nthread is no longer blocked and the operation is completed. If the\ncondition evaluates to `true`, then the thread is blocked again and\nwaits for another notification before repeating this process.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:165","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["condition",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2917:1922","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:465:2240":{"id":"0:465:2240","crate_id":0,"name":"InProgress","span":{"filename":"src/once.rs","begin":[30,4],"end":[30,14]},"visibility":"default","docs":"A thread is currently executing a closure.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2528-0:446:1638":{"id":"b:2:2528-0:446:1638","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:3269"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:51:1916":{"id":"0:51:1916","crate_id":0,"name":"wait_for","span":{"filename":"src/condvar.rs","begin":[379,4],"end":[386,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:165","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43934:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2691:226-0:31:1637":{"id":"a:2:2691:226-0:31:1637","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2538-0:357:1652":{"id":"b:2:2538-0:357:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:126","2:2542:1466"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2546:126":{"id":"2:2546:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31837:8144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:360:2145":{"id":"0:360:2145","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[16,4],"end":[16,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"RawThreadId"}},"0:386:1656":{"id":"0:386:1656","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[113,0],"end":[113,90]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedRwLockReadGuard","id":"20:771:1656","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:424-0:100:165":{"id":"0:424-0:100:165","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,60],"end":[43,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::MutexGuard","name":"MutexGuard","id":"0:100:165","glob":false}}},"paths":{"25:4782:7551":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"25:1707:7312":{"crate_id":25,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:2355:8690":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:3672:6450":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5996:7855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6254:5425":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:21717:6009":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3396:6448":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:12269:5996":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:6767:5506":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:41313:3023":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5034:7683":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"20:493:2383":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"6:4924:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:671:4135":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"25:1734:7323":{"crate_id":25,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:738:5795":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12098:4689":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"21:0:2865":{"crate_id":21,"path":["scopeguard"],"kind":"module"},"2:45949:6350":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:42204:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:41390:3715":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13332:5024":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12318:4739":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:45177:6311":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:4573:7960":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:45523:6326":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:11200:6483":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:45979:6351":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:3777:6452":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:9545:4277":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:40485:1645":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"25:7507:8077":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12894:4902":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:3130:27337":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"22:72:2229":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_UNPARK_TOKEN"],"kind":"constant"},"16:8170:5702":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5976:7849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"11:393:35618":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:1568:3884":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:12461:4761":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"25:4909:7610":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"25:5771:7738":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"9:502:5868":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:22886:2986":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:10128:8813":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"25:6134:7894":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:279:2939":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:7264:5912":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:3170:33740":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"25:5013:7661":{"crate_id":25,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46605:6388":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:39922:6178":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:3974:3884":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:3876:8736":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13399:5046":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:38959:2901":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:10672:6498":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:9098:4292":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:4290:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11005:6580":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:39771:6164":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:1645:7276":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:41110:32058":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"25:6783:8028":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:9033:1775":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:12217:33634":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:9721:4334":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"25:4771:7543":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5845:7774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3906:8738":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:1604:7244":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:38912:2910":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:9175:3800":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:8283:20708":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:43434:6266":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:6582:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:4327:5281":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:2404:5224":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:9780:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"25:1592:7232":{"crate_id":25,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2784:2884":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"25:4873:7590":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:1048:5543":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:1836:3280":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11483:6486":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:22346:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"11:725:5794":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:9265:4296":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:1731:7323":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:6656:7965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11037:20722":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"25:578:7175":{"crate_id":25,"path":["libc","unix","tms"],"kind":"struct"},"1:10347:4019":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:526:7147":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:2864:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"25:4292:7335":{"crate_id":25,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:2502:5228":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12622:4454":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"23:330:3891":{"crate_id":23,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"25:4863:7584":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4422:7426":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13426:5053":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:8269:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:21427:8753":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:3203:6442":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"25:594:7185":{"crate_id":25,"path":["libc","unix","protoent"],"kind":"struct"},"2:12393:105":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"25:4765:7540":{"crate_id":25,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:40509:3977":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:4624:5289":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:40078:6186":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:1550:7207":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9218:4295":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:7932:8724":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13041:4954":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11885:739":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:857:3715":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4482:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:2911:34552":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"11:1852:5812":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:2907:8153":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:9377:4018":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:7927:6503":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:9895:4350":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:2862:5243":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:5794:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:38974:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:45155:6310":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"25:1530:7197":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:4898:3014":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2821:2893":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:3163:6440":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13433:5054":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8908:3152":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:7366:20658":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:1559:7213":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:4568:5287":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8726:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:40471:5944":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"14:221:5790":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:9321:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:487:4169":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:8250:6559":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10857:20721":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"11:834:5799":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4492:7460":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10026:4368":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:7023:3884":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:4799:791":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:43581:6274":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8774:3714":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:4840:8792":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2831:2895":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6639:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40274:5941":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11641:4606":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:47265:6403":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5761:7738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11025:2949":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:46935:6391":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:7271:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6943:20656":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:13612:5114":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9322:35647":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"0:0:1659":{"crate_id":0,"path":["parking_lot"],"kind":"module"},"2:2505:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"11:762:3912":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:4559:8741":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:6538:3288":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:554:1945":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9796:4340":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"25:1574:7222":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10402:4422":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9424:4305":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10825:6472":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:43414:6264":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:595:216":{"crate_id":20,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"2:2844:2898":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:39997:3971":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"25:4795:7556":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11874:1043":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:30083:3362":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:14:2583":{"crate_id":2,"path":["core","write"],"kind":"macro"},"20:151:1644":{"crate_id":20,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"17:12980:4947":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:1514:7191":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:387:35616":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13292:5013":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:11153:5980":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:911:3912":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:8131:4161":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:590:4116":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13625:5120":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:10039:4371":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:6362:3280":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"25:5814:7753":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:41512:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6098:7879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:3140:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:39877:6174":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:1609:7246":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:45076:6307":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:9312:4297":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4449:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11060:4454":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"25:6596:7941":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"25:6828:8050":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:2728:3240":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:6760:3967":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10649:4452":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:4360:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11383:6452":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:9628:4325":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:39100:2902":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:43178:5972":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:9313:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:12607:4787":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:119:14373":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:10936:4479":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:2204:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:13309:5021":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:7922:6502":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:11614:4141":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:554:7162":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:2594:5232":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:2499:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:7767:20660":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:41968:3252":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8081:6449":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:5888:7803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:9770:8753":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"22:46:3893":{"crate_id":22,"path":["parking_lot_core","parking_lot","ThreadData"],"kind":"struct"},"6:4943:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:43310:6260":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:5811:5332":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11372:4547":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:11215:6485":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7697:5255":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:9959:4360":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"25:4447:7432":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:242:4163":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:20755:8822":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13639:5126":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:20914:5998":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11282:4527":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:6593:3962":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8161:8733":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12483:4772":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:22082:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:10257:4412":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:43136:6256":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:8114:6184":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"20:591:4102":{"crate_id":20,"path":["lock_api","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:7347:3959":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:10855:6581":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:46399:6357":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"25:4930:7625":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:2235:97":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:6289:3919":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:45355:6321":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11011:4482":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:45644:6330":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"7:32:19638":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:44094:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10932:4022":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8844:8815":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:5495:7866":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:530:2222":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:3242:6444":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:7431:8072":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:43967:2950":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:4107:8764":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:3266:4184":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"25:5030:7669":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"15:0:2705":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:44167:6297":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"25:5965:7837":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:47239:6401":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:538:4113":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:6478:2931":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2967:19793":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8958:6593":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"25:6798:8035":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:22247:2492":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"18:727:4148":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9108:35645":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8137:5967":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:13219:4999":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:4752:386":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:9071:2916":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"10:0:2701":{"crate_id":10,"path":["adler"],"kind":"module"},"16:3047:19794":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4354:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11109:4492":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6124:7894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:4674:8752":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:8360:20710":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:4046:3715":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12138:4694":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"25:1906:15710":{"crate_id":25,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:6336:5432":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:4365:3944":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:2205:5904":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:5962:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:9188:35640":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:5830:14293":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:9933:4357":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"25:4329:7362":{"crate_id":25,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:11312:5983":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13066:4964":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:2086:5889":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"25:1612:7246":{"crate_id":25,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:2198:8145":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"25:6114:7880":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10452:4429":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:482:7121":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11721:4611":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:1196:5543":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:39056:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:7145:5904":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:2737:3245":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:4624:7497":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"13:0:2697":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:1895:6431":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4314:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6593:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:1919:20760":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4848:7584":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:2808:5241":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:4755:8751":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:8950:6591":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11484:4564":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"14:202:13938":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:11081:1775":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:12019:4385":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"23:280:3280":{"crate_id":23,"path":["smallvec","IntoIter"],"kind":"struct"},"1:844:3714":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:5034:2927":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:42496:6231":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:45325:6320":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4554:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12085:4687":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:2835:2896":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:4913:3944":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9866:4345":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5005:7664":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1715:3912":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:10334:4295":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:2827:2894":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:1381:3280":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4873:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:11894:1540":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10598:4480":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:2213:8683":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:42259:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4592:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"25:4880:996":{"crate_id":25,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"21:60:24579":{"crate_id":21,"path":["scopeguard","Always"],"kind":"enum"},"16:6351:20653":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:2805:2889":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:21658:6003":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"25:6649:7964":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:8521:20715":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10660:4454":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:3934:8741":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8720:6578":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"25:4381:7398":{"crate_id":25,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:42514:6236":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:5381:6471":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:1350:3714":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"25:540:7156":{"crate_id":25,"path":["libc","unix","iovec"],"kind":"struct"},"17:11844:4653":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:40260:6201":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:30177:32045":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:7259:3022":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:9477:3979":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4681:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6919:35633":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:7743:5253":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:40190:6195":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:5316:6464":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13053:4959":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13376:5038":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:25696:2987":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:9106:3253":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"15:180:19747":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"25:561:7167":{"crate_id":25,"path":["libc","unix","linger"],"kind":"struct"},"2:2338:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"25:4470:7439":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"25:531:7150":{"crate_id":25,"path":["libc","unix","hostent"],"kind":"struct"},"17:9653:4328":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:867:3280":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6728:5494":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"13:110:35621":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:2682:2967":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:9350:35646":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11446:4560":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:42194:8159":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:1785:6428":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:9591:3987":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10316:4417":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:11869:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:3872:5278":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:46249:6356":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"25:6683:7970":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:2839:2897":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:5814:2927":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:10885:4475":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:2933:4181":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:5708:3884":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:0:2706":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:7173:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:39917:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4780:7556":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:7588:5632":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:4592:13983":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"20:645:217":{"crate_id":20,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:632:3714":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:11062:6880":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:41280:3022":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:10452:3156":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:41398:3280":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:6802:8044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:4932:5298":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"25:6022:7859":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:20439:3234":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:10412:6444":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:3222:2912":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:3987:5921":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:39014:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:49635:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11785:4640":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:7240:8060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:5386:4282":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7016:5534":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"25:6000:7852":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:45501:6325":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3982:8744":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9138:4293":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"25:5972:7838":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:582:3234":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:1212:5804":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13211:4996":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:12196:149":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12236:4724":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:11832:4651":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:697:5793":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:5063:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"25:4843:7575":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:7660:6492":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"18:660:4129":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:5640:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:47219:6399":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:6617:4102":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10015:4367":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:3815:5277":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13135:4979":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:9523:4316":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:43130:5982":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:822:1657":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:9498:4314":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:5402:4283":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10428:4427":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:2915:34553":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:6441:3919":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5773:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8752:6580":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:1589:7232":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:5484:3891":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:11560:2985":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:3687:5888":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4455:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"23:343:24587":{"crate_id":23,"path":["smallvec","ToSmallVec"],"kind":"trait"},"5:1611:3919":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11888:1487":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:5708:5321":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:41552:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:8180:20662":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:4676:8755":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"20:27:2337":{"crate_id":20,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"11:1840:3884":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"21:14:24578":{"crate_id":21,"path":["scopeguard","Strategy"],"kind":"trait"},"20:227:2493":{"crate_id":20,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"16:6442:5443":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:1365:3715":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:2357:8691":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:11298:4026":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"25:1690:7305":{"crate_id":25,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:30119:32072":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:9443:4307":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11136:4493":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:39964:8670":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"20:8:1636":{"crate_id":20,"path":["lock_api","GuardNoSend"],"kind":"struct"},"1:8309:3018":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:707:4141":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:40249:6198":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:6184:4003":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:1565:3280":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:21694:32073":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"23:163:3887":{"crate_id":23,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"1:5175:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:41632:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"14:0:2704":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:40027:6181":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:7491:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:45195:6312":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:2668:5235":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:43146:4161":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:541:7156":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"25:4305:7344":{"crate_id":25,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:462:1649":{"crate_id":20,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"2:41432:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:8651:4282":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12835:4850":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"25:4507:7460":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:12435:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:42222:108":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:9178:4294":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:2459:8753":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:1704:7312":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12059:4684":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:20761:8824":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:8204:3024":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13698:5141":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13488:5068":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11770:4636":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:9018:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:2426:5225":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:1681:142":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"25:6698:7975":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:3435:3249":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:8072:5691":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10409:6442":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:4409:8767":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:4602:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"25:4888:7595":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:1583:7230":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5779:5327":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:45214:6313":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:3752:3912":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:8276:6457":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:20753:8753":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:3124:25792":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"11:2184:8142":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:2470:5227":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:21709:6008":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2800:2888":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:11585:4589":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:5990:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4381:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7803:5646":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2684:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3999:5922":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:4091:8762":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"25:4811:7562":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:8823:4159":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:41954:3251":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:11890:1485":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:31873:6026":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"20:510:215":{"crate_id":20,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"6:5804:7753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:20886:8821":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"25:4679:7500":{"crate_id":25,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:41672:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:7683:6495":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6818:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:643:8613":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"25:7495:8075":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8796:6473":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:41832:2832":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:5566:4004":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:1812:2968":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10923:4477":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:45471:6324":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:8790:3280":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:5190:3919":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:44880:6299":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:7317:35636":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:2762:2881":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:42887:6238":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"25:4342:7372":{"crate_id":25,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:43660:6279":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:43899:8228":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:10092:5971":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:10733:5978":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:2734:3242":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:8310:20709":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4930:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:10647:6497":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:10921:4021":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4858:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"25:1698:7306":{"crate_id":25,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:45377:6322":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11471:4563":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:21807:2991":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4982:7656":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:20507:32604":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:6139:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:1628:3606":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:5552:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:4849:8793":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:2339:3337":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"19:0:1025":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"25:6045:7865":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:2593:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:10216:27057":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:0:1381":{"crate_id":1,"path":["std"],"kind":"module"},"1:10637:8233":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:13233:5002":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:8144:6264":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"8:0:2699":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:8195:20697":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:4136:3944":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:10505:4433":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:6764:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:681:4136":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:7151:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"25:7273:8071":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:10712:25405":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11902:4660":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:7776:6496":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:41322:3427":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:39783:32054":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:7250:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2741:2877":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:6566:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13791:5169":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6293:5428":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:49557:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"11:1044:19728":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:9104:3252":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:11137:14060":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3621:3919":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"20:710:1658":{"crate_id":20,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"17:8256:20695":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:10015:5969":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:562:4170":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10967:4480":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4709:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:7098:3280":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12046:4682":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:7485:8075":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10068:4375":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"25:5986:7849":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"25:5993:7851":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:43013:6181":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:7155:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10735:4464":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13499:5069":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:8766:6581":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:7580:3157":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"25:572:7172":{"crate_id":25,"path":["libc","unix","itimerval"],"kind":"struct"},"16:4818:5294":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:10406:6440":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"10:36:8147":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:9734:4335":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:4037:5280":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:6092:8859":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:6721:14023":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"25:4945:7634":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:4442:7435":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8915:25401":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:4175:2381":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:21:677":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:11163:4499":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:2788:2886":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:2827:4000":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:9057:208":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:43687:5992":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:5481:5928":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:1621:584":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:10516:4434":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4671:7501":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"25:4749:7532":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:22445:2990":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"24:0:2699":{"crate_id":24,"path":["cfg_if"],"kind":"module"},"1:3444:31064":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4469:7447":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2254:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"25:4607:7494":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:2178:8141":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:4:1008":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:43364:6262":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11628:4605":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"22:192:1769":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkResult"],"kind":"enum"},"2:45569:6328":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"25:6149:7905":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:5032:5301":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:4596:5288":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"25:5827:7762":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13169:4982":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:8548:20716":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:20881:8753":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:45722:6332":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:39166:6034":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:10938:4023":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"25:118:14373":{"crate_id":25,"path":["libc","unix","FILE"],"kind":"enum"},"1:6548:1654":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:4678:8756":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"25:4536:7474":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2512:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:3130:2904":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:9907:4354":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:2406:6975":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"25:4825:7566":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:42234:5665":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"9:352:19667":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:1589:5814":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:42484:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:3672:5887":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:41004:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:1723:7319":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"25:7228:8059":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:5367:19764":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"25:4484:7447":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2780:2885":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9478:4310":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:31942:3247":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:10691:20828":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:624:35653":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:22280:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:20452:32466":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:11167:13925":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1527:7197":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12433:4755":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13667:5133":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:41271:3280":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:5715:1637":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:2502:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:39823:6169":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"14:160:5785":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:5630:5312":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6696:20655":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:40225:2483":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:47181:6396":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:43955:2919":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:7014:5902":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:8953:4284":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"25:4421:7421":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"25:5020:7664":{"crate_id":25,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:43566:6269":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:568:7170":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"25:5783:7742":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:7473:8073":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12915:4912":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:13744:5155":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:0:2708":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:585:8610":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:766:24570":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:41246:3279":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"25:6014:7857":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"20:478:2425":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"1:5350:6469":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:8047:5688":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11653:4609":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:39870:6173":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11821:4648":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:10743:4466":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:1509:7189":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8469:3714":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:40478:5945":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:13453:5060":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"25:5715:7698":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12522:4775":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:4634:8794":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:2776:2887":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:1845:3912":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:0:812":{"crate_id":6,"path":["libc"],"kind":"module"},"2:39034:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:3870:8737":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5015:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"25:4950:7636":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:6861:26068":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:39813:6168":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:47254:6402":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:46997:6392":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:5868:7787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"25:4717:7520":{"crate_id":25,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:2080:5804":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:13121:4976":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:562:7167":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6904:5516":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11362:6451":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:43068:6251":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:50910:6416":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"25:4519:7466":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:3990:8746":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:6544:5254":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:731:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13249:5005":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:7548:14027":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:20905:8753":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"25:5855:7774":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3460:8716":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:11625:13921":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"22:298:2228":{"crate_id":22,"path":["parking_lot_core","spinwait","SpinWait"],"kind":"struct"},"1:11871:415":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:5797:5331":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7509:5261":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7669:5264":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:6292:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:3749:5275":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13721:5154":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:8198:6453":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:3675:6451":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:2635:6973":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11193:4503":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12126:4693":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:22313:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:11879:4657":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:21755:32044":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"25:1517:7191":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:7514:8082":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:9576:3983":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:7193:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"25:4939:7631":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:962:3919":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"25:4958:7641":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4414:7423":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:43595:6277":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"25:4696:7508":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5963:5354":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13477:5064":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:1520:7194":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:43039:6248":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:573:7172":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:7508:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5677:20649":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:6868:5514":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:43915:2949":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:11135:4024":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"25:4402:7408":{"crate_id":25,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:1738:8156":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:5705:7698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:40288:5942":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:39139:6033":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:21626:6002":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:1583:5813":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4810:7566":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:1982:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:45691:6331":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:1085:5806":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:2115:8212":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10283:4415":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10491:4432":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:6474:5266":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:3142:4183":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6022:20652":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6061:19765":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"25:6812:8044":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:2579:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"18:599:35654":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4804:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:41331:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10635:4451":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:20484:32602":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:11451:8172":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:40200:6196":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:44192:6298":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:5724:5323":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:636:4128":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13461:5061":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"9:0:2700":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:12244:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"14:31:5785":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9534:4318":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:39180:6035":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10555:4436":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:11826:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:361:3166":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:4817:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:6903:4012":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:4398:3946":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:9148:35648":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:4102:2969":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:5998:20651":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8883:1638":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:4872:5296":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12224:4722":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:6586:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:45745:6333":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12158:4697":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"22:270:2344":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkToken"],"kind":"struct"},"6:4690:7513":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:9876:4233":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:652:4106":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:9028:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"25:5841:7773":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10303:4416":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:7499:4014":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:2344:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:20636:8828":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:5498:8811":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11886:740":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:4935:7636":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13024:4952":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:42956:6242":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:44137:6294":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:47199:6397":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:1080:5808":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13842:5180":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:7771:4234":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:38873:2913":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10589:4446":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:2786:5240":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"25:4849:7576":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"25:6585:7936":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:7335:35637":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:5682:2678":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"25:1750:7328":{"crate_id":25,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:47143:6395":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:8443:20713":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"14:187:19741":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:1227:5803":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9683:4332":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6558:5456":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:3151:2906":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10569:4441":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"25:546:7159":{"crate_id":25,"path":["libc","unix","pollfd"],"kind":"struct"},"2:2696:2966":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:30283:32068":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:11892:1483":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:9617:4324":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"20:490:2436":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"6:5767:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:9246:5964":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:45279:6315":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:43424:6265":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:20699:8830":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:12510:4774":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:11882:639":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:7293:5574":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:41255:3714":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:5760:2934":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"25:4490:7450":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"25:4896:7600":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10527:20827":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:3305:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11876:1359":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:9947:3715":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:21800:8219":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:42250:70":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:547:7159":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:7252:26692":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"1:638:6421":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:43792:5993":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"25:6846:8053":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:1906:3368":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:43210:6258":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:7263:8071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:43544:13936":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6307:5246":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"25:4834:7569":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"25:6689:7972":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6809:8047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"25:6108:7879":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:43612:6278":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:22148:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:40168:5935":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:62:14319":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4767:7551":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4786:7559":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10897:4476":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13181:4985":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:8828:8816":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:6232:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:39903:6177":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:10234:5976":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8972:25398":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:44086:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:4011:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:4314:2960":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:4503:8785":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7529:5262":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6164:5388":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:5655:5251":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:875:5794":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"11:815:5796":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:41961:3250":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:7498:5627":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:41263:3715":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"25:4551:7481":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43104:6252":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13257:5007":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"25:7530:8083":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13194:4991":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"25:4375:7396":{"crate_id":25,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11870:932":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:10092:4377":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:40047:6183":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:9361:5965":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"25:6626:7963":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:9372:6496":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:21771:32062":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7519:5628":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:521:24571":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:5922:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:12770:4799":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10465:4430":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4726:7528":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:42699:6237":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:1577:5812":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13763:5160":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:46747:6389":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43749:6281":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:6533:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:40157:6194":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:2905:34554":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:7649:8616":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:6243:35638":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4715:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:7246:8062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4612:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"25:4464:7438":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:45232:6314":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13411:5049":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:4845:5295":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:8156:5267":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:21734:32059":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:7655:6426":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"18:699:4139":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11813:4646":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:1900:15710":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"9:421:19654":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:3063:4192":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"25:7536:8084":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"25:4476:7442":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:9038:35641":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:5797:7751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"25:7250:8060":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:7497:8077":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:669:5792":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12419:4753":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:1695:7306":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:39132:2905":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8782:6582":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:5817:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6574:3891":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:1710:7315":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:771:1656":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:7852:5887":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:9112:3255":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:113:24561":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:45593:6329":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:10054:5970":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:2969:2899":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6662:5480":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:8858:4160":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5955:7837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:1872:5815":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8216:6555":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"22:252:2384":{"crate_id":22,"path":["parking_lot_core","parking_lot","FilterOp"],"kind":"enum"},"17:13159:4981":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:5330:6468":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:2319:5214":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:9973:4361":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:10199:6471":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11800:4644":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:8902:105":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"25:5898:7803":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:4252:2955":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:4732:4001":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:43459:6171":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:5000:5300":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"18:481:4104":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:7069:5903":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:40209:5937":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"20:268:1653":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"2:43879:8223":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:10080:4376":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:3640:4196":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:10682:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12072:4685":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:39843:5920":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5858:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:2746:2882":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4881:7600":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:8142:5700":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:39835:6170":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:4243:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13651:5129":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"25:1726:7319":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:41407:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:4398:2862":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:2069:5803":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:488:7124":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:2168:34551":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:12183:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6876:5256":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:46215:6355":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:10642:8235":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:13265:5009":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11434:4557":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:21169:8848":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:2076:1988":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:777:3914":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:975:4171":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:44970:6303":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:595:7185":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4998:7661":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"25:4525:7469":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:690:4138":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:11895:1118":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10670:4456":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:2772:2883":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:43724:6280":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9772:4339":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:3320:6202":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:30653:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4432:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:47105:6394":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10615:4449":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:4301:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13865:5184":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4366:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:8788:4158":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"25:1523:7194":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4536:7481":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:1571:7222":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:6603:3964":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"25:5796:7743":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4387:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:8718:4156":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"10:44:5817":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:20912:8826":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13564:5113":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"25:499:7127":{"crate_id":25,"path":["libc","unix","rlimit"],"kind":"struct"},"1:9110:26968":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:4320:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4399:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"25:4369:7395":{"crate_id":25,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10989:4185":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:11600:13924":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:8256:5709":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:8770:664":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"1:8486:6577":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"25:5878:7787":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:10816:5865":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:11423:5969":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:154:3903":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:55:5678":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"11:751:3884":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1716:7316":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:41146:6453":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:587:7180":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:43026:6247":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12388:4748":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"7:79:19645":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:3923:3944":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:953:5801":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:5238:13914":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:4789:5293":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"25:7524:8082":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:40097:6189":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4953:7647":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"20:473:2418":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"2:10220:5975":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:41133:6215":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:2206:6434":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:7532:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:2232:96":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12550:4779":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:6035:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:9826:4342":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:5594:5252":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:1241:5808":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13101:4968":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:8738:6579":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:9853:4344":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11158:6618":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11069:20723":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:10041:6596":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:5054:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:6691:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"11:853:5801":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:1077:34610":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:96:24560":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"11:1628:3899":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13678:5138":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:50931:6417":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:9839:4343":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:959:5802":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:1534:5810":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:736:24569":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:6365:1645":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:1747:7328":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10702:6449":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:6694:7976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5435:6472":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:31877:6027":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"25:6666:7965":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:535:5203":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:3157:2908":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:5643:5317":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4840:7579":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:10692:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:11339:4541":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:20724:8820":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"25:1512:7189":{"crate_id":25,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8459:6458":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"25:4686:7501":{"crate_id":25,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:46139:6353":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:4166:3944":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:7244:35635":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:43903:8229":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"11:1832:3714":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"25:6722:7986":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:9923:3714":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"25:5860:7775":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:44924:6301":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13367:5035":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"18:491:4105":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:40239:5939":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:43911:8231":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:43058:6250":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:11671:13930":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"25:567:7170":{"crate_id":25,"path":["libc","unix","sigval"],"kind":"struct"},"2:47208:6398":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"25:4569:7492":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:21821:2989":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"25:7566:8090":{"crate_id":25,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:6481:2932":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:1431:5792":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:5418:5306":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:20673:8829":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:9023:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"20:20:1648":{"crate_id":20,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"5:6735:3956":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"25:4855:7579":{"crate_id":25,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:3350:3944":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:3145:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:782:3922":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"22:82:1630":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock"],"kind":"module"},"1:11233:8237":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"25:5069:7691":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"9:174:8287":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:8090:5693":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11891:4659":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"25:5807:7751":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:43772:6289":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"11:444:140":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:888:5795":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:41752:84":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:901:3884":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:9641:4326":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:579:7175":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:7461:6620":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:41027:5954":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:43160:5967":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12634:4790":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12194:4703":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:44129:6292":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"14:165:19734":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:8156:6550":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:22379:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9886:4347":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:9356:13999":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"22:0:1660":{"crate_id":22,"path":["parking_lot_core"],"kind":"module"},"6:6679:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12959:4942":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10721:4461":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:6717:5493":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11502:4572":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:43452:5989":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:8667:4283":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"25:4788:7554":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:6836:8053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:2472:6435":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:2674:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:9028:4291":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8897:6584":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:11842:8617":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:1866:5814":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:9488:4313":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7449:5615":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6557:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4750:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:49622:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10761:20719":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:532:7150":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:1034:4172":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:1663:7288":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6819:5508":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:635:6419":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:7437:5614":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"25:5933:7824":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:10206:5974":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"25:4429:7423":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:3067:2903":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:49596:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7634:8615":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"25:7256:8062":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:2815:2892":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:922:5792":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:2951:2909":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:8420:20712":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11924:4667":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:41181:5959":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:4034:13898":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:10766:5979":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:5559:4003":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:11185:6482":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4903:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:5923:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:8938:6589":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:11877:1389":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:6236:5422":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12592:4783":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10580:4445":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:11620:13922":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:3546:3715":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:2691:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:4133:2970":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:10626:4450":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:30089:3610":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"25:6543:7912":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"9:388:19653":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4974:7654":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11234:4512":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"25:4978:7648":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:6081:3992":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:3087:94":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:1041:34612":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:45547:6327":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:2298:19766":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:44992:6304":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:9986:4362":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:10812:6495":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:7541:3716":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:8232:6557":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:7478:5260":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:210:3917":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:3920:8739":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"20:91:165":{"crate_id":20,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"2:2681:1880":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6616:7963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:43895:8227":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:4637:8767":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:501:1988":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:9972:5967":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"25:1544:7202":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:1062:5803":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:6793:5507":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:6541:7917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"25:4918:7616":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:11671:4030":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4375:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:2973:2900":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:1844:3800":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:8729:646":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"17:10712:20829":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12496:4773":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9822:4341":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:2686:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"25:651:14728":{"crate_id":25,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"25:5745:7723":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6361:5436":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:41044:5956":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:1460:2050":{"crate_id":2,"path":["core","mem"],"kind":"module"},"20:332:4102":{"crate_id":20,"path":["lock_api","remutex","fmt","LockedPlaceholder"],"kind":"struct"},"11:646:3715":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:6129:6476":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:40494:5946":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:1687:7305":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:5243:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:8860:8817":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:2341:8686":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:930:5796":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4271:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:22412:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:11355:4545":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:3244:6445":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"25:7553:8089":{"crate_id":25,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"25:6819:8047":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:6104:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"25:5049:7683":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:3533:3714":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"25:487:7124":{"crate_id":25,"path":["libc","unix","timeval"],"kind":"struct"},"17:12307:4738":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:5689:2928":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:9972:6429":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:39799:6167":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11410:4553":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"20:487:2433":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"2:2751:2879":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:12461:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"25:4639:7497":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5947:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"25:4437:7426":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:41061:8734":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:39950:6179":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:3774:3919":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4504:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:1859:5813":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:9093:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:4206:3714":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:29860:2984":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13659:5132":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10354:4419":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"25:0:812":{"crate_id":25,"path":["libc"],"kind":"module"},"1:413:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:8202:3026":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:11820:6623":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:3123:5813":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"25:5063:7689":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:9696:4314":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:44946:6302":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:5539:5930":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:3630:3280":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:20802:5998":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:22115:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:6773:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"25:4724:7521":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:1783:6427":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:7220:5908":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:644:4106":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:42976:6244":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12293:4736":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:9100:3250":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:6674:33166":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:11349:5986":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:6627:14030":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:6431:5442":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:5944:5347":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"25:7483:8073":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4636:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:7836:6500":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5786:7743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"15:219:8274":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:42947:6240":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:8109:5696":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:5305:5304":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:814:3925":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:1313:93":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8093:8700":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"25:6055:7868":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11896:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:3610:8735":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:11887:736":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:2448:5226":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:4247:2954":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7626:5633":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:2810:2890":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:47303:6405":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:3356:13958":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:653:14728":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"11:659:3280":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:355:3165":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11391:4552":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"25:5868:7780":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:49609:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11878:1469":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:20505:32607":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:2141:585":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"25:1553:7207":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:5847:5339":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:2188:8215":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8150:6548":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2768:2880":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:11388:5988":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"25:1666:7288":{"crate_id":25,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:917:5809":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3287:8721":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:11853:25412":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2862:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"25:7489:8074":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"22:230:1770":{"crate_id":22,"path":["parking_lot_core","parking_lot","RequeueOp"],"kind":"enum"},"1:7606:3156":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:7157:8626":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:49570:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:4773:33304":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:43468:5920":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:4740:7534":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13803:5171":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:8909:4161":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13516:5076":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:41592:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:1947:4177":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6327:5431":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"22:284:2385":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkToken"],"kind":"struct"},"2:21573:6001":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:6175:3956":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:7520:8083":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11044:2915":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:42987:6245":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:11891:1486":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:42506:6235":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:11439:6619":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"25:7542:8085":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4865:996":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:7118:14028":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:40116:5927":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:22181:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:4757:5292":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:40056:6184":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:6328:4102":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:500:7127":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:40007:6180":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:8971:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:39353:29450":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:21429:8823":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:7042:5540":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:7011:28713":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:755:4154":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13469:5063":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"9:481:19651":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:8377:6231":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11615:4601":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:7781:6497":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13879:5187":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5041:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"25:4316:7352":{"crate_id":25,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:4569:7956":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:43934:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:3225:5271":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:12403:4752":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12178:4698":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6488:5444":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11258:4526":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:1421:5809":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5831:7773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:779:95":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"20:0:1634":{"crate_id":20,"path":["lock_api"],"kind":"module"},"1:7562:3167":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"25:6576:7935":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"25:4968:7647":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:7061:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10142:20802":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"20:230:2866":{"crate_id":20,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"23:349:24588":{"crate_id":23,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"1:7518:4016":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:13443:5057":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"25:553:7162":{"crate_id":25,"path":["libc","unix","winsize"],"kind":"struct"},"16:6854:5512":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:3128:35581":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13506:5071":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:3928:8740":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:247:4164":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:9596:4322":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"25:4557:7483":{"crate_id":25,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"25:5075:7694":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:9102:3251":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:21833:2992":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:531:4110":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:8979:35643":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:5557:5247":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:947:5799":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:8628:85":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:6935:5519":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:8683:4155":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:30105:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:12113:4692":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:4400:5282":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7859:20661":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:474:7116":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:2572:5231":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4963:7648":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:45825:6334":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12576:4781":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:879:3714":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:9110:3254":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"23:57:3884":{"crate_id":23,"path":["smallvec","Drain"],"kind":"struct"},"2:43282:5975":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:6005:4005":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5060:7694":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:4986:6463":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:1071:5804":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"25:61:14319":{"crate_id":25,"path":["libc","unix","DIR"],"kind":"enum"},"1:7585:3158":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:5071:5302":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5693:5318":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:2382:2714":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:420:4168":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3127:27331":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"13:226:8140":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:13812:5175":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:1724:3366":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:632:5882":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6321:5430":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:41975:3253":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:2830:5242":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:4702:7520":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:7556:8090":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:862:3927":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2524:5229":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:7561:8753":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:1994:5888":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:3496:3884":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:46185:6354":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:8417:8806":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10823:4254":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6012:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1846:6430":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:7218:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:7204:32071":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"25:493:7126":{"crate_id":25,"path":["libc","unix","timespec"],"kind":"struct"},"25:5957:7836":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:3968:8742":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"25:1562:7213":{"crate_id":25,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:7031:3930":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:39858:13989":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:6688:7975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6218:5412":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:11017:25396":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:2931:19792":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"21:19:3899":{"crate_id":21,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"16:6535:3905":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:3165:6441":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:7077:20657":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13240:5004":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"25:6551:7917":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:1433:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"25:4705:7513":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:2357:5222":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13145:4980":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:9469:4308":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"22:211:1771":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkResult"],"kind":"struct"},"6:4510:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4828:7575":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"25:7576:8092":{"crate_id":25,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:43382:6263":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11544:4577":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"20:499:2450":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"5:5903:3944":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11600:4595":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"25:4819:7565":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12259:4733":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8124:6201":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"20:502:2454":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"2:47356:6408":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:609:4123":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:2569:6436":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:10660:6611":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:2904:3333":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1821:6429":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"25:6603:7945":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"25:4730:7524":{"crate_id":25,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"22:83:1910":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","acquire_resource"],"kind":"function"},"2:3368:5919":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:41712:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:39884:13990":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:10165:5973":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:3585:5274":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6671:5481":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:618:6418":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:8931:4165":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:41792:91":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11893:785":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:8490:20714":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10416:4426":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"25:6567:7929":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:1617:7251":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:22214:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9566:4296":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:1980:5887":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:2736:3244":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:38990:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:9409:20730":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:11605:5962":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"25:4390:7403":{"crate_id":25,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:6930:1622":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"25:1655:7280":{"crate_id":25,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:8791:31391":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:4369:2962":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"25:505:7130":{"crate_id":25,"path":["libc","unix","rusage"],"kind":"struct"},"2:12516:8633":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4773:7554":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:2905:5245":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"25:525:7147":{"crate_id":25,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:9670:4331":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:10993:6579":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:49200:8857":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:1747:3365":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:8993:6876":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8945:6590":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:7053:3280":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7596:20659":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4521:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2460:13994":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"25:1620:7251":{"crate_id":25,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13821:5177":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"14:40:4527":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:11372:5987":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4573:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:7479:8074":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"9:445:19652":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:10545:4185":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:6534:1653":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:20467:32466":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13015:4948":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:47228:6400":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9340:4298":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:8623:78":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:9052:2915":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:42277:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:4510:5285":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:7090:3280":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12536:4776":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:4904:5297":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:10618:6605":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:8598:20718":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:21164:8825":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"25:4457:7435":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8815:6583":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:7488:5626":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:5346:5305":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:21642:8216":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:44150:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:42459:6224":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:3162:35582":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"25:4544:7479":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11861:4656":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13082:4967":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:7788:6498":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:11881:638":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:614:35655":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:8072:6447":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:39078:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:2917:1922":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"11:2190:35614":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:4378:2963":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:8400:6571":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:21333:32470":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:2920:2296":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:1534:7199":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:3149:5814":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:8025:5687":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"25:5777:7741":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:7844:6501":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"20:30:2341":{"crate_id":20,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"5:4335:3946":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13316:5022":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:5017:6463":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2302:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:4445:5283":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"25:4414:7417":{"crate_id":25,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1677:7299":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12033:4681":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:3520:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:46061:6352":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12006:4676":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:42467:6226":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:12345:4742":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:9917:4355":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:564:4115":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:11889:1484":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"25:4989:7654":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:3275:3912":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:2642:5234":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"25:6704:7976":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:1787:4173":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:9453:20731":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:49583:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4969:5299":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:80:24559":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:47280:6404":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7065:5542":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:43738:13937":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:43228:6259":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:7411:5358":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:45903:6349":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"25:4497:7453":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:719:4145":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:12404:3992":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:47059:6393":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:4702:5290":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:2535:3997":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:2914:2018":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:7798:6499":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:10377:4420":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:41195:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12331:4741":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6460:5249":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:41339:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:6405:2935":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:39934:32071":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4277:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"20:480:2428":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"20:398:1651":{"crate_id":20,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"25:4617:7495":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:42299:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:40087:6187":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4819:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"25:4396:7405":{"crate_id":25,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:123:14374":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"20:87:4102":{"crate_id":20,"path":["lock_api","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:2720:5237":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6201:5405":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:11227:8236":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4664:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"11:60:35617":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:9868:6212":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"11:822:8627":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:7683:5265":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:1057:34556":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"11:1003:5803":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:480:3994":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"25:5753:7725":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"25:1719:7316":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:2793:2891":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11532:4576":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:4540:5286":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10705:4459":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:7811:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:7467:5623":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:6369:1646":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:507:4106":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1652:7280":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11875:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:2209:2582":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4650:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:3978:8743":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:5920:5199":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:8309:5962":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:2879:5244":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6179:5390":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:3300:5272":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:2899:1773":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:5886:5341":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"25:586:7180":{"crate_id":25,"path":["libc","unix","servent"],"kind":"struct"},"17:386:4166":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:41472:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:30681:3234":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"7:0:1530":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:2053:5543":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:9068:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:44076:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:46857:6390":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:9380:20729":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:3205:6443":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:3116:3714":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12799:4819":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:20486:32606":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:0:2702":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:8753:4157":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:9946:4359":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:40177:5936":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:4120:8765":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:2756:2878":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:6999:5886":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:4099:8763":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:4069:28719":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10052:4373":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6390:5439":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:926:5793":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:6743:8011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:40069:6185":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:8389:20711":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:5234:13913":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"3:0:439":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:1658:1081":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:5048:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:7008:3280":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7572:35634":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:1768:606":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:7544:3717":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"9:325:8148":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:7275:5913":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:6045:7868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:2496:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:47318:6406":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"25:4997:7656":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"11:1518:19729":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:2694:5236":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"22:84:2370":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","release_resource"],"kind":"function"},"2:43118:6255":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"25:4651:7498":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:2609:6437":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:9058:3249":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6132:5383":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"25:4801:7559":{"crate_id":25,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43891:8226":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6376:5248":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13356:5031":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:8224:6548":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:8632:20696":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:679:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:6788:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"11:985:5543":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:5940:5932":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:4171:6454":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:11837:8298":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"25:4665:7499":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:11872:1503":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13033:4953":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7103:6593":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"25:7441:8072":{"crate_id":25,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11090:4489":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:6712:7986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11573:4586":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:810:5809":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:20712:8753":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:11946:4668":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:8205:8232":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:21520:6000":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"11:119:3906":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:31837:8144":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:10248:5977":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10270:4413":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"11:1029:5804":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:43328:6261":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:300:8211":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12449:4759":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:1453:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:39173:2961":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:5743:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:1537:3944":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:4461:7442":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"25:1648:7276":{"crate_id":25,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10440:4428":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10840:4473":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:9512:4315":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:5935:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:506:7130":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:8796:8296":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:1572:3912":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:9365:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:42475:6227":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9991:27058":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11422:4556":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:7585:31389":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:6575:20654":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4475:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"25:1586:7230":{"crate_id":25,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:0:2698":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:47395:6409":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:8573:20717":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"11:98:8207":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11556:4578":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:21321:6415":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6981:5530":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:9108:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11969:4672":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"9:52:8277":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"25:1537:7199":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:8210:8766":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4327:7372":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:41169:5957":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4915:7625":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:9068:35642":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:7039:34548":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"23:327:24586":{"crate_id":23,"path":["smallvec","Array"],"kind":"trait"},"6:4529:7479":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:5104:5303":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:5366:6470":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7757:5638":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:40500:6202":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:2545:3983":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:8203:3025":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:9577:4321":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:9098:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:3899:5279":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"25:1713:7315":{"crate_id":25,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"25:4588:7493":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:43887:8225":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12372:4746":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40107:5925":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:6097:4009":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:1541:7202":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11220:4511":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"25:4741:7528":{"crate_id":25,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4734:7532":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:9559:3982":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:42718:5966":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"25:4755:7534":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:6004:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5983:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:10837:25407":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"14:215:5788":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:7233:5911":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12563:4780":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4834:7576":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"25:4627:7496":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:2742:5238":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"25:6774:8025":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:43759:6285":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:40139:6193":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:688:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:35:3915":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:3446:5273":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:3378:6551":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:42966:6243":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:11884:738":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:4571:7958":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:10681:4457":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12923:4913":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7557:5629":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:4728:5291":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"22:73:1772":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_PARK_TOKEN"],"kind":"constant"},"6:4406:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:2508:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:8214:5594":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7543:5263":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:2685:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:9088:3168":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:6506:5452":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:40519:5948":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:2886:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4894:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:4431:8768":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:9557:4295":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:45425:6323":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:574:4106":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6990:5533":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:1978:4180":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"25:1607:7244":{"crate_id":25,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:7566:8092":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5735:7723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"14:7:5785":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:11152:6478":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:861:5802":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:1561:3714":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:1138:5808":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:2378:5223":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5976:5205":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:320:3908":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:0:2707":{"crate_id":17,"path":["object"],"kind":"module"},"2:45094:6308":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"23:97:24585":{"crate_id":23,"path":["smallvec","SmallVecData"],"kind":"enum"},"6:7526:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:10104:4378":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2337:5216":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:1120:5807":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:45125:6309":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:7543:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6400:5440":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"25:473:7116":{"crate_id":25,"path":["libc","unix","group"],"kind":"struct"},"1:8327:6568":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:7330:3912":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:1462:5885":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:936:8627":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:13419:5052":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"9:234:6231":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:42938:6239":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:10127:5972":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:2546:5230":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:9748:4295":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:43048:6249":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:7450:4170":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:8129:5697":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11459:4562":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:3782:5276":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"25:7501:8076":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:3453:8699":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:7114:2951":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"23:118:3888":{"crate_id":23,"path":["smallvec","SmallVec"],"kind":"struct"},"20:336:1654":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:40148:5931":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:1403:5794":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:11321:6450":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"25:1680:7299":{"crate_id":25,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:2367:8696":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:39159:5594":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:3157:5812":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10798:20720":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6890:5257":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:7164:2938":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:676:8614":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"25:4286:7334":{"crate_id":25,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:39756:5920":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:3055:6438":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:7667:8657":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:8065:4150":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:4424:2964":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:11883:741":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:2764:5239":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11993:4673":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"15:198:19748":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"25:7518:8081":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5850:7775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:274:8208":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12358:4743":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"11:353:3910":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13385:5039":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:5616:5308":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:43907:8230":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:3183:5815":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:30049:3609":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:1594:5815":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:47333:6407":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:6243:3884":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:9275:35644":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7029:5537":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"23:0:2867":{"crate_id":23,"path":["smallvec"],"kind":"module"},"2:43443:6267":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:10304:6578":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:41090:8158":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:10125:4380":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:39762:6163":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"25:122:14374":{"crate_id":25,"path":["libc","unix","fpos_t"],"kind":"enum"},"12:0:2703":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:3030:5268":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:5906:4003":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:7837:5650":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8037:6540":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:3185:2911":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:2616:5233":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10747:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:4324:2961":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:6753:8818":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:7687:6026":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:1924:8668":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:6870:4150":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:4251:6455":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:515:4103":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:42714:8222":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:1442:5793":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12282:4734":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:40527:5950":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:45054:6306":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:44179:5816":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:21682:2988":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"25:6006:7855":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:7216:2937":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11319:4540":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:39851:6171":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7711:5636":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10478:4431":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11520:4573":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:44900:6300":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"20:505:2458":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"1:11476:6486":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:494:7126":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:1555:5811":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10000:4363":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:4480:5284":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13689:5139":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:6673:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4796:7562":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13777:5162":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6520:5454":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"20:35:164":{"crate_id":20,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"25:6753:8011":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13344:5030":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:5571:5250":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:6575:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"25:5056:7686":{"crate_id":25,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:2731:2936":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:9228:35639":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4756:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:2910:1990":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8254:7945":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:7828:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:7190:5905":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:264:3919":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:43264:5974":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:1412:5795":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:45024:6305":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"11:1065:35615":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:2307:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:4004:3919":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:8475:6576":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:43477:6170":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:4542:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12902:4905":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:4323:6456":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:40125:6190":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:43883:8224":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"25:481:7121":{"crate_id":25,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11299:4530":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13857:5181":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:5741:20650":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7635:5634":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"25:5945:7829":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12646:4797":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:41382:3714":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:13324:5023":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"}},"external_crates":{"23":{"name":"smallvec","html_root_url":null},"20":{"name":"lock_api","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"libc","html_root_url":null},"22":{"name":"parking_lot_core","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"21":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}