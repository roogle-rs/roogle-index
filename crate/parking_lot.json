{"root":"0:0:2434","crate_version":"0.12.3","includes_private":false,"index":{"0:200:2701":{"id":"0:200:2701","crate_id":0,"name":"lock","span":{"filename":"src/raw_mutex.rs","begin":[66,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361:2423":{"id":"0:361:2423","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[41,0],"end":[41,80]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](crate::Mutex) for more details about the underlying mutex\nprimitive.","links":{"crate::Mutex":"0:94:198"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutex","id":"20:256:2423","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:3967-0:195:2418":{"id":"b:2:3967-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[312,0],"end":[317,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:149:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:283:3210":{"id":"0:283:3210","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/raw_rwlock.rs","begin":[223,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:3208","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:27527":{"id":"5:5728:27527","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13875:27525"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42831:3830-0:155:2417":{"id":"a:2:42831:3830-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42831:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:284:3211":{"id":"0:284:3211","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/raw_rwlock.rs","begin":[236,4],"end":[250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:45531:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[454,0],"end":[506,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeTimed","id":"20:479:3239","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:305:3240","0:306:3241","0:307:3242","0:308:3243"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:414-0:82:2410":{"id":"0:414-0:82:2410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,45],"end":[42,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutex","name":"FairMutex","id":"0:82:2410","glob":false}}},"2:13862:35180":{"id":"2:13862:35180","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:15307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2825-0:456:2416":{"id":"b:2:2825-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2820:4060","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2827:27244"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3099-0:355:2422":{"id":"b:2:3099-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13824:27795":{"id":"2:13824:27795","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901","str::rsplitn":"2:13826:27797"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44838:7109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441-0:380:247":{"id":"0:441-0:380:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockWriteGuard","name":"RwLockWriteGuard","id":"0:380:247","glob":false}}},"2:13814:27791":{"id":"2:13814:27791","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13240:7104","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:259:2419":{"id":"b:2:3105-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:162:2949":{"id":"0:162:2949","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:3119":{"id":"0:205:3119","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_mutex.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13834:3029":{"id":"2:13834:3029","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13453:3901","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::rmatches":"2:13836:35170"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44938:7288","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2793-0:259:2419":{"id":"b:2:2793-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:3299"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13783:35165":{"id":"2:13783:35165","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12658:1772","str::slice_mut_unchecked":"2:13784:35166","crate::ops::Index":"2:40277:3692"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[14,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:159:2928","0:160:2403","0:161:2701","0:162:2949","0:163:2694","0:164:3120"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42830:3831-0:259:2419":{"id":"a:2:42830:3831-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42830:3831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3110-0:259:2419":{"id":"b:2:3110-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:263:2403":{"id":"0:263:2403","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_rwlock.rs","begin":[64,4],"end":[64,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:32945:249-0:155:2417":{"id":"a:2:32945:249-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3969:1872":{"id":"2:3969:1872","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40446:6921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:2928":{"id":"0:262:2928","crate_id":0,"name":"INIT","span":{"filename":"src/raw_rwlock.rs","begin":[60,4],"end":[62,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:365:2424":{"id":"0:365:2424","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[59,0],"end":[59,98]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutexGuard","id":"20:855:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:413-0:84:2409":{"id":"0:413-0:84:2409","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,27],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::const_fair_mutex","name":"const_fair_mutex","id":"0:84:2409","glob":false}}},"2:13826:27797":{"id":"2:13826:27797","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12652:492","str::splitn":"2:13824:27795","self::pattern":"2:13453:3901"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44856:7110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:15307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:27525":{"id":"2:13875:27525","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42830:3831-0:31:2407":{"id":"a:2:42830:3831-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42830:3831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:270:3120":{"id":"0:270:3120","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_rwlock.rs","begin":[142,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42831:3830-0:443:2408":{"id":"a:2:42831:3830-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42831:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2790-0:355:2422":{"id":"b:2:2790-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:3297"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:424-0:456:2416":{"id":"0:424-0:456:2416","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,27],"end":[44,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::OnceState","name":"OnceState","id":"0:456:2416","glob":false}}},"0:438-0:373:245":{"id":"0:438-0:373:245","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,65],"end":[53,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLock","name":"RwLock","id":"0:373:245","glob":false}}},"0:446":{"id":"0:446","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:447:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:439-0:377:246":{"id":"0:439-0:377:246","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,73],"end":[53,88]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockReadGuard","name":"RwLockReadGuard","id":"0:377:246","glob":false}}},"0:440-0:389:2428":{"id":"0:440-0:389:2428","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockUpgradableReadGuard","name":"RwLockUpgradableReadGuard","id":"0:389:2428","glob":false}}},"2:13771:27699":{"id":"2:13771:27699","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12976:15308"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:27760":{"id":"2:13774:27760","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13800:27802":{"id":"2:13800:27802","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359:3276":{"id":"0:359:3276","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[18,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"2:23965:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42830:3831-0:155:2417":{"id":"a:2:42830:3831-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42830:3831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3967-0:155:2417":{"id":"b:2:3967-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:437-0:386:2427":{"id":"0:437-0:386:2427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,41],"end":[53,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockWriteGuard","name":"MappedRwLockWriteGuard","id":"0:386:2427","glob":false}}},"2:13839:35171":{"id":"2:13839:35171","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13453:3901","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::rmatch_indices":"2:13841:35172"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44884:7286","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:27703":{"id":"2:13873:27703","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40630:15229","Self::is_ascii":"2:13872:27528"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40630:15229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2793-0:155:2417":{"id":"b:2:2793-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:3299"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2825-0:443:2408":{"id":"b:2:2825-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2820:4060","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2827:27244"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128":{"id":"0:128","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[79,0],"end":[310,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:129:1212","0:130:1759","0:131:457","0:134:3089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:211:3123":{"id":"0:211:3123","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_mutex.rs","begin":[163,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:45531:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13841:35172":{"id":"2:13841:35172","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13453:3901","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::match_indices":"2:13839:35171"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44902:7287","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:15307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:155:2417":{"id":"b:2:3105-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3095-0:443:2408":{"id":"b:2:3095-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:4085"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:161:2701":{"id":"0:161:2701","crate_id":0,"name":"lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:2928":{"id":"0:198:2928","crate_id":0,"name":"INIT","span":{"filename":"src/raw_mutex.rs","begin":[59,4],"end":[61,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[154,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_shared","bump_exclusive"],"trait":{"name":"RawRwLockFair","id":"20:447:3198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:273:3199","0:274:3200","0:275:3201","0:276:3203"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13884:28983":{"id":"2:13884:28983","crate_id":2,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"2:13812:27789","`str::find`":"2:13805:4131"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:40309:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42830:3831-0:125:2415":{"id":"a:2:42830:3831-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42830:3831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2793-0:31:2407":{"id":"b:2:2793-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:3299"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3099-0:125:2415":{"id":"b:2:3099-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:101:2414":{"id":"0:101:2414","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[109,0],"end":[109,79]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:848:2414","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:463:3024":{"id":"0:463:3024","crate_id":0,"name":"Done","span":{"filename":"src/once.rs","begin":[33,4],"end":[33,8]},"visibility":"default","docs":"A closure has completed successfully.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:431-0:355:2422":{"id":"0:431-0:355:2422","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,54],"end":[49,65]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::RawThreadId","name":"RawThreadId","id":"0:355:2422","glob":false}}},"2:13867:35182":{"id":"2:13867:35182","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:15307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2411":{"id":"0:86:2411","crate_id":0,"name":"FairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[91,0],"end":[91,75]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:840:199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:166:3119":{"id":"0:166:3119","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_fair_mutex.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[191,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockDowngrade","id":"20:452:3205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:278:3206"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:264:3181":{"id":"0:264:3181","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[67,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:352":{"id":"2:13773:352","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13774:27760","`u8`":"1:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2793-0:125:2415":{"id":"b:2:2793-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:3299"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[319,0],"end":[325,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3110-0:155:2417":{"id":"b:2:3110-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3105-0:355:2422":{"id":"b:2:3105-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3110-0:355:2422":{"id":"b:2:3110-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:357":{"id":"0:357","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[15,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"GetThreadId","id":"20:215:3274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:358:2928","0:359:3276"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3357:4054-0:125:2415":{"id":"a:2:3357:4054-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:4054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[519,0],"end":[523,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:45:2687":{"id":"0:45:2687","crate_id":0,"name":"wait_until","span":{"filename":"src/condvar.rs","begin":[283,4],"end":[292,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:199","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9551:174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426-0:195:2418":{"id":"0:426-0:195:2418","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[46,0],"end":[46,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_mutex::RawMutex","name":"RawMutex","id":"0:195:2418","glob":false}}},"b:2:3099-0:443:2408":{"id":"b:2:3099-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3095-0:456:2416":{"id":"b:2:3095-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:4085"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:459:3020":{"id":"0:459:3020","crate_id":0,"name":"Poisoned","span":{"filename":"src/once.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":"A closure was executed but panicked.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2790-0:456:2416":{"id":"b:2:2790-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:3297"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3322:261-0:125:2415":{"id":"a:2:3322:261-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:130:1759":{"id":"0:130:1759","crate_id":0,"name":"state","span":{"filename":"src/once.rs","begin":[88,4],"end":[99,5]},"visibility":"public","docs":"Returns the current state of this `Once`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3113:150":{"id":"2:3113:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32869:9211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:33003:3798-0:125:2415":{"id":"a:2:33003:3798-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33003:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:363:2420":{"id":"0:363:2420","crate_id":0,"name":"const_reentrant_mutex","span":{"filename":"src/remutex.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.\n\nThis allows creating a reentrant mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:361:2423","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2795:3299":{"id":"2:2795:3299","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2722":{"id":"0:59:2722","crate_id":0,"name":"wait_while_until","span":{"filename":"src/condvar.rs","begin":[463,4],"end":[474,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant. If the provided condition evaluates to\n`false`, then the thread is no longer blocked and the operation is\ncompleted. If the condition evaluates to `true`, then the thread is\nblocked again and waits for another notification before repeating\nthis process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:199","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9551:174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3596:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2413":{"id":"0:96:2413","crate_id":0,"name":"const_mutex","span":{"filename":"src/mutex.rs","begin":[91,0],"end":[93,1]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:94:198","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:3028":{"id":"0:123:3028","crate_id":0,"name":"poisoned","span":{"filename":"src/once.rs","begin":[42,4],"end":[44,5]},"visibility":"public","docs":"Returns whether the associated `Once` has been poisoned.\n\nOnce an initialization routine for a `Once` has panicked it will forever\nindicate to future forced initialization routines that it is poisoned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2790-0:259:2419":{"id":"b:2:2790-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:3297"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[205,0],"end":[268,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockTimed","id":"20:454:3208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:135","0:281:174","0:282:3209","0:283:3210","0:284:3211","0:285:3212"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2822-0:443:2408":{"id":"b:2:2822-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2820:4060","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2824:27244"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:466":{"id":"0:466","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:467:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32947:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:169:135":{"id":"0:169:135","crate_id":0,"name":"Duration","span":{"filename":"src/raw_fair_mutex.rs","begin":[53,4],"end":[53,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:3121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"5:786:4153":{"id":"5:786:4153","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:3214":{"id":"0:287:3214","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[272,4],"end":[278,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:784:4151":{"id":"5:784:4151","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:380:247":{"id":"0:380:247","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[103,0],"end":[103,80]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockWriteGuard","id":"20:880:247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13794:33056":{"id":"2:13794:33056","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13793:33055"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45017:7293","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2793-0:456:2416":{"id":"b:2:2793-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:3299"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:448":{"id":"0:448","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32947:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:202:2694":{"id":"0:202:2694","crate_id":0,"name":"unlock","span":{"filename":"src/raw_mutex.rs","begin":[100,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[512,0],"end":[517,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2793-0:443:2408":{"id":"b:2:2793-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:3299"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32945:249-0:443:2408":{"id":"a:2:32945:249-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:159:2928":{"id":"0:159:2928","crate_id":0,"name":"INIT","span":{"filename":"src/raw_fair_mutex.rs","begin":[15,4],"end":[15,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:167:2783":{"id":"0:167:2783","crate_id":0,"name":"bump","span":{"filename":"src/raw_fair_mutex.rs","begin":[47,4],"end":[49,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:461:3022":{"id":"0:461:3022","crate_id":0,"name":"InProgress","span":{"filename":"src/once.rs","begin":[30,4],"end":[30,14]},"visibility":"default","docs":"A thread is currently executing a closure.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:3357:4054-0:31:2407":{"id":"a:2:3357:4054-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:4054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:474:830":{"id":"0:474:830","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:2422":{"id":"0:355:2422","crate_id":0,"name":"RawThreadId","span":{"filename":"src/remutex.rs","begin":[13,0],"end":[13,23]},"visibility":"public","docs":"Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:32945:249-0:355:2422","a:2:3322:261-0:355:2422","a:2:3357:4054-0:355:2422","a:2:33003:3798-0:355:2422","a:2:42830:3831-0:355:2422","a:2:42831:3830-0:355:2422","b:2:2790-0:355:2422","b:2:2793-0:355:2422","b:2:3095-0:355:2422","b:2:3099-0:355:2422","b:2:3105-0:355:2422","b:2:3110-0:355:2422","b:2:3967-0:355:2422","0:357"]}}},"0:430-0:368:2421":{"id":"0:430-0:368:2421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,27],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::MappedReentrantMutexGuard","name":"MappedReentrantMutexGuard","id":"0:368:2421","glob":false}}},"a:2:32945:249-0:125:2415":{"id":"a:2:32945:249-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:164:3120":{"id":"0:164:3120","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_fair_mutex.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42831:3830-0:195:2418":{"id":"a:2:42831:3830-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42831:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13879:27708":{"id":"2:13879:27708","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:39620"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33003:3798-0:443:2408":{"id":"a:2:33003:3798-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33003:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:267:3189":{"id":"0:267:3189","crate_id":0,"name":"lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[107,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:3089":{"id":"0:134:3089","crate_id":0,"name":"call_once_force","span":{"filename":"src/once.rs","begin":[173,4],"end":[185,5]},"visibility":"public","docs":"Performs the same function as `call_once` except ignores poisoning.\n\nIf this `Once` has been poisoned (some initialization panicked) then\nthis function will continue to attempt to call initialization functions\nuntil one of them doesn't panic.\n\nThe closure `f` is yielded a structure which can be used to query the\nstate of this `Once` (whether initialization has previously panicked or\nnot).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3599:155","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:3209":{"id":"0:282:3209","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/raw_rwlock.rs","begin":[210,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:3208","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358:2928":{"id":"0:358:2928","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[16,4],"end":[16,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"RawThreadId"}}},"2:13821:35169":{"id":"2:13821:35169","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13453:3901","str::split":"2:13812:27789","prim@char":"1:12652:492","str::split_terminator":"2:13819:35168"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44802:7285","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:15307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13812:27789":{"id":"2:13812:27789","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13453:3901","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::split_whitespace":"2:13793:33055","str::rsplit":"2:13816:27793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44734:7102","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3099-0:259:2419":{"id":"b:2:3099-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13763:1027":{"id":"2:13763:1027","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12652:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3110-0:456:2416":{"id":"b:2:3110-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:782-0:456:2416":{"id":"b:5:782-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:784:4151","5:785:4152","5:786:4153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[40,0],"end":[50,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:166:3119","0:167:2783"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42831:3830-0:355:2422":{"id":"a:2:42831:3830-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42831:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2792:3297":{"id":"2:2792:3297","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3099-0:456:2416":{"id":"b:2:3099-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:210:3122":{"id":"0:210:3122","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_mutex.rs","begin":[146,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9551:174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3967-0:355:2422":{"id":"b:2:3967-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13872:27528":{"id":"2:13872:27528","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3095-0:31:2407":{"id":"b:2:3095-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:4085"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:199":{"id":"0:98:199","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[100,0],"end":[100,67]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:840:199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:125:2415":{"id":"0:125:2415","crate_id":0,"name":"Once","span":{"filename":"src/once.rs","begin":[77,0],"end":[77,26]},"visibility":"public","docs":"A synchronization primitive which can be used to run a one-time\ninitialization. Useful for one-time initialization for globals, FFI or\nrelated functionality.\n\n# Differences from the standard library `Once`\n\n- Only requires 1 byte of space, instead of 1 word.\n- Not required to be `'static`.\n- Relaxed memory barriers in the fast path, which can significantly improve\n  performance on some architectures.\n- Efficient handling of micro-contention using adaptive spinning.\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic START: Once = Once::new();\n\nSTART.call_once(|| {\n    // run initialization here\n});\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:128","a:2:32945:249-0:125:2415","a:2:3322:261-0:125:2415","a:2:3357:4054-0:125:2415","a:2:33003:3798-0:125:2415","a:2:42830:3831-0:125:2415","a:2:42831:3830-0:125:2415","b:2:2790-0:125:2415","b:2:2793-0:125:2415","b:2:3095-0:125:2415","b:2:3099-0:125:2415","b:2:3105-0:125:2415","b:2:3110-0:125:2415","b:2:3967-0:125:2415","0:148","0:150"]}}},"b:2:3099-0:195:2418":{"id":"b:2:3099-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:195:2418":{"id":"0:195:2418","crate_id":0,"name":"RawMutex","span":{"filename":"src/raw_mutex.rs","begin":[32,0],"end":[56,1]},"visibility":"public","docs":"Raw mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32945:249-0:195:2418","a:2:3322:261-0:195:2418","a:2:3357:4054-0:195:2418","a:2:33003:3798-0:195:2418","a:2:42830:3831-0:195:2418","a:2:42831:3830-0:195:2418","b:2:2790-0:195:2418","b:2:2793-0:195:2418","b:2:3095-0:195:2418","b:2:3099-0:195:2418","b:2:3105-0:195:2418","b:2:3110-0:195:2418","b:2:3967-0:195:2418","0:197","0:204","0:207"]}}},"2:13870:35183":{"id":"2:13870:35183","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13412:149","`FromStr`":"2:13411:3776"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13411:3776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13411:3776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3322:261-0:195:2418":{"id":"a:2:3322:261-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:289":{"id":"0:289","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[294,0],"end":[320,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursiveTimed","id":"20:464:3216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:290:3217","0:291:3218"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[58,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:198:2928","0:199:2403","0:200:2701","0:201:2949","0:202:2694","0:203:3120"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13874:27529":{"id":"2:13874:27529","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3357:4054-0:443:2408":{"id":"a:2:3357:4054-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:4054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:33003:3798-0:456:2416":{"id":"a:2:33003:3798-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33003:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2790-0:155:2417":{"id":"b:2:2790-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:3297"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[322,0],"end":[396,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgrade","id":"20:467:3163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:293:3219","0:294:3222","0:295:3224","0:296:3227","0:297:3229"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3357:4054-0:259:2419":{"id":"a:2:3357:4054-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:4054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:3109:1859":{"id":"2:3109:1859","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3967-0:443:2408":{"id":"b:2:3967-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:785:4152":{"id":"5:785:4152","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:31:2407":{"id":"b:2:3105-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:149:60":{"id":"0:149:60","crate_id":0,"name":"default","span":{"filename":"src/once.rs","begin":[314,4],"end":[316,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:3199":{"id":"0:273:3199","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/raw_rwlock.rs","begin":[156,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:456:2416":{"id":"0:456:2416","crate_id":0,"name":"OnceState","span":{"filename":"src/once.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"Current state of a `Once`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:457:3018","0:459:3020","0:461:3022","0:463:3024"],"impls":["0:122","a:2:32945:249-0:456:2416","a:2:3322:261-0:456:2416","a:2:3357:4054-0:456:2416","a:2:33003:3798-0:456:2416","a:2:42830:3831-0:456:2416","a:2:42831:3830-0:456:2416","b:2:2790-0:456:2416","b:2:2793-0:456:2416","b:2:2822-0:456:2416","b:2:2825-0:456:2416","b:2:3095-0:456:2416","b:2:3099-0:456:2416","b:2:3105-0:456:2416","b:2:3110-0:456:2416","b:2:3967-0:456:2416","b:5:782-0:456:2416","0:465","0:466","0:468","0:470","0:471","0:473"]}}},"a:2:32945:249-0:456:2416":{"id":"a:2:32945:249-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:471":{"id":"0:471","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2872:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:472:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3095-0:259:2419":{"id":"b:2:3095-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:4085"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:305:3240":{"id":"0:305:3240","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/raw_rwlock.rs","begin":[456,4],"end":[466,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9551:174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:377:246":{"id":"0:377:246","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[99,0],"end":[99,78]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockReadGuard","id":"20:872:246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:418-0:96:2413":{"id":"0:418-0:96:2413","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::const_mutex","name":"const_mutex","id":"0:96:2413","glob":false}}},"0:421-0:98:199":{"id":"0:421-0:98:199","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,60],"end":[43,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MutexGuard","name":"MutexGuard","id":"0:98:199","glob":false}}},"0:425-0:155:2417":{"id":"0:425-0:155:2417","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_fair_mutex::RawFairMutex","name":"RawFairMutex","id":"0:155:2417","glob":false}}},"0:432-0:361:2423":{"id":"0:432-0:361:2423","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,67],"end":[49,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutex","name":"ReentrantMutex","id":"0:361:2423","glob":false}}},"2:3108:150":{"id":"2:3108:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:13790:7125":{"id":"2:13790:7125","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44704:7117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:3120":{"id":"0:203:3120","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_mutex.rs","begin":[113,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42830:3831-0:456:2416":{"id":"a:2:42830:3831-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42830:3831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:443:2408":{"id":"0:443:2408","crate_id":0,"name":"WaitTimeoutResult","span":{"filename":"src/condvar.rs","begin":[23,0],"end":[23,35]},"visibility":"public","docs":"A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:32945:249-0:443:2408","a:2:3322:261-0:443:2408","a:2:3357:4054-0:443:2408","a:2:33003:3798-0:443:2408","a:2:42830:3831-0:443:2408","a:2:42831:3830-0:443:2408","b:2:2790-0:443:2408","b:2:2793-0:443:2408","b:2:2822-0:443:2408","b:2:2825-0:443:2408","b:2:3095-0:443:2408","b:2:3099-0:443:2408","b:2:3105-0:443:2408","b:2:3110-0:443:2408","b:2:3967-0:443:2408","b:5:782-0:443:2408","0:446","0:448","0:449","0:451","0:453","0:454"]}}},"a:2:33003:3798-0:155:2417":{"id":"a:2:33003:3798-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33003:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:172:3123":{"id":"0:172:3123","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_fair_mutex.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:3121","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3322:261-0:443:2408":{"id":"a:2:3322:261-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:94:198":{"id":"0:94:198","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[86,0],"end":[86,49]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same mutex in succession, which can starve\nother threads waiting to acquire the mutex. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na mutex it has just released, this can starve other threads.\n\nThis mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the mutex.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `MutexGuard::unlock_fair` when\nunlocking a mutex instead of simply dropping the `MutexGuard`.\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `Mutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the mutex is fair on average.\n- Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::Mutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(Mutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:276:3203":{"id":"0:276:3203","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[184,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:429-0:363:2420":{"id":"0:429-0:363:2420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,4],"end":[49,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::const_reentrant_mutex","name":"const_reentrant_mutex","id":"0:363:2420","glob":false}}},"2:13788:27788":{"id":"2:13788:27788","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13787:27787"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:3232":{"id":"0:299:3232","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/raw_rwlock.rs","begin":[400,4],"end":[419,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13798:27801":{"id":"2:13798:27801","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:457:3018":{"id":"0:457:3018","crate_id":0,"name":"New","span":{"filename":"src/once.rs","begin":[24,4],"end":[24,7]},"visibility":"default","docs":"A closure has not been executed yet","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3967-0:259:2419":{"id":"b:2:3967-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:259:2419":{"id":"0:259:2419","crate_id":0,"name":"RawRwLock","span":{"filename":"src/raw_rwlock.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Raw reader-writer lock type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32945:249-0:259:2419","a:2:3322:261-0:259:2419","a:2:3357:4054-0:259:2419","a:2:33003:3798-0:259:2419","a:2:42830:3831-0:259:2419","a:2:42831:3830-0:259:2419","b:2:2790-0:259:2419","b:2:2793-0:259:2419","b:2:3095-0:259:2419","b:2:3099-0:259:2419","b:2:3105-0:259:2419","b:2:3110-0:259:2419","b:2:3967-0:259:2419","0:261","0:272","0:277","0:279","0:286","0:289","0:292","0:298","0:301","0:304"]}}},"2:13802:27803":{"id":"2:13802:27803","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:15307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3967-0:31:2407":{"id":"b:2:3967-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42830:3831-0:443:2408":{"id":"a:2:42830:3831-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42830:3831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2790-0:125:2415":{"id":"b:2:2790-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:3297"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:170:174":{"id":"0:170:174","crate_id":0,"name":"Instant","span":{"filename":"src/raw_fair_mutex.rs","begin":[54,4],"end":[54,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:3121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"2:13816:27793":{"id":"2:13816:27793","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13453:3901","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::split":"2:13812:27789"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44752:7107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:15307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:3219":{"id":"0:293:3219","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[324,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13831:27800":{"id":"2:13831:27800","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:15307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13857:27304":{"id":"2:13857:27304","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13878:27707":{"id":"2:13878:27707","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:39620"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:2654":{"id":"0:39:2654","crate_id":0,"name":"notify_all","span":{"filename":"src/condvar.rs","begin":[187,4],"end":[195,5]},"visibility":"public","docs":"Wakes up all blocked threads on this condvar.\n\nReturns the number of threads woken up.\n\nThis method will ensure that any current waiters on the condition\nvariable are awoken. Calls to `notify_all()` are not buffered in any\nway.\n\nTo wake up only one thread, see `notify_one()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:3206":{"id":"0:278:3206","crate_id":0,"name":"downgrade","span":{"filename":"src/raw_rwlock.rs","begin":[193,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33003:3798-0:259:2419":{"id":"a:2:33003:3798-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33003:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3357:4054-0:355:2422":{"id":"a:2:3357:4054-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:4054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:420-0:94:198":{"id":"0:420-0:94:198","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,53],"end":[43,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::Mutex","name":"Mutex","id":"0:94:198","glob":false}}},"2:13765:35161":{"id":"2:13765:35161","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13883:35185":{"id":"2:13883:35185","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5066:35185"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45051:7196","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762":{"id":"2:13762","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13763:1027","2:13764:2833","2:13765:35161","2:13766:35162","2:13768:35163","2:13771:27699","2:13772:35164","2:13773:352","2:13774:27760","2:13775:3262","2:13777:2958","2:13779:27758","2:13781:27759","2:13783:35165","2:13784:35166","2:13785:27783","2:13786:27784","2:13787:27787","2:13788:27788","2:13790:7125","2:13791:7302","2:13792:6909","2:13793:33055","2:13794:33056","2:13795:32026","2:13796:35167","2:13797:33057","2:13798:27801","2:13800:27802","2:13802:27803","2:13805:4131","2:13808:4091","2:13812:27789","2:13814:27791","2:13816:27793","2:13819:35168","2:13821:35169","2:13824:27795","2:13826:27797","2:13829:27799","2:13831:27800","2:13834:3029","2:13836:35170","2:13839:35171","2:13841:35172","2:13844:35173","2:13846:35174","2:13848:35175","2:13850:35176","2:13851:35177","2:13852:35178","2:13855:35179","2:13857:27304","2:13859:27804","2:13862:35180","2:13865:35181","2:13867:35182","2:13870:35183","2:13872:27528","2:13873:27703","2:13874:27529","2:13875:27525","2:13876:27524","2:13877:27706","2:13878:27707","2:13879:27708","2:13880:35184","2:13882:9853","2:13883:35185","2:13884:28983"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3967-0:125:2415":{"id":"b:2:3967-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13877:27706":{"id":"2:13877:27706","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:39620"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3114:1857":{"id":"2:3114:1857","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13829:27799":{"id":"2:13829:27799","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427-0:259:2419":{"id":"0:427-0:259:2419","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_rwlock::RawRwLock","name":"RawRwLock","id":"0:259:2419","glob":false}}},"0:285:3212":{"id":"0:285:3212","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/raw_rwlock.rs","begin":[253,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9551:174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:443:2408":{"id":"b:2:3105-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3110-0:443:2408":{"id":"b:2:3110-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3095-0:155:2417":{"id":"b:2:3095-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:4085"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:151:830":{"id":"0:151:830","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[320,4],"end":[324,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:411-0:443:2408":{"id":"0:411-0:443:2408","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,33],"end":[41,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::WaitTimeoutResult","name":"WaitTimeoutResult","id":"0:443:2408","glob":false}}},"0:436-0:383:2426":{"id":"0:436-0:383:2426","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,18],"end":[53,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockReadGuard","name":"MappedRwLockReadGuard","id":"0:383:2426","glob":false}}},"5:5726:35900":{"id":"5:5726:35900","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:3799","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3799","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:2410":{"id":"0:82:2410","crate_id":0,"name":"FairMutex","span":{"filename":"src/fair_mutex.rs","begin":[77,0],"end":[77,57]},"visibility":"public","docs":"A mutual exclusive primitive that is always fair, useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\nThe regular mutex provided by `parking_lot` uses eventual fairness\n(after some time it will default to the fair algorithm), but eventual\nfairness does not provide the same guarantees an always fair method would.\nFair mutexes are generally slower, but sometimes needed.\n\nIn a fair mutex the waiters form a queue, and the lock is always granted to\nthe next requester in the queue, in first-in first-out order. This ensures\nthat one thread cannot starve others by quickly re-acquiring the lock after\nreleasing it.\n\nA fair mutex may not be interesting if threads have different priorities (this is known as\npriority inversion).\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `FairMutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n\n# Examples\n\n```\nuse parking_lot::FairMutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(FairMutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:35896","5:5713:4029","5:5715:35897","5:5717:35898","5:5725:35899","5:5726:35900","5:5727:9978","5:5728:27527","5:5729:27526"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43:2670":{"id":"0:43:2670","crate_id":0,"name":"wait","span":{"filename":"src/condvar.rs","begin":[255,4],"end":[257,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:199","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2570":{"id":"0:30:2570","crate_id":0,"name":"timed_out","span":{"filename":"src/condvar.rs","begin":[28,4],"end":[30,5]},"visibility":"public","docs":"Returns whether the wait was known to have timed out.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:3197":{"id":"0:271:3197","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[148,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3357:4054-0:195:2418":{"id":"a:2:3357:4054-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:4054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:455:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42830:3831-0:355:2422":{"id":"a:2:42830:3831-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42830:3831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:416-0:89:2412":{"id":"0:416-0:89:2412","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,72],"end":[42,92]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::MappedFairMutexGuard","name":"MappedFairMutexGuard","id":"0:89:2412","glob":false}}},"2:13797:33057":{"id":"2:13797:33057","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45026:7124","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2727":{"id":"0:62:2727","crate_id":0,"name":"wait_while_for","span":{"filename":"src/condvar.rs","begin":[498,4],"end":[509,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration. If the provided condition evaluates to `false`,\nthen the thread is no longer blocked and the operation is completed.\nIf the condition evaluates to `true`, then the thread is blocked again\nand waits for another notification before repeating this process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:199","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Duration","id":"2:45531:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3596:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:3262":{"id":"2:13775:3262","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:3032":{"id":"0:124:3032","crate_id":0,"name":"done","span":{"filename":"src/once.rs","begin":[49,4],"end":[51,5]},"visibility":"public","docs":"Returns whether the associated `Once` has successfully executed a\nclosure.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32945:249-0:259:2419":{"id":"a:2:32945:249-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:386:2427":{"id":"0:386:2427","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[121,0],"end":[121,92]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockWriteGuard","id":"20:907:2427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:0:2434":{"id":"0:0:2434","crate_id":0,"name":"parking_lot","span":{"filename":"src/lib.rs","begin":[8,0],"end":[59,135]},"visibility":"public","docs":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n`Once` that are smaller, faster and more flexible than those in the Rust\nstandard library. It also provides a `ReentrantMutex` type.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:410-0:31:2407","0:411-0:443:2408","0:413-0:84:2409","0:414-0:82:2410","0:415-0:86:2411","0:416-0:89:2412","0:418-0:96:2413","0:419-0:101:2414","0:420-0:94:198","0:421-0:98:199","0:423-0:125:2415","0:424-0:456:2416","0:425-0:155:2417","0:426-0:195:2418","0:427-0:259:2419","0:429-0:363:2420","0:430-0:368:2421","0:431-0:355:2422","0:432-0:361:2423","0:433-0:365:2424","0:435-0:375:2425","0:436-0:383:2426","0:437-0:386:2427","0:438-0:373:245","0:439-0:377:246","0:440-0:389:2428","0:441-0:380:247","0:442-20:0:2404"],"is_stripped":false}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2877:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42830:3831-0:195:2418":{"id":"a:2:42830:3831-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42830:3831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3095-0:125:2415":{"id":"b:2:3095-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:4085"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[429,0],"end":[452,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeDowngrade","id":"20:476:3235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:302:3236","0:303:3237"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13805:4131":{"id":"2:13805:4131","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42736:203","prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13865:35181":{"id":"2:13865:35181","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:174":{"id":"0:209:174","crate_id":0,"name":"Instant","span":{"filename":"src/raw_mutex.rs","begin":[143,4],"end":[143,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9551:174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13791:7302":{"id":"2:13791:7302","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44710:7282","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:368:2421":{"id":"0:368:2421","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[68,0],"end":[69,70]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedReentrantMutexGuard","id":"20:864:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:297:3229":{"id":"0:297:3229","crate_id":0,"name":"try_upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[380,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2793-0:195:2418":{"id":"b:2:2793-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:3299"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[398,0],"end":[427,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_upgradable"],"trait":{"name":"RawRwLockUpgradeFair","id":"20:473:3231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:299:3232","0:300:3233"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:433-0:365:2424":{"id":"0:433-0:365:2424","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutexGuard","name":"ReentrantMutexGuard","id":"0:365:2424","glob":false}}},"0:155:2417":{"id":"0:155:2417","crate_id":0,"name":"RawFairMutex","span":{"filename":"src/raw_fair_mutex.rs","begin":[12,0],"end":[12,34]},"visibility":"public","docs":"Raw fair mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32945:249-0:155:2417","a:2:3322:261-0:155:2417","a:2:3357:4054-0:155:2417","a:2:33003:3798-0:155:2417","a:2:42830:3831-0:155:2417","a:2:42831:3830-0:155:2417","b:2:2790-0:155:2417","b:2:2793-0:155:2417","b:2:3095-0:155:2417","b:2:3099-0:155:2417","b:2:3105-0:155:2417","b:2:3110-0:155:2417","b:2:3967-0:155:2417","0:158","0:165","0:168"]}}},"0:423-0:125:2415":{"id":"0:423-0:125:2415","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,21],"end":[44,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::Once","name":"Once","id":"0:125:2415","glob":false}}},"0:468":{"id":"0:468","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2877:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3322:261-0:456:2416":{"id":"a:2:3322:261-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3105-0:125:2415":{"id":"b:2:3105-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:33003:3798-0:31:2407":{"id":"a:2:33003:3798-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33003:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68:830":{"id":"0:68:830","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[520,4],"end":[522,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:2949":{"id":"0:201:2949","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_mutex.rs","begin":[78,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:3200":{"id":"0:274:3200","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/raw_rwlock.rs","begin":[162,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:35899":{"id":"5:5725:35899","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2822-0:456:2416":{"id":"b:2:2822-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2820:4060","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2824:27244"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:474:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:442-20:0:2404":{"id":"0:442-20:0:2404","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[56,0],"end":[56,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"::lock_api","name":"lock_api","id":"20:0:2404","glob":false}}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,31],"end":[22,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13793:33055":{"id":"2:13793:33055","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13794:33056"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45008:7292","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3098:4085":{"id":"2:3098:4085","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3072:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[94,0],"end":[510,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:34:1212","0:35:2632","0:39:2654","0:43:2670","0:45:2687","0:51:2706","0:56:2716","0:59:2722","0:62:2727"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5727:9978":{"id":"5:5727:9978","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13844:35173":{"id":"2:13844:35173","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410-0:31:2407":{"id":"0:410-0:31:2407","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,24],"end":[41,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::Condvar","name":"Condvar","id":"0:31:2407","glob":false}}},"b:2:3110-0:125:2415":{"id":"b:2:3110-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13777:2958":{"id":"2:13777:2958","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2403":{"id":"0:199:2403","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_mutex.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:295:3224":{"id":"0:295:3224","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[346,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:3217":{"id":"0:290:3217","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/raw_rwlock.rs","begin":[296,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:3208","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:3222":{"id":"0:294:3222","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[333,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268:3192":{"id":"0:268:3192","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[116,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42831:3830-0:456:2416":{"id":"a:2:42831:3830-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42831:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3357:4054-0:155:2417":{"id":"a:2:3357:4054-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:4054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:3322:261-0:155:2417":{"id":"a:2:3322:261-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:281:174":{"id":"0:281:174","crate_id":0,"name":"Instant","span":{"filename":"src/raw_rwlock.rs","begin":[207,4],"end":[207,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9551:174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2824:27244":{"id":"2:2824:27244","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,9],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3317:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13784:35166":{"id":"2:13784:35166","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12658:1772","crate::ops::IndexMut":"2:3628:3693","str::slice_unchecked":"2:13783:35165"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13792:6909":{"id":"2:13792:6909","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44720:4981","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13781:27759":{"id":"2:13781:27759","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3110-0:195:2418":{"id":"b:2:3110-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[25,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:2570"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13796:35167":{"id":"2:13796:35167","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44998:7291","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2716":{"id":"0:56:2716","crate_id":0,"name":"wait_while","span":{"filename":"src/condvar.rs","begin":[427,4],"end":[433,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification. If the provided condition evaluates to `false`, then the\nthread is no longer blocked and the operation is completed. If the\ncondition evaluates to `true`, then the thread is blocked again and\nwaits for another notification before repeating this process.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:199","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3596:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:3233":{"id":"0:300:3233","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[422,4],"end":[426,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:27787":{"id":"2:13787:27787","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13788:27788"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:782-0:443:2408":{"id":"b:5:782-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:784:4151","5:785:4152","5:786:4153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2872:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:31:2407":{"id":"0:31:2407","crate_id":0,"name":"Condvar","span":{"filename":"src/condvar.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"A Condition Variable\n\nCondition variables represent the ability to block a thread such that it\nconsumes no CPU time while waiting for an event to occur. Condition\nvariables are typically associated with a boolean predicate (a condition)\nand a mutex. The predicate is always verified inside of the mutex before\ndetermining that thread must block.\n\nNote that this module places one additional restriction over the system\ncondition variables: each condvar can be used with only one mutex at a\ntime. Any attempt to use multiple mutexes on the same condition variable\nsimultaneously will result in a runtime panic. However it is possible to\nswitch to a different mutex if there are no threads currently waiting on\nthe condition variable.\n\n# Differences from the standard library `Condvar`\n\n- No spurious wakeups: A wait will only return a non-timeout result if it\n  was woken up by `notify_one` or `notify_all`.\n- `Condvar::notify_all` will only wake up a single thread, the rest are\n  requeued to wait for the `Mutex` to be unlocked by the thread that was\n  woken up.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `Condvar` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n\n# Examples\n\n```\nuse parking_lot::{Mutex, Condvar};\nuse std::sync::Arc;\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\n// Inside of our lock, spawn a new thread, and then wait for it to start\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock();\n    *started = true;\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock();\nif !*started {\n    cvar.wait(&mut started);\n}\n// Note that we used an if instead of a while loop above. This is only\n// possible because parking_lot's Condvar will never spuriously wake up.\n// This means that wait() will only return after notify_one or notify_all is\n// called.\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:33","a:2:32945:249-0:31:2407","a:2:3322:261-0:31:2407","a:2:3357:4054-0:31:2407","a:2:33003:3798-0:31:2407","a:2:42830:3831-0:31:2407","a:2:42831:3830-0:31:2407","b:2:2790-0:31:2407","b:2:2793-0:31:2407","b:2:3095-0:31:2407","b:2:3099-0:31:2407","b:2:3105-0:31:2407","b:2:3110-0:31:2407","b:2:3967-0:31:2407","0:65","0:67"]}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[36,0],"end":[52,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:123:3028","0:124:3032"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3110-0:31:2407":{"id":"b:2:3110-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3099-0:155:2417":{"id":"b:2:3099-0:155:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3105-0:195:2418":{"id":"b:2:3105-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:33003:3798-0:195:2418":{"id":"a:2:33003:3798-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33003:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42831:3830-0:125:2415":{"id":"a:2:42831:3830-0:125:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42831:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13819:35168":{"id":"2:13819:35168","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13453:3901","str::split":"2:13812:27789","prim@char":"1:12652:492","`DoubleEndedIterator`":"2:8394:134","str::rsplit_terminator":"2:13821:35169"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44784:7284","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2790-0:195:2418":{"id":"b:2:2790-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:3297"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13851:35177":{"id":"2:13851:35177","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3099-0:31:2407":{"id":"b:2:3099-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5717:35898":{"id":"5:5717:35898","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13785:27783":{"id":"2:13785:27783","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13787:27787","str::split_at_mut":"2:13786:27784"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:457":{"id":"0:131:457","crate_id":0,"name":"call_once","span":{"filename":"src/once.rs","begin":[151,4],"end":[161,5]},"visibility":"public","docs":"Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.\n\nThis method will block the calling thread if another initialization\nroutine is currently running.\n\nWhen this function returns, it is guaranteed that some initialization\nhas run and completed (it may not be the closure specified). It is also\nguaranteed that any memory writes performed by the executed closure can\nbe reliably observed by other threads at this point (there is a\nhappens-before relation between the closure and code executing after the\nreturn).\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\n// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g. write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\nfn get_cached_val() -> usize {\n    unsafe {\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\nfn expensive_computation() -> usize {\n    // ...\n# 2\n}\n```\n\n# Panics\n\nThe closure `f` will only be executed once if this is called\nconcurrently amongst many threads. If that closure panics, however, then\nit will *poison* this `Once` instance, causing all future invocations of\n`call_once` to also panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3599:155","args":{"parenthesized":{"inputs":[],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:35896":{"id":"5:5712:35896","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3799","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:3799","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:450:725":{"id":"0:450:725","crate_id":0,"name":"eq","span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303:3237":{"id":"0:303:3237","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[441,4],"end":[451,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:435-0:375:2425":{"id":"0:435-0:375:2425","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::const_rwlock","name":"const_rwlock","id":"0:375:2425","glob":false}}},"2:13850:35176":{"id":"2:13850:35176","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:3186":{"id":"0:266:3186","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3967-0:456:2416":{"id":"b:2:3967-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13768:35163":{"id":"2:13768:35163","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13766:35162"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[59,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked","is_locked_exclusive"],"trait":{"name":"RawRwLock","id":"20:436:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:262:2928","0:263:2403","0:264:3181","0:265:3185","0:266:3186","0:267:3189","0:268:3192","0:269:3194","0:270:3120","0:271:3197"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13764:2833":{"id":"2:13764:2833","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:447:830":{"id":"0:447:830","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42831:3830-0:259:2419":{"id":"a:2:42831:3830-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42831:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13880:35184":{"id":"2:13880:35184","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5068:35184"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45033:7197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:3215":{"id":"0:288:3215","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[281,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2409":{"id":"0:84:2409","crate_id":0,"name":"const_fair_mutex","span":{"filename":"src/fair_mutex.rs","begin":[82,0],"end":[84,1]},"visibility":"public","docs":"Creates a new fair mutex in an unlocked state ready for use.\n\nThis allows creating a fair mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"FairMutex","id":"0:82:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:2412":{"id":"0:89:2412","crate_id":0,"name":"MappedFairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[100,0],"end":[100,87]},"visibility":"public","docs":"An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:848:2414","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[52,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:3121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:169:135","0:170:174","0:171:3122","0:172:3123"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13852:35178":{"id":"2:13852:35178","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13482:15306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2827:27244":{"id":"2:2827:27244","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33003:3798-0:355:2422":{"id":"a:2:33003:3798-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33003:3798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13772:35164":{"id":"2:13772:35164","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:35175":{"id":"2:13848:35175","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419-0:101:2414":{"id":"0:419-0:101:2414","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,35],"end":[43,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MappedMutexGuard","name":"MappedMutexGuard","id":"0:101:2414","glob":false}}},"a:2:3357:4054-0:456:2416":{"id":"a:2:3357:4054-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:4054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:129:1212":{"id":"0:129:1212","crate_id":0,"name":"new","span":{"filename":"src/once.rs","begin":[82,4],"end":[84,5]},"visibility":"public","docs":"Creates a new `Once` value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:125:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:2694":{"id":"0:163:2694","crate_id":0,"name":"unlock","span":{"filename":"src/raw_fair_mutex.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[119,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:205:3119","0:206:2783"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:208:135":{"id":"0:208:135","crate_id":0,"name":"Duration","span":{"filename":"src/raw_mutex.rs","begin":[142,4],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:45531:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:467:496":{"id":"0:467:496","crate_id":0,"name":"clone","span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:3218":{"id":"0:291:3218","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/raw_rwlock.rs","begin":[309,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:3208","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3095-0:195:2418":{"id":"b:2:3095-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:4085"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:66:60":{"id":"0:66:60","crate_id":0,"name":"default","span":{"filename":"src/condvar.rs","begin":[514,4],"end":[516,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3322:261-0:259:2419":{"id":"a:2:3322:261-0:259:2419","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:307:3242":{"id":"0:307:3242","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/raw_rwlock.rs","begin":[482,4],"end":[492,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9551:174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13808:4091":{"id":"2:13808:4091","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42736:203","prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:15307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:35897":{"id":"5:5715:35897","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:3185":{"id":"0:265:3185","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[80,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13779:27758":{"id":"2:13779:27758","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:3101:860":{"id":"2:3101:860","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2790-0:443:2408":{"id":"b:2:2790-0:443:2408","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:3297"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:51:2706":{"id":"0:51:2706","crate_id":0,"name":"wait_for","span":{"filename":"src/condvar.rs","begin":[381,4],"end":[388,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:199","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:45531:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2632":{"id":"0:35:2632","crate_id":0,"name":"notify_one","span":{"filename":"src/condvar.rs","begin":[128,4],"end":[136,5]},"visibility":"public","docs":"Wakes up one blocked thread on this condvar.\n\nReturns whether a thread was woken up.\n\nIf there is a blocked thread on this condition variable, then it will\nbe woken up from its call to `wait` or `wait_timeout`. Calls to\n`notify_one` are not buffered in any way.\n\nTo wake up all threads, see `notify_all()`.\n\n# Examples\n\n```\nuse parking_lot::Condvar;\n\nlet condvar = Condvar::new();\n\n// do something with condvar, share it with other threads\n\nif !condvar.notify_one() {\n    println!(\"Nobody was listening for this.\");\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:3194":{"id":"0:269:3194","crate_id":0,"name":"unlock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[129,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:35162":{"id":"2:13766:35162","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206:2783":{"id":"0:206:2783","crate_id":0,"name":"bump","span":{"filename":"src/raw_mutex.rs","begin":[134,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:415-0:86:2411":{"id":"0:415-0:86:2411","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,56],"end":[42,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutexGuard","name":"FairMutexGuard","id":"0:86:2411","glob":false}}},"0:160:2403":{"id":"0:160:2403","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_fair_mutex.rs","begin":[17,4],"end":[17,69]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutex","id":"20:20:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"a:2:42831:3830-0:31:2407":{"id":"a:2:42831:3830-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42831:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[270,0],"end":[292,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursive","id":"20:461:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:287:3214","0:288:3215"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:296:3227":{"id":"0:296:3227","crate_id":0,"name":"upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[368,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13786:27784":{"id":"2:13786:27784","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13785:27783","str::split_at_mut_checked":"2:13788:27788"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13846:35174":{"id":"2:13846:35174","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13859:27804":{"id":"2:13859:27804","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:15307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3322:261-0:31:2407":{"id":"a:2:3322:261-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3105-0:456:2416":{"id":"b:2:3105-0:456:2416","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:302:3236":{"id":"0:302:3236","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[431,4],"end":[438,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:383:2426":{"id":"0:383:2426","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[112,0],"end":[112,90]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockReadGuard","id":"20:900:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13855:35179":{"id":"2:13855:35179","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:3901"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:27524":{"id":"2:13876:27524","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:3122":{"id":"0:171:3122","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_fair_mutex.rs","begin":[57,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:3121","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3322:261-0:355:2422":{"id":"a:2:3322:261-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13836:35170":{"id":"2:13836:35170","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13453:3901","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::matches":"2:13834:3029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44956:7289","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:15307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32945:249-0:195:2418":{"id":"a:2:32945:249-0:195:2418","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:280:135":{"id":"0:280:135","crate_id":0,"name":"Duration","span":{"filename":"src/raw_rwlock.rs","begin":[206,4],"end":[206,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:45531:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:5713:4029":{"id":"5:5713:4029","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:7095","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2790-0:31:2407":{"id":"b:2:2790-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:3297"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:455:496":{"id":"0:455:496","crate_id":0,"name":"clone","span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:725":{"id":"0:472:725","crate_id":0,"name":"eq","span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OnceState","id":"0:456:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308:3243":{"id":"0:308:3243","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/raw_rwlock.rs","begin":[495,4],"end":[505,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:45531:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:375:2425":{"id":"0:375:2425","crate_id":0,"name":"const_rwlock","span":{"filename":"src/rwlock.rs","begin":[93,0],"end":[95,1]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.\n\nThis allows creating a `RwLock<T>` in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:373:245","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[141,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:3121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:208:135","0:209:174","0:210:3122","0:211:3123"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:306:3241":{"id":"0:306:3241","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/raw_rwlock.rs","begin":[469,4],"end":[479,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:45531:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389:2428":{"id":"0:389:2428","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[125,0],"end":[125,98]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockUpgradableReadGuard","id":"20:888:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"5:5729:27526":{"id":"5:5729:27526","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13876:27524"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32945:249-0:31:2407":{"id":"a:2:32945:249-0:31:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:275:3201":{"id":"0:275:3201","crate_id":0,"name":"bump_shared","span":{"filename":"src/raw_rwlock.rs","begin":[175,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3095-0:355:2422":{"id":"b:2:3095-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:4085"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:34:1212":{"id":"0:34:1212","crate_id":0,"name":"new","span":{"filename":"src/condvar.rs","begin":[98,4],"end":[102,5]},"visibility":"public","docs":"Creates a new condition variable which is ready to be waited on and\nnotified.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:32026":{"id":"2:13795:32026","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44988:7290","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373:245":{"id":"0:373:245","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[88,0],"end":[88,52]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThis lock uses a task-fair locking policy which avoids both reader and\nwriter starvation. This means that readers trying to acquire the lock will\nblock even if the lock is unlocked when there are writers waiting to acquire\nthe lock. Because of this, attempts to recursively acquire a read lock\nwithin a single thread may result in a deadlock.\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same lock in succession, which can starve\nother threads waiting to acquire the rwlock. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na rwlock it has just released, this can starve other threads.\n\nThis rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the rwlock.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`\nor `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply\ndropping the guard.\n\n# Differences from the standard library `RwLock`\n\n- Supports atomically downgrading a write lock into a read lock.\n- Task-fair locking policy instead of an unspecified platform default.\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `RwLock` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the rwlock is fair on average.\n- Optionally allows making the rwlock fair by calling\n  `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read();\n    let r2 = lock.read();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLock","id":"20:484:245","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13882:9853":{"id":"2:13882:9853","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5069:9853"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45042:7050","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32945:249-0:355:2422":{"id":"a:2:32945:249-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2793-0:355:2422":{"id":"b:2:2793-0:355:2422","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:3299"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"6:1589:8291":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"20:476:3235":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"2:22265:10071":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:1352:4993":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"25:1709:8368":{"crate_id":25,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:14710:5593":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:14650:5585":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"25:7560:9150":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:34324:3671":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:3965:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:14971:5649":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:14055:7132":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:570:8221":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:3699:6781":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"9:168:9375":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:7344:9048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:6274:4761":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:3874:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:4513:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:45390:7128":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:3743:5004":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6121:6236":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:41265:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4890:8447":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:47907:7438":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:4071:4705":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:5107:8537":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:9286:4096":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"25:7982:9160":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11128:7508":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:3524:5002":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:8315:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10815:5127":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"5:6700:4705":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:5821:4712":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:3124:21797":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:4489:7051":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:1579:6802":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"25:7960:9159":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:707:9855":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:40457:7188":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:45017:7293":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:46970:7348":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:5505:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:14940:5644":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:11206:7647":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:8134:6249":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"25:6511:8853":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12562:5294":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:5405:8641":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:2297:6793":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"25:5247:8575":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5151:8541":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:15469:5805":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:33494:3665":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:3596:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:6893:9008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"14:186:21736":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:23684:7176":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:10657:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:23503:3780":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:1551:8267":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:1948:2835":{"crate_id":2,"path":["core","mem"],"kind":"module"},"25:6588:8902":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"12:0:3490":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4976:8485":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"25:585:8230":{"crate_id":25,"path":["libc","unix","protoent"],"kind":"struct"},"2:8499:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11259:5147":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:485:8172":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:479:8170":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:12146:5229":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"25:1688:8360":{"crate_id":25,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5366:8619":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:44653:7276":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:5271:8586":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:15640:5856":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"22:197:2561":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkResult"],"kind":"enum"},"9:470:21645":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:22204:9945":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:8738:7622":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:1233:4991":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:14389:4818":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:2877:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:15048:5669":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6366:6180":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:5139:10040":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"25:5573:8723":{"crate_id":25,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12055:5211":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:2988:6230":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"25:5609:8745":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:44106:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:3481:3680":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6505:8848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5179:8543":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"25:7537:9138":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5217:8563":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6300:6325":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:8699:10019":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:33003:3798":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:7804:36526":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:14545:5569":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:15995:5945":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:10301:9384":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:5725:5125":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13360:22734":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:8176:6623":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:4897:3753":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:46786:7331":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:42778:4096":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3628:3693":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:5707:22654":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:31332:4036":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:47308:7374":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6736:36522":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:776:4705":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13630:5383":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:9209:7642":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"1:12670:914":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:43002:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:9846:4843":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:14558:5572":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"23:57:4705":{"crate_id":23,"path":["smallvec","Drain"],"kind":"struct"},"2:45154:7300":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"25:4867:8439":{"crate_id":25,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:8249:9177":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11502:5163":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:940:6785":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:14910:5639":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14373:5544":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5521:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8694:9319":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10601:4975":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:5539:8708":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6026:6232":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11512:22746":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"18:635:4948":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:7459:6519":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:80:26923":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:859:6792":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:7551:22664":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:7501:4839":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:5282:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5230:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:4871:6270":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:8007:9171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11757:5184":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"25:558:8216":{"crate_id":25,"path":["libc","unix","sigval"],"kind":"struct"},"5:7519:4096":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:32945:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:42790:3828":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:42869:7246":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"5:3843:6882":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:12677:1967":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:9372:2408":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:15971:5940":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:14985:5651":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:13126:7118":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:7421:22663":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:1601:6782":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:7599:6902":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:689:4958":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10553:22731":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"20:880:247":{"crate_id":20,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6040:6235":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:34257:3673":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"25:4888:8447":{"crate_id":25,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"11:1001:6793":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:7424:9073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"0:0:2434":{"crate_id":0,"path":["parking_lot"],"kind":"module"},"2:6310:7062":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11564:5170":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:11084:4812":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"16:7383:6505":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:3371:7500":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:2440:4779":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"18:698:4959":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:13477:15307":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:2348:9927":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:45485:9312":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:3622:7614":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:11987:7689":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:7797:6912":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:2838:6223":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12120:5226":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:4852:9063":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:15928:5926":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8949:7517":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13509:5006":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:41558:7071":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:3139:5016":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:8687:7512":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:46953:7347":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:2898:6226":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:16203:6017":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12263:5240":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12357:5255":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11053:5143":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:14431:5553":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:2787:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:4519:4761":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"25:7522:9131":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:6816:3721":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5007:8503":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:7562:9150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:4725:10021":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:3797:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6645:8924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:22142:34484":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:42762:6781":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"20:461:3213":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"2:44693:7281":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:7787:6911":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:16814:6176":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:5222:3822":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:4488:4764":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:8359:6882":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:7750:6910":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:15:3366":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:12081:5219":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11995:5206":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10515:7670":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:40389:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:16329:6057":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:44118:7258":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13157:5349":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:16350:6063":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"25:464:8162":{"crate_id":25,"path":["libc","unix","group"],"kind":"struct"},"9:0:3487":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:41445:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:7723:15359":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:9225:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"25:496:8176":{"crate_id":25,"path":["libc","unix","rusage"],"kind":"struct"},"16:7904:6602":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:41496:7063":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2784:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"22:73:2564":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_PARK_TOKEN"],"kind":"constant"},"17:14039:5466":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13909:5441":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:23585:7167":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:47209:7369":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:10924:7099":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:14665:5588":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11667:5177":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"15:0:3492":{"crate_id":15,"path":["addr2line"],"kind":"module"},"25:4827:8406":{"crate_id":25,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"25:8229:9174":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"25:5163:8542":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:45501:9316":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:2511:9935":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"18:643:4926":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:3693:6258":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"25:1537:8258":{"crate_id":25,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:43566:4065":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:517:8193":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:377:4008":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:7553:9147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:6169:15686":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:45513:3737":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"25:4982:8490":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:15198:5690":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"25:5309:8605":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:11956:7107":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:6132:3719":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"25:7422:9073":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:16177:6008":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"25:6629:8922":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"25:6685:8938":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:11165:7682":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:48108:7449":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:7901:27390":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"6:5568:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11728:5181":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:7559:6901":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:5415:6287":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:1063:36504":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13585:5379":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"17:14081:5471":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"20:855:2424":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:44988:7290":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:6702:8941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:15074:5671":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:7762:4773":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:4692:6266":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:41333:7205":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"18:481:4924":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"25:5125:8539":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"25:5293:8599":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"25:4974:8485":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2722:6218":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:13608:22703":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:45026:7124":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:47418:7394":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:44704:7117":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"25:5067:8535":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:3082:9220":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:4413:4761":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4914:8461":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"25:8302:9190":{"crate_id":25,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:8562:6683":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"25:6420:8814":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:6659:8929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12889:5326":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:44081:7251":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:0:3493":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:596:4989":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:10665:4065":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"25:5355:8615":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:3934:7509":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:1539:8258":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11272:4848":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:14834:5630":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:14571:5267":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11643:5146":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:16828:6177":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:2811:7499":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:48082:7447":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:16631:5434":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:10889:7502":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:8260:9181":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:23277:7144":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:670:4955":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:43042:6781":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:7549:4748":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:41933:7078":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:3079:4151":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:1551:4096":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12373:5257":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"25:5448:8667":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"7:78:21640":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:16219:6021":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13673:5387":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:2469:21719":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:14585:5577":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:7055:6445":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7413:6508":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5494:8690":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:10860:4985":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:13482:15306":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"25:6747:8954":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:41598:7223":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:22675:7141":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11743:5182":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:34458:3672":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:901:4983":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:45493:9314":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"25:6742:8953":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:7004:9302":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:45809:6810":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12621:5299":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6142:22655":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:8102:6621":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:33036:278":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"23:97:26947":{"crate_id":23,"path":["smallvec","SmallVecData"],"kind":"enum"},"6:1494:8236":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:12171:7511":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:12671:1903":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"25:5177:8543":{"crate_id":25,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"25:6649:8927":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:5560:15297":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:3322:261":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11855:5196":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"25:6414:8811":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:48053:7444":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:4838:9994":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:8288:7560":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:1660:6805":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:909:6799":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"25:5253:8577":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5377:6286":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"25:1505:8242":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:41378:7207":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:12608:5298":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13328:5084":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:23332:7145":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"11:1866:4705":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:7977:6246":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:13983:5454":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11576:5171":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:649:6781":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:11153:7622":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"11:851:6791":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:9528:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:31347:4074":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:47509:7397":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:41203:7199":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:2687:4166":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:9543:2427":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:42734:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:894:6193":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:14093:5472":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:2226:4180":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:5051:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:2513:9208":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:2746:6219":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:3069:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:47965:7440":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:11604:7688":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:10586:5126":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:22178:34492":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:23662:7174":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"16:2588:6212":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"25:0:1032":{"crate_id":25,"path":["libc"],"kind":"module"},"17:12588:5297":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:3401:3668":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:2810:8042":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:4243:9996":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:974:6782":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:485:4986":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"25:6677:8937":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"23:363:26950":{"crate_id":23,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"2:2671:697":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:7635:4104":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:47224:7370":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:14258:5505":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:23052:10158":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:16288:6043":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8648:7613":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12173:5231":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:10935:3996":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:6422:8814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:2364:9301":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:41371:7206":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:7250:10066":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5205:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:7439:9078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:383:4009":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:6826:4096":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:11564:9945":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"11:663:6799":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:2638:6214":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"3:1785:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6737:8952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"5:1582:6785":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:13453:3901":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:6502:7535":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"14:159:6774":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:2568:3501":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:48015:7442":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"25:5527:8702":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"25:8173:9172":{"crate_id":25,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12430:5262":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:7668:6903":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:10886:7500":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:15534:5840":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"25:6426:8815":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:6820:22659":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:5575:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:47368:7392":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:39039:3686":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:16068:5964":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13219:5353":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:10830:5131":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:12990:5335":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:11063:36535":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"14:201:15322":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"20:888:2428":{"crate_id":20,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"17:16755:6165":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:2228:4181":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:41747:7076":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:3063:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4896:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2772:7498":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:41517:7068":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:8480:6674":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12065:5213":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:15062:5670":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:22373:9945":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"11:832:6789":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"25:8235:9175":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:14122:5483":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:22788:9945":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:41078:7190":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:23607:7169":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:46886:7343":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:14346:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:12662:763":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:7284:9015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:7515:9128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:47014:7351":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:7355:6241":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:8642:7611":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:651:4926":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:5414:4774":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"2:42662:7240":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:10479:22729":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4792:8379":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7041:6239":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:5280:6283":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:10114:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:43431:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:155:4725":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:6967:3727":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"25:1701:8364":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11901:5199":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:7430:9075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:1711:8368":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:4965:10007":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:2099:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"25:6668:8931":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:45699:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:7694:4768":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:608:4943":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:7013:6441":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:9278:7648":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"25:7443:9079":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5022:4826":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:3291:6781":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:41962:7227":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12854:5006":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"9:345:21661":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:45740:7320":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:16058:5959":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:32869:9211":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:284:4737":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:1005:6791":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:22925:10155":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:45748:7322":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:14384:5547":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10369:22725":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:1382:6794":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:41989:7083":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"25:552:8213":{"crate_id":25,"path":["libc","unix","linger"],"kind":"struct"},"16:6806:6231":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:41435:7213":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:45273:7127":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:44338:7100":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"23:118:4709":{"crate_id":23,"path":["smallvec","SmallVec"],"kind":"struct"},"1:982:6786":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:10661:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:3364:4056":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:9674:7489":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:9436:7657":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:3872:9988":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:562:4011":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"2:44680:7278":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"25:1595:8296":{"crate_id":25,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"25:7492:9114":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:5932:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:22165:34489":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:5748:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:1569:8277":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:9249:7646":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"20:27:3117":{"crate_id":20,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"25:1694:8361":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"11:1083:6796":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:4118:6260":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"11:1542:21724":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:10673:4068":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:9270:6781":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:42753:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"25:8241:9176":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:8335:3797":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:11215:4813":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:14008:5457":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"25:5215:8563":{"crate_id":25,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12344:5252":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"25:4900:8452":{"crate_id":25,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13195:5351":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:46833:7336":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:47936:7439":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"20:0:2404":{"crate_id":20,"path":["lock_api"],"kind":"module"},"16:8633:22669":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:4565:4764":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:3431:3676":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:6638:8923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13436:5369":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12979:5334":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:16250:6029":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:14788:5620":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:41473:7215":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:750:6784":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12924:5328":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:9551:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:9444:7659":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:10975:36533":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:10876:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:16269:6042":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6901:6429":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:4233:9995":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13243:5355":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2495:9930":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:6719:8944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:2914:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"25:6608:8910":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13000:22863":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:23137:10151":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:3086:34949":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:22176:34490":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:22987:9945":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:41301:7204":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:16191:6014":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:4171:4096":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:10623:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6710:8942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"13:229:9206":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11404:27371":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4921:8465":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"13:0:3484":{"crate_id":13,"path":["std_detect"],"kind":"module"},"15:306:21749":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:7583:4096":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:2568:6211":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:42474:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:12110:7509":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:44710:7282":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"20:907:2427":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:6062:6237":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7946:6245":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:6898:3724":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:507:4926":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:299:3799":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12711:5303":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"9:49:9365":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5664:8767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:15186:5686":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:7627:4096":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:22:845":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:1919:7488":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15978:5941":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:34190:3669":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:12676:996":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:31062:3775":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:5640:8755":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:1632:8325":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:8525:6678":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11200:5146":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:32947:258":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:2770:6220":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:7982:7548":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:10571:5125":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:1643:8333":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:2043:4761":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:15595:5847":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:4653:3759":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:8500:6675":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"25:6388:8796":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:15963:5937":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:16838:5451":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:8101:3997":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:8281:7559":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8433:7566":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5019:8509":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:8909:10054":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:11447:7925":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"25:5621:8751":{"crate_id":25,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"25:6700:8941":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"22:46:4714":{"crate_id":22,"path":["parking_lot_core","parking_lot","ThreadData"],"kind":"struct"},"2:41549:7221":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:3423:3674":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:3097:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:41464:7059":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:8959:6781":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"11:1558:6801":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:5488:8688":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:23706:7178":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:11356:36540":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:10441:4078":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:43587:4067":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5265:8583":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6543:8876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:538:4933":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"22:83:2700":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","acquire_resource"],"kind":"function"},"17:16005:5948":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4970:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:12665:761":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:14924:5642":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:23396:32952":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:9424:7655":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:3043:15228":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:16417:6075":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:6547:10159":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:1684:8357":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"25:6470:8835":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:45008:7292":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11939:5203":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:22163:34487":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:47270:7372":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:2261:6885":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:8326:9196":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9533:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:11145:27370":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:578:8226":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"7:0:1957":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:15128:5677":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:14110:5480":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:953:4705":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"25:6767:8962":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12878:5322":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:40281:3694":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5503:8695":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:22686:34495":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6792:6417":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:44838:7109":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:40331:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:1011:6792":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:13648:5386":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:44663:7277":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"10:36:9214":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:10109:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11116:7668":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"5:3358:6806":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:8272:9183":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:38929:3684":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"20:30:3121":{"crate_id":20,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"2:45481:9311":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:13471:4961":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:13186:7122":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"8:0:3486":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:7819:29720":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"25:8247:9177":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:40439:3698":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:9396:3992":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"25:7461:9089":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:919:4096":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"25:5005:8503":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:47139:7365":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12103:5224":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:983:6532":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:47817:7436":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:3858:6883":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:16744:6160":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:7165:6470":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:1591:6800":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4997:8496":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:4185:9992":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5617:8748":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5575:8723":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"22:215:2563":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkResult"],"kind":"struct"},"2:46850:7337":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:586:8230":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:7369:6242":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:8152:9857":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:22206:10072":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:23418:7152":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:2453:5001":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"25:8282:9185":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13120:5147":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:41395:7209":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:15801:5893":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:3837:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:532:8202":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:14883:5637":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:47862:7437":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"25:5222:8564":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:0:1764":{"crate_id":1,"path":["std"],"kind":"module"},"6:8316:9194":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:4140:9989":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:5716:7528":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"25:6725:8945":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:23385:3777":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:7741:15225":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"23:331:4712":{"crate_id":23,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"1:6295:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:15861:5909":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"25:6891:9008":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:8394:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:6852:8982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"25:5280:8594":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:41252:7202":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"25:8264:9182":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:12035:7109":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:47177:7367":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:6744:8953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:6571:6370":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"25:5317:8608":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:3719:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:4840:3751":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:16848:5456":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:15102:5675":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12072:5216":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:2834:4061":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"5:7108:4789":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:3809:3700":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7713:36524":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:5687:6290":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:427:36500":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:8586:9944":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"25:6790:8968":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5512:8696":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:40233:3690":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:6335:6327":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:47028:7352":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:3803:3697":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5186:8544":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:44856:7110":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11485:5160":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13757:5405":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:14160:34302":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6082:6293":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:4875:8440":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"25:1549:8267":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:8428:7565":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:44097:7254":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:44634:7274":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12686:5301":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:45689:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3560:7227":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:5647:6289":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7468:6522":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:7367:9066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"25:5662:8767":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11989:5205":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:2750:4821":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:43096:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:43244:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:10840:4981":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:16658:6138":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:9597:7095":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14322:5534":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:7857:15273":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:32929:3752":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"11:1652:4720":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:2323:6794":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:3306:6198":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:16211:6020":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:23629:7171":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"6:538:8205":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13183:5350":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:5873:10060":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:12624:9859":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:16672:6142":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:6197:7060":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:40309:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"25:6503:8848":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:6254:6317":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:7740:15224":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"25:7428:9075":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:15951:5934":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:8326:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6387:6333":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"20:872:246":{"crate_id":20,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"25:4814:8396":{"crate_id":25,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:26660:283":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:45139:7295":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:906:4984":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:22259:10068":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11814:5190":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6747:6191":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:15844:5901":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"25:7282:9015":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:4555:15207":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:3448:4779":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:11112:36536":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:8148:6250":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"25:4927:8467":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"25:4968:8482":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:765:26933":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:46903:7344":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:15677:5865":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:33004:4058":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:10663:4064":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11915:5146":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:702:7481":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"25:1528:8252":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:8093:6620":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:9262:7647":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:4925:10020":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:12659:1862":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:3712:6799":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:3072:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6864:22660":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:8351:7564":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:42714:7092":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:8284:9185":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:1654:6804":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:699:7479":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:787:4779":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6678:6398":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:3593:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:4981:6274":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:1703:8364":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6950:6433":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:7494:9114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:23469:32956":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:14178:5500":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11842:5195":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:16021:5951":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:5740:5126":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:436:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:8304:9190":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:45477:9310":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:6398:8798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12447:22838":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:8040:36529":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:4127:4705":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:1563:8275":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:2422:4998":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:3585:6257":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"25:5519:8697":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:12655:1352":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:23651:7173":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:12679:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"18:573:4926":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12958:5331":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"25:5023:8512":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:48073:7446":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:16380:6068":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:43318:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:7889:27389":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:10255:22721":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:754:4974":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:15159:5683":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:7539:4705":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:4954:6273":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:11090:7661":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:8278:9184":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:12672:1885":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:3467:7504":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:11109:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"20:256:2423":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"1:11759:4849":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5611:8745":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:42821:3819":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:706:4961":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:3042:9945":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:41237:7200":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:2344:3365":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:11776:6799":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:13240:7104":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13553:22735":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:5288:8597":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:1411:6798":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"7:31:21633":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6651:8927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13771:5406":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:40409:3696":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:473:8167":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:40369:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:16766:6166":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:12032:9323":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:8106:3998":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:4776:3744":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6109:6302":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11963:5204":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:12667:921":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"25:6457:8826":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:10605:4063":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:45505:9317":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:8162:6240":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:2964:6229":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:10656:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:6486:8846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:16538:6093":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:963:4779":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:1648:6803":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"25:5373:8625":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:7292:9020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:2258:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"20:215:3274":{"crate_id":20,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"17:14307:5530":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:5755:6291":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:44580:7270":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"25:522:8196":{"crate_id":25,"path":["libc","unix","hostent"],"kind":"struct"},"14:40:5421":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:16403:6072":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6749:8954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:5224:8564":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:8582:6684":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:16116:6001":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:1727:8373":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11346:5149":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"20:20:2418":{"crate_id":20,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"25:5149:8541":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:8852:34252":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"25:4995:8496":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:7835:22665":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"25:5239:8571":{"crate_id":25,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:563:4935":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43072:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:7510:6881":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:969:6800":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:41042:7050":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:23142:10149":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:16230:6026":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:1942:7489":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:5346:6285":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13133:5348":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:1696:8361":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"25:6636:8923":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11794:22766":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:5170:6279":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:45118:15320":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:41149:7050":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:15513:5835":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:41323:4802":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"17:12935:5329":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:6695:8940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:4182:6262":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:15733:5874":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:595:3004":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:6687:8938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:5441:8661":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:7738:6907":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:45531:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"25:5418:8646":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:2663:7497":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4842:8416":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:12946:15371":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:44612:7207":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5249:8575":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:1500:8239":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13399:5366":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:5222:6281":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:7256:6495":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"14:164:21729":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"25:5501:8695":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:12093:5223":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:3822:33928":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"9:490:6863":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"25:7405:9068":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13836:5424":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13996:5456":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:7915:27391":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"25:5194:8551":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:43883:4074":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:45772:7325":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:7156:6469":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10132:22717":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:32922:7181":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:12021:7546":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"25:6541:8876":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:6953:3726":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:12656:351":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:42982:224":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"2:43050:6799":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:15809:5895":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"25:5086:8536":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7518:6529":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8871:7258":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:43468:3625":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5395:8635":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:11079:7559":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:44591:7271":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:8230:22667":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:46999:7350":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:48210:7459":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"11:820:9872":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"22:233:2562":{"crate_id":22,"path":["parking_lot_core","parking_lot","RequeueOp"],"kind":"enum"},"2:45682:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"11:813:6786":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"10:44:6811":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:12673:1891":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6237:6312":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:8206:6238":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:8220:6625":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:38874:3683":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:15763:5885":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:10671:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13207:5352":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:6566:10160":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:12331:5250":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:12653:1925":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:3327:3757":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:9236:7645":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"25:5385:8630":{"crate_id":25,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6513:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:46801:7332":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:16315:6050":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5420:8646":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:2433:21794":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"21:17:4720":{"crate_id":21,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"16:8317:22668":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5196:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:8175:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:5356:454":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:41417:7211":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"25:5364:8619":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:928:4743":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:6850:6423":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:45168:7303":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:43281:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:7524:9131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"25:5486:8688":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:11629:5109":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:14611:5580":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12287:5245":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12969:5333":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:4363:10016":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:3328:31643":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:7302:6497":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:3697:9943":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:6030:4705":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"20:88:4922":{"crate_id":20,"path":["lock_api","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:22257:9945":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:14476:5563":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13052:5344":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"25:4962:8481":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12814:5314":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:16395:6069":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"20:864:2421":{"crate_id":20,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"2:45782:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:5450:8667":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:13465:5370":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"6:559:8216":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:321:4984":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8823:7632":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:47192:7368":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5139:8540":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5387:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:11981:7539":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:7806:33856":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:6390:8796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:42831:3830":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:10311:22723":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:43580:4066":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"11:102:9293":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:45324:7307":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:3877:5005":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:7098:4787":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:11174:7530":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:40:4733":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"15:394:21758":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"25:1519:8247":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"25:478:8170":{"crate_id":25,"path":["libc","unix","timeval"],"kind":"struct"},"1:9321:10064":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:4900:6271":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:4371:10017":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:47323:7375":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10766:4980":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13093:5171":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"20:447:3198":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"2:34776:3678":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:48187:7458":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11102:5144":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:2341:7495":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7539:6531":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:23066:4165":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"11:123:4727":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13079:5347":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:6638:6378":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:3792:268":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:9292:7532":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:9385:7650":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:537:2774":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8330:7496":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:7984:9160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:15919:5923":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:15876:5911":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:2484:6207":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:523:8196":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:44752:7107":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:8011:6248":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:735:26932":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:2344:34841":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:7308:9032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6670:8931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:42674:7512":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:16051:5957":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:22881:10154":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:2736:4822":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11269:22746":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:23548:9945":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:43573:4064":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:43833:9233":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:14396:5549":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:6631:8922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:8568:7603":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:14365:5542":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"25:544:8208":{"crate_id":25,"path":["libc","unix","winsize"],"kind":"struct"},"17:12575:5295":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"14:213:6777":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"22:0:2435":{"crate_id":22,"path":["parking_lot_core"],"kind":"module"},"17:11603:5173":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:7569:31091":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"25:6643:8924":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"14:7:6774":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:41971:4810":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:7072:22661":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:0:3651":{"crate_id":21,"path":["scopeguard"],"kind":"module"},"6:5165:8542":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"14:0:3491":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6419:6186":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:8276:7558":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"25:5286:8597":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:8298:7561":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"25:1641:8333":{"crate_id":25,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"25:1561:8275":{"crate_id":25,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"9:412:21648":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:2878:6225":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:14690:5590":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:3303:34945":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"25:1673:8351":{"crate_id":25,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:8595:6687":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:11715:5180":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:8804:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:44560:7268":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:680:4990":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:11393:7646":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:4967:10008":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"25:5460:8676":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:10283:22722":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:15456:5798":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:2525:36495":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:22790:10070":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"20:467:3163":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"11:2414:4705":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:7505:6526":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:2858:6224":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:12666:939":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4881:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5241:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:14072:7135":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:41286:15359":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4255:9999":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:581:4049":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12397:5259":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:7956:6614":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"25:5379:8627":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:1885:4779":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:15817:5897":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:2448:6199":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:545:8208":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5311:8605":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:7539:9138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5630:8754":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:15713:5870":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:46818:7335":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:13688:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:41426:7212":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:5136:15216":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:9587:3704":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:8277:3739":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"25:563:8218":{"crate_id":25,"path":["libc","unix","itimerval"],"kind":"struct"},"1:12246:7547":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:11670:6860":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:8666:6583":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:13530:15314":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4957:8478":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8742:9048":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:1132:6798":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:14521:5568":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:41275:7203":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:988:9872":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:7962:9159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:4202:6799":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11868:5171":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11318:5148":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"25:5548:8714":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:47642:7402":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:13592:5380":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:4850:9061":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:3332:6803":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:5323:33693":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"2:48134:7451":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:1919:4350":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"11:718:6783":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:909:3781":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:984:4745":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:2908:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"20:848:2414":{"crate_id":20,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"16:6835:6421":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"25:4945:8475":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:2579:8044":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:5732:7529":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5349:8614":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:12438:4858":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"25:6800:8971":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:45509:9318":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:4247:9997":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:9863:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:12836:22862":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:40630:15229":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:3599:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15937:5927":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"3:0:527":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5557:8716":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:7273:4797":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"20:840:199":{"crate_id":20,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"17:10150:22718":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5316:6284":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:8438:9977":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"22:72:3011":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_UNPARK_TOKEN"],"kind":"constant"},"2:0:585":{"crate_id":2,"path":["core"],"kind":"module"},"17:11458:5159":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"25:6521:8860":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:43207:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12272:5241":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:15001:5655":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:436:2419":{"crate_id":20,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"1:9309:7649":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:7856:4779":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:6792:8968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:676:4096":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:41981:7081":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:6746:4737":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:2142:6882":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11888:5198":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:1506:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:8708:6696":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:44884:7286":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:47994:7441":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:3075:272":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:6267:6318":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:16613:5424":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"25:5034:8517":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:12150:7510":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:41089:32977":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10700:4978":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:8266:9182":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:47435:7395":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:7762:6563":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"11:2340:6809":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:10524:22730":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:22188:34493":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:5255:8577":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:8271:5065":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11825:5192":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:7575:7659":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"25:7342:9048":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:3324:6805":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"25:6876:8997":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:4850:3752":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"25:4935:8469":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:23516:3779":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"11:2354:6781":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"25:4803:8388":{"crate_id":25,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"11:2540:6903":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"25:5475:8685":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:12898:5327":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13876:5435":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:1883:7486":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:12007:7544":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11438:5156":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6887:6233":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4869:8439":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:5117:8538":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8172:9901":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:47078:7362":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13344:5363":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:16359:6065":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:1667:8350":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11770:22765":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:23095:9945":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:6460:22658":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:41157:7197":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:11430:3703":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:47530:7398":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:3782:3695":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:8264:6633":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:589:4936":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:6428:8815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:3590:4761":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"25:5332:8612":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:1535:6799":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:4767:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5550:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"25:5410:1279":{"crate_id":25,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:15569:5841":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"25:6708:8942":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"25:5426:8651":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:10669:4067":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"25:1587:8291":{"crate_id":25,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:15985:5942":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:4922:10042":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:12227:7690":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7347:6503":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6610:8910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"25:7988:9162":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:3985:5029":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:11161:7557":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:14190:5503":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:38984:3685":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:16777:6167":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:4902:8452":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:45051:7196":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:11137:27368":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:44720:4981":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:16700:6149":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:13021:22864":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"25:7315:9038":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:5939:4833":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:3108:6253":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"25:5105:8537":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:4842:6269":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6656:6392":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:7679:9866":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:3426:3675":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:650:9852":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:1521:8247":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:47547:7399":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"25:4873:8440":{"crate_id":25,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7398:36523":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12385:5258":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:15699:5869":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:12087:4852":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:6939:6432":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:43875:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"25:4955:8478":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:3792:4737":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:15578:5845":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"23:350:9198":{"crate_id":23,"path":["smallvec","ConstNonNull"],"kind":"struct"},"16:7880:6344":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:10517:7669":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"10:0:3488":{"crate_id":10,"path":["adler"],"kind":"module"},"2:13411:3776":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5069:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:42927:7248":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"25:6754:8955":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"5:7872:4783":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:45359:7312":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:16512:5406":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:7334:6501":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"25:7365:9066":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8343:7563":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5295:8599":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"9:380:21647":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12800:5313":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:47397:7393":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:5696:7527":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:47160:7366":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4990:8493":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:2206:5216":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:45761:33103":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:12253:7547":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"25:6856:8983":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:7710:6904":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11050:7679":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:2810:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:14069:5470":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:6378:4828":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:8166:9858":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:32911:7180":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:497:8176":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:0:3495":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12674:1897":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:24260:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:14678:5589":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:23013:34716":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"11:0:3489":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"25:1512:8244":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"25:7388:9067":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:5417:1007":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:5482:8687":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14350:5540":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:43900:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:42830:3831":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"25:5263:8583":{"crate_id":25,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5428:8651":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:16573:6123":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:43058:4096":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:31705:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:15353:5712":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:10496:7488":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"11:321:9297":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:23695:7177":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:3315:277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:15868:5910":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4171:9991":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:718:4965":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"18:659:4949":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:1042:21723":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"25:5203:8556":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:9500:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:4355:10015":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:44491:7264":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:15624:5853":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:9457:27327":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:8225:9173":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:2275:6532":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:15174:5333":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:724:6877":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:14730:5594":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:1625:8321":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:5130:10039":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:4927:6272":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:7990:9162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:14598:5578":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6203:22656":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:14955:5648":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4805:8388":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"25:5339:8613":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:40446:6921":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:6060:3718":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:2534:9942":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"25:6439:8816":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13575:5333":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13108:5146":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"23:0:3653":{"crate_id":23,"path":["smallvec"],"kind":"module"},"25:5055:8526":{"crate_id":25,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:7390:9067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:9841:7558":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"25:5299:8602":{"crate_id":25,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:5946:7531":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6096:6297":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:41117:7194":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:10274:830":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"1:12038:9324":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:5134:4761":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:12254:5239":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"20:452:3205":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"20:8:2406":{"crate_id":20,"path":["lock_api","GuardNoSend"],"kind":"struct"},"6:1597:8296":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:3012:21795":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:1885:6804":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5341:8613":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:11359:4815":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:14021:5458":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"25:5615:8748":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:2394:22793":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:912:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"25:6717:8944":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:11844:7104":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:45239:7306":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:15771:5888":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:3571:2565":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:613:36544":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:3925:4779":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:22385:7142":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:13460:7095":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:9484:3829":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"25:4912:8461":{"crate_id":25,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12907:5372":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:9214:7643":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"16:6729:6413":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:45798:7326":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:2291:9298":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:16525:5420":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:7619:4096":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13489:5372":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3688:31324":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"25:5537:8708":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:23001:10157":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:9447:3882":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"17:16013:5949":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:6454:4816":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"20:454:3208":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"2:11921:7106":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:5045:10004":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:42496:7087":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:6841:6422":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:33918:3667":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:6769:8962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:14624:5581":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:11412:3737":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:6148:3717":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"25:5510:8696":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:1639:4705":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:1862:4096":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"13:110:36506":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:44136:7263":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:4816:8396":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5196:6280":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11616:5175":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:45566:3738":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:5312:7522":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43806:9224":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:8609:6252":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:544:6184":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:888:4740":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"20:900:2426":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:12651:1208":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8965:7640":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5142:6278":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:6053:3465":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"25:7306:9032":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:43133:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:1944:7490":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:8295:6637":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:10214:810":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"2:14212:7137":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:14165:5499":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:41404:7210":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:41574:3264":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"25:7437:9078":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:14483:9873":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"25:5656:8764":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:6441:8816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6438:22657":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:6981:6251":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:11883:7105":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:43921:4075":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:34949:3679":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6523:8860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:763:6785":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"20:484:245":{"crate_id":20,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"11:686:6782":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13529:5374":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:48249:7474":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:8281:15278":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:2465:6201":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:3079:271":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:13202:7123":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:14811:5629":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:292:9294":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:3061:4825":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:5375:7055":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"25:7324:9039":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44623:7273":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:41723:7226":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5044:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:11577:252":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:41164:15222":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:3558:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:11074:9322":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6472:8835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4964:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5025:8512":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:36998:3682":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"25:6657:8929":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10733:4979":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:1123:6794":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:8231:9174":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:3576:3691":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:41244:7201":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:22134:4049":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"22:82:2401":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock"],"kind":"module"},"25:4790:8379":{"crate_id":25,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"25:1725:8373":{"crate_id":25,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:2413:21767":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"25:490:8173":{"crate_id":25,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12318:5248":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:344:36496":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"22:84:3150":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","release_resource"],"kind":"function"},"17:316:4983":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"11:1878:6803":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:2129:4031":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12787:5312":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"15:327:9362":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:14427:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5471:8682":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:6590:8902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:4552:4761":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"16:8623:6689":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:4703:10020":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:7074:4712":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:15477:5806":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:34391:3670":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12864:5317":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:45489:9313":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:6668:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"25:7290:9020":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:42528:9987":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:15691:5868":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:45033:7197":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:15785:5891":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:4:1292":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:6605:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"25:1630:8325":{"crate_id":25,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:43816:4074":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:10667:4066":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"25:7578:9153":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"25:6850:8982":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:7966:6615":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5319:8608":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:7337:9044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:15115:5676":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11161:36537":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"25:5566:8721":{"crate_id":25,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"25:4879:8442":{"crate_id":25,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5381:8627":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:14870:5635":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:16301:6048":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:4517:7514":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:6915:4737":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"25:6735:8952":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"5:7527:6900":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13795:5420":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:5154:10041":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:6406:6340":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:5325:8609":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11493:9238":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:41487:7218":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:7279:6496":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:8797:3827":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:2303:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11014:36534":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:15721:5871":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:1027:6794":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:3832:6259":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6911:6430":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:2424:4182":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:14746:5599":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10333:22724":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:6998:7070":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:4937:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"25:1582:8289":{"crate_id":25,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11099:7560":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:2229:4155":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:10766:7644":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:40294:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:45497:9315":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:5036:8517":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"25:1492:8236":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"23:281:4096":{"crate_id":23,"path":["smallvec","IntoIter"],"kind":"struct"},"1:619:2734":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7728:3828":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:2528:6209":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"14:31:6774":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:508:4819":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:4621:3758":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12035:5209":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:3469:7505":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"25:5439:8661":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:4039:7511":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:6279:4833":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:1584:8289":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:6087:2407":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:14845:5632":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:5658:8764":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"25:484:8172":{"crate_id":25,"path":["libc","unix","timespec"],"kind":"struct"},"2:8090:2394":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12045:5064":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:1858:6781":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:42556:9223":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:14776:5618":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"25:5269:8586":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:15587:5846":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:5564:15298":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5375:8625":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"23:164:4708":{"crate_id":23,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"25:4988:8493":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:12635:27367":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:6810:7064":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:4199:9994":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:1227:34948":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12133:5228":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:31358:32964":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"11:423:36499":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6586:6373":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"25:6358:8771":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1530:8252":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:11801:7102":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:13030:5339":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:10810:4844":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:12663:5300":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"25:8292:9189":{"crate_id":25,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"20:35:198":{"crate_id":20,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"9:435:21646":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:6895:3723":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:31732:4049":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12187:5232":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:10296:34253":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:41588:7073":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:623:36545":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6186:6308":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7916:6603":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6779:6416":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"25:5184:8544":{"crate_id":25,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:44998:7291":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11469:22745":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"20:479:3239":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"5:4292:4761":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"15:288:21748":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:7471:4838":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:8653:9986":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:1514:8244":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:726:4968":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:23527:3778":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:7972:4990":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"22:284:3165":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkToken"],"kind":"struct"},"17:13892:5439":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:42770:6799":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:9834:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:46771:7328":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5623:8751":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12725:5307":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8806:3826":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:16040:5956":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:2251:2774":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:789:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"25:569:8221":{"crate_id":25,"path":["libc","unix","tms"],"kind":"struct"},"2:11752:6781":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:15908:5919":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:465:8162":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:15896:5918":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:9538:2426":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:10431:22727":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"18:680:4956":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"25:8258:9181":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"25:7513:9128":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:16791:6171":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:14413:5552":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:47095:7363":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:1781:4737":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14859:5634":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:23640:7172":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:1632:6781":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"20:473:3231":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"2:47291:7373":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:12580:7114":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:41526:7069":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:553:8213":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12242:5237":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:12664:782":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6727:8945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:12960:7115":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:2159:1397":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:5802:7530":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:2156:6883":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:3396:3663":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:8025:6617":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11552:5167":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:44542:7265":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12022:5208":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:4848:9059":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:45677:9235":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:46932:7346":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:3439:6256":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:3095:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:41940:7079":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:6858:8983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:16730:6157":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:2682:6216":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:32936:7182":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:41505:7219":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:14187:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"11:357:4729":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:11590:5172":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:6802:8971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:7492:6523":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:5111:6277":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:2794:6221":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12298:22837":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:16341:6059":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:10202:22720":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:7580:9153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13387:5365":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:47663:7403":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:13066:5346":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:45555:3705":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:44902:7287":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:23109:10150":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:1507:8242":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:11251:4846":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:1100:6532":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8027:4841":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"25:5583:8728":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:44784:7284":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"25:8324:9196":{"crate_id":25,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"23:344:26949":{"crate_id":23,"path":["smallvec","ToSmallVec"],"kind":"trait"},"2:43861:33047":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:6679:8937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:4384:10018":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:58:26941":{"crate_id":21,"path":["scopeguard","Always"],"kind":"enum"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:6459:8826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:23965:3273":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"type_alias"},"2:3066:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:1366:6532":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:9505:2414":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:4771:3743":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"25:516:8193":{"crate_id":25,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13260:22732":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:12063:7111":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"25:1665:8350":{"crate_id":25,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:3298:6804":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"20:218:3652":{"crate_id":20,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"17:11328:36539":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:15013:5657":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:1996:7491":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:8237:9175":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"25:5650:8762":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"25:4919:8465":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8091:4010":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:42861:4002":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"25:5480:8687":{"crate_id":25,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:41947:2415":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5301:8602":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"25:5347:8614":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:9431:7656":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:41539:7220":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:42961:226":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"1:3426:7503":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:23454:32955":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12761:5310":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"11:2126:6794":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"11:2374:6799":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:6711:6403":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:4239:6263":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:8324:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:45685:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:8187:7557":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"25:6396:8798":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:46865:7338":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:12239:27339":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:5289:3717":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:3334:31791":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:3337:34946":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7786:36525":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14443:5555":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:7569:34838":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"22:297:3010":{"crate_id":22,"path":["parking_lot_core","spinwait","SpinWait"],"kind":"struct"},"1:11069:9320":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:13819:5421":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:7408:27386":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"1:3424:7502":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:23015:4165":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:8063:22666":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:13163:7121":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12749:5309":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8606:7210":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:2167:6884":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:7317:9038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:11917:7258":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"6:6578:8897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:8559:4970":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:2818:6222":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:3331:31790":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12008:5207":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:7877:27387":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:9569:3703":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:14337:5538":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"6:5088:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:3540:3689":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:10821:5128":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"17:13304:22733":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:9390:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"9:226:7258":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:5389:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:10880:5132":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:4402:6265":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:7022:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12774:5311":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:6995:6434":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:10675:4069":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6157:6303":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:15746:5880":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:12668:927":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:7326:9039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:16241:6027":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:1122:4737":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"11:1118:6797":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:4362:6781":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:43355:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"25:1487:8234":{"crate_id":25,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10405:22726":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:44570:7269":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:6778:2416":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:23362:7146":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:23596:7168":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:4193:9993":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:9513:4761":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:45338:15321":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4947:8475":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:7209:6482":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"3:2062:6913":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"2:47110:7364":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:491:4925":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:6602:8909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:16717:6151":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"25:1498:8239":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:515:4923":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:5682:7523":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5253:6282":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:15792:5892":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:3707:9964":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6873:6426":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"25:7335:9044":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:44128:7262":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:12619:4177":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:2548:6210":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:1136:6798":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:978:6783":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:6171:6306":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:999:6789":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:15884:5912":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:14152:5495":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:2918:6227":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:4808:6268":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:5334:8612":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:10674:29671":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:12825:5315":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:1643:4779":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:45372:7316":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:6513:4778":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"16:6623:6376":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:8636:7290":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12643:5146":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:22963:10156":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:7407:9068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:4436:7513":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:9477:7923":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5529:8702":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:8543:6680":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12737:5308":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13959:5450":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:12652:492":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:44802:7285":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"25:5602:8742":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:44956:7289":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:40349:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:2032:813":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:15389:5743":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"21:12:26940":{"crate_id":21,"path":["scopeguard","Strategy"],"kind":"trait"},"17:11210:36538":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:10634:4976":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"11:1871:4779":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:13928:5446":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:12270:4856":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"11:2394:4096":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:11266:4847":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:2507:9207":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:4928:3648":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:6617:8911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3587:2776":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:14897:5638":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13231:5354":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:4764:6267":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:2702:6217":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:12657:1738":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:6756:8955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:5585:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13700:5393":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:48157:7456":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:2493:4155":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:5357:8615":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:2618:6213":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"25:531:8202":{"crate_id":25,"path":["libc","unix","iovec"],"kind":"struct"},"6:6416:8811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:43845:6652":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:2521:9940":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"25:1655:8344":{"crate_id":25,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11540:5166":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"25:6693:8940":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:2948:6228":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12944:5330":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"25:6450:8824":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:12229:5236":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:3679:4063":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:11423:22744":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:6452:8824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:40197:3688":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:8813:15277":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"25:5555:8716":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:22653:10074":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"5:1573:6784":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:8447:3796":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:45707:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:464:3216":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"1:9403:27326":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:12049:7110":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"11:389:4731":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:12650:436":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:7987:6616":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:23347:9303":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:9336:10063":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:3147:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:33706:3664":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7189:22662":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14498:5564":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:23434:32954":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:15611:5848":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:44321:9234":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"2:3411:3666":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:4959:3755":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"25:537:8205":{"crate_id":25,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13971:5451":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"25:5017:8509":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:44089:7253":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:2243:4994":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"25:6484:8846":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:531:4930":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:8894:7635":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3640:7507":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:7248:4794":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6360:8771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:16650:6137":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:6500:21766":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:47740:7435":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:43170:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12214:5234":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:15324:5692":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:22383:10069":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:10604:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:519:4988":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"25:5042:8522":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11189:27335":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:12160:5230":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:48093:7448":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"25:5403:8641":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:22277:7142":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:5328:5013":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:1665:6806":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:8577:7508":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:2096:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"25:8005:9171":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:42640:32982":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"25:6615:8911":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:33035:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"11:808:6800":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:1612:6783":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:41733:7075":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"25:5137:8540":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"25:8270:9183":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:2025:9911":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:2504:6208":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:48062:7445":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"25:577:8226":{"crate_id":25,"path":["libc","unix","servent"],"kind":"struct"},"16:4150:6261":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:4501:7052":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10965:5142":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:1636:4096":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"25:1567:8277":{"crate_id":25,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:2509:9934":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:5127:8539":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:11993:7543":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"22:254:3164":{"crate_id":22,"path":["parking_lot_core","parking_lot","FilterOp"],"kind":"enum"},"17:0:3494":{"crate_id":17,"path":["object"],"kind":"module"},"6:5652:8762":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:14454:5556":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"22:271:3124":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkToken"],"kind":"struct"},"2:23618:7170":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:4929:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:47241:7371":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:12675:1879":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13856:5434":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:41313:4981":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:42512:7089":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:2122:696":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:46985:7349":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8764:7516":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:4803:10038":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1489:8234":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:3357:4054":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:41127:7195":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:44643:7275":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"11:2519:9209":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:8030:4970":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:4134:9990":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:16684:6144":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:8705:7618":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:8055:6619":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:45181:7304":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:1247:36349":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:1397:6793":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"11:2533:9212":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:42909:7247":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:42852:4234":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:12547:7113":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:5870:8969":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:8713:7611":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:11380:7645":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:31294:4001":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:8294:9189":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:22648:9945":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:44734:7102":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12201:5233":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"25:8276:9184":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:15035:5668":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:1001:6781":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:12678:1460":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"4:0:3485":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:8124:3996":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:12619:9386":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:39618:3687":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:44334:9309":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"3:2077:6914":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"23:328:26948":{"crate_id":23,"path":["smallvec","Array"],"kind":"trait"},"2:41141:7196":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"25:7551:9147":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"25:5492:8690":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:491:8173":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:927:6784":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13947:5447":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"25:1682:8357":{"crate_id":25,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:9351:10065":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10892:7504":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"20:321:4922":{"crate_id":20,"path":["lock_api","remutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:41455:7057":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8976:7641":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:12976:15308":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5057:8526":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:45042:7050":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:3887:5021":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"25:5323:8609":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:1114:6793":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:1211:36348":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:4322:4761":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4591:7515":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:2658:6215":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:9219:7644":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:10388:7237":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:3937:7510":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:23496:9306":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:11465:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:3317:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"25:5638:8755":{"crate_id":25,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:11222:4814":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"11:1892:6805":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:14637:5583":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:7009:4808":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:34603:3677":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:41353:9914":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"14:219:6779":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"25:6600:8909":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10455:22728":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:15144:5679":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:6878:8997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:683:7478":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:1867:722":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10667:4977":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"25:472:8167":{"crate_id":25,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:10884:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8335:7562":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:4829:8406":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:44938:7288":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:7935:6611":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:10919:9949":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:6557:4833":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:8243:9176":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:35122:3681":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:8086:9945":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:5154:5011":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"25:6498:8847":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:41048:7189":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13423:5367":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:23673:7175":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:6500:8847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:42937:222":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"17:12409:5260":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:1657:8344":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"25:4840:8416":{"crate_id":25,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:46918:7345":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"25:6576:8897":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:1885:7487":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:3373:7501":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:6470:4832":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:31326:4035":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11690:5178":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:48172:7457":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:3080:34951":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:6774:2415":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"18:96:26924":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:6967:6234":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:4536:15206":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:23410:7151":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11494:5162":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:15448:5795":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:4265:6264":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:16029:5952":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:5343:7522":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:16164:6002":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:47057:7361":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:42696:7090":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8310:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10176:22719":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:33033:4057":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:4984:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:5447:6288":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11654:5147":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:113:26925":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:32946:251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:1675:8351":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"24:0:3486":{"crate_id":24,"path":["cfg_if"],"kind":"module"},"6:1690:8360":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:2820:4060":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"11:2099:6532":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:5058:6275":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6694:6401":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:7027:6443":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:3090:34950":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:15088:5672":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13730:5397":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13014:5337":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:11585:9242":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"25:5469:8682":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:32915:6583":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:12077:7112":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11395:22743":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7997:6247":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"25:5628:8754":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:40277:3692":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:48119:7450":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:8616:7226":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:8807:9877":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:12603:7693":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:11994:7108":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:896:6781":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:2115:6793":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"25:1623:8321":{"crate_id":25,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"9:318:9215":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8623:4981":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11151:5145":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:4157:4737":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:564:8218":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7220:6483":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"25:8223:9173":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:12658:1772":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:14137:5489":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:4333:31090":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:41104:7193":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:14057:5467":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:6121:4761":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:47568:7400":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:14369:4816":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:4701:3161":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2872:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:15659:5857":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:8629:7102":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"18:598:36543":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"18:521:26934":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"25:5393:8635":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:4906:3754":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"25:5115:8538":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8719:7620":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:12669:933":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:22152:34484":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:7463:9089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:47613:7401":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:2235:4179":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5462:8676":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:214:4735":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:1520:6781":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:14095:7218":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:41956:7080":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:1632:6880":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13044:5342":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:5515:4737":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:45821:7327":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:7445:9079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:44551:7266":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:3517:9972":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:2339:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:3158:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:43394:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"25:5049:8524":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"25:5228:8567":{"crate_id":25,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:5083:6276":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:10062:22716":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:45349:7308":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:48036:7443":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5604:8742":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:3046:21796":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:12663:766":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:3199:6918":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:4963:10005":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:2685:4165":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"11:1898:6806":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:23222:7143":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"25:8314:9194":{"crate_id":25,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"25:4894:8449":{"crate_id":25,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:47480:7396":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:16802:6173":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:5477:8685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"}},"external_crates":{"23":{"name":"smallvec","html_root_url":null},"20":{"name":"lock_api","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"libc","html_root_url":null},"22":{"name":"parking_lot_core","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"21":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}