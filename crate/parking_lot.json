{"root":"0:0:1612","crate_version":"0.12.1","includes_private":false,"index":{"b:2:2506-0:261:1602":{"id":"b:2:2506-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:127","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:458":{"id":"0:458","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":{"restricted":{"parent":"0:3:1571","path":"::condvar"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:459:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:204:1850":{"id":"0:204:1850","crate_id":0,"name":"unlock","span":{"filename":"src/raw_mutex.rs","begin":[100,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:290:2381":{"id":"0:290:2381","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[281,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:357:1605":{"id":"b:2:2511-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:127","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:292:2383":{"id":"0:292:2383","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/raw_rwlock.rs","begin":[296,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2374","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:460:1599":{"id":"a:2:2659:222-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7718:2997-0:127:1598":{"id":"a:2:7718:2997-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[119,0],"end":[139,1]},"visibility":{"restricted":{"parent":"0:175:1577","path":"::raw_mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2283","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:207:2285","0:208:1943"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11396:2752":{"id":"2:11396:2752","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"2:11396:2752","prim@char":"1:12350:2672","self::pattern":"2:11021:4388","`DoubleEndedIterator`":"2:7061:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50189:4585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:446:1591":{"id":"0:446:1591","crate_id":0,"name":"WaitTimeoutResult","span":{"filename":"src/condvar.rs","begin":[23,0],"end":[23,35]},"visibility":"public","docs":"A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:2645:214-0:446:1591","a:2:7717:2998-0:446:1591","a:2:7718:2997-0:446:1591","a:2:2709:2899-0:446:1591","a:2:2659:222-0:446:1591","b:2:2511-0:446:1591","b:2:2496-0:446:1591","b:2:2506-0:446:1591","b:2:3304-0:446:1591","b:2:2500-0:446:1591","b:2:2221-0:446:1591","b:2:2224-0:446:1591","b:5:671-0:446:1591","0:449","0:451","0:452","0:454","0:455","0:457","0:458"]}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[452,0],"end":[504,1]},"visibility":{"restricted":{"parent":"0:224:1578","path":"::raw_rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeTimed","id":"20:505:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:307:2405","0:308:2406","0:309:2407","0:310:2408"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2500-0:157:1600":{"id":"b:2:2500-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2224-0:157:1600":{"id":"b:2:2224-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:2464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11332:2427":{"id":"2:11332:2427","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48019:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:161:2091":{"id":"0:161:2091","crate_id":0,"name":"INIT","span":{"filename":"src/raw_fair_mutex.rs","begin":[15,4],"end":[15,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":"_"}},"a:2:2645:214-0:446:1591":{"id":"a:2:2645:214-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[318,0],"end":[323,1]},"visibility":{"restricted":{"parent":"0:106:1575","path":"::once"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[191,0],"end":[203,1]},"visibility":{"restricted":{"parent":"0:224:1578","path":"::raw_rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockDowngrade","id":"20:478:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:2372"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:203:2113":{"id":"0:203:2113","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_mutex.rs","begin":[78,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:261:1602":{"id":"b:2:2496-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:3231"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:174:2289":{"id":"0:174:2289","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_fair_mutex.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:30:2287","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1597":{"id":"0:103:1597","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[110,0],"end":[110,79]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedMutexGuard","id":"20:151:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11323:61205":{"id":"2:11323:61205","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:305:2402":{"id":"0:305:2402","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[439,4],"end":[449,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:5:671-0:446:1591":{"id":"b:5:671-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:3295","5:674:3296","5:675:3297"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:467:2188":{"id":"0:467:2188","crate_id":0,"name":"Done","span":{"filename":"src/once.rs","begin":[33,4],"end":[33,8]},"visibility":"default","docs":"A closure has completed successfully.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"5:5099:61863":{"id":"5:5099:61863","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96:161":{"id":"0:96:161","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[87,49]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same mutex in succession, which can starve\nother threads waiting to acquire the mutex. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na mutex it has just released, this can starve other threads.\n\nThis mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the mutex.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `MutexGuard::unlock_fair` when\nunlocking a mutex instead of simply dropping the `MutexGuard`.\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `Mutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the mutex is fair on average.\n- Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::Mutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(Mutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::Mutex","id":"20:35:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11439:4718":{"id":"2:11439:4718","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:428":{"id":"0:428","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::raw_fair_mutex::RawFairMutex","name":"RawFairMutex","id":"0:157:1600","glob":false}},"2:11358:57405":{"id":"2:11358:57405","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11021:4388","prim@char":"1:12350:2672"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:270:2358":{"id":"0:270:2358","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[116,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11340:61208":{"id":"2:11340:61208","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2970:2854","`str`":"1:12356:2677","str::slice_mut_unchecked":"2:11341:61209"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,27],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::const_fair_mutex","name":"const_fair_mutex","id":"0:85:1592","glob":false}},"0:51:1862":{"id":"0:51:1862","crate_id":0,"name":"wait_for","span":{"filename":"src/condvar.rs","begin":[379,4],"end":[386,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50755:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[154,0],"end":[189,1]},"visibility":{"restricted":{"parent":"0:224:1578","path":"::raw_rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_exclusive","bump_shared"],"trait":{"name":"RawRwLockFair","id":"20:473:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:275:2365","0:276:2366","0:277:2367","0:278:2369"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5111:55513":{"id":"5:5111:55513","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11442:55516"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:2899-0:357:1605":{"id":"a:2:2709:2899-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:30:1725":{"id":"0:30:1725","crate_id":0,"name":"timed_out","span":{"filename":"src/condvar.rs","begin":[28,4],"end":[30,5]},"visibility":"public","docs":"Returns whether the wait was known to have timed out.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:168:2285":{"id":"0:168:2285","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_fair_mutex.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:269:2355":{"id":"0:269:2355","crate_id":0,"name":"lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[107,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:389:1610":{"id":"0:389:1610","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[122,0],"end":[122,92]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedRwLockWriteGuard","id":"20:822:1610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"b:2:2496-0:197:1601":{"id":"b:2:2496-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:3231"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:132:1331":{"id":"0:132:1331","crate_id":0,"name":"state","span":{"filename":"src/once.rs","begin":[94,4],"end":[105,5]},"visibility":"public","docs":"Returns the current state of this `Once`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:157:1600":{"id":"b:2:2511-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:127","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:422":{"id":"0:422","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,35],"end":[43,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::MappedMutexGuard","name":"MappedMutexGuard","id":"0:103:1597","glob":false}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,54],"end":[49,65]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::RawThreadId","name":"RawThreadId","id":"0:357:1605","glob":false}},"0:378:1608":{"id":"0:378:1608","crate_id":0,"name":"const_rwlock","span":{"filename":"src/rwlock.rs","begin":[94,0],"end":[96,1]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.\n\nThis allows creating a `RwLock<T>` in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"RwLock","id":"0:376:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:55514":{"id":"2:11440:55514","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2645:214-0:357:1605":{"id":"a:2:2645:214-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:304:2401":{"id":"0:304:2401","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[429,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:2997-0:460:1599":{"id":"a:2:7718:2997-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11442:55516":{"id":"2:11442:55516","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:2899-0:127:1598":{"id":"a:2:2709:2899-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11381:61212":{"id":"2:11381:61212","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11021:4388","prim@char":"1:12350:2672","str::split_terminator":"2:11378:61211","str::split":"2:11369:54844"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50053:4579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1596":{"id":"0:98:1596","crate_id":0,"name":"const_mutex","span":{"filename":"src/mutex.rs","begin":[92,0],"end":[94,1]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Mutex","id":"0:96:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:127:1598":{"id":"b:2:2506-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:127","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,65],"end":[53,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLock","name":"RwLock","id":"0:376:211","glob":false}},"0:289:2380":{"id":"0:289:2380","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[272,4],"end":[278,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:433":{"id":"0:433","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,27],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::MappedReentrantMutexGuard","name":"MappedReentrantMutexGuard","id":"0:370:1604","glob":false}},"b:2:2221-0:127:1598":{"id":"b:2:2221-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7718:2997-0:197:1601":{"id":"a:2:7718:2997-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11405:61217":{"id":"2:11405:61217","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11021:4388","`DoubleEndedIterator`":"2:7061:120","prim@char":"1:12350:2672","str::match_indices":"2:11402:61216"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50153:4583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLockUpgradableReadGuard","name":"RwLockUpgradableReadGuard","id":"0:392:1611","glob":false}},"0:444":{"id":"0:444","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLockWriteGuard","name":"RwLockWriteGuard","id":"0:383:213","glob":false}},"0:151:59":{"id":"0:151:59","crate_id":0,"name":"default","span":{"filename":"src/once.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11416:61223":{"id":"2:11416:61223","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11021:4388","prim@char":"1:12350:2672"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11046:4387","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:429":{"id":"0:429","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[46,0],"end":[46,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::raw_mutex::RawMutex","name":"RawMutex","id":"0:197:1601","glob":false}},"2:11390:61213":{"id":"2:11390:61213","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:418":{"id":"0:418","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,56],"end":[42,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::FairMutexGuard","name":"FairMutexGuard","id":"0:87:1594","glob":false}},"5:5093:3313":{"id":"5:5093:3313","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:357:1605":{"id":"a:2:2659:222-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2659:222-0:31:1590":{"id":"a:2:2659:222-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2506-0:197:1601":{"id":"b:2:2506-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:127","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2221-0:261:1602":{"id":"b:2:2221-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2224-0:446:1591":{"id":"b:2:2224-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:2464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:440":{"id":"0:440","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,41],"end":[53,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::MappedRwLockWriteGuard","name":"MappedRwLockWriteGuard","id":"0:389:1610","glob":false}},"0:62:1884":{"id":"0:62:1884","crate_id":0,"name":"wait_while_for","span":{"filename":"src/condvar.rs","begin":[496,4],"end":[507,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration. If the provided condition evaluates to `false`,\nthen the thread is no longer blocked and the operation is completed.\nIf the condition evaluates to `true`, then the thread is blocked again\nand waits for another notification before repeating this process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["condition",{"kind":"generic","inner":"F"}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50755:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2918:1868","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[52,0],"end":[65,1]},"visibility":{"restricted":{"parent":"0:154:1576","path":"::raw_fair_mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:171:121","0:172:1721","0:173:2288","0:174:2289"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11331:57365":{"id":"2:11331:57365","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12367:2686"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:163:1857":{"id":"0:163:1857","crate_id":0,"name":"lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:125:2192":{"id":"0:125:2192","crate_id":0,"name":"poisoned","span":{"filename":"src/once.rs","begin":[42,4],"end":[47,5]},"visibility":"public","docs":"Returns whether the associated `Once` has been poisoned.\n\nOnce an initialization routine for a `Once` has panicked it will forever\nindicate to future forced initialization routines that it is poisoned.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1612":{"id":"0:0:1612","crate_id":0,"name":"parking_lot","span":{"filename":"src/lib.rs","begin":[8,0],"end":[56,19]},"visibility":"public","docs":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n`Once` that are smaller, faster and more flexible than those in the Rust\nstandard library. It also provides a `ReentrantMutex` type.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:413","0:414","0:416","0:417","0:418","0:419","0:421","0:422","0:423","0:424","0:426","0:427","0:428","0:429","0:430","0:432","0:433","0:434","0:435","0:436","0:438","0:439","0:440","0:441","0:442","0:443","0:444","0:445"],"is_stripped":false}},"0:445":{"id":"0:445","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[56,0],"end":[56,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"::lock_api","name":"lock_api","id":"20:0:1587","glob":false}},"2:11344:4610":{"id":"2:11344:4610","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12350:2672"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49955:4573","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11320:782":{"id":"2:11320:782","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12350:2672"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:127:1598":{"id":"a:2:2659:222-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:376:211":{"id":"0:376:211","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[89,0],"end":[89,52]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThis lock uses a task-fair locking policy which avoids both reader and\nwriter starvation. This means that readers trying to acquire the lock will\nblock even if the lock is unlocked when there are writers waiting to acquire\nthe lock. Because of this, attempts to recursively acquire a read lock\nwithin a single thread may result in a deadlock.\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same lock in succession, which can starve\nother threads waiting to acquire the rwlock. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na rwlock it has just released, this can starve other threads.\n\nThis rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the rwlock.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`\nor `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply\ndropping the guard.\n\n# Differences from the standard library `RwLock`\n\n- Supports atomically downgrading a write lock into a read lock.\n- Task-fair locking policy instead of an unspecified platform default.\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `RwLock` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the rwlock is fair on average.\n- Optionally allows making the rwlock fair by calling\n  `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read();\n    let r2 = lock.read();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here\n```","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLock","id":"20:510:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":{"restricted":{"parent":"0:106:1575","path":"::once"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:471:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11365:3237":{"id":"2:11365:3237","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48019:174","self::pattern":"2:11021:4388","prim@char":"1:12350:2672"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:435":{"id":"0:435","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,67],"end":[49,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::ReentrantMutex","name":"ReentrantMutex","id":"0:363:1606","glob":false}},"0:205:2286":{"id":"0:205:2286","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_mutex.rs","begin":[113,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2645:214-0:127:1598":{"id":"a:2:2645:214-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:417":{"id":"0:417","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,45],"end":[42,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::FairMutex","name":"FairMutex","id":"0:83:1593","glob":false}},"0:100:162":{"id":"0:100:162","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[101,0],"end":[101,67]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MutexGuard","id":"20:91:162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:162:1586":{"id":"0:162:1586","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_fair_mutex.rs","begin":[17,4],"end":[17,69]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutex","id":"20:20:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[36,0],"end":[58,1]},"visibility":{"restricted":{"parent":"0:106:1575","path":"::once"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:2192","0:126:2195"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:392:1611":{"id":"0:392:1611","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[126,0],"end":[126,98]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLockUpgradableReadGuard","id":"20:710:1611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"a:2:2645:214-0:31:1590":{"id":"a:2:2645:214-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":{"restricted":{"parent":"0:106:1575","path":"::once"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:479:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:85:1592":{"id":"0:85:1592","crate_id":0,"name":"const_fair_mutex","span":{"filename":"src/fair_mutex.rs","begin":[83,0],"end":[85,1]},"visibility":"public","docs":"Creates a new fair mutex in an unlocked state ready for use.\n\nThis allows creating a fair mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"FairMutex","id":"0:83:1593","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11375:57397":{"id":"2:11375:57397","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11021:4388","prim@char":"1:12350:2672","str::split":"2:11369:54844","`DoubleEndedIterator`":"2:7061:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50003:4160","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2499:3231":{"id":"2:2499:3231","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2473:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:273:2363":{"id":"0:273:2363","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[148,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":{"restricted":{"parent":"0:3:1571","path":"::condvar"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2655:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:265:1586":{"id":"0:265:1586","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_rwlock.rs","begin":[64,4],"end":[64,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"20:8:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11408:61218":{"id":"2:11408:61218","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:126:2195":{"id":"0:126:2195","crate_id":0,"name":"done","span":{"filename":"src/once.rs","begin":[52,4],"end":[57,5]},"visibility":"public","docs":"Returns whether the associated `Once` has successfully executed a\nclosure.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5096:61862":{"id":"5:5096:61862","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7717:2998-0:460:1599":{"id":"a:2:7717:2998-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2998","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11393:61214":{"id":"2:11393:61214","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11341:61209":{"id":"2:11341:61209","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2974:2855","`str`":"1:12356:2677","str::slice_unchecked":"2:11340:61208"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:297:2390":{"id":"0:297:2390","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[346,4],"end":[364,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:479:650":{"id":"0:479:650","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8536:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8525:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2500-0:127:1598":{"id":"b:2:2500-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:264:2091":{"id":"0:264:2091","crate_id":0,"name":"INIT","span":{"filename":"src/raw_rwlock.rs","begin":[60,4],"end":[62,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"b:5:671-0:460:1599":{"id":"b:5:671-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:3295","5:674:3296","5:675:3297"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:461:2182":{"id":"0:461:2182","crate_id":0,"name":"New","span":{"filename":"src/once.rs","begin":[24,4],"end":[24,7]},"visibility":"default","docs":"A closure has not been executed yet","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:278:2369":{"id":"0:278:2369","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[184,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5110:55512":{"id":"5:5110:55512","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11441:55515"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:1600":{"id":"0:157:1600","crate_id":0,"name":"RawFairMutex","span":{"filename":"src/raw_fair_mutex.rs","begin":[12,0],"end":[12,34]},"visibility":"public","docs":"Raw fair mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2645:214-0:157:1600","a:2:7717:2998-0:157:1600","a:2:7718:2997-0:157:1600","a:2:2709:2899-0:157:1600","a:2:2659:222-0:157:1600","b:2:2511-0:157:1600","b:2:2496-0:157:1600","b:2:2506-0:157:1600","b:2:3304-0:157:1600","b:2:2500-0:157:1600","b:2:2221-0:157:1600","b:2:2224-0:157:1600","0:160","0:167","0:170"]}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::const_mutex","name":"const_mutex","id":"0:98:1596","glob":false}},"a:2:2709:2899-0:31:1590":{"id":"a:2:2709:2899-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":{"restricted":{"parent":"0:3:1571","path":"::condvar"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2273:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3304-0:460:1599":{"id":"b:2:3304-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11434:61227":{"id":"2:11434:61227","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11021:4388","prim@char":"1:12350:2672"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:31:1590":{"id":"b:2:2506-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:127","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3306:1432":{"id":"2:3306:1432","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46490:3888","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:61210":{"id":"2:11350:61210","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50249:4587","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:31:1590":{"id":"b:2:2224-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:2464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:380:212":{"id":"0:380:212","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[100,0],"end":[100,78]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLockReadGuard","id":"20:595:212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11349:5081":{"id":"2:11349:5081","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50239:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:60087":{"id":"2:11351:60087","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50277:4590","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2221-0:446:1591":{"id":"b:2:2221-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7718:2997-0:446:1591":{"id":"a:2:7718:2997-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:284:2375":{"id":"0:284:2375","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/raw_rwlock.rs","begin":[210,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2374","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:213:2289":{"id":"0:213:2289","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_mutex.rs","begin":[163,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50755:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:57404":{"id":"2:11355:57404","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11021:4388","prim@char":"1:12350:2672"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11325:61206":{"id":"2:11325:61206","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11323:61205"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:446:1591":{"id":"a:2:2659:222-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":{"restricted":{"parent":"0:106:1575","path":"::once"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2656:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:261:1602":{"id":"0:261:1602","crate_id":0,"name":"RawRwLock","span":{"filename":"src/raw_rwlock.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Raw reader-writer lock type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2645:214-0:261:1602","a:2:7717:2998-0:261:1602","a:2:7718:2997-0:261:1602","a:2:2709:2899-0:261:1602","a:2:2659:222-0:261:1602","b:2:2511-0:261:1602","b:2:2496-0:261:1602","b:2:2506-0:261:1602","b:2:3304-0:261:1602","b:2:2500-0:261:1602","b:2:2221-0:261:1602","b:2:2224-0:261:1602","0:263","0:274","0:279","0:281","0:288","0:291","0:294","0:300","0:303","0:306"]}},"2:11445:4174":{"id":"2:11445:4174","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4454:4174"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50293:4175","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:31:1590":{"id":"b:2:2511-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:127","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11352:57403":{"id":"2:11352:57403","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11021:4388","prim@char":"1:12350:2672"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2221-0:357:1605":{"id":"b:2:2221-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:173:2288":{"id":"0:173:2288","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_fair_mutex.rs","begin":[57,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:30:2287","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:127:1598":{"id":"b:2:2224-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:2464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:450:650":{"id":"0:450:650","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8536:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8525:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:87:1594":{"id":"0:87:1594","crate_id":0,"name":"FairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[92,0],"end":[92,75]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MutexGuard","id":"20:91:162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11347:60089":{"id":"2:11347:60089","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11348:60091"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50259:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:197:1601":{"id":"b:2:2511-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:127","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:272:2286":{"id":"0:272:2286","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_rwlock.rs","begin":[142,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2223:2462":{"id":"2:2223:2462","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[322,0],"end":[395,1]},"visibility":{"restricted":{"parent":"0:224:1578","path":"::raw_rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgrade","id":"20:493:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:2385","0:296:2388","0:297:2390","0:298:2392","0:299:2394"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7717:2998-0:127:1598":{"id":"a:2:7717:2998-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2998","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:370:1604":{"id":"0:370:1604","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[68,0],"end":[69,70]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedReentrantMutexGuard","id":"20:398:1604","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:459:409":{"id":"0:459:409","crate_id":0,"name":"clone","span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2500-0:446:1591":{"id":"b:2:2500-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2506-0:357:1605":{"id":"b:2:2506-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:127","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11402:61216":{"id":"2:11402:61216","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7061:120","prim@char":"1:12350:2672","self::pattern":"2:11021:4388","str::rmatch_indices":"2:11405:61217"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50135:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:446:1591":{"id":"b:2:3304-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2506-0:460:1599":{"id":"b:2:2506-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:127","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:34:908":{"id":"0:34:908","crate_id":0,"name":"new","span":{"filename":"src/condvar.rs","begin":[98,4],"end":[102,5]},"visibility":"public","docs":"Creates a new condition variable which is ready to be waited on and\nnotified.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:307:2405":{"id":"0:307:2405","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/raw_rwlock.rs","begin":[454,4],"end":[464,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9597:1721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:2997-0:31:1590":{"id":"a:2:7718:2997-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7717:2998-0:31:1590":{"id":"a:2:7717:2998-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2998","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[325,0],"end":[331,1]},"visibility":{"restricted":{"parent":"0:106:1575","path":"::once"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:133:380":{"id":"0:133:380","crate_id":0,"name":"call_once","span":{"filename":"src/once.rs","begin":[157,4],"end":[167,5]},"visibility":"public","docs":"Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.\n\nThis method will block the calling thread if another initialization\nroutine is currently running.\n\nWhen this function returns, it is guaranteed that some initialization\nhas run and completed (it may not be the closure specified). It is also\nguaranteed that any memory writes performed by the executed closure can\nbe reliably observed by other threads at this point (there is a\nhappens-before relation between the closure and code executing after the\nreturn).\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\n// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g. write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\nfn get_cached_val() -> usize {\n    unsafe {\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\nfn expensive_computation() -> usize {\n    // ...\n# 2\n}\n```\n\n# Panics\n\nThe closure `f` will only be executed once if this is called\nconcurrently amongst many threads. If that closure panics, however, then\nit will *poison* this `Once` instance, causing all future invocations of\n`call_once` to also panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:2242","args":{"parenthesized":{"inputs":[],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":{"restricted":{"parent":"0:3:1571","path":"::condvar"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11414:61221":{"id":"2:11414:61221","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11328:54259":{"id":"2:11328:54259","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10589:4677"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::raw_rwlock::RawRwLock","name":"RawRwLock","id":"0:261:1602","glob":false}},"b:2:2511-0:446:1591":{"id":"b:2:2511-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:127","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,9],"end":[21,13]},"visibility":{"restricted":{"parent":"0:106:1575","path":"::once"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2657:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:267:2351":{"id":"0:267:2351","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[80,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:282:121":{"id":"0:282:121","crate_id":0,"name":"Duration","span":{"filename":"src/raw_rwlock.rs","begin":[206,4],"end":[206,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50755:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:166:2286":{"id":"0:166:2286","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_fair_mutex.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:197:1601":{"id":"b:2:2224-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:2464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:211:1721":{"id":"0:211:1721","crate_id":0,"name":"Instant","span":{"filename":"src/raw_mutex.rs","begin":[143,4],"end":[143,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9597:1721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:90:1595":{"id":"0:90:1595","crate_id":0,"name":"MappedFairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[101,0],"end":[101,87]},"visibility":"public","docs":"An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedMutexGuard","id":"20:151:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:171:121":{"id":"0:171:121","crate_id":0,"name":"Duration","span":{"filename":"src/raw_fair_mutex.rs","begin":[53,4],"end":[53,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[205,0],"end":[268,1]},"visibility":{"restricted":{"parent":"0:224:1578","path":"::raw_rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockTimed","id":"20:480:2374","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:121","0:283:1721","0:284:2375","0:285:2376","0:286:2377","0:287:2378"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:309:2407":{"id":"0:309:2407","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/raw_rwlock.rs","begin":[480,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9597:1721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:43:1825":{"id":"0:43:1825","crate_id":0,"name":"wait","span":{"filename":"src/condvar.rs","begin":[255,4],"end":[257,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2514:127":{"id":"2:2514:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39262:4021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:2709:2899-0:157:1600":{"id":"a:2:2709:2899-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2496-0:157:1600":{"id":"b:2:2496-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:3231"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2511-0:261:1602":{"id":"b:2:2511-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:127","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,53],"end":[43,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::Mutex","name":"Mutex","id":"0:96:161","glob":false}},"0:287:2378":{"id":"0:287:2378","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/raw_rwlock.rs","begin":[253,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9597:1721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11329:61207":{"id":"2:11329:61207","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5091":{"id":"5:5091","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5002:1344","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5092:61861","5:5093:3313","5:5096:61862","5:5099:61863","5:5107:61864","5:5108:61865","5:5109:3966","5:5110:55512","5:5111:55513"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2502:668":{"id":"2:2502:668","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:386:1609":{"id":"0:386:1609","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[113,0],"end":[113,90]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::MappedRwLockReadGuard","id":"20:771:1609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:414":{"id":"0:414","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,33],"end":[41,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::condvar::WaitTimeoutResult","name":"WaitTimeoutResult","id":"0:446:1591","glob":false}},"b:2:2500-0:460:1599":{"id":"b:2:2500-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11425:57406":{"id":"2:11425:57406","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11021:4388","prim@char":"1:12350:2672"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2226:2464":{"id":"2:2226:2464","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:302:2398":{"id":"0:302:2398","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[420,4],"end":[424,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:157:1600":{"id":"a:2:2659:222-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2496-0:357:1605":{"id":"b:2:2496-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:3231"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:45:1843":{"id":"0:45:1843","crate_id":0,"name":"wait_until","span":{"filename":"src/condvar.rs","begin":[283,4],"end":[292,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9597:1721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:271:2360":{"id":"0:271:2360","crate_id":0,"name":"unlock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[129,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:4528":{"id":"2:11437:4528","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:10982:2957","FromStr::Err":"2:10983:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10982:2957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10982:2957","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:157:1600":{"id":"b:2:2506-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:127","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2500-0:261:1602":{"id":"b:2:2500-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:276:2366":{"id":"0:276:2366","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/raw_rwlock.rs","begin":[162,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1809":{"id":"0:39:1809","crate_id":0,"name":"notify_all","span":{"filename":"src/condvar.rs","begin":[187,4],"end":[195,5]},"visibility":"public","docs":"Wakes up all blocked threads on this condvar.\n\nReturns the number of threads woken up.\n\nThis method will ensure that any current waiters on the condition\nvariable are awoken. Calls to `notify_all()` are not buffered in any\nway.\n\nTo wake up only one thread, see `notify_one()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:675:3297":{"id":"5:675:3297","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:261:1602":{"id":"b:2:3304-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11361:3276":{"id":"2:11361:3276","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:11021:4388","prim@char":"1:12350:2672","`None`":"2:48019:174"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:283:1721":{"id":"0:283:1721","crate_id":0,"name":"Instant","span":{"filename":"src/raw_rwlock.rs","begin":[207,4],"end":[207,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9597:1721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11338:57364":{"id":"2:11338:57364","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1590":{"id":"0:31:1590","crate_id":0,"name":"Condvar","span":{"filename":"src/condvar.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"A Condition Variable\n\nCondition variables represent the ability to block a thread such that it\nconsumes no CPU time while waiting for an event to occur. Condition\nvariables are typically associated with a boolean predicate (a condition)\nand a mutex. The predicate is always verified inside of the mutex before\ndetermining that thread must block.\n\nNote that this module places one additional restriction over the system\ncondition variables: each condvar can be used with only one mutex at a\ntime. Any attempt to use multiple mutexes on the same condition variable\nsimultaneously will result in a runtime panic. However it is possible to\nswitch to a different mutex if there are no threads currently waiting on\nthe condition variable.\n\n# Differences from the standard library `Condvar`\n\n- No spurious wakeups: A wait will only return a non-timeout result if it\n  was woken up by `notify_one` or `notify_all`.\n- `Condvar::notify_all` will only wake up a single thread, the rest are\n  requeued to wait for the `Mutex` to be unlocked by the thread that was\n  woken up.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `Condvar` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n\n# Examples\n\n```\nuse parking_lot::{Mutex, Condvar};\nuse std::sync::Arc;\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\n// Inside of our lock, spawn a new thread, and then wait for it to start\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock();\n    *started = true;\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock();\nif !*started {\n    cvar.wait(&mut started);\n}\n// Note that we used an if instead of a while loop above. This is only\n// possible because parking_lot's Condvar will never spuriously wake up.\n// This means that wait() will only return after notify_one or notify_all is\n// called.\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:33","a:2:2645:214-0:31:1590","a:2:7717:2998-0:31:1590","a:2:7718:2997-0:31:1590","a:2:2709:2899-0:31:1590","a:2:2659:222-0:31:1590","b:2:2511-0:31:1590","b:2:2496-0:31:1590","b:2:2506-0:31:1590","b:2:3304-0:31:1590","b:2:2500-0:31:1590","b:2:2221-0:31:1590","b:2:2224-0:31:1590","0:65","0:67"]}},"2:2515:1418":{"id":"2:2515:1418","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,27],"end":[44,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::once::OnceState","name":"OnceState","id":"0:460:1599","glob":false}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":{"restricted":{"parent":"0:3:1571","path":"::condvar"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2268:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:453:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:298:2392":{"id":"0:298:2392","crate_id":0,"name":"upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[367,4],"end":[376,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:424":{"id":"0:424","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,60],"end":[43,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::mutex::MutexGuard","name":"MutexGuard","id":"0:100:162","glob":false}},"5:673:3295":{"id":"5:673:3295","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,73],"end":[53,88]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::RwLockReadGuard","name":"RwLockReadGuard","id":"0:380:212","glob":false}},"0:164:2113":{"id":"0:164:2113","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:2997-0:261:1602":{"id":"a:2:7718:2997-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:266:2347":{"id":"0:266:2347","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[67,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[270,0],"end":[292,1]},"visibility":{"restricted":{"parent":"0:224:1578","path":"::raw_rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursive","id":"20:487:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:2380","0:290:2381"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:199":{"id":"0:199","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[58,0],"end":[117,1]},"visibility":{"restricted":{"parent":"0:175:1577","path":"::raw_mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:200:2091","0:201:1586","0:202:1857","0:203:2113","0:204:1850","0:205:2286"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11431:61226":{"id":"2:11431:61226","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12350:2672","self::pattern":"2:11021:4388"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:268:2352":{"id":"0:268:2352","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2221-0:197:1601":{"id":"b:2:2221-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":{"restricted":{"parent":"0:106:1575","path":"::once"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2655:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:66:59":{"id":"0:66:59","crate_id":0,"name":"default","span":{"filename":"src/condvar.rs","begin":[512,4],"end":[514,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:2899-0:460:1599":{"id":"a:2:2709:2899-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,31],"end":[22,35]},"visibility":{"restricted":{"parent":"0:3:1571","path":"::condvar"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2657:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,21],"end":[44,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::once::Once","name":"Once","id":"0:127:1598","glob":false}},"a:2:7717:2998-0:261:1602":{"id":"a:2:7717:2998-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2998","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:299:2394":{"id":"0:299:2394","crate_id":0,"name":"try_upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[379,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1879":{"id":"0:59:1879","crate_id":0,"name":"wait_while_until","span":{"filename":"src/condvar.rs","begin":[461,4],"end":[472,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant. If the provided condition evaluates to\n`false`, then the thread is no longer blocked and the operation is\ncompleted. If the condition evaluates to `true`, then the thread is\nblocked again and waits for another notification before repeating\nthis process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["condition",{"kind":"generic","inner":"F"}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9597:1721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2918:1868","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:383:213":{"id":"0:383:213","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[104,0],"end":[104,80]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::RwLockWriteGuard","id":"20:645:213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,18],"end":[53,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::MappedRwLockReadGuard","name":"MappedRwLockReadGuard","id":"0:386:1609","glob":false}},"a:2:7717:2998-0:197:1601":{"id":"a:2:7717:2998-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2998","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:286:2377":{"id":"0:286:2377","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/raw_rwlock.rs","begin":[236,4],"end":[250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50755:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11319":{"id":"2:11319","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10584:1344","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11320:782","2:11321:1994","2:11322:61204","2:11323:61205","2:11325:61206","2:11328:54259","2:11329:61207","2:11330:306","2:11331:57365","2:11332:2427","2:11334:2122","2:11336:57363","2:11338:57364","2:11340:61208","2:11341:61209","2:11342:57386","2:11343:57387","2:11344:4610","2:11345:4419","2:11346:4724","2:11347:60089","2:11348:60091","2:11349:5081","2:11350:61210","2:11351:60087","2:11352:57403","2:11355:57404","2:11358:57405","2:11361:3276","2:11365:3237","2:11369:54844","2:11372:57395","2:11375:57397","2:11378:61211","2:11381:61212","2:11384:57399","2:11387:57401","2:11390:61213","2:11393:61214","2:11396:2752","2:11399:61215","2:11402:61216","2:11405:61217","2:11408:61218","2:11410:61219","2:11412:61220","2:11414:61221","2:11415:61222","2:11416:61223","2:11419:61224","2:11422:54340","2:11425:57406","2:11428:61225","2:11431:61226","2:11434:61227","2:11437:4528","2:11439:4718","2:11440:55514","2:11441:55515","2:11442:55516","2:11443:61228","2:11445:4174","2:11446:61229"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:285:2376":{"id":"0:285:2376","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/raw_rwlock.rs","begin":[223,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2374","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:310:2408":{"id":"0:310:2408","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/raw_rwlock.rs","begin":[493,4],"end":[503,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50755:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:446:1591":{"id":"b:2:2496-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:3231"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11342:57386":{"id":"2:11342:57386","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11343:57387"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[40,0],"end":[50,1]},"visibility":{"restricted":{"parent":"0:154:1576","path":"::raw_fair_mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2283","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:2285","0:169:1943"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2496-0:127:1598":{"id":"b:2:2496-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:3231"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:210:121":{"id":"0:210:121","crate_id":0,"name":"Duration","span":{"filename":"src/raw_mutex.rs","begin":[142,4],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50755:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":{"restricted":{"parent":"0:3:1571","path":"::condvar"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2656:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:207:2285":{"id":"0:207:2285","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_mutex.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:261:1602":{"id":"b:2:2224-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:2464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:438":{"id":"0:438","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::rwlock::const_rwlock","name":"const_rwlock","id":"0:378:1608","glob":false}},"b:2:2511-0:127:1598":{"id":"b:2:2511-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:127","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2709:2899-0:261:1602":{"id":"a:2:2709:2899-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11443:61228":{"id":"2:11443:61228","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4453:61228"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50284:4591","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:446:1591":{"id":"b:2:2506-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:127","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:476":{"id":"0:476","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":{"restricted":{"parent":"0:106:1575","path":"::once"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2268:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:477:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[517,0],"end":[521,1]},"visibility":{"restricted":{"parent":"0:3:1571","path":"::condvar"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2500-0:197:1601":{"id":"b:2:2500-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11336:57363":{"id":"2:11336:57363","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5109:3966":{"id":"5:5109:3966","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11321:1994":{"id":"2:11321:1994","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2509:127":{"id":"2:2509:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:160":{"id":"0:160","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[14,0],"end":[38,1]},"visibility":{"restricted":{"parent":"0:154:1576","path":"::raw_fair_mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:161:2091","0:162:1586","0:163:1857","0:164:2113","0:165:1850","0:166:2286"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[25,0],"end":[31,1]},"visibility":{"restricted":{"parent":"0:3:1571","path":"::condvar"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:1725"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2645:214-0:261:1602":{"id":"a:2:2645:214-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[85,0],"end":[316,1]},"visibility":{"restricted":{"parent":"0:106:1575","path":"::once"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:908","0:132:1331","0:133:380","0:136:2253"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7717:2998-0:446:1591":{"id":"a:2:7717:2998-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2998","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11378:61211":{"id":"2:11378:61211","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:12350:2672","self::pattern":"2:11021:4388","`DoubleEndedIterator`":"2:7061:120","str::split":"2:11369:54844","str::rsplit_terminator":"2:11381:61212"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50035:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[15,0],"end":[28,1]},"visibility":{"restricted":{"parent":"0:351:1579","path":"::remutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"GetThreadId","id":"20:227:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:360:2091","0:361:2441"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:413":{"id":"0:413","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,24],"end":[41,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::condvar::Condvar","name":"Condvar","id":"0:31:1590","glob":false}},"0:275:2365":{"id":"0:275:2365","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/raw_rwlock.rs","begin":[156,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:4724":{"id":"2:11346:4724","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49971:3940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7717:2998-0:157:1600":{"id":"a:2:7717:2998-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2998","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2496-0:31:1590":{"id":"b:2:2496-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:3231"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11343:57387":{"id":"2:11343:57387","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11342:57386"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:60091":{"id":"2:11348:60091","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11347:60089"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50268:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5092:61861":{"id":"5:5092:61861","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2902","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:4139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2902","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:4139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:35:1787":{"id":"0:35:1787","crate_id":0,"name":"notify_one","span":{"filename":"src/condvar.rs","begin":[128,4],"end":[136,5]},"visibility":"public","docs":"Wakes up one blocked thread on this condvar.\n\nReturns whether a thread was woken up.\n\nIf there is a blocked thread on this condition variable, then it will\nbe woken up from its call to `wait` or `wait_timeout`. Calls to\n`notify_one` are not buffered in any way.\n\nTo wake up all threads, see `notify_all()`.\n\n# Examples\n\n```\nuse parking_lot::Condvar;\n\nlet condvar = Condvar::new();\n\n// do something with condvar, share it with other threads\n\nif !condvar.notify_one() {\n    println!(\"Nobody was listening for this.\");\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:357:1605":{"id":"b:2:3304-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11330:306":{"id":"2:11330:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11331:57365","`u8`":"1:12367:2686"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[94,0],"end":[508,1]},"visibility":{"restricted":{"parent":"0:3:1571","path":"::condvar"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:34:908","0:35:1787","0:39:1809","0:43:1825","0:45:1843","0:51:1862","0:56:1873","0:59:1879","0:62:1884"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3304-0:157:1600":{"id":"b:2:3304-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2224-0:460:1599":{"id":"b:2:2224-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:2464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:361:2441":{"id":"0:361:2441","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[18,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:21789:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5107:61864":{"id":"5:5107:61864","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68:650":{"id":"0:68:650","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[518,4],"end":[520,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8536:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8525:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:280:2372":{"id":"0:280:2372","crate_id":0,"name":"downgrade","span":{"filename":"src/raw_rwlock.rs","begin":[193,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:83:1593":{"id":"0:83:1593","crate_id":0,"name":"FairMutex","span":{"filename":"src/fair_mutex.rs","begin":[78,0],"end":[78,57]},"visibility":"public","docs":"A mutual exclusive primitive that is always fair, useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\nThe regular mutex provided by `parking_lot` uses eventual fairness\n(after some time it will default to the fair algorithm), but eventual\nfairness does not provide the same guarantees an always fair method would.\nFair mutexes are generally slower, but sometimes needed.\n\nIn a fair mutex the waiters form a queue, and the lock is always granted to\nthe next requester in the queue, in first-in first-out order. This ensures\nthat one thread cannot starve others by quickly re-acquiring the lock after\nreleasing it.\n\nA fair mutex may not be interesting if threads have different priorities (this is known as\npriority inversion).\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `FairMutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n\n# Examples\n\n```\nuse parking_lot::FairMutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(FairMutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::Mutex","id":"20:35:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11345:4419":{"id":"2:11345:4419","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12350:2672"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49961:4574","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2500-0:357:1605":{"id":"b:2:2500-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11322:61204":{"id":"2:11322:61204","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:295:2385":{"id":"0:295:2385","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[324,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:61219":{"id":"2:11410:61219","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:357:1605":{"id":"0:357:1605","crate_id":0,"name":"RawThreadId","span":{"filename":"src/remutex.rs","begin":[13,0],"end":[13,23]},"visibility":"public","docs":"Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:2645:214-0:357:1605","a:2:7717:2998-0:357:1605","a:2:7718:2997-0:357:1605","a:2:2709:2899-0:357:1605","a:2:2659:222-0:357:1605","b:2:2511-0:357:1605","b:2:2496-0:357:1605","b:2:2506-0:357:1605","b:2:3304-0:357:1605","b:2:2500-0:357:1605","b:2:2221-0:357:1605","b:2:2224-0:357:1605","0:359"]}},"b:2:2224-0:357:1605":{"id":"b:2:2224-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:2464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":{"restricted":{"parent":"0:106:1575","path":"::once"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2273:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:208:1943":{"id":"0:208:1943","crate_id":0,"name":"bump","span":{"filename":"src/raw_mutex.rs","begin":[134,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:261:1602":{"id":"a:2:2659:222-0:261:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2221-0:31:1590":{"id":"b:2:2221-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:674:3296":{"id":"5:674:3296","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11334:2122":{"id":"2:11334:2122","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48019:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277:2367":{"id":"0:277:2367","crate_id":0,"name":"bump_shared","span":{"filename":"src/raw_rwlock.rs","begin":[175,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:153:650":{"id":"0:153:650","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[326,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8536:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8525:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11372:57395":{"id":"2:11372:57395","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12350:2672","self::pattern":"2:11021:4388"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10845:4166","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:136:2253":{"id":"0:136:2253","crate_id":0,"name":"call_once_force","span":{"filename":"src/once.rs","begin":[179,4],"end":[191,5]},"visibility":"public","docs":"Performs the same function as `call_once` except ignores poisoning.\n\nIf this `Once` has been poisoned (some initialization panicked) then\nthis function will continue to attempt to call initialization functions\nuntil one of them doesn't panic.\n\nThe closure `f` is yielded a structure which can be used to query the\nstate of this `Once` (whether initialization has previously panicked or\nnot).","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:2242","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:436":{"id":"0:436","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::ReentrantMutexGuard","name":"ReentrantMutexGuard","id":"0:367:1607","glob":false}},"0:127:1598":{"id":"0:127:1598","crate_id":0,"name":"Once","span":{"filename":"src/once.rs","begin":[83,0],"end":[83,26]},"visibility":"public","docs":"A synchronization primitive which can be used to run a one-time\ninitialization. Useful for one-time initialization for globals, FFI or\nrelated functionality.\n\n# Differences from the standard library `Once`\n\n- Only requires 1 byte of space, instead of 1 word.\n- Not required to be `'static`.\n- Relaxed memory barriers in the fast path, which can significantly improve\n  performance on some architectures.\n- Efficient handling of micro-contention using adaptive spinning.\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic START: Once = Once::new();\n\nSTART.call_once(|| {\n    // run initialization here\n});\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:130","a:2:2645:214-0:127:1598","a:2:7717:2998-0:127:1598","a:2:7718:2997-0:127:1598","a:2:2709:2899-0:127:1598","a:2:2659:222-0:127:1598","b:2:2511-0:127:1598","b:2:2496-0:127:1598","b:2:2506-0:127:1598","b:2:3304-0:127:1598","b:2:2500-0:127:1598","b:2:2221-0:127:1598","b:2:2224-0:127:1598","0:150","0:152"]}},"0:202:1857":{"id":"0:202:1857","crate_id":0,"name":"lock","span":{"filename":"src/raw_mutex.rs","begin":[66,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[141,0],"end":[178,1]},"visibility":{"restricted":{"parent":"0:175:1577","path":"::raw_mutex"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:210:121","0:211:1721","0:212:2288","0:213:2289"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11369:54844":{"id":"2:11369:54844","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:12350:2672","self::pattern":"2:11021:4388","str::rsplit":"2:11375:57397","str::split_whitespace":"2:11347:60089","`DoubleEndedIterator`":"2:7061:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49985:3942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:200:2091":{"id":"0:200:2091","crate_id":0,"name":"INIT","span":{"filename":"src/raw_mutex.rs","begin":[59,4],"end":[61,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:465:2186":{"id":"0:465:2186","crate_id":0,"name":"InProgress","span":{"filename":"src/once.rs","begin":[30,4],"end":[30,14]},"visibility":"default","docs":"A thread is currently executing a closure.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:11428:61225":{"id":"2:11428:61225","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12350:2672","self::pattern":"2:11021:4388"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:432":{"id":"0:432","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,4],"end":[49,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::remutex::const_reentrant_mutex","name":"const_reentrant_mutex","id":"0:365:1603","glob":false}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[427,0],"end":[450,1]},"visibility":{"restricted":{"parent":"0:224:1578","path":"::raw_rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeDowngrade","id":"20:502:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:304:2401","0:305:2402"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11446:61229":{"id":"2:11446:61229","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4451:61229"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50302:4592","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11415:61222":{"id":"2:11415:61222","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:365:1603":{"id":"0:365:1603","crate_id":0,"name":"const_reentrant_mutex","span":{"filename":"src/remutex.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.\n\nThis allows creating a reentrant mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"ReentrantMutex","id":"0:363:1606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2510:1419":{"id":"2:2510:1419","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:127:1598":{"id":"b:2:3304-0:127:1598","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:172:1721":{"id":"0:172:1721","crate_id":0,"name":"Instant","span":{"filename":"src/raw_fair_mutex.rs","begin":[54,4],"end":[54,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[59,0],"end":[152,1]},"visibility":{"restricted":{"parent":"0:224:1578","path":"::raw_rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked","is_locked_exclusive"],"trait":{"name":"RawRwLock","id":"20:462:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:2091","0:265:1586","0:266:2347","0:267:2351","0:268:2352","0:269:2355","0:270:2358","0:271:2360","0:272:2286","0:273:2363"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11422:54340":{"id":"2:11422:54340","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12350:2672","self::pattern":"2:11021:4388"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2645:214-0:197:1601":{"id":"a:2:2645:214-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:169:1943":{"id":"0:169:1943","crate_id":0,"name":"bump","span":{"filename":"src/raw_fair_mutex.rs","begin":[47,4],"end":[49,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:460:1599":{"id":"b:2:2496-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:3231"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,72],"end":[42,92]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fair_mutex::MappedFairMutexGuard","name":"MappedFairMutexGuard","id":"0:90:1595","glob":false}},"0:197:1601":{"id":"0:197:1601","crate_id":0,"name":"RawMutex","span":{"filename":"src/raw_mutex.rs","begin":[32,0],"end":[56,1]},"visibility":"public","docs":"Raw mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2645:214-0:197:1601","a:2:7717:2998-0:197:1601","a:2:7718:2997-0:197:1601","a:2:2709:2899-0:197:1601","a:2:2659:222-0:197:1601","b:2:2511-0:197:1601","b:2:2496-0:197:1601","b:2:2506-0:197:1601","b:2:3304-0:197:1601","b:2:2500-0:197:1601","b:2:2221-0:197:1601","b:2:2224-0:197:1601","0:199","0:206","0:209"]}},"2:11412:61220":{"id":"2:11412:61220","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:2997-0:157:1600":{"id":"a:2:7718:2997-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2645:214-0:157:1600":{"id":"a:2:2645:214-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11384:57399":{"id":"2:11384:57399","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11021:4388","prim@char":"1:12350:2672","str::rsplitn":"2:11387:57401"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50089:4164","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:301:2397":{"id":"0:301:2397","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/raw_rwlock.rs","begin":[399,4],"end":[417,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11399:61215":{"id":"2:11399:61215","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"2:11396:2752","self::pattern":"2:11021:4388","prim@char":"1:12350:2672","`DoubleEndedIterator`":"2:7061:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50207:4586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:212:2288":{"id":"0:212:2288","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_mutex.rs","begin":[146,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Instant","id":"1:9597:1721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:471:409":{"id":"0:471:409","crate_id":0,"name":"clone","span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:1873":{"id":"0:56:1873","crate_id":0,"name":"wait_while","span":{"filename":"src/condvar.rs","begin":[425,4],"end":[431,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification. If the provided condition evaluates to `false`, then the\nthread is no longer blocked and the operation is completed. If the\ncondition evaluates to `true`, then the thread is blocked again and\nwaits for another notification before repeating this process.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mutex_guard",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MutexGuard","id":"0:100:162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],["condition",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2918:1868","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11387:57401":{"id":"2:11387:57401","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12350:2672","str::splitn":"2:11384:57399","self::pattern":"2:11021:4388"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50107:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:201:1586":{"id":"0:201:1586","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_mutex.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"GuardNoSend","id":"20:8:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:7718:2997-0:357:1605":{"id":"a:2:7718:2997-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:463:2184":{"id":"0:463:2184","crate_id":0,"name":"Poisoned","span":{"filename":"src/once.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":"A closure was executed but panicked.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:293:2384":{"id":"0:293:2384","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/raw_rwlock.rs","begin":[309,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"qualified_path","inner":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"20:480:2374","args":null}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:197:1601":{"id":"b:2:3304-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:131:908":{"id":"0:131:908","crate_id":0,"name":"new","span":{"filename":"src/once.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a new `Once` value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Once","id":"0:127:1598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[397,0],"end":[425,1]},"visibility":{"restricted":{"parent":"0:224:1578","path":"::raw_rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_upgradable"],"trait":{"name":"RawRwLockUpgradeFair","id":"20:499:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:301:2397","0:302:2398"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11419:61224":{"id":"2:11419:61224","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11021:4388","prim@char":"1:12350:2672"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:165:1850":{"id":"0:165:1850","crate_id":0,"name":"unlock","span":{"filename":"src/raw_fair_mutex.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:460:1599":{"id":"0:460:1599","crate_id":0,"name":"OnceState","span":{"filename":"src/once.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"Current state of a `Once`.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:461:2182","0:463:2184","0:465:2186","0:467:2188"],"impls":["0:124","a:2:2645:214-0:460:1599","a:2:7717:2998-0:460:1599","a:2:7718:2997-0:460:1599","a:2:2709:2899-0:460:1599","a:2:2659:222-0:460:1599","b:2:2511-0:460:1599","b:2:2496-0:460:1599","b:2:2506-0:460:1599","b:2:3304-0:460:1599","b:2:2500-0:460:1599","b:2:2221-0:460:1599","b:2:2224-0:460:1599","b:5:671-0:460:1599","0:469","0:470","0:472","0:473","0:475","0:476","0:478"]}},"5:5108:61865":{"id":"5:5108:61865","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2902","`String`":"5:6978:218"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2902","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:4139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:31:1590":{"id":"b:2:3304-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:308:2406":{"id":"0:308:2406","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/raw_rwlock.rs","begin":[467,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50755:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:453:595":{"id":"0:453:595","crate_id":0,"name":"eq","span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[510,0],"end":[515,1]},"visibility":{"restricted":{"parent":"0:3:1571","path":"::condvar"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2709:2899-0:197:1601":{"id":"a:2:2709:2899-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:296:2388":{"id":"0:296:2388","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[333,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:363:1606":{"id":"0:363:1606","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[41,0],"end":[41,80]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](type.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::ReentrantMutex","id":"20:268:1606","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"a:2:2645:214-0:460:1599":{"id":"a:2:2645:214-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2221-0:460:1599":{"id":"b:2:2221-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11441:55515":{"id":"2:11441:55515","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:360:2091":{"id":"0:360:2091","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[16,4],"end":[16,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"RawThreadId"}},"b:2:2500-0:31:1590":{"id":"b:2:2500-0:31:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Condvar","id":"0:31:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2659:222-0:197:1601":{"id":"a:2:2659:222-0:197:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:367:1607":{"id":"0:367:1607","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[59,0],"end":[59,98]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"lock_api::ReentrantMutexGuard","id":"20:336:1607","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"RawMutex","id":"0:197:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"b:2:2221-0:157:1600":{"id":"b:2:2221-0:157:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawFairMutex","id":"0:157:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[294,0],"end":[320,1]},"visibility":{"restricted":{"parent":"0:224:1578","path":"::raw_rwlock"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursiveTimed","id":"20:490:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawRwLock","id":"0:261:1602","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:292:2383","0:293:2384"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2511-0:460:1599":{"id":"b:2:2511-0:460:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:127","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:477:595":{"id":"0:477:595","crate_id":0,"name":"eq","span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OnceState","id":"0:460:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:2899-0:446:1591":{"id":"a:2:2709:2899-0:446:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"WaitTimeoutResult","id":"0:446:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7717:2998-0:357:1605":{"id":"a:2:7717:2998-0:357:1605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2998","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawThreadId","id":"0:357:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"paths":{"6:545:7840":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:48254:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"25:4573:8229":{"crate_id":25,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:2141:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:3337:3707":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:4740:6842":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4239:8112":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:50293:4175":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"12:861:4118":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:8587:3199":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:531:5664":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12860:6592":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8696:4288":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:4705:767":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4592:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13413:6750":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:2500:5424":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"12:2205:3910":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:581:7860":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:6912:4798":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:1962:5559":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:21954:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:11528:6259":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:9857:5546":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12278:6392":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:2740:5418":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:2725:61031":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:4298:3988":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9844:5622":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:1185:4119":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:7208:8717":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6323:5135":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:51810:4510":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:2976:3904":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:50580:4406":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:50268:4589":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"9:800:8787":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:9892:4251":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10075:6081":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:501:7814":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:11046:4387":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:8200:4089":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:987:4116":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46569:4378":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:5226:6849":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:6288:4778":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:21184:8844":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:12371:2690":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:10973:6139":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"25:4210:8097":{"crate_id":25,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8395:3912":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:1671:1047":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:20402:3864":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:50508:4402":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:2775:2840":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9422:6032":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:3157:2863":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:10553:4068":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:13354:6736":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:9434:4167":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"25:5552:8406":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"12:1003:4120":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"25:4305:8142":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"25:4198:8092":{"crate_id":25,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:47002:5793":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"20:510:211":{"crate_id":20,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"2:8309:4559":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:10283:6095":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:9398:4030":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:7283:57261":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:1823:7361":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:54119:7344":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:1824:2934":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:9548:4164":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:19960:3171":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:6386:4615":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:5175:45824":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12695:6559":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:8596:4076":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"25:6390:8609":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12739:6564":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:8412:3940":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:47540:7207":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:46757:4441":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"12:2190:61952":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:12355:2676":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:2800:2844":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:5974:5205":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:50481:4401":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:10207:6086":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:21342:8847":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:1918:3331":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10854:5558":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11149:6170":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"25:6373:8607":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:54051:7340":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:50708:4603":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:4179:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2918:1868":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:6809:1575":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:524:5386":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:4112:2327":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13039:6633":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:8272:5603":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:620:7188":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:676:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:3393:6818":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"25:4344:8163":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"23:97:5684":{"crate_id":23,"path":["smallvec","SmallVecData"],"kind":"enum"},"1:1111:4121":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"18:614:61970":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:54142:7345":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:574:5888":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:4680:6840":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:53001:4487":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12850:6591":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4551:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"20:473:2364":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"2:51862:4502":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11661:6281":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"12:697:4113":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:1636:7966":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"25:5682:8480":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:12350:2672":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:50365:4390":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:46483:2860":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:5210:6006":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3081:3971":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:7220:8719":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11485:6249":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"25:591:7865":{"crate_id":25,"path":["libc","unix","tms"],"kind":"struct"},"25:4525:8208":{"crate_id":25,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2596:5466":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:49081:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:1376:4109":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:7297:5236":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:4974:5781":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:10796:5595":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:2396:4261":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"12:119:5039":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13214:6679":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13134:6662":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:6654:5137":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:8941:6014":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:5733:8499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"25:1606:7941":{"crate_id":25,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:11741:59568":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:11576:1721":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:11755:5826":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:29712:4652":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:6509:8672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4629:8254":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3226:3963":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:21349:2963":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:46385:197":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1435:4820":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:6402:5812":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:2657:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:48068:3241":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:1601:3707":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:2970:2854":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:2779:2839":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4280:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:11616:33640":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9791:6041":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:52257:4479":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11054:6154":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:9712:6038":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:1473:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"12:1044:5031":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10949:6125":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"25:1684:7996":{"crate_id":25,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:52111:4499":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:20005:60243":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:11092:4395":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:50728:4599":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"20:87:5886":{"crate_id":20,"path":["lock_api","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"10:0:2647":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11174:6175":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:1608:3902":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:5701:4097":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:20026:60241":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4611:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:21657:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:11954:4003":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"12:1518:5044":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:8677:4334":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:9576:4165":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12609:6514":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"9:505:4860":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:5673:4095":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:11190:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11070:6158":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"20:771:1609":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:7535:5134":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"20:35:161":{"crate_id":20,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"12:300:5038":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11300:6202":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11639:6280":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11734:6053":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:2238:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:1532:7892":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:462:1602":{"crate_id":20,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"1:12367:2686":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"12:2080:4121":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"22:211:1717":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkResult"],"kind":"struct"},"17:1931:5508":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"15:193:5054":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:1551:3924":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:7144:5228":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:8585:3198":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:575:7857":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:10185:5800":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:8591:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:47154:4212":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11500:6253":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:49985:3942":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:2900:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:2244:4828":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:9317:5611":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:3891:3924":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:5422:3902":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13327:6724":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:3219:2867":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:21855:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4231:8110":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7615:5145":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:6545:8691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:582:3171":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"25:4538:8212":{"crate_id":25,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8114:4272":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:4135:6825":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:2215:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:1701:8005":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:6554:8694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:9357:4166":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:48204:3707":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"12:387:61948":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:0:2652":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:3472:4815":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7413:5172":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:1067:4823":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"25:6309:8579":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:46922:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:2252:5395":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:12348:2670":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:20854:60183":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:595:1891":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:5856:5203":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"25:4459:8187":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:8779:2987":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:592:7865":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10466:6103":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:46224:2868":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:52018:7281":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:7831:3864":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:5715:5197":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:50899:7276":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11368:6222":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6354:5216":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2510:3950":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:5639:4093":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:5870:201":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:21690:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"20:336:1607":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:153:5119":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:8441:5599":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4329:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:4092:5776":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11559:6266":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"25:5508:8386":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:1580:7922":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"12:1555:5046":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"20:398:1604":{"crate_id":20,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"1:9698:7364":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:5503:5190":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:5894:5786":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:7335:5152":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:1617:3904":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:1550:7903":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"25:4759:8309":{"crate_id":25,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46407:196":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13148:6664":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13114:6656":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11515:6257":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:29534:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:46341:193":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:5684:8480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:48229:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"25:486:7806":{"crate_id":25,"path":["libc","unix","group"],"kind":"struct"},"2:49840:4140":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1608:7941":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:9289:3708":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:4348:6830":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:3254:6817":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"25:4633:8255":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:9350:5614":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4367:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:8526:5577":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:46939:4657":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3140:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:9320:4102":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:2291:5436":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:6879:4126":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:1600:7936":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:4936:4133":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:50755:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"12:320:5037":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:20323:4359":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:12360:2679":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:276:2902":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:5547:4735":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"12:810:4111":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:10734:4577":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:339:160":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:4288:6828":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"25:6522:8679":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"22:252:2330":{"crate_id":22,"path":["parking_lot_core","parking_lot","FilterOp"],"kind":"enum"},"22:192:1715":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkResult"],"kind":"enum"},"20:591:5886":{"crate_id":20,"path":["lock_api","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:2921:2242":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10374:5573":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:1886:7365":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:2245:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:21236:4530":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:9118:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:1518:7887":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:507:7816":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"12:2069:4120":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"25:7264:8731":{"crate_id":25,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:50189:4585":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:10503:57266":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:8525:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:3343:3969":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12060:6354":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:49765:4149":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:10182:6084":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:6006:2886":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12103:6360":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"25:4265:8124":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9382:6030":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:53967:4473":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:842:4842":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3228:3964":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:7287:5235":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:12374:2693":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:8822:61961":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:10221:6090":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8847:4050":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4575:8229":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2622:5426":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8454:4070":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:6814:3242":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13557:6789":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:51963:4482":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:7215:5229":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:4332:2812":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:21094:4630":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11617:6273":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:5606:5194":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:50716:4606":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:884:3707":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:8881:61965":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:49875:4159":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:9456:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:3265:3959":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:9414:4031":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:49774:4148":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:1943:4729":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:3188:3961":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"25:6327:8588":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:4421:4335":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"25:4494:8189":{"crate_id":25,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:9909:6046":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4126:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:11832:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:12316:8891":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:48596:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4346:8163":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:1722:8012":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:502:2400":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"16:2696:5416":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10360:5631":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:10589:4677":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:1825:7362":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"14:31:7111":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:12365:2684":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:2332:5429":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:10075:4154":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:454:3697":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:8887:4052":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:6596:4193":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:0:1336":{"crate_id":1,"path":["std"],"kind":"module"},"2:7415:4192":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:9562:4162":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:11106:6165":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:46809:4702":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:6352:8606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"22:230:1716":{"crate_id":22,"path":["parking_lot_core","parking_lot","RequeueOp"],"kind":"enum"},"1:521:5801":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:9401:6031":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:8054:4251":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:4988:5784":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:12321:11773":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"20:27:2283":{"crate_id":20,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"6:4300:8139":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"20:499:2396":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"1:683:11771":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:4904:8603":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"20:91:162":{"crate_id":20,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"2:3167:4454":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"25:4124:8041":{"crate_id":25,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:8581:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:10747:4099":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:38106:3171":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6571:5220":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11557:7572":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:9805:5618":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5595:8424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:1634:3907":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4191:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:1964:4247":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:9509:7454":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:3001:5422":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6572:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12361:6409":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:19988:60180":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"13:0:2643":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13518:6780":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9831:5621":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:50704:4601":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:6248:5132":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:8929:4053":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"25:4183:8085":{"crate_id":25,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11536:6261":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:10520:6110":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"14:160:7111":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:6820:3242":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:9031:61962":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4115:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:8774:5493":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:7822:4389":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:2771:2842":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:10639:4106":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:5366:4206":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:8346:3968":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:52765:4507":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12349:6402":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"22:46:5764":{"crate_id":22,"path":["parking_lot_core","parking_lot","ThreadData"],"kind":"struct"},"1:7843:55164":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:12485:6411":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10822:47449":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11739:8854":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:5500:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4698:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"25:6407:8614":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:490:2382":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"1:11155:4001":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:5531:2885":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:3939:4517":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:4519:199":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:4312:3994":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:2915:1964":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12148:6367":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:4658:11774":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:48996:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:4501:4296":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:8076:4002":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"25:6973:8704":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11691:7372":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:2547:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:5154:5396":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"12:834:4116":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:495:7811":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:11150:8852":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:2839:2853":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:2751:2833":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:6785:193":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:9274:4098":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10708:5597":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:5438:5186":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:3707:6823":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:939:5774":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:7945:12767":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"12:2053:4119":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:7938:4123":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:4013:4287":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:1736:3329":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11841:6305":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:562:5916":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:9458:5481":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:6474:5792":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:49885:4157":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"25:4642:8258":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:4429:4336":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:6392:8609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:49540:4716":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:5884:4026":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:20007:60239":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:9592:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:21276:59225":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:4737:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:9751:5562":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"25:4415:8183":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"25:4272:8127":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:1088:4119":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:49714:4572":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4317:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13176:6671":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6843:5449":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:539:7837":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:5567:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:5619:3924":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:47233:2429":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:21147:7214":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:9369:4028":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:8055:5492":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"18:96:53848":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:8799:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"20:710:1611":{"crate_id":20,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"1:2380:4256":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4267:8124":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:481:5661":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12322:6399":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"25:4189:8087":{"crate_id":25,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:8418:5543":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:6449:5786":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:46799:4701":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:49330:4050":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:21168:4534":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"14:215:7114":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:50950:4614":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:52287:4483":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"25:5739:8501":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:8981:6015":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:9552:7568":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:2394:4260":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"12:98:5035":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:11220:54697":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:8425:3943":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:7138:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:21624:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:2788:2846":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:2696:3186":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6759:5150":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:4432:6833":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:9475:5471":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"25:4377:8181":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4745:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"25:4100:8024":{"crate_id":25,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11168:7470":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"25:1705:4300":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8130:3954":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:928:4110":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:48017:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"12:1534:5045":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:5816:4103":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"25:5623:8447":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:2726:8788":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10350:5494":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:5841:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:8945:4055":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:10845:5598":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:8701:5909":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10434:6100":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10321:5630":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:5568:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:6998:8715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12797:6579":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9764:6040":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:9504:7453":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:11813:4080":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:4177:202":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4778:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:49047:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:10380:4301":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"25:4229:8110":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:5313:7368":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:50992:4238":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:4808:6844":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"12:632:3707":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6124:5179":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:652:5888":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:1750:8791":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:7461:5141":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:1612:3903":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:56961:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:247:5912":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:56922:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46517:7244":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:3400:3932":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:1216:4120":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:9517:5226":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:10497:47709":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"25:1593:7934":{"crate_id":25,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6668:5138":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:21375:2964":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6139:5209":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:46742:4175":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:7521:5133":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:2480:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:2830:2851":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12337:5598":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:9061:5521":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:4072:2936":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"25:1509:7884":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8205:4090":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13382:6743":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"25:1516:7887":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:10484:7363":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:50249:4587":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"25:4352:8168":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6820:6922":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6149:5180":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:4536:6835":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:487:7806":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:6308:5805":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:9165:61968":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:50889:200":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:48482:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:49340:7271":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:11500:4101":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:9700:5560":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:48520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:47093:4201":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:6732:3242":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:766:5659":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:21723:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"25:538:7837":{"crate_id":25,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:48144:3395":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"23:330:4778":{"crate_id":23,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"2:2834:2852":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11436:6224":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11199:6177":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:5574:5193":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:48093:3242":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"25:5859:8537":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:4653:4306":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:56935:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4427:8184":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:49293:4008":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:1102:4120":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:1707:4300":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:5450:5187":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:3482:3938":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6713:5153":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:9371:6017":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:658:4248":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:10924:3961":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4398:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:10559:4712":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:1903:47531":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:50053:4579":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:53721:4485":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:50416:4399":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:4208:6826":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:6416:3250":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:7961:7382":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:20194:4455":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:8579:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:2746:2834":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10403:5496":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:521:5660":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7350:5453":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:10794:4581":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:9446:6034":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:21259:7222":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4200:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"25:4563:8223":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:12004:5062":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9362:5521":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5498:8382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:2273:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:22386:2958":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:5995:5206":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:29548:4650":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:6276:5158":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:5610:60007":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:13082:6645":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:13192:6674":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:7366:5154":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7545:5160":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:1668:7989":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8431:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"17:1771:5512":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:48406:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:4404:6832":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:25196:2959":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:448:3696":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:4376:6831":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8746:3871":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:19973:60180":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"25:6291:8572":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:993:4117":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:1338:3707":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"25:5502:8385":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4489:4308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11125:6166":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:10139:5521":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:4212:3861":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:9339:5613":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:9314:3942":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:4113:4294":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13071:6641":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10642:5604":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:11637:59567":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:52379:4472":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13168:6670":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:52141:4503":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:56909:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:590:5890":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"25:599:7870":{"crate_id":25,"path":["libc","unix","servent"],"kind":"struct"},"1:8939:3707":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:47075:4199":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"25:5603:8431":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:52355:4471":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:6293:8572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13221:6681":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:2402:5430":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5510:8386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:39302:3885":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:21363:2961":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:6115:5127":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:7922:11770":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:4932:4135":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:52430:7286":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11774:6296":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:5083:3869":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"25:1885:41192":{"crate_id":25,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:38089:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:53845:4470":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:12357:2678":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:4834:3881":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:5511:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"25:4532:8209":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:12349:2671":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:2757:2836":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:4:976":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:46365:194":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:7992:5175":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4659:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"25:6275:8560":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:47269:3939":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:51778:4477":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:54040:7339":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:49544:4143":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:49133:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:10575:4714":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:11288:6199":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10310:6097":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"25:4743:8304":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"21:60:54114":{"crate_id":21,"path":["scopeguard","Always"],"kind":"enum"},"1:6633:5886":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:4181:2920":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10997:6140":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:9738:5564":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"25:5731:8499":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:2952:2864":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:13536:6786":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"25:61:39818":{"crate_id":25,"path":["libc","unix","DIR"],"kind":"enum"},"25:4724:8296":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3302:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:5756:4099":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:7072:4774":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10583:5498":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"25:5874:8548":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6188:5211":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:7084:2900":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8089:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"25:4365:8172":{"crate_id":25,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:7221:1607":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:51880:7279":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"25:1523:7889":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:46490:3888":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:7447:5140":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5692:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:11721:7375":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"25:580:7860":{"crate_id":25,"path":["libc","unix","sigval"],"kind":"struct"},"16:2648:5425":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11813:6301":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"25:4735:8302":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11761:6294":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"12:985:4119":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:5831:4209":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:1605:3242":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:5782:8511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:2718:5417":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:11899:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:6834:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:8141:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:49955:4573":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:9328:3707":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"3:223:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:6793:4730":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:6749:3968":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"25:4795:8331":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:11644:7474":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:9601:5511":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12896:6597":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:11876:4287":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:46325:195":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11320:7382":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"25:7164:8716":{"crate_id":25,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11034:6153":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"12:1852:3904":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:46821:4592":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:1033:61028":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:8631:5907":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:49301:7266":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9885:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:53533:4481":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5534:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:20028:60244":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:1348:3708":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:9930:6048":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:50402:4396":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11547:6264":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"18:644:5888":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13572:6790":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"22:82:1583":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock"],"kind":"module"},"16:4510:6834":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4437:8185":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:12368:2687":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"14:7:7111":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:6277:8560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:2900:1719":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:8596:5906":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:21756:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13279:6723":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:12370:2689":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:3590:6820":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:3792:3708":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:9303:5519":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:2898:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:6987:4210":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"23:280:3242":{"crate_id":23,"path":["smallvec","IntoIter"],"kind":"struct"},"25:4435:8185":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:3845:6824":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:50207:4586":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7113:5406":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:716:11772":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:4335:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:3182:2866":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:6867:3910":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:1623:3905":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:12251:6388":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"25:4333:8158":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:46510:5175":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:6763:60625":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:2583:5803":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:3599:3242":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6030:5208":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:1029:4121":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:8536:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:5007:3872":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:8517:8802":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"25:1641:7970":{"crate_id":25,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:2734:60560":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:7720:5916":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4581:8232":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5443:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:10927:3963":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:1629:3906":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6953:8703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:3751:5774":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:48292:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:10708:4097":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:52925:4480":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11997:6346":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:12372:2691":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:2467:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8622:4288":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"25:4245:8115":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"20:822:1610":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:4461:8187":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"25:1539:7897":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:48161:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:52211:4491":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:7408:3709":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:3190:3962":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:80:53847":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7321:5139":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:50570:4405":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8688:4299":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8066:4253":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:1714:8008":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:46829:4696":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:7907:11768":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:6068:2892":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2822:2849":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:5687:4096":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:6747:3902":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10121:5539":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7868:5146":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11576:6269":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:53035:4469":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4768:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:50724:4605":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:2767:2838":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:8796:5500":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:4059:3924":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:5174:4233":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:542:1934":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:4565:6836":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:3557:6819":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:12836:6588":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"25:6446:8630":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"12:274:8840":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"12:1836:3242":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:2431:3864":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"23:343:5688":{"crate_id":23,"path":["smallvec","ToSmallVec"],"kind":"trait"},"17:8393:5480":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:11706:7373":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:6989:4719":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13492:6771":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:3448:5929":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:11026:4389":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:52477:7287":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:113:53849":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:6450:5051":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12948:6613":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:907:3242":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:9616:2870":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:2311:5114":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:53929:4508":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:49943:4037":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:8956:4056":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:49853:4141":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:9108:6017":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:675:7354":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:6081:3242":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"25:566:7852":{"crate_id":25,"path":["libc","unix","winsize"],"kind":"struct"},"16:7374:5238":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"25:4663:8268":{"crate_id":25,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:3179:6816":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"25:5833:8522":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:11996:3179":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:5005:3870":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:20685:4362":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:9336:4024":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"25:4704:8289":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:11488:4100":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:52309:4486":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10546:47448":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"20:478:2371":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"1:1861:7363":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:11721:6289":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13091:6648":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"15:0:2651":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:6409:8614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:50700:4598":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:5681:5196":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:9263:6025":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:4308:3993":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:2659:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"25:5496:8382":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10476:47708":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"25:4255:8121":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"25:4557:8221":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:2722:3188":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:7226:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:515:5663":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:1230:4122":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:9778:5563":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:0:2648":{"crate_id":11,"path":["adler"],"kind":"module"},"17:8666:5908":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:9474:54342":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:2247:4252":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:1759:3328":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:9539:5509":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"25:5725:8496":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:6597:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:2859:5393":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:1595:7934":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"25:4425:8184":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4635:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:2709:2899":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"20:227:2439":{"crate_id":20,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"2:21822:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:3365:3886":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"25:506:7816":{"crate_id":25,"path":["libc","unix","timespec"],"kind":"struct"},"6:4726:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3963:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9328:5612":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:4653:6839":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:9265:3707":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:2019:60631":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:7020:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4810:8336":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:3353:3887":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:11259:6190":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:9451:7448":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:9193:61959":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:48330:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2310:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11271:6191":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:2358:5411":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"25:1498:7879":{"crate_id":25,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:5365:5130":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"11:36:8786":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:46846:4175":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"25:4596:8243":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12008:6348":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:4879:6846":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6048:5121":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:50302:4592":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5582:8418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:5962:3902":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"20:20:1601":{"crate_id":20,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"1:11145:8850":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:9021:6016":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"15:214:5058":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:2561:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:6807:5447":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"7:32:45019":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:4712:6841":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13007:6624":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:7404:5156":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"25:1693:8002":{"crate_id":25,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"25:4802:8334":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:7256:5232":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:46429:198":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"25:7241:8725":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6697:5442":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:49020:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:6545:5149":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5504:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"25:6428:8620":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:4516:4693":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"12:751:3902":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"12:822:4115":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:46882:4699":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:6755:4844":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:8137:47445":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:8576:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:48135:2995":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4206:8094":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:1678:7995":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:7166:8716":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4716:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12964:6616":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12630:6524":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:736:5657":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:7853:3683":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:4206:3863":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"25:4298:8139":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:46748:7245":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:6597:5221":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4450:4339":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"25:4222:8106":{"crate_id":25,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:4014:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4565:8223":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:2816:5420":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:51840:4498":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:2947:4726":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"25:134:39885":{"crate_id":25,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:11433:5823":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"25:1634:7966":{"crate_id":25,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:21200:7216":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:47492:1598":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:11842:4615":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:951:3903":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:12361:2680":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6448:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:7140:5814":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:1738:8017":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:8593:3201":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6037:5410":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"23:349:5680":{"crate_id":23,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"18:699:5654":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6524:8679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:47174:4213":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2652:1826":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"25:574:7857":{"crate_id":25,"path":["libc","unix","linger"],"kind":"struct"},"2:52971:4484":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:51686:7278":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:8589:3200":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:10725:57287":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"9:649:4912":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"6:4598:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:3125:5920":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4294:8136":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:560:7849":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"20:0:1587":{"crate_id":20,"path":["lock_api"],"kind":"module"},"2:29312:2951":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:4258:3991":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:7033:2901":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"25:7206:8717":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"12:1138:4122":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7887:5148":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"14:40:6140":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4139:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"9:896:4872":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"25:1548:7903":{"crate_id":25,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"25:6422:8619":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:46769:4442":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10062:6080":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:11873:200":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"12:1065:5032":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:966:4113":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"9:19:4959":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:4253:6827":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:2724:3295":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7071:5227":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:11953:7478":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:3249:5547":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:20407:16772":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:50387:4393":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"25:7247:8726":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:2406:4266":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"22:284:2331":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkToken"],"kind":"struct"},"6:0:787":{"crate_id":6,"path":["libc"],"kind":"module"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:6209:4025":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:50963:156":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:53391:4513":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:50593:4664":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"18:507:5888":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:771:4841":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10608:5499":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:10088:6082":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:7095:5405":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:3623:6821":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4354:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6479:8655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13024:6631":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"23:163:5762":{"crate_id":23,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"17:12046:6353":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:4042:2935":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8405:3939":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:4626:6838":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:5519:5191":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13580:6793":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:47529:7261":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:2653:2933":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"25:4808:8336":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"25:5593:8424":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:46785:4444":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:56552:4620":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10159:6083":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12926:6608":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:6942:4799":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:12375:2694":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:4437:4338":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:2253:3933":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"25:4504:8196":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:2039:4824":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"8:0:2645":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7037:2994":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:8583:3197":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:678:7356":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:9437:1591":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"25:4696:8284":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"25:0:787":{"crate_id":25,"path":["libc"],"kind":"module"},"17:8368:5495":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"9:977:4873":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"13:108:61953":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11909:6315":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:2942:3905":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:3475:3918":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:5536:5192":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13100:6649":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:2810:2847":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12514:6431":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"25:1572:7920":{"crate_id":25,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"12:659:3242":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10455:5633":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:1359:3242":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"7:0:1483":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:3002:3907":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:707:4391":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:47145:4205":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:10108:4155":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:52065:4511":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"25:4671:8273":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:46263:2865":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:7934:5143":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:50433:4400":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:6955:4800":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13203:6678":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:564:5666":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:5660:8468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"25:1530:7892":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9627:5517":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:6978:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"25:5690:8481":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:12781:6576":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8628:4289":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:10823:4098":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:9691:5561":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"25:6498:8669":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6538:8688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:21297:59211":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:1426:193":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:7098:55893":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:54104:7343":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:54014:7337":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"25:4292:8136":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2816:2848":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"23:57:3902":{"crate_id":23,"path":["smallvec","Drain"],"kind":"struct"},"20:493:2329":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"1:11897:4294":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"9:586:4908":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:13374:6742":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:8146:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:1120:4122":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:39311:3187":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:8241:5600":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"25:4549:8217":{"crate_id":25,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"25:6477:8655":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10528:5594":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"25:559:7849":{"crate_id":25,"path":["libc","unix","pollfd"],"kind":"struct"},"25:4473:8188":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:671:5651":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:50239:3943":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:51981:7280":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:9526:5510":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4527:8208":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5727:8496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:11733:8853":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:47284:4220":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"20:595:212":{"crate_id":20,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"2:47103:4202":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5713:8493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:7430:193":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4621:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:6926:4657":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6087:5155":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:690:5653":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:2655:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:7245:5231":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:3156:4278":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4496:8189":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:3548:5774":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:976:4115":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:29512:3580":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:4581:4305":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"25:130:39884":{"crate_id":25,"path":["libc","unix","FILE"],"kind":"enum"},"17:11951:6336":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4475:8188":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:46852:4697":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:4250:3990":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1562:7912":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9553:5521":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:3590:4073":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:29472:3579":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6794:5446":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11247:6189":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:3373:3924":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:4303:2928":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:6777:3242":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:12033:6351":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:11520:2913":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:5379:5183":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:50089:4164":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:0:2654":{"crate_id":18,"path":["memchr"],"kind":"module"},"18:660:5650":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"25:5697:8482":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:47197:4215":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:11021:4388":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:49783:4152":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"25:5580:8418":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4804:8334":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"25:1503:7881":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:51941:4478":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"22:83:1856":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","acquire_resource"],"kind":"function"},"2:54181:7346":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5587:8419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:9947:47636":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:9497:7452":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:1584:5774":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:46927:4656":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"12:777:5030":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"9:592:4910":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:5472:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:8573:4035":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:49029:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:2981:4727":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:491:5887":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:39262:4021":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:20276:4011":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:7266:5233":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12291:6393":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"12:853:4117":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"25:1699:8005":{"crate_id":25,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:5009:3873":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:4029:5776":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7581:5157":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:50776:2875":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:47519:5799":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:8283:650":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"9:956:4868":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:10257:6093":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12022:6350":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:7731:7479":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:8991:61963":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:56948:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:5344:7368":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13459:6764":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12756:6566":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"12:1085:5033":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:9587:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:4318:6829":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:8560:4330":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:4186:2921":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"25:4177:8084":{"crate_id":25,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"25:7253:8727":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:1385:4110":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:10845:4166":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:3326:158":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:6723:4139":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8633:4290":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"12:815:4114":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"25:6543:8691":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:5835:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:9293:5615":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:5749:8503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"25:4609:8248":{"crate_id":25,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:50736:2913":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:7055:3903":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:8047:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:20950:4360":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8720:3867":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"23:327:5686":{"crate_id":23,"path":["smallvec","Array"],"kind":"trait"},"16:5592:5384":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13158:6667":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"25:4204:8094":{"crate_id":25,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"22:72:2175":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_UNPARK_TOKEN"],"kind":"constant"},"14:187:45757":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:62:39818":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"9:188:4935":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:9582:162":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11974:6345":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8797:4040":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:46889:4700":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:4740:3866":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"21:14:54113":{"crate_id":21,"path":["scopeguard","Strategy"],"kind":"trait"},"6:586:7862":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:6670:1598":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:20426:3864":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:49117:3196":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:10270:6094":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:47113:4203":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:7489:5111":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:6415:8616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:49309:4007":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:48085:3708":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:3145:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:6156:5774":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4644:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12934:6611":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:11210:3935":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:2674:5415":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:1201:4121":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:11628:5824":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:7189:5122":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:5472:5188":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:5194:6005":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:0:2645":{"crate_id":24,"path":["cfg_if"],"kind":"module"},"1:8682:4337":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:12192:5827":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:20948:3864":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:2464:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:54005:7336":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:51666:7277":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11606:6272":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5876:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:9577:5513":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11893:6310":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5625:8447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:6225:201":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:46524:2927":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:5060:3874":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5523:8387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"25:4814:8339":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:5642:5195":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:6430:8620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12617:6517":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13231:6686":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:4888:5774":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"20:268:1606":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"16:3017:5925":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:6775:2889":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"22:0:1613":{"crate_id":22,"path":["parking_lot_core"],"kind":"module"},"5:7000:4720":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:7850:5147":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:53994:7335":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"25:6536:8688":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:3460:3954":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:20157:4356":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:571:2168":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:7475:5136":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:3680:6822":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:12353:2674":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:20435:4359":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:2432:4022":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"9:0:2646":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:48756:3198":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:50559:4404":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:50613:4665":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:47122:4204":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:487:5915":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"25:4766:8312":{"crate_id":25,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:1021:5616":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2736:2832":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"25:1652:7978":{"crate_id":25,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"20:480:2374":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"2:52508:7288":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"25:500:7814":{"crate_id":25,"path":["libc","unix","timeval"],"kind":"struct"},"1:8608:4077":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:2974:2855":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:36:4773":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:58283:7353":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:11235:6186":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"25:6320:8584":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46875:4698":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:8537:4329":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"25:4237:8112":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:20690:16790":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:9644:5506":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:7249:8726":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11324:3865":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:49929:4660":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:7005:4010":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12118:6364":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:6375:8607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4665:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4224:8106":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11137:6169":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12087:6358":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12134:6365":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:8510:6006":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:5999:2624":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"9:33:4960":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:386:5913":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:6549:4557":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:52531:7289":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"12:1832:3707":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11594:6270":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:4900:8599":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4506:8196":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:8752:3940":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:52333:4468":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:50712:4602":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"25:4651:8264":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:4312:2929":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"22:270:2290":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkToken"],"kind":"struct"},"6:6981:8706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12955:6615":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"14:202:4722":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:8526:3192":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"20:8:1589":{"crate_id":20,"path":["lock_api","GuardNoSend"],"kind":"struct"},"2:29606:4651":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"19:0:991":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6768:5224":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:1505:7881":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:7718:2997":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:8871:6013":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8724:8588":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"22:298:2174":{"crate_id":22,"path":["parking_lot_core","spinwait","SpinWait"],"kind":"struct"},"17:12674:6554":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2023:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:1654:7978":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"25:494:7811":{"crate_id":25,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:8242:632":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"1:3310:3947":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:3457:3192":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:46868:4591":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12768:6571":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:46955:4658":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11217:6185":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4102:8024":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13436:6763":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:2833:5392":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"12:1859:3905":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:1049:4822":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"22:73:1718":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_PARK_TOKEN"],"kind":"constant"},"5:3898:3707":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:970:4114":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"25:5711:8493":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:9155:6018":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4706:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:52611:4512":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:21921:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:52735:4504":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:3350:3708":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"9:382:4865":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10394:5575":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:7719:2996":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4605:8245":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11087:6160":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12730:6560":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:915:4109":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:10810:4584":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5741:8501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:2573:3951":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6441:5217":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:719:5655":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:5223:2986":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:11247:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10875:5541":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"7:79:45026":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:11539:2870":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:48444:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:11997:5062":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"20:505:2404":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"17:8295:47446":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"20:645:213":{"crate_id":20,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13031:6632":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:5861:8537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"9:622:4911":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"25:5532:8395":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"18:609:5895":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:4248:2926":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:47248:4218":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:51710:4509":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:10108:5538":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"12:725:4109":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11939:6334":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:9722:6039":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4690:966":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10721:6119":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:1643:7970":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"22:84:2316":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","release_resource"],"kind":"function"},"2:8304:4558":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:48220:3242":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:11689:7212":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:8702:4309":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:5819:4104":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:4242:3989":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:49814:4142":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:2465:4827":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:600:7870":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:10930:3959":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:6307:4779":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:2730:60561":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"25:585:7862":{"crate_id":25,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5605:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:21224:2960":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:7307:5237":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7022:5402":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:2607:3944":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:9681:5962":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13047:6634":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"20:30:2287":{"crate_id":20,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"16:2921:5115":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:4257:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:8853:4006":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:5199:4778":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:50788:2915":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:4010:4286":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10625:5501":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:2273:5394":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4449:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:48763:3197":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"0:0:1612":{"crate_id":0,"path":["parking_lot"],"kind":"module"},"18:599:61969":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:3067:2858":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:0:2653":{"crate_id":17,"path":["object"],"kind":"module"},"25:4603:8245":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"25:544:7840":{"crate_id":25,"path":["libc","unix","hostent"],"kind":"struct"},"2:20245:4361":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:6012:5207":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:7237:8724":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7276:5234":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:7024:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:11200:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:2378:3299":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"9:676:4957":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:11330:6214":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6500:8669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:50035:4578":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6881:5226":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:2741:2837":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:962:4112":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:4258:2927":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:47299:4211":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:21313:59216":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:646:40217":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:6269:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6506:5219":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"25:5539:8397":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:20282:4013":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"25:7277:8732":{"crate_id":25,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6230:5213":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2656:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:11356:6219":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:2645:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:5927:5204":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:47062:3912":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:11041:4392":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10332:5638":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:6632:5222":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11351:4102":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11161:6173":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11836:4286":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:4399:4333":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:7255:8727":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:47012:7255":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11343:6218":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:8595:3202":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"25:4359:8170":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2784:5421":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:50545:4403":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8670:4035":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:8848:3911":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:48634:2779":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:56974:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4559:8221":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:999:4118":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:3130:2859":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:53891:4488":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:20842:4012":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"18:624:61971":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:4777:6843":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:8059:4001":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12816:6580":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:9292:4100":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:2763:2835":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:56987:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4379:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5554:8406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6975:8704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:3094:3903":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:9350:4027":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13141:6663":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:10490:6105":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"25:7212:8718":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:58262:7352":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:11787:6297":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:11971:8805":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:49866:4156":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:4320:3996":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:49895:4158":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11315:6208":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"18:727:5656":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:47258:4219":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:5808:16984":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7920:5242":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12164:6371":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:20233:3864":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:9250:6024":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:7279:8732":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9658:6036":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:53185:4493":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:7411:3710":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:131:39884":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:3529:3903":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"25:6996:8715":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"12:738:4110":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:6983:2917":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10245:6092":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:1695:8002":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:48770:3199":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:7965:4831":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:771:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"25:5566:8417":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:53985:7334":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:6317:4780":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"25:5780:8511":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:4965:3868":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2885:5427":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9274:6026":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:8813:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"12:60:61947":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:9306:4101":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:50942:4613":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:50720:4604":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"20:487:2379":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"2:49014:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:8110:47441":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"25:644:40217":{"crate_id":25,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:6721:5223":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:5402:5184":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:49961:4574":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:2570:5465":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10752:5496":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"25:5470:8367":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:50135:4582":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"25:518:7820":{"crate_id":25,"path":["libc","unix","rusage"],"kind":"struct"},"2:49348:7272":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12980:6620":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:7788:5817":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:8911:61964":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:9280:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:967:5917":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:6674:1599":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:7928:3914":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:13184:6673":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:10969:3385":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:2647:3953":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:5699:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:6008:5774":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:9223:47493":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:2968:3906":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7227:5230":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:11427:5822":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"25:1666:7989":{"crate_id":25,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"25:4284:8131":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13366:6739":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:12369:2688":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6178:5210":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:12307:6395":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"25:4396:8182":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"25:5670:8473":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:10866:5820":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:7825:5240":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:6972:8789":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:4355:2930":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"25:512:7817":{"crate_id":25,"path":["libc","unix","rlimit"],"kind":"struct"},"16:5488:5189":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:6495:5050":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:12366:2685":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:50980:4240":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:5739:5198":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:9597:1721":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"12:353:5036":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4185:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:410:5826":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"12:2178:8781":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4673:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:7637:5128":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12909:6603":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:957:4111":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:48102:2994":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:7769:5815":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"9:111:4927":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:4683:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12225:6386":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4816:8339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:6682:5151":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2476:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:4968:3866":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:1473:1996":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:4890:3992":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13594:6796":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:49318:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:5771:5200":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:3151:2861":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"25:4487:4308":{"crate_id":25,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:1642:3576":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4534:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:9382:4029":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:5113:6848":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:9462:3688":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13340:6730":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:859:3707":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:9635:2871":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10682:5602":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"25:6570:8697":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:8561:5557":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:7832:3698":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:1525:7889":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9885:6044":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:636:5900":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:47183:4214":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"25:1712:8008":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13478:6769":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12211:6385":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:1635:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:7243:8725":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:3466:55209":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"25:4137:8051":{"crate_id":25,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:9820:5619":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"25:6267:8555":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:2762:5419":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"12:669:4112":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:12362:2681":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:8471:4071":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:8494:6005":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:1935:4246":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:513:7817":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6855:5225":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:54089:7342":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:5358:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"12:0:2649":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"25:5747:8503":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:12354:2675":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:6294:5159":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:46310:2856":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:5758:5199":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:9183:6019":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"14:221:7116":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:8418:3942":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:9894:5819":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:49803:4151":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:39298:4831":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"12:2184:8782":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:52163:4506":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"25:5521:8387":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:8106:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:7266:8731":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6302:8578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"12:1840:3902":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5793:5201":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:3267:3960":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:7214:8718":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:4679:59584":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12176:6373":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:47510:3969":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11748:6293":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:8034:5112":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:5772:8509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:5390:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:53643:4501":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:49971:3940":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:1541:7897":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"9:863:4870":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"25:1578:7922":{"crate_id":25,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:608:7875":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"20:230:2817":{"crate_id":20,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"5:215:4797":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:2424:5408":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:14:2529":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11873:6309":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"25:4714:8295":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"9:827:4867":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"25:1676:7995":{"crate_id":25,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:6101:5129":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:48212:3708":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4274:8127":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"12:762:3903":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:7879:3385":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:5443:4207":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"12:1120:5034":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:2456:5435":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:12363:2682":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4540:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:6537:201":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:8162:5544":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:2935:3707":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5480:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:1511:7884":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:4902:8601":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:12364:2683":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12874:6593":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:11180:4253":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:12884:6594":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:3153:4277":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:9108:3864":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:6502:4198":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"25:4278:8128":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:7207:1606":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:11035:4391":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:8339:47447":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"25:7218:8719":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:12356:2677":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"25:6979:8706":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:50907:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:46908:4446":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:9531:54520":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:20220:4516":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"25:5718:8495":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:2478:5412":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"25:4681:8279":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"25:4776:8317":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9118:61960":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6164:5131":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7803:5239":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:10420:5632":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:51756:4489":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:50153:4583":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:4762:4015":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1394:4111":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:20433:4465":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"12:393:61949":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10670:5601":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:2250:2528":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:9590:4163":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1500:7879":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"25:4579:8232":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:47207:4216":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"25:1560:7912":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"25:607:7875":{"crate_id":25,"path":["libc","unix","protoent"],"kind":"struct"},"5:4735:2885":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"25:6951:8703":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:50003:4160":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4212:8097":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:897:3708":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:50284:4591":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:4597:6837":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:681:5652":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:8870:4051":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12638:6525":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6474:5218":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8210:3955":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:12351:2673":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12748:6565":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:1686:7996":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:48077:3707":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"25:4094:8023":{"crate_id":25,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:2304:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:420:5101":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:11652:4107":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8374:3936":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:48777:3200":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:9396:4153":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"25:4657:8265":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"25:7287:8734":{"crate_id":25,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:2218:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6308:5214":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:49059:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8313:3972":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:21789:2438":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:2380:5407":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"25:4447:8186":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:11664:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"12:1628:5769":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"25:6507:8672":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"25:5585:8419":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:54066:7341":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11512:54699":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:1680:3903":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:51732:4497":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"25:4513:8201":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10233:6091":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:50107:4162":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:7522:55656":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"25:5658:8468":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:538:5665":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:5877:4025":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:9469:4160":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4152:8061":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:4840:6845":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:3986:4038":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4361:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7907:5241":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:5959:5390":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4797:8331":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:6489:4025":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:6032:1590":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:7717:2998":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12073:6355":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6311:8579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"25:4113:8033":{"crate_id":25,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11416:5821":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:625:4172":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6262:5142":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"25:6300:8578":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:151:1597":{"crate_id":20,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"6:4247:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5541:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:941:3902":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:44:5022":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"25:1736:8017":{"crate_id":25,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"14:165:45751":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:1887:41192":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:8353:3970":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:3418:3934":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"25:553:7846":{"crate_id":25,"path":["libc","unix","iovec"],"kind":"struct"},"1:12332:54517":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:9283:6027":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:2805:2845":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:2783:2841":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10894:5540":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"25:6413:8616":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:3721:3902":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4307:8142":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:50277:4590":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:46451:2857":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:2916:5535":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12265:6391":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"18:755:5658":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:2795:2843":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13527:6784":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:9344:3242":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:7858:3687":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:49793:4150":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5720:8495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:2911:1936":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:519:7820":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:9071:61966":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:54025:7338":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"12:1845:3903":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:52689:4500":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:6869:5886":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"25:5478:8369":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:52000:4467":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:8212:5596":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:6434:7370":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:47485:7206":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:21987:2962":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"12:1866:3906":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"25:4627:8254":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:554:7846":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6322:8584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13404:6748":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:9897:6045":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:8488:4072":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:3417:5774":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4264:3992":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4761:8309":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11853:6306":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12972:6618":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:47053:4197":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:11603:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"9:920:4869":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:21251:7221":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12198:6384":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:21888:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:6405:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:29506:3325":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"23:118:5685":{"crate_id":23,"path":["smallvec","SmallVec"],"kind":"struct"},"16:6337:5215":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7958:5176":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"20:332:5886":{"crate_id":20,"path":["lock_api","remutex","fmt","LockedPlaceholder"],"kind":"struct"},"21:19:5769":{"crate_id":21,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"16:5424:5185":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:5165:4033":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:47216:4217":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"25:7235:8724":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5672:8473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:9488:5474":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:48368:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:6778:2890":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:567:7852":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11828:6304":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13393:6747":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:1415:4113":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2026:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:4912:6847":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:3951:4518":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:6702:2893":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"25:4619:8251":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"25:5441:8343":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10445:5598":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:135:39885":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:6129:5805":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"17:11800:6299":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10921:6121":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6646:5444":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:12237:6387":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:2526:5413":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:9433:6033":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:10982:2957":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:1574:7920":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"25:6552:8694":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:47501:7259":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3150:4276":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2268:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"12:646:3708":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:53783:4505":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:5817:5202":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:47084:4200":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:7289:8734":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:8475:5475":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:52847:4492":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:8951:61967":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:7948:5144":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:6219:5212":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:8729:7209":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"15:175:5053":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:2826:2850":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:4286:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:47032:4140":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4417:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"25:4327:8155":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"25:5839:8523":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"25:6350:8606":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11134:3876":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"12:1872:3907":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:20274:3864":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:2664:2932":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:5653:4094":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11186:6176":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"21:0:2816":{"crate_id":21,"path":["scopeguard"],"kind":"module"},"2:9507:4161":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"25:1598:7936":{"crate_id":25,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12550:6462":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:47163:4208":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"14:0:2650":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"23:0:2821":{"crate_id":23,"path":["smallvec"],"kind":"module"},"9:709:4050":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:9671:5483":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10385:5574":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:50259:4588":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:1404:4112":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:9631:5507":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:0:2644":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:6895:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:6797:60165":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:10774:5494":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:9501:5519":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4096:8023":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10296:6096":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:1884:7364":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:11333:54514":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:47131:7256":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:1971:4825":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11684:6285":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:1933:1934":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11014:6143":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:8122:3952":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:10771:4580":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"25:4315:8149":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"25:5770:8509":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:242:5911":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13506:6778":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8049:4019":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:2470:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:51911:4490":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"25:7224:8720":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:4614:3924":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:8362:3935":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4653:8264":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:4515:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:6424:8619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:7061:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:2984:5423":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"25:4590:8240":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"25:1720:8012":{"crate_id":25,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13126:6659":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:21041:4629":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:12373:2692":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2473:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:48558:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13059:6640":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:50732:4600":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:2864:4092":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11708:6286":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:3949:4078":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:2548:5414":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:48153:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10506:6107":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:6738:4843":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6329:8588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"13:220:8780":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9873:6043":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"25:4150:8061":{"crate_id":25,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"25:4688:966":{"crate_id":25,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"12:2198:8784":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"}},"external_crates":{"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"25":{"name":"libc","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"smallvec","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"lock_api","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"22":{"name":"parking_lot_core","html_root_url":null},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"}},"format_version":23}