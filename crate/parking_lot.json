{"root":"0:0:2374","crate_version":"0.12.3","includes_private":false,"index":{"b:2:3823-0:259:2359":{"id":"b:2:3823-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[312,0],"end":[317,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3036:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:149:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:130:1722":{"id":"0:130:1722","crate_id":0,"name":"state","span":{"filename":"src/once.rs","begin":[88,4],"end":[99,5]},"visibility":"public","docs":"Returns the current state of this `Once`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:336":{"id":"2:13281:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13282:28602","`u8`":"1:12382:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:2355":{"id":"0:125:2355","crate_id":0,"name":"Once","span":{"filename":"src/once.rs","begin":[77,0],"end":[77,26]},"visibility":"public","docs":"A synchronization primitive which can be used to run a one-time\ninitialization. Useful for one-time initialization for globals, FFI or\nrelated functionality.\n\n# Differences from the standard library `Once`\n\n- Only requires 1 byte of space, instead of 1 word.\n- Not required to be `'static`.\n- Relaxed memory barriers in the fast path, which can significantly improve\n  performance on some architectures.\n- Efficient handling of micro-contention using adaptive spinning.\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic START: Once = Once::new();\n\nSTART.call_once(|| {\n    // run initialization here\n});\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:128","a:2:3207:247-0:125:2355","a:2:32414:237-0:125:2355","a:2:42277:3770-0:125:2355","a:2:3242:3985-0:125:2355","a:2:42276:3771-0:125:2355","a:2:32473:3736-0:125:2355","b:2:2999-0:125:2355","b:2:2994-0:125:2355","b:2:3823-0:125:2355","b:2:2714-0:125:2355","b:2:2984-0:125:2355","b:2:2988-0:125:2355","b:2:2711-0:125:2355","0:150","0:148"]}}},"0:195:2358":{"id":"0:195:2358","crate_id":0,"name":"RawMutex","span":{"filename":"src/raw_mutex.rs","begin":[32,0],"end":[56,1]},"visibility":"public","docs":"Raw mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3207:247-0:195:2358","a:2:32414:237-0:195:2358","a:2:42277:3770-0:195:2358","a:2:3242:3985-0:195:2358","a:2:42276:3771-0:195:2358","a:2:32473:3736-0:195:2358","b:2:2999-0:195:2358","b:2:2994-0:195:2358","b:2:3823-0:195:2358","b:2:2714-0:195:2358","b:2:2984-0:195:2358","b:2:2988-0:195:2358","b:2:2711-0:195:2358","0:207","0:204","0:197"]}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[454,0],"end":[506,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeTimed","id":"20:479:3175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:305:3176","0:306:3177","0:307:3178","0:308:3179"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:281:162":{"id":"0:281:162","crate_id":0,"name":"Instant","span":{"filename":"src/raw_rwlock.rs","begin":[207,4],"end":[207,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9430:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2716:3235":{"id":"2:2716:3235","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13399:27195":{"id":"2:13399:27195","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42276:3771-0:195:2358":{"id":"a:2:42276:3771-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:3771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2984-0:125:2355":{"id":"b:2:2984-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:4014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13397:27191":{"id":"2:13397:27191","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2968":{"id":"0:124:2968","crate_id":0,"name":"done","span":{"filename":"src/once.rs","begin":[49,4],"end":[51,5]},"visibility":"public","docs":"Returns whether the associated `Once` has successfully executed a\nclosure.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42276:3771-0:456:2356":{"id":"a:2:42276:3771-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:3771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2999-0:443:2348":{"id":"b:2:2999-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2711-0:155:2357":{"id":"b:2:2711-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3233"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13408:9743":{"id":"2:13408:9743","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5014:9743"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44351:6969","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13401:27197":{"id":"2:13401:27197","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2984-0:443:2348":{"id":"b:2:2984-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:4014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:201:2885":{"id":"0:201:2885","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_mutex.rs","begin":[78,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13400:27196":{"id":"2:13400:27196","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:3178":{"id":"0:307:3178","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/raw_rwlock.rs","begin":[482,4],"end":[492,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9430:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:410-0:31:2347":{"id":"0:410-0:31:2347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,24],"end":[41,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::Condvar","name":"Condvar","id":"0:31:2347","glob":false}}},"0:274:3136":{"id":"0:274:3136","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/raw_rwlock.rs","begin":[162,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:456:2356":{"id":"0:456:2356","crate_id":0,"name":"OnceState","span":{"filename":"src/once.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"Current state of a `Once`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:457:2954","0:459:2956","0:461:2958","0:463:2960"],"impls":["0:122","a:2:3207:247-0:456:2356","a:2:32414:237-0:456:2356","a:2:42277:3770-0:456:2356","a:2:3242:3985-0:456:2356","a:2:42276:3771-0:456:2356","a:2:32473:3736-0:456:2356","b:2:2999-0:456:2356","b:2:2994-0:456:2356","b:2:3823-0:456:2356","b:2:2714-0:456:2356","b:2:2984-0:456:2356","b:2:2988-0:456:2356","b:2:2711-0:456:2356","b:5:793-0:456:2356","0:466","0:473","0:465","0:471","0:470","0:468"]}}},"2:13300:6831":{"id":"2:13300:6831","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44029:4906","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[14,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:159:2864","0:160:2343","0:161:2637","0:162:2885","0:163:2630","0:164:3056"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:163:2630":{"id":"0:163:2630","crate_id":0,"name":"unlock","span":{"filename":"src/raw_fair_mutex.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:797:4081":{"id":"5:797:4081","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433-0:365:2364":{"id":"0:433-0:365:2364","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutexGuard","name":"ReentrantMutexGuard","id":"0:365:2364","glob":false}}},"0:123:2964":{"id":"0:123:2964","crate_id":0,"name":"poisoned","span":{"filename":"src/once.rs","begin":[42,4],"end":[44,5]},"visibility":"public","docs":"Returns whether the associated `Once` has been poisoned.\n\nOnce an initialization routine for a `Once` has panicked it will forever\nindicate to future forced initialization routines that it is poisoned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:432-0:361:2363":{"id":"0:432-0:361:2363","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,67],"end":[49,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutex","name":"ReentrantMutex","id":"0:361:2363","glob":false}}},"2:13363:34979":{"id":"2:13363:34979","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12960:3837","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12363:476","str::match_indices":"2:13360:34978"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44211:7206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2988-0:259:2359":{"id":"b:2:2988-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13301:33108":{"id":"2:13301:33108","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13303:33071"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44317:7211","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:34970":{"id":"2:13276:34970","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13274:34969"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:3169":{"id":"0:300:3169","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[422,4],"end":[426,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:27379":{"id":"2:13380:27379","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:446":{"id":"0:446","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:447:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:413-0:84:2349":{"id":"0:413-0:84:2349","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,27],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::const_fair_mutex","name":"const_fair_mutex","id":"0:84:2349","glob":false}}},"2:13299:7221":{"id":"2:13299:7221","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12363:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44019:7201","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:9868":{"id":"5:5713:9868","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3207:247-0:195:2358":{"id":"a:2:3207:247-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:361:2363":{"id":"0:361:2363","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[41,0],"end":[41,80]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](crate::Mutex) for more details about the underlying mutex\nprimitive.","links":{"crate::Mutex":"0:94:186"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutex","id":"20:256:2363","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13336:34975":{"id":"2:13336:34975","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12960:3837","str::split":"2:13327:28631","prim@char":"1:12363:476","`DoubleEndedIterator`":"2:8329:130","str::rsplit_terminator":"2:13339:34976"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44093:7203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:415-0:86:2351":{"id":"0:415-0:86:2351","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,56],"end":[42,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutexGuard","name":"FairMutexGuard","id":"0:86:2351","glob":false}}},"2:13310:28643":{"id":"2:13310:28643","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206:2719":{"id":"0:206:2719","crate_id":0,"name":"bump","span":{"filename":"src/raw_mutex.rs","begin":[134,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32414:237-0:155:2357":{"id":"a:2:32414:237-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2984-0:31:2347":{"id":"b:2:2984-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:4014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:198:2864":{"id":"0:198:2864","crate_id":0,"name":"INIT","span":{"filename":"src/raw_mutex.rs","begin":[59,4],"end":[61,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:98:187":{"id":"0:98:187","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[100,0],"end":[100,67]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:840:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:42277:3770-0:195:2358":{"id":"a:2:42277:3770-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:3770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3823-0:31:2347":{"id":"b:2:3823-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128":{"id":"0:128","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[79,0],"end":[310,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:129:1188","0:130:1722","0:131:441","0:134:3025"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:210:3058":{"id":"0:210:3058","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_mutex.rs","begin":[146,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9430:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13308:34974":{"id":"2:13308:34974","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44307:7210","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13402:28550":{"id":"2:13402:28550","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:39244"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2353":{"id":"0:96:2353","crate_id":0,"name":"const_mutex","span":{"filename":"src/mutex.rs","begin":[91,0],"end":[93,1]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:94:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13409:34992":{"id":"2:13409:34992","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5011:34992"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44360:7116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:368:2361":{"id":"0:368:2361","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[68,0],"end":[69,70]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedReentrantMutexGuard","id":"20:864:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[154,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_shared","bump_exclusive"],"trait":{"name":"RawRwLockFair","id":"20:447:3134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:273:3135","0:274:3136","0:275:3137","0:276:3139"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13287:28600":{"id":"2:13287:28600","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:3056":{"id":"0:164:3056","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_fair_mutex.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32473:3736-0:259:2359":{"id":"a:2:32473:3736-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3736","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:424-0:456:2356":{"id":"0:424-0:456:2356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,27],"end":[44,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::OnceState","name":"OnceState","id":"0:456:2356","glob":false}}},"0:457:2954":{"id":"0:457:2954","crate_id":0,"name":"New","span":{"filename":"src/once.rs","begin":[24,4],"end":[24,7]},"visibility":"default","docs":"A closure has not been executed yet","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13348:28641":{"id":"2:13348:28641","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42276:3771-0:155:2357":{"id":"a:2:42276:3771-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:3771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3242:3985-0:259:2359":{"id":"a:2:3242:3985-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:389:2368":{"id":"0:389:2368","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[125,0],"end":[125,98]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockUpgradableReadGuard","id":"20:888:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:440-0:389:2368":{"id":"0:440-0:389:2368","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockUpgradableReadGuard","name":"RwLockUpgradableReadGuard","id":"0:389:2368","glob":false}}},"a:2:3242:3985-0:443:2348":{"id":"a:2:3242:3985-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:793-0:443:2348":{"id":"b:5:793-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:4079","5:796:4080","5:797:4081"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:2351":{"id":"0:86:2351","crate_id":0,"name":"FairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[91,0],"end":[91,75]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:840:187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[191,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockDowngrade","id":"20:452:3141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:278:3142"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:82:2350":{"id":"0:82:2350","crate_id":0,"name":"FairMutex","span":{"filename":"src/fair_mutex.rs","begin":[77,0],"end":[77,57]},"visibility":"public","docs":"A mutual exclusive primitive that is always fair, useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\nThe regular mutex provided by `parking_lot` uses eventual fairness\n(after some time it will default to the fair algorithm), but eventual\nfairness does not provide the same guarantees an always fair method would.\nFair mutexes are generally slower, but sometimes needed.\n\nIn a fair mutex the waiters form a queue, and the lock is always granted to\nthe next requester in the queue, in first-in first-out order. This ensures\nthat one thread cannot starve others by quickly re-acquiring the lock after\nreleasing it.\n\nA fair mutex may not be interesting if threads have different priorities (this is known as\npriority inversion).\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `FairMutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n\n# Examples\n\n```\nuse parking_lot::FairMutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(FairMutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:186","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:3823-0:155:2357":{"id":"b:2:3823-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2999-0:125:2355":{"id":"b:2:2999-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:308:3179":{"id":"0:308:3179","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/raw_rwlock.rs","begin":[495,4],"end":[505,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44694:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:411-0:443:2348":{"id":"0:411-0:443:2348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,33],"end":[41,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::WaitTimeoutResult","name":"WaitTimeoutResult","id":"0:443:2348","glob":false}}},"0:426-0:195:2358":{"id":"0:426-0:195:2358","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[46,0],"end":[46,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_mutex::RawMutex","name":"RawMutex","id":"0:195:2358","glob":false}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[319,0],"end":[325,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:94:186":{"id":"0:94:186","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[86,0],"end":[86,49]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same mutex in succession, which can starve\nother threads waiting to acquire the mutex. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na mutex it has just released, this can starve other threads.\n\nThis mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the mutex.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `MutexGuard::unlock_fair` when\nunlocking a mutex instead of simply dropping the `MutexGuard`.\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `Mutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the mutex is fair on average.\n- Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::Mutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(Mutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:186","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:357":{"id":"0:357","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[15,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"GetThreadId","id":"20:215:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:358:2864","0:359:3212"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32414:237-0:125:2355":{"id":"a:2:32414:237-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3207:247-0:155:2357":{"id":"a:2:3207:247-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42276:3771-0:125:2355":{"id":"a:2:42276:3771-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:3771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2994-0:355:2362":{"id":"b:2:2994-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[519,0],"end":[523,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13373:34984":{"id":"2:13373:34984","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:3198":{"id":"2:13283:3198","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32414:237-0:456:2356":{"id":"a:2:32414:237-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3207:247-0:443:2348":{"id":"a:2:3207:247-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:202:2630":{"id":"0:202:2630","crate_id":0,"name":"unlock","span":{"filename":"src/raw_mutex.rs","begin":[100,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2711-0:195:2358":{"id":"b:2:2711-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3233"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[205,0],"end":[268,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockTimed","id":"20:454:3144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:131","0:281:162","0:282:3145","0:283:3146","0:284:3147","0:285:3148"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:299:3168":{"id":"0:299:3168","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/raw_rwlock.rs","begin":[400,4],"end":[419,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:3058":{"id":"0:171:3058","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_fair_mutex.rs","begin":[57,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:3057","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2997:138":{"id":"2:2997:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:466":{"id":"0:466","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:467:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199:2343":{"id":"0:199:2343","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_mutex.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32416:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:205:3055":{"id":"0:205:3055","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_mutex.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2987:4014":{"id":"2:2987:4014","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2961:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431-0:355:2362":{"id":"0:431-0:355:2362","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,54],"end":[49,65]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::RawThreadId","name":"RawThreadId","id":"0:355:2362","glob":false}}},"2:13296:28630":{"id":"2:13296:28630","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13295:28629"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:35688":{"id":"5:5703:35688","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3207:247-0:125:2355":{"id":"a:2:3207:247-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:418-0:96:2353":{"id":"0:418-0:96:2353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::const_mutex","name":"const_mutex","id":"0:96:2353","glob":false}}},"0:43:2605":{"id":"0:43:2605","crate_id":0,"name":"wait","span":{"filename":"src/condvar.rs","begin":[255,4],"end":[257,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5695":{"id":"5:5695","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5696:35686","5:5697:3959","5:5700:35687","5:5703:35688","5:5711:35689","5:5712:35690","5:5713:9868","5:5714:27193","5:5715:27194"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:448":{"id":"0:448","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32416:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3823-0:355:2362":{"id":"b:2:3823-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13383:28644":{"id":"2:13383:28644","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[512,0],"end":[517,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3036:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2374":{"id":"0:0:2374","crate_id":0,"name":"parking_lot","span":{"filename":"src/lib.rs","begin":[8,0],"end":[59,135]},"visibility":"public","docs":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n`Once` that are smaller, faster and more flexible than those in the Rust\nstandard library. It also provides a `ReentrantMutex` type.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:410-0:31:2347","0:411-0:443:2348","0:413-0:84:2349","0:414-0:82:2350","0:415-0:86:2351","0:416-0:89:2352","0:418-0:96:2353","0:419-0:101:2354","0:420-0:94:186","0:421-0:98:187","0:423-0:125:2355","0:424-0:456:2356","0:425-0:155:2357","0:426-0:195:2358","0:427-0:259:2359","0:429-0:363:2360","0:430-0:368:2361","0:431-0:355:2362","0:432-0:361:2363","0:433-0:365:2364","0:435-0:375:2365","0:436-0:383:2366","0:437-0:386:2367","0:438-0:373:233","0:439-0:377:234","0:440-0:389:2368","0:441-0:380:235","0:442-20:0:2344"],"is_stripped":false}}},"0:51:2642":{"id":"0:51:2642","crate_id":0,"name":"wait_for","span":{"filename":"src/condvar.rs","begin":[381,4],"end":[388,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44694:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:34981":{"id":"2:13368:34981","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42277:3770-0:443:2348":{"id":"a:2:42277:3770-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:3770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2714-0:155:2357":{"id":"b:2:2714-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:3235"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:429-0:363:2360":{"id":"0:429-0:363:2360","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,4],"end":[49,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::const_reentrant_mutex","name":"const_reentrant_mutex","id":"0:363:2360","glob":false}}},"0:439-0:377:234":{"id":"0:439-0:377:234","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,73],"end":[53,88]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockReadGuard","name":"RwLockReadGuard","id":"0:377:234","glob":false}}},"2:13345:28639":{"id":"2:13345:28639","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12363:476","str::splitn":"2:13342:28637","self::pattern":"2:12960:3837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44165:7029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:3154":{"id":"0:291:3154","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/raw_rwlock.rs","begin":[309,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:3144","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2994-0:443:2348":{"id":"b:2:2994-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2714-0:355:2362":{"id":"b:2:2714-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:3235"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2984-0:355:2362":{"id":"b:2:2984-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:4014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2713:3233":{"id":"2:2713:3233","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3002:138":{"id":"2:3002:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32338:9154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:435-0:375:2365":{"id":"0:435-0:375:2365","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::const_rwlock","name":"const_rwlock","id":"0:375:2365","glob":false}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[40,0],"end":[50,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:166:3055","0:167:2719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13389:34988":{"id":"2:13389:34988","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:34973":{"id":"2:13292:34973","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12369:1735","crate::ops::IndexMut":"2:3485:3625","str::slice_unchecked":"2:13291:34972"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2623":{"id":"0:45:2623","crate_id":0,"name":"wait_until","span":{"filename":"src/condvar.rs","begin":[283,4],"end":[292,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9430:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:28602":{"id":"2:13282:28602","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12382:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2714-0:456:2356":{"id":"b:2:2714-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:3235"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13327:28631":{"id":"2:13327:28631","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12960:3837","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12363:476","str::split_whitespace":"2:13301:33108","str::rsplit":"2:13333:28635"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44043:7021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2505":{"id":"0:30:2505","crate_id":0,"name":"timed_out","span":{"filename":"src/condvar.rs","begin":[28,4],"end":[30,5]},"visibility":"public","docs":"Returns whether the wait was known to have timed out.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3242:3985-0:155:2357":{"id":"a:2:3242:3985-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:3242:3985-0:31:2347":{"id":"a:2:3242:3985-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:289":{"id":"0:289","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[294,0],"end":[320,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursiveTimed","id":"20:464:3152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:290:3153","0:291:3154"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2988-0:456:2356":{"id":"b:2:2988-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2988-0:155:2357":{"id":"b:2:2988-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[58,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:198:2864","0:199:2343","0:200:2637","0:201:2885","0:202:2630","0:203:3056"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:294:3158":{"id":"0:294:3158","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[333,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[322,0],"end":[396,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgrade","id":"20:467:3099","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:293:3155","0:294:3158","0:295:3160","0:296:3163","0:297:3165"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:134:3025":{"id":"0:134:3025","crate_id":0,"name":"call_once_force","span":{"filename":"src/once.rs","begin":[173,4],"end":[185,5]},"visibility":"public","docs":"Performs the same function as `call_once` except ignores poisoning.\n\nIf this `Once` has been poisoned (some initialization panicked) then\nthis function will continue to attempt to call initialization functions\nuntil one of them doesn't panic.\n\nThe closure `f` is yielded a structure which can be used to query the\nstate of this `Once` (whether initialization has previously panicked or\nnot).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3456:143","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:456:2356":{"id":"b:5:793-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:4079","5:796:4080","5:797:4081"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2994-0:125:2355":{"id":"b:2:2994-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:149:60":{"id":"0:149:60","crate_id":0,"name":"default","span":{"filename":"src/once.rs","begin":[314,4],"end":[316,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471":{"id":"0:471","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2761:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:472:704"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42276:3771-0:259:2359":{"id":"a:2:42276:3771-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:3771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:796:4080":{"id":"5:796:4080","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2988-0:355:2362":{"id":"b:2:2988-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13298:7044":{"id":"2:13298:7044","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12363:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44013:7036","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13342:28637":{"id":"2:13342:28637","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837","str::rsplitn":"2:13345:28639"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44147:7028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13372:34983":{"id":"2:13372:34983","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13360:34978":{"id":"2:13360:34978","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12960:3837","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12363:476","str::rmatch_indices":"2:13363:34979"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44193:7205","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13306:32242":{"id":"2:13306:32242","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44297:7209","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:4020":{"id":"2:13323:4020","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42184:191","prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:474:809":{"id":"0:474:809","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13354:2965":{"id":"2:13354:2965","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12960:3837","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12363:476","str::rmatches":"2:13357:34977"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44247:7207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42277:3770-0:355:2362":{"id":"a:2:42277:3770-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:3770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:441-0:380:235":{"id":"0:441-0:380:235","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockWriteGuard","name":"RwLockWriteGuard","id":"0:380:235","glob":false}}},"2:13309:33081":{"id":"2:13309:33081","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44335:7043","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:3151":{"id":"0:288:3151","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[281,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:809":{"id":"0:68:809","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[520,4],"end":[522,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32473:3736-0:155:2357":{"id":"a:2:32473:3736-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3736","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2988-0:195:2358":{"id":"b:2:2988-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:89:2352":{"id":"0:89:2352","crate_id":0,"name":"MappedFairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[100,0],"end":[100,87]},"visibility":"public","docs":"An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:848:2354","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:375:2365":{"id":"0:375:2365","crate_id":0,"name":"const_rwlock","span":{"filename":"src/rwlock.rs","begin":[93,0],"end":[95,1]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.\n\nThis allows creating a `RwLock<T>` in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:373:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:420-0:94:186":{"id":"0:420-0:94:186","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,53],"end":[43,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::Mutex","name":"Mutex","id":"0:94:186","glob":false}}},"0:427-0:259:2359":{"id":"0:427-0:259:2359","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_rwlock::RawRwLock","name":"RawRwLock","id":"0:259:2359","glob":false}}},"0:39:2589":{"id":"0:39:2589","crate_id":0,"name":"notify_all","span":{"filename":"src/condvar.rs","begin":[187,4],"end":[195,5]},"visibility":"public","docs":"Wakes up all blocked threads on this condvar.\n\nReturns the number of threads woken up.\n\nThis method will ensure that any current waiters on the condition\nvariable are awoken. Calls to `notify_all()` are not buffered in any\nway.\n\nTo wake up only one thread, see `notify_one()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:437-0:386:2367":{"id":"0:437-0:386:2367","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,41],"end":[53,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockWriteGuard","name":"MappedRwLockWriteGuard","id":"0:386:2367","glob":false}}},"5:5715:27194":{"id":"5:5715:27194","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13401:27197"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423-0:125:2355":{"id":"0:423-0:125:2355","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,21],"end":[44,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::Once","name":"Once","id":"0:125:2355","glob":false}}},"b:2:3823-0:125:2355":{"id":"b:2:3823-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:151:809":{"id":"0:151:809","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[320,4],"end":[324,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:3135":{"id":"0:273:3135","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/raw_rwlock.rs","begin":[156,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:305:3176":{"id":"0:305:3176","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/raw_rwlock.rs","begin":[456,4],"end":[466,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9430:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2999-0:355:2362":{"id":"b:2:2999-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:363:2360":{"id":"0:363:2360","crate_id":0,"name":"const_reentrant_mutex","span":{"filename":"src/remutex.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.\n\nThis allows creating a reentrant mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:361:2363","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:2769":{"id":"2:13272:2769","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3207:247-0:456:2356":{"id":"a:2:3207:247-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2994-0:31:2347":{"id":"b:2:2994-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13357:34977":{"id":"2:13357:34977","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12960:3837","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12363:476","str::matches":"2:13354:2965"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44265:7208","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5700:35687":{"id":"5:5700:35687","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3003:1820":{"id":"2:3003:1820","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:447:809":{"id":"0:447:809","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:3146":{"id":"0:283:3146","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/raw_rwlock.rs","begin":[223,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:3144","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:28633":{"id":"2:13330:28633","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12775:7023","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:3125":{"id":"0:267:3125","crate_id":0,"name":"lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[107,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:463:2960":{"id":"0:463:2960","crate_id":0,"name":"Done","span":{"filename":"src/once.rs","begin":[33,4],"end":[33,8]},"visibility":"default","docs":"A closure has completed successfully.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:159:2864":{"id":"0:159:2864","crate_id":0,"name":"INIT","span":{"filename":"src/raw_fair_mutex.rs","begin":[15,4],"end":[15,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"b:2:2711-0:31:2347":{"id":"b:2:2711-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3233"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:450:704":{"id":"0:450:704","crate_id":0,"name":"eq","span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3825:1835":{"id":"2:3825:1835","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39897:7107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32414:237-0:195:2358":{"id":"a:2:32414:237-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3823-0:195:2358":{"id":"b:2:3823-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:276:3139":{"id":"0:276:3139","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[184,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:455:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32414:237-0:31:2347":{"id":"a:2:32414:237-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:373:233":{"id":"0:373:233","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[88,0],"end":[88,52]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThis lock uses a task-fair locking policy which avoids both reader and\nwriter starvation. This means that readers trying to acquire the lock will\nblock even if the lock is unlocked when there are writers waiting to acquire\nthe lock. Because of this, attempts to recursively acquire a read lock\nwithin a single thread may result in a deadlock.\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same lock in succession, which can starve\nother threads waiting to acquire the rwlock. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na rwlock it has just released, this can starve other threads.\n\nThis rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the rwlock.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`\nor `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply\ndropping the guard.\n\n# Differences from the standard library `RwLock`\n\n- Supports atomically downgrading a write lock into a read lock.\n- Task-fair locking policy instead of an unspecified platform default.\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `RwLock` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the rwlock is fair on average.\n- Optionally allows making the rwlock fair by calling\n  `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read();\n    let r2 = lock.read();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLock","id":"20:484:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:129:1188":{"id":"0:129:1188","crate_id":0,"name":"new","span":{"filename":"src/once.rs","begin":[82,4],"end":[84,5]},"visibility":"public","docs":"Creates a new `Once` value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:380:235":{"id":"0:380:235","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[103,0],"end":[103,80]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockWriteGuard","id":"20:880:235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13303:33071":{"id":"2:13303:33071","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13301:33108"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44326:7212","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13403:28551":{"id":"2:13403:28551","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:39244"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:2359":{"id":"0:259:2359","crate_id":0,"name":"RawRwLock","span":{"filename":"src/raw_rwlock.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Raw reader-writer lock type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3207:247-0:259:2359","a:2:32414:237-0:259:2359","a:2:42277:3770-0:259:2359","a:2:3242:3985-0:259:2359","a:2:42276:3771-0:259:2359","a:2:32473:3736-0:259:2359","b:2:2999-0:259:2359","b:2:2994-0:259:2359","b:2:3823-0:259:2359","b:2:2714-0:259:2359","b:2:2984-0:259:2359","b:2:2988-0:259:2359","b:2:2711-0:259:2359","0:272","0:261","0:289","0:279","0:292","0:298","0:301","0:286","0:304","0:277"]}}},"b:2:2999-0:259:2359":{"id":"b:2:2999-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:303:3173":{"id":"0:303:3173","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[441,4],"end":[451,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2766:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:263:2343":{"id":"0:263:2343","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_rwlock.rs","begin":[64,4],"end":[64,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[429,0],"end":[452,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeDowngrade","id":"20:476:3171","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:302:3172","0:303:3173"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:203:3056":{"id":"0:203:3056","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_mutex.rs","begin":[113,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2990:839":{"id":"2:2990:839","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268:3128":{"id":"0:268:3128","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[116,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2998:1822":{"id":"2:2998:1822","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2994-0:195:2358":{"id":"b:2:2994-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:284:3147":{"id":"0:284:3147","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/raw_rwlock.rs","begin":[236,4],"end":[250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44694:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3242:3985-0:355:2362":{"id":"a:2:3242:3985-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13392:34989":{"id":"2:13392:34989","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[398,0],"end":[427,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_upgradable"],"trait":{"name":"RawRwLockUpgradeFair","id":"20:473:3167","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:299:3168","0:300:3169"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:35:2567":{"id":"0:35:2567","crate_id":0,"name":"notify_one","span":{"filename":"src/condvar.rs","begin":[128,4],"end":[136,5]},"visibility":"public","docs":"Wakes up one blocked thread on this condvar.\n\nReturns whether a thread was woken up.\n\nIf there is a blocked thread on this condition variable, then it will\nbe woken up from its call to `wait` or `wait_timeout`. Calls to\n`notify_one` are not buffered in any way.\n\nTo wake up all threads, see `notify_all()`.\n\n# Examples\n\n```\nuse parking_lot::Condvar;\n\nlet condvar = Condvar::new();\n\n// do something with condvar, share it with other threads\n\nif !condvar.notify_one() {\n    println!(\"Nobody was listening for this.\");\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2885":{"id":"0:162:2885","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:3142":{"id":"0:278:3142","crate_id":0,"name":"downgrade","span":{"filename":"src/raw_rwlock.rs","begin":[193,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:275:3137":{"id":"0:275:3137","crate_id":0,"name":"bump_shared","span":{"filename":"src/raw_rwlock.rs","begin":[175,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:468":{"id":"0:468","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2766:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:262:2864":{"id":"0:262:2864","crate_id":0,"name":"INIT","span":{"filename":"src/raw_rwlock.rs","begin":[60,4],"end":[62,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:264:3117":{"id":"0:264:3117","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[67,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2999-0:456:2356":{"id":"b:2:2999-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:34:1188":{"id":"0:34:1188","crate_id":0,"name":"new","span":{"filename":"src/condvar.rs","begin":[98,4],"end":[102,5]},"visibility":"public","docs":"Creates a new condition variable which is ready to be waited on and\nnotified.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:162":{"id":"0:209:162","crate_id":0,"name":"Instant","span":{"filename":"src/raw_mutex.rs","begin":[143,4],"end":[143,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9430:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:271:3133":{"id":"0:271:3133","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[148,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2347":{"id":"0:31:2347","crate_id":0,"name":"Condvar","span":{"filename":"src/condvar.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"A Condition Variable\n\nCondition variables represent the ability to block a thread such that it\nconsumes no CPU time while waiting for an event to occur. Condition\nvariables are typically associated with a boolean predicate (a condition)\nand a mutex. The predicate is always verified inside of the mutex before\ndetermining that thread must block.\n\nNote that this module places one additional restriction over the system\ncondition variables: each condvar can be used with only one mutex at a\ntime. Any attempt to use multiple mutexes on the same condition variable\nsimultaneously will result in a runtime panic. However it is possible to\nswitch to a different mutex if there are no threads currently waiting on\nthe condition variable.\n\n# Differences from the standard library `Condvar`\n\n- No spurious wakeups: A wait will only return a non-timeout result if it\n  was woken up by `notify_one` or `notify_all`.\n- `Condvar::notify_all` will only wake up a single thread, the rest are\n  requeued to wait for the `Mutex` to be unlocked by the thread that was\n  woken up.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `Condvar` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n\n# Examples\n\n```\nuse parking_lot::{Mutex, Condvar};\nuse std::sync::Arc;\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\n// Inside of our lock, spawn a new thread, and then wait for it to start\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock();\n    *started = true;\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock();\nif !*started {\n    cvar.wait(&mut started);\n}\n// Note that we used an if instead of a while loop above. This is only\n// possible because parking_lot's Condvar will never spuriously wake up.\n// This means that wait() will only return after notify_one or notify_all is\n// called.\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:33","a:2:3207:247-0:31:2347","a:2:32414:237-0:31:2347","a:2:42277:3770-0:31:2347","a:2:3242:3985-0:31:2347","a:2:42276:3771-0:31:2347","a:2:32473:3736-0:31:2347","b:2:2999-0:31:2347","b:2:2994-0:31:2347","b:2:3823-0:31:2347","b:2:2714-0:31:2347","b:2:2984-0:31:2347","b:2:2988-0:31:2347","b:2:2711-0:31:2347","0:65","0:67"]}}},"0:287:3150":{"id":"0:287:3150","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[272,4],"end":[278,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306:3177":{"id":"0:306:3177","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/raw_rwlock.rs","begin":[469,4],"end":[479,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44694:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:34969":{"id":"2:13274:34969","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:3055":{"id":"0:166:3055","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_fair_mutex.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:430-0:368:2361":{"id":"0:430-0:368:2361","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,27],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::MappedReentrantMutexGuard","name":"MappedReentrantMutexGuard","id":"0:368:2361","glob":false}}},"a:2:42277:3770-0:31:2347":{"id":"a:2:42277:3770-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:3770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13291:34972":{"id":"2:13291:34972","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12369:1735","str::slice_mut_unchecked":"2:13292:34973","crate::ops::Index":"2:39728:3624"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:3160":{"id":"0:295:3160","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[346,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:474:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13316:28149":{"id":"2:13316:28149","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2658":{"id":"0:59:2658","crate_id":0,"name":"wait_while_until","span":{"filename":"src/condvar.rs","begin":[463,4],"end":[474,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant. If the provided condition evaluates to\n`false`, then the thread is no longer blocked and the operation is\ncompleted. If the condition evaluates to `true`, then the thread is\nblocked again and waits for another notification before repeating\nthis process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9430:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3453:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,31],"end":[22,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2984-0:195:2358":{"id":"b:2:2984-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:4014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2711-0:443:2348":{"id":"b:2:2711-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3233"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[94,0],"end":[510,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:34:1188","0:35:2567","0:39:2589","0:43:2605","0:45:2623","0:51:2642","0:56:2652","0:59:2658","0:62:2663"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2984-0:456:2356":{"id":"b:2:2984-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:4014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:265:3121":{"id":"0:265:3121","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[80,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2994-0:456:2356":{"id":"b:2:2994-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13386:34987":{"id":"2:13386:34987","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:131":{"id":"0:280:131","crate_id":0,"name":"Duration","span":{"filename":"src/raw_rwlock.rs","begin":[206,4],"end":[206,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44694:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13405:34991":{"id":"2:13405:34991","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5013:34991"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44342:7117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32473:3736-0:355:2362":{"id":"a:2:32473:3736-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3736","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:169:131":{"id":"0:169:131","crate_id":0,"name":"Duration","span":{"filename":"src/raw_fair_mutex.rs","begin":[53,4],"end":[53,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:3057","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"2:13366:34980":{"id":"2:13366:34980","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2711-0:355:2362":{"id":"b:2:2711-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3233"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13319:4059":{"id":"2:13319:4059","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42184:191","prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13270":{"id":"2:13270","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13271:1006","2:13272:2769","2:13273:34968","2:13274:34969","2:13276:34970","2:13279:28543","2:13280:34971","2:13281:336","2:13282:28602","2:13283:3198","2:13285:2894","2:13287:28600","2:13289:28601","2:13291:34972","2:13292:34973","2:13293:28625","2:13294:28626","2:13295:28629","2:13296:28630","2:13298:7044","2:13299:7221","2:13300:6831","2:13301:33108","2:13303:33071","2:13306:32242","2:13308:34974","2:13309:33081","2:13310:28643","2:13313:28147","2:13316:28149","2:13319:4059","2:13323:4020","2:13327:28631","2:13330:28633","2:13333:28635","2:13336:34975","2:13339:34976","2:13342:28637","2:13345:28639","2:13348:28641","2:13351:28642","2:13354:2965","2:13357:34977","2:13360:34978","2:13363:34979","2:13366:34980","2:13368:34981","2:13370:34982","2:13372:34983","2:13373:34984","2:13374:34985","2:13377:34986","2:13380:27379","2:13383:28644","2:13386:34987","2:13389:34988","2:13392:34989","2:13395:34990","2:13397:27191","2:13398:28547","2:13399:27195","2:13400:27196","2:13401:27197","2:13402:28550","2:13403:28551","2:13404:28552","2:13405:34991","2:13408:9743","2:13409:34992"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13280:34971":{"id":"2:13280:34971","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2994-0:155:2357":{"id":"b:2:2994-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:101:2354":{"id":"0:101:2354","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[109,0],"end":[109,79]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:848:2354","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:302:3172":{"id":"0:302:3172","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[431,4],"end":[438,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32414:237-0:355:2362":{"id":"a:2:32414:237-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3823-0:443:2348":{"id":"b:2:3823-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3207:247-0:259:2359":{"id":"a:2:3207:247-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2984-0:259:2359":{"id":"b:2:2984-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:4014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13398:28547":{"id":"2:13398:28547","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40083:15178","Self::is_ascii":"2:13397:27191"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40083:15178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5714:27193":{"id":"5:5714:27193","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13400:27196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2714-0:443:2348":{"id":"b:2:2714-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:3235"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3207:247-0:31:2347":{"id":"a:2:3207:247-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:795:4079":{"id":"5:795:4079","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:62:2663":{"id":"0:62:2663","crate_id":0,"name":"wait_while_for","span":{"filename":"src/condvar.rs","begin":[498,4],"end":[509,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration. If the provided condition evaluates to `false`,\nthen the thread is no longer blocked and the operation is completed.\nIf the condition evaluates to `true`, then the thread is blocked again\nand waits for another notification before repeating this process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44694:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3453:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:2637":{"id":"0:161:2637","crate_id":0,"name":"lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:2637":{"id":"0:200:2637","crate_id":0,"name":"lock","span":{"filename":"src/raw_mutex.rs","begin":[66,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:28629":{"id":"2:13295:28629","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13296:28630"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,9],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:160:2343":{"id":"0:160:2343","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_fair_mutex.rs","begin":[17,4],"end":[17,69]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutex","id":"20:20:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"a:2:3242:3985-0:195:2358":{"id":"a:2:3242:3985-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2988-0:31:2347":{"id":"b:2:2988-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32473:3736-0:125:2355":{"id":"a:2:32473:3736-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3736","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:414-0:82:2350":{"id":"0:414-0:82:2350","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,45],"end":[42,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutex","name":"FairMutex","id":"0:82:2350","glob":false}}},"0:296:3163":{"id":"0:296:3163","crate_id":0,"name":"upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[368,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[25,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:2505"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:425-0:155:2357":{"id":"0:425-0:155:2357","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_fair_mutex::RawFairMutex","name":"RawFairMutex","id":"0:155:2357","glob":false}}},"2:13289:28601":{"id":"2:13289:28601","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13377:34986":{"id":"2:13377:34986","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2999-0:195:2358":{"id":"b:2:2999-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2761:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:704"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:461:2958":{"id":"0:461:2958","crate_id":0,"name":"InProgress","span":{"filename":"src/once.rs","begin":[30,4],"end":[30,14]},"visibility":"default","docs":"A thread is currently executing a closure.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[36,0],"end":[52,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:123:2964","0:124:2968"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2711-0:456:2356":{"id":"b:2:2711-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3233"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:467:480":{"id":"0:467:480","crate_id":0,"name":"clone","span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2714-0:31:2347":{"id":"b:2:2714-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:3235"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2984-0:155:2357":{"id":"b:2:2984-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2987:4014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:266:3122":{"id":"0:266:3122","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:365:2364":{"id":"0:365:2364","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[59,0],"end":[59,98]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutexGuard","id":"20:855:2364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:383:2366":{"id":"0:383:2366","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[112,0],"end":[112,90]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockReadGuard","id":"20:900:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:416-0:89:2352":{"id":"0:416-0:89:2352","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,72],"end":[42,92]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::MappedFairMutexGuard","name":"MappedFairMutexGuard","id":"0:89:2352","glob":false}}},"2:13374:34985":{"id":"2:13374:34985","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12986:15113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:3056":{"id":"0:270:3056","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_rwlock.rs","begin":[142,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13404:28552":{"id":"2:13404:28552","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:39244"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32473:3736-0:31:2347":{"id":"a:2:32473:3736-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3736","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:438-0:373:233":{"id":"0:438-0:373:233","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,65],"end":[53,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLock","name":"RwLock","id":"0:373:233","glob":false}}},"b:2:2711-0:259:2359":{"id":"b:2:2711-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3233"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42277:3770-0:456:2356":{"id":"a:2:42277:3770-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:3770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32414:237-0:443:2348":{"id":"a:2:32414:237-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32473:3736-0:443:2348":{"id":"a:2:32473:3736-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3736","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:443:2348":{"id":"0:443:2348","crate_id":0,"name":"WaitTimeoutResult","span":{"filename":"src/condvar.rs","begin":[23,0],"end":[23,35]},"visibility":"public","docs":"A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:3207:247-0:443:2348","a:2:32414:237-0:443:2348","a:2:42277:3770-0:443:2348","a:2:3242:3985-0:443:2348","a:2:42276:3771-0:443:2348","a:2:32473:3736-0:443:2348","b:2:2999-0:443:2348","b:2:2994-0:443:2348","b:2:3823-0:443:2348","b:2:2714-0:443:2348","b:2:2984-0:443:2348","b:2:2988-0:443:2348","b:2:2711-0:443:2348","b:5:793-0:443:2348","0:451","0:449","0:446","0:448","0:453","0:454"]}}},"0:167:2719":{"id":"0:167:2719","crate_id":0,"name":"bump","span":{"filename":"src/raw_fair_mutex.rs","begin":[47,4],"end":[49,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[59,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked","is_locked_exclusive"],"trait":{"name":"RawRwLock","id":"20:436:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:262:2864","0:263:2343","0:264:3117","0:265:3121","0:266:3122","0:267:3125","0:268:3128","0:269:3130","0:270:3056","0:271:3133"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2988-0:125:2355":{"id":"b:2:2988-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2714-0:195:2358":{"id":"b:2:2714-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:3235"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2994-0:259:2359":{"id":"b:2:2994-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2997:138","2:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:293:3155":{"id":"0:293:3155","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[324,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:1006":{"id":"2:13271:1006","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12363:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[52,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:3057","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:169:131","0:170:162","0:171:3058","0:172:3059"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13294:28626":{"id":"2:13294:28626","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13293:28625","str::split_at_mut_checked":"2:13296:28630"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:28543":{"id":"2:13279:28543","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12507:15116"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:34968":{"id":"2:13273:34968","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:2956":{"id":"0:459:2956","crate_id":0,"name":"Poisoned","span":{"filename":"src/once.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":"A closure was executed but panicked.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:84:2349":{"id":"0:84:2349","crate_id":0,"name":"const_fair_mutex","span":{"filename":"src/fair_mutex.rs","begin":[82,0],"end":[84,1]},"visibility":"public","docs":"Creates a new fair mutex in an unlocked state ready for use.\n\nThis allows creating a fair mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"FairMutex","id":"0:82:2350","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:455:480":{"id":"0:455:480","crate_id":0,"name":"clone","span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32414:237-0:259:2359":{"id":"a:2:32414:237-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:377:234":{"id":"0:377:234","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[99,0],"end":[99,78]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockReadGuard","id":"20:872:234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:269:3130":{"id":"0:269:3130","crate_id":0,"name":"unlock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[129,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[119,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:3053","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:205:3055","0:206:2719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:355:2362":{"id":"0:355:2362","crate_id":0,"name":"RawThreadId","span":{"filename":"src/remutex.rs","begin":[13,0],"end":[13,23]},"visibility":"public","docs":"Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:3207:247-0:355:2362","a:2:32414:237-0:355:2362","a:2:42277:3770-0:355:2362","a:2:3242:3985-0:355:2362","a:2:42276:3771-0:355:2362","a:2:32473:3736-0:355:2362","b:2:2999-0:355:2362","b:2:2994-0:355:2362","b:2:3823-0:355:2362","b:2:2714-0:355:2362","b:2:2984-0:355:2362","b:2:2988-0:355:2362","b:2:2711-0:355:2362","0:357"]}}},"0:386:2367":{"id":"0:386:2367","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[121,0],"end":[121,92]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockWriteGuard","id":"20:907:2367","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:2999-0:31:2347":{"id":"b:2:2999-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:282:3145":{"id":"0:282:3145","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/raw_rwlock.rs","begin":[210,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:3144","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:704":{"id":"0:472:704","crate_id":0,"name":"eq","span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:60":{"id":"0:66:60","crate_id":0,"name":"default","span":{"filename":"src/condvar.rs","begin":[514,4],"end":[516,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:3165":{"id":"0:297:3165","crate_id":0,"name":"try_upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[380,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2714-0:259:2359":{"id":"b:2:2714-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:3235"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:358:2864":{"id":"0:358:2864","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[16,4],"end":[16,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"RawThreadId"}}},"a:2:32473:3736-0:456:2356":{"id":"a:2:32473:3736-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3736","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13293:28625":{"id":"2:13293:28625","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13295:28629","str::split_at_mut":"2:13294:28626"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42276:3771-0:355:2362":{"id":"a:2:42276:3771-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:3771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:436-0:383:2366":{"id":"0:436-0:383:2366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,18],"end":[53,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockReadGuard","name":"MappedRwLockReadGuard","id":"0:383:2366","glob":false}}},"2:13333:28635":{"id":"2:13333:28635","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12960:3837","`DoubleEndedIterator`":"2:8329:130","prim@char":"1:12363:476","str::split":"2:13327:28631"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44061:7026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13370:34982":{"id":"2:13370:34982","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3823-0:456:2356":{"id":"b:2:3823-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42276:3771-0:31:2347":{"id":"a:2:42276:3771-0:31:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:3771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3207:247-0:355:2362":{"id":"a:2:3207:247-0:355:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:355:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13395:34990":{"id":"2:13395:34990","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12921:137","`FromStr`":"2:12920:3714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12920:3714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12920:3714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:35690":{"id":"5:5712:35690","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:3737","`String`":"5:7754:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3737","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359:3212":{"id":"0:359:3212","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[18,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"2:23509:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42277:3770-0:155:2357":{"id":"a:2:42277:3770-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:3770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2999-0:155:2357":{"id":"b:2:2999-0:155:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:155:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:170:162":{"id":"0:170:162","crate_id":0,"name":"Instant","span":{"filename":"src/raw_fair_mutex.rs","begin":[54,4],"end":[54,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:3057","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:290:3153":{"id":"0:290:3153","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/raw_rwlock.rs","begin":[296,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:454:3144","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419-0:101:2354":{"id":"0:419-0:101:2354","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,35],"end":[43,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MappedMutexGuard","name":"MappedMutexGuard","id":"0:101:2354","glob":false}}},"2:13313:28147":{"id":"2:13313:28147","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12363:476","self::pattern":"2:12960:3837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2988-0:443:2348":{"id":"b:2:2988-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[270,0],"end":[292,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursive","id":"20:461:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:287:3150","0:288:3151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13339:34976":{"id":"2:13339:34976","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12960:3837","str::split":"2:13327:28631","prim@char":"1:12363:476","str::split_terminator":"2:13336:34975"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44111:7204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32473:3736-0:195:2358":{"id":"a:2:32473:3736-0:195:2358","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32473:3736","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:56:2652":{"id":"0:56:2652","crate_id":0,"name":"wait_while","span":{"filename":"src/condvar.rs","begin":[427,4],"end":[433,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification. If the provided condition evaluates to `false`, then the\nthread is no longer blocked and the operation is completed. If the\ncondition evaluates to `true`, then the thread is blocked again and\nwaits for another notification before repeating this process.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:98:187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3453:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2714-0:125:2355":{"id":"b:2:2714-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2716:3235"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:172:3059":{"id":"0:172:3059","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_fair_mutex.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:3057","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42277:3770-0:125:2355":{"id":"a:2:42277:3770-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:3770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13351:28642":{"id":"2:13351:28642","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:15114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5696:35686":{"id":"5:5696:35686","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3737","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:3737","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:442-20:0:2344":{"id":"0:442-20:0:2344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[56,0],"end":[56,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"::lock_api","name":"lock_api","id":"20:0:2344","glob":false}}},"0:285:3148":{"id":"0:285:3148","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/raw_rwlock.rs","begin":[253,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9430:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5697:3959":{"id":"5:5697:3959","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3242:3985-0:456:2356":{"id":"a:2:3242:3985-0:456:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:456:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211:3059":{"id":"0:211:3059","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_mutex.rs","begin":[163,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44694:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[141,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:3057","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:195:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:208:131","0:209:162","0:210:3058","0:211:3059"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:441":{"id":"0:131:441","crate_id":0,"name":"call_once","span":{"filename":"src/once.rs","begin":[151,4],"end":[161,5]},"visibility":"public","docs":"Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.\n\nThis method will block the calling thread if another initialization\nroutine is currently running.\n\nWhen this function returns, it is guaranteed that some initialization\nhas run and completed (it may not be the closure specified). It is also\nguaranteed that any memory writes performed by the executed closure can\nbe reliably observed by other threads at this point (there is a\nhappens-before relation between the closure and code executing after the\nreturn).\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\n// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g. write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\nfn get_cached_val() -> usize {\n    unsafe {\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\nfn expensive_computation() -> usize {\n    // ...\n# 2\n}\n```\n\n# Panics\n\nThe closure `f` will only be executed once if this is called\nconcurrently amongst many threads. If that closure panics, however, then\nit will *poison* this `Once` instance, causing all future invocations of\n`call_once` to also panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3456:143","args":{"parenthesized":{"inputs":[],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2357":{"id":"0:155:2357","crate_id":0,"name":"RawFairMutex","span":{"filename":"src/raw_fair_mutex.rs","begin":[12,0],"end":[12,34]},"visibility":"public","docs":"Raw fair mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3207:247-0:155:2357","a:2:32414:237-0:155:2357","a:2:42277:3770-0:155:2357","a:2:3242:3985-0:155:2357","a:2:42276:3771-0:155:2357","a:2:32473:3736-0:155:2357","b:2:2999-0:155:2357","b:2:2994-0:155:2357","b:2:3823-0:155:2357","b:2:2714-0:155:2357","b:2:2984-0:155:2357","b:2:2988-0:155:2357","b:2:2711-0:155:2357","0:158","0:165","0:168"]}}},"a:2:42276:3771-0:443:2348":{"id":"a:2:42276:3771-0:443:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42276:3771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:443:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42277:3770-0:259:2359":{"id":"a:2:42277:3770-0:259:2359","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42277:3770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:259:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:421-0:98:187":{"id":"0:421-0:98:187","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,60],"end":[43,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MutexGuard","name":"MutexGuard","id":"0:98:187","glob":false}}},"2:13285:2894":{"id":"2:13285:2894","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711:35689":{"id":"5:5711:35689","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3242:3985-0:125:2355":{"id":"a:2:3242:3985-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3242:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:208:131":{"id":"0:208:131","crate_id":0,"name":"Duration","span":{"filename":"src/raw_mutex.rs","begin":[142,4],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44694:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2711-0:125:2355":{"id":"b:2:2711-0:125:2355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32415:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:125:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2713:3233"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"17:15753:5813":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"21:17:4647":{"crate_id":21,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"16:7416:6430":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:44265:7208":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:14963:5577":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:1833:4278":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"16:2950:6150":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:40715:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:44111:7204":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12840:5244":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:5962:3401":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:16761:6089":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:15931:5859":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"25:1537:8201":{"crate_id":25,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:317:4908":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:21771:9962":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:8291:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:10396:3994":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"25:5656:8698":{"crate_id":25,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:384:3942":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:33909:3607":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:44846:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"25:7412:9010":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"20:848:2354":{"crate_id":20,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"1:4143:9882":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:39840:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:4902:6193":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:5172:6201":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:2548:3437":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:7316:8963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44342:7117":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:3441:6178":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:15160:5612":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:16323:5981":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:898:4667":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:6843:6344":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:1410:6715":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:7604:9096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:1259:35768":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10549:5048":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"14:0:3427":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:23058:32991":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:2366:6731":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:2492:9826":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:22579:9836":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:31201:3980":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:2966:6151":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:40944:6982":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:8329:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:11247:7021":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:40935:7138":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:4816:8339":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:23043:32977":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:21739:33119":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:306:3737":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:1563:8218":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"22:271:3060":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkToken"],"kind":"struct"},"25:4982:8433":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13041:5269":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:2338:4110":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"25:7306:8958":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:47148:7365":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:2932:15177":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13983:5380":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:10387:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4957:8421":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2748:7417":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:44446:7214":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"25:6471:8767":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2726:4737":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:15418:5720":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:32391:7100":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:7431:9011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:12981:15114":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:5337:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"20:840:187":{"crate_id":20,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"17:13798:5346":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:15586:5775":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:46398:7294":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:5139:8483":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:12388:1927":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:47262:7377":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:907:6706":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:5549:15105":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6866:22474":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:16714:6079":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"25:1630:8268":{"crate_id":25,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:42110:7160":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:40653:7119":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:10352:7585":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:44639:7231":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:581:3980":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6731:8885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:5100:9931":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:12380:912":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"25:6447:8758":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:2860:6146":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:23105:3716":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11818:5118":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:7660:9760":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:44360:7116":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"25:5639:8694":{"crate_id":25,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:3444:2712":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:16399:5997":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:6748:8888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:15573:5770":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:4844:6191":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"25:5247:8518":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:21842:7061":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"23:118:4636":{"crate_id":23,"path":["smallvec","SmallVec"],"kind":"struct"},"16:6389:6255":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:4205:9886":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"11:434:36194":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:36449:3614":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:7305:6419":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"11:1023:6715":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12570:5220":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4805:8331":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:8626:6611":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2476:9821":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:13034:15121":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:4956:6195":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:10418:9951":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:5318:6206":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:706:4886":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:47232:7375":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:2081:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:8612:6174":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12886:5250":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:1898:4702":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:43124:4003":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:12382:1865":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"25:544:8151":{"crate_id":25,"path":["libc","unix","winsize"],"kind":"struct"},"17:16241:5964":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:14902:5566":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6588:6295":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"25:1492:8179":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:1158:6720":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:4809:9885":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"10:44:6733":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:6408:6262":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:4819:9002":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:10406:3998":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:43970:7196":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"25:4879:8385":{"crate_id":25,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"8:0:3422":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13014:5266":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"5:1239:34706":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"25:4814:8339":{"crate_id":25,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5186:8487":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:12475:15259":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"20:27:3053":{"crate_id":20,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"20:880:235":{"crate_id":20,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8175:4987":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:12390:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:15315:5634":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7518:9057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"25:5023:8455":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:12387:975":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:44297:7209":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:4569:4688":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:1379:6454":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:14821:5556":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:2437:4926":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:10335:3992":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11579:5097":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"23:350:9141":{"crate_id":23,"path":["smallvec","ConstNonNull"],"kind":"struct"},"6:4792:8322":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:4215:9887":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6822:22473":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"11:2323:6715":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:34227:3610":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:4696:9912":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12293:5172":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:15621:5779":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:4:1266":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13610:5308":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:12346:27372":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:4012:7430":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:40912:6978":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:1696:8304":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:896:6115":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:1690:8303":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12787:5237":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:7508:6448":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:40720:7123":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:7067:4710":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8495:9835":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14832:5557":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:40083:15178":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:46815:7354":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:13706:32901":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:155:4652":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:5441:8604":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:11210:7562":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"15:306:21563":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"25:5373:8568":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:5676:8707":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12028:5135":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:2920:6149":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:10764:4734":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:10013:809":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"1:8614:7537":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:7767:6833":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"25:5475:8628":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:11691:5103":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:22734:10039":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:4829:8349":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"21:58:26748":{"crate_id":21,"path":["scopeguard","Always"],"kind":"enum"},"1:8337:7484":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11232:22559":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:2590:6134":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:46103:7271":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12673:5225":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:16036:5886":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:5449:6210":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:43190:4003":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:10394:22540":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:6716:8883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"25:4888:8390":{"crate_id":25,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6599:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:2265:2710":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:12379:906":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"25:8006:9103":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:43628:7182":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:9448:3640":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10977:36233":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5311:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:15887:5845":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:2559:9155":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11798:4780":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:15953:5864":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8545:7209":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:11676:7458":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6808:6153":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:22248:7060":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4896:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"25:4995:8439":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:22607:4093":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:40974:6988":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:7558:4024":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7542:6453":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:10961:7584":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:6680:8872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"25:1595:8239":{"crate_id":25,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5179:8486":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:6691:8874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:8437:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"25:6505:8789":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"15:394:21572":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"9:422:21461":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12749:5234":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:12041:7033":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:12149:5154":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:32474:3989":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4914:8404":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"25:7359:8987":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:3014:21609":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:8043:36216":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5019:8452":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15836:5832":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:7594:4024":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13361:5288":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5205:8499":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:44860:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7578:7575":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"25:7584:9093":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11653:5100":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:2406:4923":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:46060:7268":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:21822:9836":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:22555:10046":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:42182:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:7077:4712":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:11757:22579":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:5375:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:15829:5831":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13909:5369":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:23240:7092":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:10442:22542":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:7765:6485":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:14438:5485":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:22381:9960":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:39820:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:10648:9840":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:44492:7223":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8347:9867":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"25:6524:8791":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:2803:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:40953:7139":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:7502:6822":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"25:7561:9081":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6473:8767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6696:6323":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10141:22532":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"25:5184:8487":{"crate_id":25,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:3450:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:7544:34517":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"25:5410:1253":{"crate_id":25,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:12698:7040":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:16008:5878":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:3258:3603":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"11:396:4658":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2772:6142":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:21737:33121":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:12314:7608":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:1112:6720":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4881:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:40965:6987":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:21720:33127":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:4219:9888":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:14708:5521":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:14560:5500":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"25:6542:8803":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:34573:3613":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:1514:8187":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:10516:22544":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:15549:5768":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:5712:7449":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:740:6705":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:16632:6059":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:10487:22543":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:8028:3930":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:3036:4754":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:4327:9906":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:473:8110":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:11222:6721":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:8382:3734":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:1486:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:4694:6188":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:43960:7195":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"25:5323:8552":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:5170:3759":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8809:9944":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:2551:36190":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"18:680:4881":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"14:165:21543":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:5626:7447":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:39782:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:1625:6705":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:13969:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12306:5174":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:15919:5856":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:8008:9103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"11:2440:4632":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:12375:761":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:47209:7370":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11777:5112":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:7308:8958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:0:3429":{"crate_id":16,"path":["gimli"],"kind":"module"},"21:0:3585":{"crate_id":21,"path":["scopeguard"],"kind":"module"},"1:5841:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:532:2710":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:5150:4688":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:5586:8664":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12983:22677":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:7368:8991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:7454:9018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:6576:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:2958:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:5450:8610":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:44326:7212":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2642:7416":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:34400:3611":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:506:4913":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11475:22559":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"5:7574:6824":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"23:331:4639":{"crate_id":23,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"1:10601:7560":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12204:5159":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:6016:4632":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:11665:7176":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"17:12008:4986":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:12386:1841":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:21705:33116":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:10630:4902":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:1589:8234":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:6544:8803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:2684:6138":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"25:537:8148":{"crate_id":25,"path":["libc","unix","pollfd"],"kind":"struct"},"11:1907:6726":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"25:4962:8424":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"25:496:8119":{"crate_id":25,"path":["libc","unix","rusage"],"kind":"struct"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:13592:5305":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:9262:2348":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13095:5270":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:9407:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:7016:6363":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"25:6478:8769":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:5060:6197":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:5780:8912":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"25:6657:8866":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"25:7516:9057":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:2708:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"11:123:4654":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:11503:5088":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"5:4217:6721":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4875:8383":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:1632:8268":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11688:7462":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"25:6609:8845":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:33369:3602":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:15064:5597":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:14114:5417":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:2796:6143":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:1902:7407":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13471:4931":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:8565:6605":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:2301:6454":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:573:2940":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"14:40:5343":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"25:5286:8540":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:41036:6992":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"25:1561:8218":{"crate_id":25,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:6666:8867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:14750:5542":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:4716:3680":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"25:563:8161":{"crate_id":25,"path":["libc","unix","itimerval"],"kind":"struct"},"17:11124:36227":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"14:31:6696":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"25:6788:8905":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:22935:9243":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:465:8105":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:0:1011":{"crate_id":6,"path":["libc"],"kind":"module"},"1:11104:4777":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10418:22541":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:11229:3674":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:7044:6161":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11958:5128":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:23747:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:16739:6087":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:12960:3837":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:7329:4767":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:7907:6524":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:3910:7429":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:3318:34708":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:3071:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"22:197:2495":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkResult"],"kind":"enum"},"2:3660:3630":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12851:5248":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:46605:7317":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:8249:9116":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2961:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11114:5067":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:44729:3675":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:553:8156":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:3440:7423":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:1864:7405":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:16179:5942":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:4227:9890":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:6876:6348":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:7350:6425":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:38435:3617":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"23:363:26757":{"crate_id":23,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"2:33641:3604":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"25:8294:9126":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:9199:7565":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13157:5273":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:40816:7126":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:39745:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:22867:7063":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:545:8151":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5255:8520":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:8031:9114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12082:5148":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:4927:9898":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:3834:6181":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:30801:3967":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:1643:8276":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7030:6365":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:8771:7176":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:40893:134":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:2239:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:5069:8478":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:564:8161":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:16385:5994":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5641:8694":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:16341:5987":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:9716:7477":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"25:1487:8177":{"crate_id":25,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:10944:7479":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:6410:7454":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:11356:7603":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:13570:22549":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:42702:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"25:5317:8551":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:43849:7185":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:14055:5394":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"9:500:6785":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:2466:4702":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:13349:5287":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:8280:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12583:5221":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:42371:4024":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:44147:7028":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:3845:9879":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:2322:7414":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:10039:9314":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"20:907:2367":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:12369:1735":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"11:798:4632":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11173:36229":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12234:5163":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:13912:4746":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:10509:28029":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"10:36:9157":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:9403:4688":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:11861:7429":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:6972:4730":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:2047:3961":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:15641:5787":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:10392:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:538:8148":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"25:472:8110":{"crate_id":25,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:32415:2606":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:40796:7125":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:10663:4903":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:5249:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"25:4968:8425":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:42895:3996":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:3587:6179":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:14127:5421":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"25:5403:8584":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:7485:6803":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:40687:7120":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:16812:6099":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:7534:6823":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"25:490:8116":{"crate_id":25,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10534:5047":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:42363:6721":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:6149:6979":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:2040:676":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:43207:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:3212:3694":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:21683:3980":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:6967:9242":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:7043:4639":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:40599:6969":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:44461:7219":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11566:5095":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:5946:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"25:6491:8778":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:42739:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13838:5357":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:40531:7110":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46299:7289":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"23:344:26756":{"crate_id":23,"path":["smallvec","ToSmallVec"],"kind":"trait"},"6:5366:8562":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"20:20:2358":{"crate_id":20,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"16:7554:22478":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:14886:5564":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:5976:4688":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"3:0:510":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:3679:33217":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:3088:6838":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:42478:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:6640:6300":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:41022:3200":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:46937:7356":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8342:7485":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"25:6714:8883":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:4184:6184":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:15439:5728":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:3563:4688":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:8058:6541":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"22:73:2498":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_PARK_TOKEN"],"kind":"constant"},"25:5105:8480":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:2990:6152":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:532:8145":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12962:22676":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:1614:6704":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6813:8911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"25:6746:8888":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:3249:3987":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"25:5332:8555":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:6758:8895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:32473:3736":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:47247:7376":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"25:6874:8925":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:46316:7290":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47157:7366":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6462:22472":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:12389:1430":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12359:5181":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:1424:6720":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:583:4914":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:8185:7478":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:677:7398":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:46383:7293":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12605:5068":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:3729:6721":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5709:22468":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:2275:6807":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:3442:7424":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:22701:10040":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"25:5620:8685":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12860:5249":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:8066:22480":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:979:6711":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:42776:3559":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:2533:9150":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:42441:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:6286:4757":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:8598:6609":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:15812:5823":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:3716:6703":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:1489:8177":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:454:3144":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"6:1597:8239":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:14672:5515":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13222:22545":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:42307:3935":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:44061:7026":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6740:8887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:16362:5990":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11606:5068":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:15351:5665":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:7156:9956":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13933:5373":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:1140:6719":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:11222:5069":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"25:5215:8506":{"crate_id":25,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:8298:6559":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:14375:5474":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11001:7476":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:42266:3768":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:4774:9929":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:515:4848":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:14975:5579":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:7168:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:13070:5068":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:12383:1847":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:42122:7431":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:1621:4632":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:30763:3965":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:563:4860":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6064:6159":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"11:328:9237":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:6902:8940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:4142:4632":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6507:8789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:15431:5727":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:15540:5767":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9430:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"22:233:2496":{"crate_id":22,"path":["parking_lot_core","parking_lot","RequeueOp"],"kind":"enum"},"1:4305:31508":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:2748:6141":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2727:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:13169:5274":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:5051:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:41976:9878":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11026:36231":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:3373:6728":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:11432:22558":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:3694:3635":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13398:5291":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:5545:15104":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:2320:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:4408:7432":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:7807:36222":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:10761:3930":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"15:327:9292":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:46045:7267":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:32945:3600":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:698:4884":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:9422:2367":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:5649:6211":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:6722:3662":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7838:22479":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:505:4749":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:42888:3995":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:10613:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:11539:5093":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6437:8754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11291:36228":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:1849:701":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:5501:4664":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:8320:22482":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5036:8460":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12687:5229":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:44093:7203":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:47069:7360":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:378:3941":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:8300:3735":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7358:6163":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6534:8796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:5809:4639":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:16084:5923":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:7731:6832":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"25:4840:8359":{"crate_id":25,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:12376:740":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"18:718:4890":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:13733:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7386:6427":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:7391:9009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:9709:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:11831:5093":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13385:5289":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:5224:6203":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10778:5049":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"25:5339:8556":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:3202:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:39732:3626":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12537:5217":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:2474:4083":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:12952:5257":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:5494:8633":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"9:355:21474":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"11:1893:4702":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:5592:7442":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:12364:1887":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:22974:3715":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"25:5568:8659":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:4431:6970":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:46584:7316":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:45993:7264":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:1584:8232":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:920:6707":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:5291:7441":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:507:4851":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"25:1623:8264":{"crate_id":25,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:43636:7019":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:47285:7378":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:9395:2354":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:43868:7188":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15557:5769":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:6041:3661":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:23116:3730":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:0:3421":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"25:6775:8898":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:5325:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8234:7415":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"13:110:36200":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:41006:6990":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:43858:7187":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"25:516:8136":{"crate_id":25,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"25:5393:8578":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:6631:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:6362:4746":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:43789:7183":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:16555:6045":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:2591:677":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"13:0:3420":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:2761:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"25:5492:8633":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:44718:3644":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12906:5252":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:13635:5309":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4964:8424":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:3465:4702":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"11:1105:6718":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:5309:3654":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:42218:6721":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"14:202:15129":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"11:2148:6716":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"20:461:3149":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"2:2605:4093":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:7259:6417":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"25:6698:8880":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:9527:7014":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:4536:4688":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:2545:9152":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:42210:6703":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"22:0:2375":{"crate_id":22,"path":["parking_lot_core"],"kind":"module"},"25:5228:8510":{"crate_id":25,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:11098:4776":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:5255:6204":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:44002:7200":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11163:5068":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:9953:789":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"2:42404:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13781:5343":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:1011:6703":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:2415:21581":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7495:6445":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:3339:6727":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:6928:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8486:7427":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"25:5505:8638":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"25:1665:8293":{"crate_id":25,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:44922:33956":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:4674:9911":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40987:7140":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12371:5182":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:30827:32992":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:6100:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:21938:9836":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:15785:5819":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:3433:3620":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"16:7938:6533":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6573:6292":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11902:5125":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:46214:7284":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"25:5347:8557":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:42881:3993":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"25:8328:9133":{"crate_id":25,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:38325:3615":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:12975:4886":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:7776:32975":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:1727:8316":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:40694:7121":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:44959:7245":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:39760:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:3533:7147":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10696:4904":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"14:220:6701":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:4721:3681":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6188:6230":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:3288:3623":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:9126:7561":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:6072:4688":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:42298:4162":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:8284:9124":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"25:8265:9119":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:5379:6208":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:46185:7283":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:45893:7254":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:8622:7530":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5488:8631":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:41046:7143":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:9109:7560":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:10353:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12216:5161":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:41922:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:7514:4632":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:667:4915":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"25:6650:8865":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:9293:27381":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2705:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"25:6629:8853":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4997:8439":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:1630:6725":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:8302:9127":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:1647:6728":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:23007:7071":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:3415:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:985:6713":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:10830:4736":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"23:328:26755":{"crate_id":23,"path":["smallvec","Array"],"kind":"trait"},"17:15731:5807":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:1657:8287":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:14346:5469":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6256:6239":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:1645:6802":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5349:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"5:6535:10051":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:11938:7605":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"11:0:3425":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:14586:5503":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:7719:6829":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:1103:6716":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:39684:3634":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:3695:6180":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:2377:9241":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5295:8542":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13719:5327":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:13322:22547":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"11:1085:36189":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6421:6108":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:8105:6543":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:15286:5614":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:3141:4941":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:12135:5153":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:10862:4741":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:30816:4003":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"25:5049:8467":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43425:7176":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"25:7537:9071":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:13889:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:2704:6139":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:1900:6725":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:41944:7006":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6723:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:3301:32610":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6144:22469":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"25:7602:9096":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:830:6722":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:16684:6071":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:6884:4664":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13119:5271":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:5635:8691":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:1132:4664":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:23273:7095":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"16:7789:36220":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:1094:6715":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:7577:9090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:5114:9932":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11985:5130":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:8202:7480":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:5727:5047":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:9182:7451":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:5507:8638":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:559:8159":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:16198:5948":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:5282:8537":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:16026:5881":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:16775:6093":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:9314:7571":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:14220:5427":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:765:26739":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:635:4873":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:10973:7427":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"7:79:21452":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:835:6708":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:22517:10045":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:8076:9792":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:10296:22537":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7462:6441":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:22260:33124":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:2620:6135":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:14327:5464":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:14405:5477":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"9:445:21459":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"12:0:3426":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:1794:4664":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:7372:6164":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:2378:22606":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6611:8845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10167:22533":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6440:22471":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:7350:8982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:42162:7011":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:21693:33116":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:14773:5551":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:16187:5943":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:7999:4895":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:5606:7446":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6658:6314":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:11727:9253":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"20:900:2366":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:12335:9750":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"0:0:2374":{"crate_id":0,"path":["parking_lot"],"kind":"module"},"1:6800:3658":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"25:8271:9120":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:994:4672":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:3306:6703":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"25:522:8139":{"crate_id":25,"path":["libc","unix","hostent"],"kind":"struct"},"5:7649:6825":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:7605:4032":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:12392:5184":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"25:5627:8688":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"25:5269:8529":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6882:8926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11358:22556":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6904:6351":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"23:0:3587":{"crate_id":23,"path":["smallvec"],"kind":"module"},"6:5117:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:40:4660":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:2227:4919":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"25:4988:8436":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"25:6689:8874":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"25:5239:8514":{"crate_id":25,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:876:6703":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"25:531:8145":{"crate_id":25,"path":["libc","unix","iovec"],"kind":"struct"},"11:364:4656":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:15024:5592":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:11086:4775":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:9551:7408":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:33842:3605":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:8636:22483":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13055:5093":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"25:1694:8304":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:6132:3654":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:40786:4724":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:8247:15225":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:46153:7281":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"25:6678:8872":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:3649:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:8538:7021":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:8483:6596":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"22:83:2636":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","acquire_resource"],"kind":"function"},"6:6765:8896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:10605:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:11329:7024":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:44652:7235":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:4497:15156":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:7563:9081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10031:22529":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5682:8710":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14947:5573":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:5658:8698":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:21722:33122":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:12491:7034":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:16507:5342":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:21751:33128":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:1979:7410":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:26147:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:10350:7586":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"20:218:3586":{"crate_id":20,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"20:436:2359":{"crate_id":20,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"2:22221:9836":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"25:8288:9125":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"25:5137:8483":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:41410:7147":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5533:8640":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:16332:5985":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"25:7330:8975":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"25:6636:8854":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:44540:7225":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"22:284:3101":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkToken"],"kind":"struct"},"2:13196:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5405:8584":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:7212:6404":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:42088:33000":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:22687:9836":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:44475:7222":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:2171:6805":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:3307:27911":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:5091:9930":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:16218:5951":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"25:484:8115":{"crate_id":25,"path":["libc","unix","timespec"],"kind":"struct"},"6:4842:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:3352:34711":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:954:6704":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:9721:4772":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:9326:7573":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:12920:3714":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2015:792":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:5520:8639":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"25:5163:8485":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13921:5372":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:14796:5552":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:3907:7428":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8056:9748":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:5519:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"25:6664:8867":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:44247:7207":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:6857:3663":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:7471:6444":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:11041:9836":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:13601:7051":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"5:3940:4702":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:15777:5817":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5127:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:14627:5510":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"25:6756:8895":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:2078:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10823:4910":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:47111:7362":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"25:5309:8548":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:5084:15165":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:47183:7368":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:23295:7097":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:44425:15127":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4947:8418":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:15689:5793":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:16668:6066":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"25:7461:9021":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7469:9022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:39728:3624":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"25:6880:8926":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:9211:9954":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:9466:3641":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:7586:9093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8628:7539":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"25:7452:9018":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6876:8925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5348:6207":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6984:6173":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:3047:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:46738:7322":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"25:5067:8478":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:2550:6132":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:0:568":{"crate_id":2,"path":["core"],"kind":"module"},"2:10394:3993":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:43182:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:22814:7062":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:41395:2355":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:949:6722":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6852:6345":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:40495:6969":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:9416:3769":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:44351:6969":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:7743:4699":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:30795:3966":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:11950:28010":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"25:5355:8558":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:1636:6726":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:16494:5328":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:4937:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:6638:8854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:43388:7169":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:14335:5466":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:2495:21532":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:15077:5598":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"25:1519:8190":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14738:5540":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:13290:5006":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"11:2566:6825":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:4925:9896":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:15531:5763":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:40997:7141":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:467:3099":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"16:8151:6172":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:8711:6618":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:322:4909":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8214:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"25:4955:8421":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3662:27442":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:659:4874":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11553:5094":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13958:5378":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11041:7563":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"22:72:2947":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_UNPARK_TOKEN"],"kind":"constant"},"1:10919:9252":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:8255:7483":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:8343:9137":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:32384:6505":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:40883:7133":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"25:8029:9114":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"25:4974:8428":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:1625:8264":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:42277:3770":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8859:6703":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"25:6721:8884":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"11:671:6703":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5319:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:16520:6015":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:11630:5099":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:5241:8514":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6239:6234":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:8091:7476":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:46622:7318":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:2880:6147":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"24:0:3422":{"crate_id":24,"path":["cfg_if"],"kind":"module"},"2:41429:7000":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:39890:3629":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:472:4911":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:4842:3690":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:3503:4927":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:9321:7572":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:14612:5507":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:3253:3598":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:16264:5965":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:10718:7421":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:14358:5471":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:42226:4024":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:12366:1324":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"25:8317:9132":{"crate_id":25,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"25:7366:8991":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:968:9761":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:14917:5570":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:42276:3771":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:7990:6538":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11448:5082":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:351:36191":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:1080:6454":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:1711:8311":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:14043:5393":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6462:8759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:3875:6805":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7521:6451":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6173:6228":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"25:5177:8486":{"crate_id":25,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7883:6266":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:2157:6804":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:3453:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12816:4931":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:46074:7269":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:8165:6162":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:5451:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"25:1505:8185":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8651:8991":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6493:8778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:5198:6202":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:9115:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:9412:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:10895:7595":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:43989:7197":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:46284:7288":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:6513:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:8267:6555":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"20:35:186":{"crate_id":20,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"25:5364:8562":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"9:0:3423":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6098:6219":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"25:478:8113":{"crate_id":25,"path":["libc","unix","timeval"],"kind":"struct"},"16:6731:6335":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:14019:5389":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:6914:6352":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:44970:6732":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:4563:7434":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5088:8479":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:3283:3622":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:1586:6706":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12056:5145":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:3639:3628":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:40823:7127":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:10843:5054":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:10928:5064":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:3399:7422":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:15090:5599":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12347:5180":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"25:5379:8570":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:698:4024":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:497:8119":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:2820:6144":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:221:4662":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:6738:36221":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:3346:7420":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:661:7397":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:12361:420":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:14001:5388":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13205:5277":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:908:4909":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:7731:3767":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:597:2670":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:8551:7530":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6443:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7223:6405":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6625:6298":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:12362:1184":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"25:5460:8619":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:2787:7418":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12869:5294":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:11702:7463":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"22:84:3086":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","release_resource"],"kind":"function"},"2:44694:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"25:7546:9074":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:42201:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:12374:745":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:14640:5511":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:7414:9010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:10715:7419":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"20:464:3152":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"1:11682:7604":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"20:872:234":{"crate_id":20,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"16:3308:6120":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:15:3302":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:23509:3209":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"type_alias"},"16:8223:6547":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5165:8485":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6942:6354":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:40903:6976":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2329:9818":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:44629:7227":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:6770:8897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:11882:7430":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"25:7429:9011":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:9226:9953":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:44850:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"20:888:2368":{"crate_id":20,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"5:3860:6804":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:735:6799":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:8308:9128":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5603:8671":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5395:8578":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14997:5590":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:8755:15224":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"25:6670:8870":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"25:8282:9124":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12163:5155":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11805:5117":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:3987:4954":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"6:4902:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10097:22530":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:14872:5561":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5224:8507":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:12149:4786":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:14299:5460":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"6:1494:8179":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:14072:5402":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:7885:7467":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:1500:8182":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:39800:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:15475:5757":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:43443:7181":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:517:8136":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:7990:3943":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12191:5158":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:1521:8190":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"11:854:6711":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:14024:9762":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:23023:32998":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:4795:3689":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:3304:27884":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:14284:5456":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"25:4945:8418":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"25:1709:8311":{"crate_id":25,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"25:5034:8460":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:12966:7014":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"25:6621:8852":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:11402:7026":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:40758:4906":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"25:5591:8666":{"crate_id":25,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"25:5222:8507":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:8261:9118":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:8137:6171":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:291:4664":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:32505:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"25:6821:8914":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"25:5042:8465":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:5783:9949":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:23137:9836":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:13427:5292":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"6:5387:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"25:6763:8896":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"5:1395:6716":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:4307:4688":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:7930:4770":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:680:7400":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"25:7314:8963":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:3654:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:15989:5873":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:1866:7406":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:46982:7357":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:113:26730":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:32380:7099":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"18:491:4850":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7058:6367":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:7401:4768":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:8515:7130":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"25:4790:8322":{"crate_id":25,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:4766:6189":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"25:1567:8220":{"crate_id":25,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4970:8425":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:7361:8987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:23207:7089":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:9848:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"25:5674:8707":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:45978:7263":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:12507:15116":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:3576:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:12363:476":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:46028:7266":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:3069:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:14807:5554":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"9:176:9305":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:11981:4784":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"2:44335:7043":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:4873:3582":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:12737:7042":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:44618:15128":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:6682:2355":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:5282:6205":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:15760:5814":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:15939:5862":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:16613:5356":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:8794:7553":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:46510:7314":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:4888:9911":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:4165:9884":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:10644:4773":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:5230:8510":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"25:6915:8951":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:15973:5870":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4990:8436":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6652:8865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13193:5276":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:14483:5490":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"11:685:6721":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:40702:7122":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:15876:5841":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:16283:5970":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"25:1655:8287":{"crate_id":25,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11016:5065":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12044:5141":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:0:1727":{"crate_id":1,"path":["std"],"kind":"module"},"1:5658:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12095:5150":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:3094:4079":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:12373:742":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:991:6714":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7959:6536":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"18:598:36238":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:11051:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"25:8341:9137":{"crate_id":25,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:21824:9958":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:3854:4930":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11617:5069":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:15701:5796":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:45925:7256":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10274:22536":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:45908:7255":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12122:5152":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:45876:7251":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:15946:5863":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"25:1682:8300":{"crate_id":25,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:5757:6213":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"25:8351:9139":{"crate_id":25,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:40501:7109":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:39910:7108":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:42626:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8525:7146":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:2450:6121":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6917:8951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"11:842:9761":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:4821:9004":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:8603:9249":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:523:8139":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6953:6355":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"9:480:21458":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:0:3430":{"crate_id":17,"path":["object"],"kind":"module"},"6:5551:8651":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3280:3621":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:2357:34568":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:943:4702":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"11:2539:9151":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:8585:6606":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:21769:9836":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:13890:5368":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"7:0:1917":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:3313:6726":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:23185:7087":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:4267:6186":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"14:187:21550":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11957:7466":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:8096:6542":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5288:8540":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:12367:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11457:5084":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:12035:5138":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"25:7485:9032":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"25:6519:8790":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"20:321:4847":{"crate_id":20,"path":["lock_api","remutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:3200:3695":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5462:8619":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12931:5255":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:11197:7561":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:16642:6060":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"11:2349:6716":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"25:5560:8657":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:45846:7247":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:4506:4691":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:15963:5867":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5541:8645":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:5113:6199":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:1642:6727":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:2182:6806":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:8596:7431":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4885:9933":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:1880:6703":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:2594:7988":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:589:4861":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:7777:6834":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"20:30:3057":{"crate_id":20,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"2:43413:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:479:8113":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:2797:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"20:479:3175":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"18:531:4855":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:46472:7312":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:46132:7280":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10803:4906":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:10793:5053":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:22473:10044":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:4241:6185":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:3242:3985":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:8673:7435":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"25:6900:8940":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:34054:3609":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:31174:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4984:8433":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7424:22477":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:44868:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:21948:9959":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:10938:36230":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6700:8880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6526:8791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:3671:9834":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:1862:2771":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:3268:3601":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:5848:4762":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13818:5356":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7282:6418":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:14140:5422":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:4113:9880":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:2968:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:13491:5296":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:962:6708":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"20:447:3134":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"6:1539:8201":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:7969:6537":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:2490:9825":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:44165:7029":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:785:6707":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12225:5162":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:2141:4108":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:41960:7008":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:1507:8185":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1564:4024":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5428:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:2150:4107":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:46170:7282":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13515:22548":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:7989:9836":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:15655:5790":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:2217:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:7241:4720":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:22729:10041":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:2931:9836":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:9853:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:8014:6170":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:7566:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:7216:4717":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:16377:5991":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:7463:9021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:5256:438":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:43950:7194":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8263:6804":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12249:5167":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:3095:35763":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"25:0:1011":{"crate_id":25,"path":["libc"],"kind":"module"},"2:4355:4688":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:8477:7522":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:15121:5605":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12736:5233":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:16822:5373":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:9390:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:1614:6703":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:7836:4702":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:46345:7291":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:11733:22578":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:13871:5363":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:6516:10050":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"11:1580:6723":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12826:5239":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:8319:9132":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:10334:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"20:88:4847":{"crate_id":20,"path":["lock_api","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:16656:6064":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:33708:3608":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:21950:7061":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:23196:7088":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"6:1684:8300":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:11312:9179":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"25:5005:8446":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"25:5469:8625":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"11:299:9234":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:6521:8790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5629:8688":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:12018:5133":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:9168:7564":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"25:4912:8404":{"crate_id":25,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:16209:5949":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:6378:4761":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:4404:6187":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:12377:918":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:16297:5972":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"25:5601:8671":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:1667:8293":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:4443:6971":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:816:3717":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:12625:5222":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"25:7389:9009":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:16171:5939":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:22:824":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:6159:6225":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:40557:7113":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:2486:6129":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:23229:7091":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:11509:7030":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:3097:9163":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:40614:15171":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:32416:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"25:6706:8881":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:2506:6130":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"25:7339:8981":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:15852:5834":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"25:6409:8739":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:46252:7286":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:491:8116":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:7476:31509":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:47324:7393":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"22:297:2946":{"crate_id":22,"path":["parking_lot_core","spinwait","SpinWait"],"kind":"struct"},"17:11720:5106":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:43915:7127":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:12661:7037":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11788:5114":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:8706:3763":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:15036:5593":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12897:5251":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:45961:7262":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:3347:6725":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:8243:3676":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:670:4880":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:7852:4706":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"7:32:21445":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:4107:9881":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:0:3431":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:6153:15497":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7337:6423":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"20:452:3141":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"5:7675:3934":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:23262:7094":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:47011:7358":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:5085:6198":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:735:26738":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:586:8173":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13306:5285":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:578:8169":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:44670:7047":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:46007:7265":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:3821:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:10034:33225":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:1595:6707":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:6337:6249":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:45940:7257":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11401:5078":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:11495:7029":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"25:1549:8210":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:22593:10047":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:8532:4906":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:10218:22534":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:41437:7002":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"25:8247:9116":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6998:6356":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:23174:7086":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:6837:6343":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"25:5486:8631":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:2766:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:41195:6995":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:1548:6721":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:7704:15249":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6449:8758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:32338:9154":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:10402:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:45861:7250":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:608:4868":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:23251:7093":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:11964:7466":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:8180:7477":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:9738:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:5196:8494":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"25:5115:8481":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:7487:9032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:6203:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:16832:5378":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:12776:5236":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:15864:5840":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"25:6597:8840":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:23284:7096":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"16:6123:6158":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13028:5268":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:10924:7478":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:10224:7157":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:8192:7479":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6502:21580":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:42663:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"25:8300:9127":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:11678:5102":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:12368:1701":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:8849:7436":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:1925:7408":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:14599:5505":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"11:1601:6724":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"25:1725:8316":{"crate_id":25,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:44211:7206":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:8267:9119":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"25:6460:8759":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"25:1498:8182":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:8330:9133":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:41381:6997":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:14312:5462":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"18:623:36237":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12524:5216":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:46555:7315":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:8028:6539":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"25:4927:8410":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:2325:3301":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6084:6215":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12176:5156":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"25:1528:8195":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11386:22557":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:5057:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:899:4024":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:2712:4751":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:12370:1825":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"15:288:21562":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:40921:7135":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:1339:4918":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:7401:36217":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5648:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:4171:9885":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"25:6562:8819":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:2228:5138":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:10597:4901":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6790:8905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:12330:9316":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:4929:9899":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:809:4702":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:1005:6454":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:40591:7116":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"23:164:4635":{"crate_id":23,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"2:44029:4906":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12711:5231":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:3207:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"25:8306:9128":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:4712:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"25:6811:8911":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8468:4895":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:763:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:8647:7541":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10115:22531":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:9275:7566":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:521:26740":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:43141:9175":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:15010:5591":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11075:36232":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:46267:7287":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6659:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:476:3171":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"1:6465:4762":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"11:1564:21537":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:4061:4024":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:43941:7193":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6302:6247":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:14933:5571":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:4983:4755":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:1964:4688":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:46089:7270":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12550:5219":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13006:5264":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5570:8659":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:7710:15174":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:9334:7575":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:11065:5066":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:8746:150":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"20:864:2361":{"crate_id":20,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"2:11367:7025":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:9417:2366":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:6961:6989":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:7827:15220":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4869:8382":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7159:6391":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:46643:7319":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"25:6768:8897":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"25:6441:8757":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:8247:7482":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:4152:6183":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:4343:9908":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8723:7550":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13266:22546":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"25:5280:8537":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"25:5439:8604":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:46717:7321":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"25:577:8169":{"crate_id":25,"path":["libc","unix","servent"],"kind":"struct"},"6:6411:8739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:5742:5048":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:12260:22650":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:14099:5411":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14520:5494":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"11:102:9233":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:23218:7090":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:39897:7107":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:6772:6983":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"25:5149:8484":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:5996:2347":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:44676:3674":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:1220:4916":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:14393:5475":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:1604:6722":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:1569:8220":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:22644:10048":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:12699:5230":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:10990:27530":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:2900:6148":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10784:5050":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:8179:6545":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:1049:6716":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:4563:3696":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:4478:15089":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:7341:8981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8228:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:23092:3729":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:42355:6703":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:6205:22470":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12920:5253":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11878:5068":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:10847:4737":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:8562:9877":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"25:7348:8982":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"9:236:7176":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"25:5418:8589":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:15769:5815":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:1927:7409":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:22920:7064":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:44838:9176":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:42315:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:11864:5121":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:3428:2500":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6672:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"20:256:2363":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"1:5006:9895":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:33775:3606":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"25:5646:8697":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:6708:8881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"20:215:3210":{"crate_id":20,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"6:5420:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:2840:6145":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:22999:7070":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:22658:4093":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"25:7984:9102":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:22985:32996":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"25:5194:8494":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"25:6738:8887":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:9286:3926":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13145:5272":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:6777:8898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:11527:5092":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40570:7114":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:16750:6088":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:5151:8484":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12992:5261":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:8255:9117":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:1920:6728":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:437:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11515:5089":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:3397:7421":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10246:22535":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"25:4867:8382":{"crate_id":25,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7192:22476":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:3928:4632":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"25:5086:8479":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"25:7575:9090":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:3036:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:3681:9855":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:8528:6600":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12798:22675":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:42515:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5025:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:47128:7363":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:16145:5930":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11851:5120":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:4337:4688":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"25:8253:9117":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:41419:4732":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:15496:5762":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:46493:7313":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12976:5259":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:6381:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:3731:3636":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:4455:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:2724:6140":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:7548:9074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:44909:7241":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:44843:151":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"14:214:6699":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:1914:6727":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:8865:7558":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"11:2380:6703":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10564:4900":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:5260:7441":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9176:4024":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:11024:27376":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"25:4803:8331":{"crate_id":25,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"25:8197:9115":{"crate_id":25,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:5642:7448":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:2077:1368":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:6042:6157":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:11511:4778":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5477:8628":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"11:2137:6715":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:4120:6182":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:5315:6974":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"15:0:3428":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:7332:8975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:22951:7065":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:46443:7311":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:13970:5379":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:628:9742":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:6419:8741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"25:464:8105":{"crate_id":25,"path":["libc","unix","group"],"kind":"struct"},"1:9347:27353":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:726:4893":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:11264:7869":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:933:4632":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"25:6729:8885":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:5412:1253":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:8669:6505":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:6823:8914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:643:4851":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:42874:3994":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"25:558:8159":{"crate_id":25,"path":["libc","unix","sigval"],"kind":"struct"},"25:8259:9118":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:38380:3616":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:2304:9238":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:43878:7189":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:6686:2356":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:8059:2334":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:12378:900":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"23:97:26754":{"crate_id":23,"path":["smallvec","SmallVecData"],"kind":"enum"},"17:10368:22539":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:15148:5608":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:47194:7369":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:32398:3689":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:5357:986":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12648:5223":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:2825:7986":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"25:4827:8349":{"crate_id":25,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:11733:9254":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:10653:7018":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6564:8819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:8876:7559":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"25:4919:8408":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"25:7467:9022":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:8273:9120":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:8199:9115":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:5417:6209":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6890:6155":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:12381:893":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:4810:6190":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"25:5480:8630":{"crate_id":25,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:881:6714":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:11247:3640":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:3344:7419":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:2570:6133":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5334:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"25:8012:9105":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:5622:8685":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:16728:6082":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:7716:36219":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"11:2420:4024":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"18:96:26729":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:6258:4688":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:14507:5491":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:15050:5594":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"25:5448:8610":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:7711:15175":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"25:6379:8714":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:12384:1853":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:4335:9907":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4976:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:14152:5425":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:4929:6194":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:2008:9802":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:7875:4915":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"22:82:2341":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock"],"kind":"module"},"20:8:2346":{"crate_id":20,"path":["lock_api","GuardNoSend"],"kind":"struct"},"11:430:36198":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"23:281:4024":{"crate_id":23,"path":["smallvec","IntoIter"],"kind":"struct"},"6:5265:8526":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11421:5081":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7602:4024":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:40843:7129":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:3456:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:938:4670":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:873:6713":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:46235:7285":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3614:7426":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:6803:3659":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:1703:8307":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:44307:7210":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:9160:6703":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"11:772:6706":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:15981:5871":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:8353:9139":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:10331:7407":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:16798:6098":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:7949:6167":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"25:1641:8276":{"crate_id":25,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"25:5125:8482":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:41404:6999":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:42380:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:2640:6136":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"25:5253:8520":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:12385:1859":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:7919:6525":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"25:1673:8294":{"crate_id":25,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"25:5385:8573":{"crate_id":25,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6623:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:8503:6597":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:47137:7364":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:3338:3612":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11592:5031":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:7723:27987":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"25:585:8173":{"crate_id":25,"path":["libc","unix","protoent"],"kind":"struct"},"2:10400:3996":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"20:484:233":{"crate_id":20,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"17:16311:5979":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:5305:4938":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:16595:5346":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:3653:3992":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"22:46:4641":{"crate_id":22,"path":["parking_lot_core","parking_lot","ThreadData"],"kind":"struct"},"17:15739:5810":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:10404:3997":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3596:7533":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"9:53:9295":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6680:6320":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"25:5293:8542":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13854:5361":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:3720:4929":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:4851:3691":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43169:33078":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"16:2530:6131":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:9241:9955":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:9152:7563":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:7448:9016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5381:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:754:4899":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:4642:3097":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2952:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:15136:5255":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5482:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:1884:4024":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:15714:5802":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12409:22651":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:7754:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:7691:6826":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:4785:3688":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:8239:7481":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:2143:4109":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:40731:15249":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11221:27526":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:2964:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:32503:3988":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:9367:7867":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:10179:4011":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:13554:5302":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"25:569:8164":{"crate_id":25,"path":["libc","unix","tms"],"kind":"struct"},"17:5131:4936":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:40852:7130":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:41171:7146":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:23085:9246":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8010:3932":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11706:5104":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:2467:6123":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7075:22475":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4356:9909":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:14845:5559":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:41388:6998":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:14269:5452":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:46688:7320":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:15896:5848":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:5217:8506":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13547:5301":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:40865:7131":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"25:5584:8664":{"crate_id":25,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:8233:22481":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:11481:7028":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:4582:4691":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:40607:7117":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:15602:5778":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11952:5127":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"25:5549:8651":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:33157:3599":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:4157:9883":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:16701:6073":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:7168:6392":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:44043:7021":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:12721:7041":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"25:6417:8741":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:8749:9766":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:12775:7023":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44943:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:13757:5342":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:14031:5392":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:43396:7171":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:8546:6602":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:7524:4675":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:15905:5849":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13082:5069":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:4904:3692":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:43153:6574":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:3666:3632":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6749:6113":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"25:4894:8392":{"crate_id":25,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:1618:4024":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:5271:8529":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:3105:34491":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:8296:9126":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:6871:3664":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:6970:6156":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:1530:8195":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"25:5680:8710":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:43435:7180":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"25:552:8156":{"crate_id":25,"path":["libc","unix","linger"],"kind":"struct"},"17:14692:5516":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5357:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:2607:4094":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"11:1674:4647":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:546:6106":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:42235:3767":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:43228:4004":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10332:22538":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:12008:7032":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:5855:7450":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:16786:6095":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:2955:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:8793:33224":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"20:855:2364":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4921:8408":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:42552:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:4983:6196":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13451:5294":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:5969:3655":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:15997:5874":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:44982:7246":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:4489:7433":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6028:6154":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11009:7449":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:5277:34093":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:10492:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:14573:5502":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:889:6721":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:1064:21536":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:8608:9910":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:6480:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40746:7124":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:39860:3627":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:11309:5071":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:40580:7115":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:10398:3995":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13537:5255":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:8014:9105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:4873:6192":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:39648:3637":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:651:4851":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:8005:3931":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"11:1888:4632":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:11198:6703":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:44013:7036":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:4594:3697":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:12079:4105":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:22379:9836":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:5689:6212":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:40768:9805":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:7494:4024":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13733:5328":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:2435:21608":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:14460:5486":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"25:5426:8594":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12723:5232":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:21830:9961":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12941:5256":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:47040:7359":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:11290:7023":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:44019:7201":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13692:5319":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6368:6102":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:570:8164":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"13:229:9149":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:5107:8480":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:44901:7239":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:11282:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:8000:6169":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"25:5531:8640":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"19:0:1301":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:46366:7292":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"25:7446:9016":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"25:5017:8452":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:44317:7211":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"25:1688:8303":{"crate_id":25,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"25:5633:8691":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:11440:7027":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:44933:7244":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:15410:5717":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:47090:7361":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"25:6435:8754":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"10:0:3424":{"crate_id":10,"path":["adler"],"kind":"module"},"11:2121:6454":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:7980:6168":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:538:4858":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:3110:6175":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:43928:7192":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:40542:32983":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:6263:6981":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"25:5539:8645":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"20:473:3167":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"25:1587:8234":{"crate_id":25,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:80:26728":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:11716:7465":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5301:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:3809:4664":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"25:5518:8639":{"crate_id":25,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:5044:8465":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:481:4849":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8557:7532":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"23:57:4632":{"crate_id":23,"path":["smallvec","Drain"],"kind":"struct"},"2:22226:9964":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:7539:9071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:14416:5478":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"11:2400:6721":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:4929:8410":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5341:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:30537:3713":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:6111:6224":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"14:160:6696":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:40874:7132":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:10721:7423":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:14547:5499":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:13932:4748":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:11523:7031":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13181:5275":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:6781:6338":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9139:7562":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11971:5129":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"22:254:3100":{"crate_id":22,"path":["parking_lot_core","parking_lot","FilterOp"],"kind":"enum"},"16:5144:6200":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11998:5131":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"25:1582:8232":{"crate_id":25,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:7358:27463":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"25:4900:8395":{"crate_id":25,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12319:5177":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"25:1701:8307":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:43840:7184":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"25:4935:8412":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5593:8666":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"11:708:6704":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:3397:3633":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:6668:4632":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5007:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12280:5170":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:3485:3625":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:613:36239":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:3048:21610":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:573:4851":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:42144:7009":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:42004:9166":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:46892:7355":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"25:6532:8796":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:689:4883":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13662:5315":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:10914:9250":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"25:5203:8499":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:1551:8210":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5670:8705":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"20:0:2344":{"crate_id":20,"path":["lock_api"],"kind":"module"},"1:4823:9006":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:4890:8390":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"9:390:21460":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:1223:35767":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:1533:6703":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:8209:6160":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11281:5070":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:41181:6994":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"25:5263:8526":{"crate_id":25,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11926:5126":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:3889:4946":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:2502:9831":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:16132:5924":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"14:7:6696":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"25:5055:8469":{"crate_id":25,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:43114:9167":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"25:5299:8545":{"crate_id":25,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:47168:7367":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:6794:6339":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"5:3101:34490":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:10954:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:15844:5833":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:8290:9125":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:43889:7190":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:15106:5601":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:7986:9102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:6795:4024":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:16159:5936":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:39069:3619":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"9:328:9158":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"25:5668:8705":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:4172:4664":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"22:215:2497":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkResult"],"kind":"struct"},"2:22605:33842":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:32405:7101":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:11421:6782":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"21:12:26747":{"crate_id":21,"path":["scopeguard","Strategy"],"kind":"trait"},"2:38490:3618":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:13618:7054":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:12066:5146":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:14084:5405":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:685:9745":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:14859:5560":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:43404:7172":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:485:8115":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:32414:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:2660:6137":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:6187:4762":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8070:9749":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:1625:4702":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:14533:5189":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:903:4908":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:11821:7428":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:44567:7046":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"25:4873:8383":{"crate_id":25,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:6714:4664":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12108:5151":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:15679:5792":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:10935:7577":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:44193:7205":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:10982:27528":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:5562:8657":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"25:1512:8187":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:3490:9862":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:11319:36234":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12762:5235":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:12335:5179":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:44604:7226":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:6269:6240":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:13758:7056":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5471:8625":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:3126:21611":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:958:6705":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:13641:7138":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"5:4377:6703":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10729:4905":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:15665:5791":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:12986:15113":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11465:5085":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:16019:5879":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13945:5376":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:1675:8294":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:6713:6325":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:9280:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:42589:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:14652:5512":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"}},"external_crates":{"23":{"name":"smallvec","html_root_url":null},"20":{"name":"lock_api","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"libc","html_root_url":null},"22":{"name":"parking_lot_core","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"21":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}