{"root":"0:0:1677","crate_version":"0.12.1","includes_private":false,"index":{"0:271:2437":{"id":"0:271:2437","crate_id":0,"name":"unlock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[129,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12131:34370":{"id":"2:12131:34370","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11676:127","`FromStr`":"2:11675:3008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11675:3008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11675:3008","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:1666":{"id":"0:197:1666","crate_id":0,"name":"RawMutex","span":{"filename":"src/raw_mutex.rs","begin":[32,0],"end":[56,1]},"visibility":"public","docs":"Raw mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8252:3048-0:197:1666","a:2:8253:3047-0:197:1666","a:2:2683:220-0:197:1666","a:2:2740:2959-0:197:1666","a:2:2700:228-0:197:1666","b:2:2247-0:197:1666","b:2:3319-0:197:1666","b:2:2552-0:197:1666","b:2:2250-0:197:1666","b:2:2541-0:197:1666","b:2:2547-0:197:1666","b:2:2537-0:197:1666","0:199","0:209","0:206"]}}},"a:2:2740:2959-0:127:1663":{"id":"a:2:2740:2959-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:96:166":{"id":"0:96:166","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[87,49]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same mutex in succession, which can starve\nother threads waiting to acquire the mutex. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na mutex it has just released, this can starve other threads.\n\nThis mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the mutex.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `MutexGuard::unlock_fair` when\nunlocking a mutex instead of simply dropping the `MutexGuard`.\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `Mutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the mutex is fair on average.\n- Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::Mutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(Mutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:8253:3047-0:157:1665":{"id":"a:2:8253:3047-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3047","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2250-0:197:1666":{"id":"b:2:2250-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:2541"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2537-0:197:1666":{"id":"b:2:2537-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2247-0:446:1656":{"id":"b:2:2247-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2539"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2540:3293":{"id":"2:2540:3293","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:157:1665":{"id":"b:2:2547-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:443-0:392:1676":{"id":"0:443-0:392:1676","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockUpgradableReadGuard","name":"RwLockUpgradableReadGuard","id":"0:392:1676","glob":false}}},"2:12109:34364":{"id":"2:12109:34364","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3048-0:157:1665":{"id":"a:2:8252:3048-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:173:2365":{"id":"0:173:2365","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_fair_mutex.rs","begin":[57,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:2364","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:450:670":{"id":"0:450:670","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12022:25933":{"id":"2:12022:25933","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11282:14056"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12013":{"id":"2:12013","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12014:815","2:12015:2071","2:12016:34346","2:12017:34347","2:12019:34348","2:12022:25933","2:12023:34349","2:12024:314","2:12025:25977","2:12026:2504","2:12028:2199","2:12030:25975","2:12032:25976","2:12034:34350","2:12035:34351","2:12036:26000","2:12037:26001","2:12038:6063","2:12039:6350","2:12040:5983","2:12041:31728","2:12042:31747","2:12043:27811","2:12044:34352","2:12045:31762","2:12046:26018","2:12049:26019","2:12052:26020","2:12055:3338","2:12059:3299","2:12063:26008","2:12066:26010","2:12069:26012","2:12072:34353","2:12075:34354","2:12078:26014","2:12081:26016","2:12084:34355","2:12087:34356","2:12090:2828","2:12093:34357","2:12096:34358","2:12099:34359","2:12102:34360","2:12104:34361","2:12106:34362","2:12108:34363","2:12109:34364","2:12110:34365","2:12113:34366","2:12116:25035","2:12119:26021","2:12122:34367","2:12125:34368","2:12128:34369","2:12131:34370","2:12133:25874","2:12134:25875","2:12135:25877","2:12136:25878","2:12137:25879","2:12138:34371","2:12140:8690","2:12141:34372"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51:1939":{"id":"0:51:1939","crate_id":0,"name":"wait_for","span":{"filename":"src/condvar.rs","begin":[379,4],"end":[386,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44096:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:391":{"id":"0:133:391","crate_id":0,"name":"call_once","span":{"filename":"src/once.rs","begin":[157,4],"end":[167,5]},"visibility":"public","docs":"Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.\n\nThis method will block the calling thread if another initialization\nroutine is currently running.\n\nWhen this function returns, it is guaranteed that some initialization\nhas run and completed (it may not be the closure specified). It is also\nguaranteed that any memory writes performed by the executed closure can\nbe reliably observed by other threads at this point (there is a\nhappens-before relation between the closure and code executing after the\nreturn).\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\n// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g. write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\nfn get_cached_val() -> usize {\n    unsafe {\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\nfn expensive_computation() -> usize {\n    // ...\n# 2\n}\n```\n\n# Panics\n\nThe closure `f` will only be executed once if this is called\nconcurrently amongst many threads. If that closure panics, however, then\nit will *poison* this `Once` instance, causing all future invocations of\n`call_once` to also panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:2319","args":{"parenthesized":{"inputs":[],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:261:1667":{"id":"b:2:3319-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:423-0:96:166":{"id":"0:423-0:96:166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,53],"end":[43,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::Mutex","name":"Mutex","id":"0:96:166","glob":false}}},"a:2:2683:220-0:31:1655":{"id":"a:2:2683:220-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:681:3359":{"id":"5:681:3359","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12032:25976":{"id":"2:12032:25976","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2550:128":{"id":"2:2550:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12041:31728":{"id":"2:12041:31728","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12042:31747"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43596:6340","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3047-0:31:1655":{"id":"a:2:8253:3047-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3047","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12133:25874":{"id":"2:12133:25874","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:34349":{"id":"2:12023:34349","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:285:2453":{"id":"0:285:2453","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/raw_rwlock.rs","begin":[223,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2451","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:446:1656":{"id":"b:2:2250-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:2541"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12014:815":{"id":"2:12014:815","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:477:612":{"id":"0:477:612","crate_id":0,"name":"eq","span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:1658":{"id":"0:83:1658","crate_id":0,"name":"FairMutex","span":{"filename":"src/fair_mutex.rs","begin":[78,0],"end":[78,57]},"visibility":"public","docs":"A mutual exclusive primitive that is always fair, useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\nThe regular mutex provided by `parking_lot` uses eventual fairness\n(after some time it will default to the fair algorithm), but eventual\nfairness does not provide the same guarantees an always fair method would.\nFair mutexes are generally slower, but sometimes needed.\n\nIn a fair mutex the waiters form a queue, and the lock is always granted to\nthe next requester in the queue, in first-in first-out order. This ensures\nthat one thread cannot starve others by quickly re-acquiring the lock after\nreleasing it.\n\nA fair mutex may not be interesting if threads have different priorities (this is known as\npriority inversion).\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `FairMutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n\n# Examples\n\n```\nuse parking_lot::FairMutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(FairMutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:2683:220-0:460:1664":{"id":"a:2:2683:220-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2552-0:460:1664":{"id":"b:2:2552-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3319-0:197:1666":{"id":"b:2:3319-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:305:2479":{"id":"0:305:2479","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[439,4],"end":[449,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:296:2465":{"id":"0:296:2465","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[333,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:357:1670":{"id":"a:2:2700:228-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:264:2168":{"id":"0:264:2168","crate_id":0,"name":"INIT","span":{"filename":"src/raw_rwlock.rs","begin":[60,4],"end":[62,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:2537-0:446:1656":{"id":"b:2:2537-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12034:34350":{"id":"2:12034:34350","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1402","str::slice_mut_unchecked":"2:12035:34351","crate::ops::Index":"2:2980:2922"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:27138":{"id":"5:5443:27138","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12136:25878"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:157:1665":{"id":"a:2:2700:228-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:297:2467":{"id":"0:297:2467","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[346,4],"end":[364,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:416-0:85:1657":{"id":"0:416-0:85:1657","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,27],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::const_fair_mutex","name":"const_fair_mutex","id":"0:85:1657","glob":false}}},"2:12037:26001":{"id":"2:12037:26001","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12036:26000"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:428-0:157:1665":{"id":"0:428-0:157:1665","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_fair_mutex::RawFairMutex","name":"RawFairMutex","id":"0:157:1665","glob":false}}},"b:2:3319-0:446:1656":{"id":"b:2:3319-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2247-0:157:1665":{"id":"b:2:2247-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2539"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12110:34365":{"id":"2:12110:34365","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11740:14052","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3048-0:460:1664":{"id":"a:2:8252:3048-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:367:1672":{"id":"0:367:1672","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[59,0],"end":[59,98]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutexGuard","id":"20:856:1672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:2700:228-0:460:1664":{"id":"a:2:2700:228-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5444:27139":{"id":"5:5444:27139","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12137:25879"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:34354":{"id":"2:12075:34354","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11715:14055","str::split":"2:12063:26008","prim@char":"1:11917:418","str::split_terminator":"2:12072:34353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43390:6333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:25879":{"id":"2:12137:25879","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:357:1670":{"id":"b:2:2552-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5429:35023":{"id":"5:5429:35023","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:1961":{"id":"0:62:1961","crate_id":0,"name":"wait_while_for","span":{"filename":"src/condvar.rs","begin":[496,4],"end":[507,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration. If the provided condition evaluates to `false`,\nthen the thread is no longer blocked and the operation is completed.\nIf the condition evaluates to `true`, then the thread is blocked again\nand waits for another notification before repeating this process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44096:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2928:1945","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:670":{"id":"0:153:670","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[326,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:34360":{"id":"2:12102:34360","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:31:1655":{"id":"b:2:2547-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2541-0:197:1666":{"id":"b:2:2541-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:203:2190":{"id":"0:203:2190","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_mutex.rs","begin":[78,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:127:1663":{"id":"b:2:2552-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2552-0:157:1665":{"id":"b:2:2552-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:162:1651":{"id":"0:162:1651","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_fair_mutex.rs","begin":[17,4],"end":[17,69]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutex","id":"20:20:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:261:1667":{"id":"0:261:1667","crate_id":0,"name":"RawRwLock","span":{"filename":"src/raw_rwlock.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Raw reader-writer lock type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8252:3048-0:261:1667","a:2:8253:3047-0:261:1667","a:2:2683:220-0:261:1667","a:2:2740:2959-0:261:1667","a:2:2700:228-0:261:1667","b:2:2247-0:261:1667","b:2:3319-0:261:1667","b:2:2552-0:261:1667","b:2:2250-0:261:1667","b:2:2541-0:261:1667","b:2:2547-0:261:1667","b:2:2537-0:261:1667","0:300","0:279","0:288","0:274","0:303","0:291","0:306","0:281","0:263","0:294"]}}},"0:357:1670":{"id":"0:357:1670","crate_id":0,"name":"RawThreadId","span":{"filename":"src/remutex.rs","begin":[13,0],"end":[13,23]},"visibility":"public","docs":"Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:8252:3048-0:357:1670","a:2:8253:3047-0:357:1670","a:2:2683:220-0:357:1670","a:2:2740:2959-0:357:1670","a:2:2700:228-0:357:1670","b:2:2247-0:357:1670","b:2:3319-0:357:1670","b:2:2552-0:357:1670","b:2:2250-0:357:1670","b:2:2541-0:357:1670","b:2:2547-0:357:1670","b:2:2537-0:357:1670","0:359"]}}},"0:389:1675":{"id":"0:389:1675","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[122,0],"end":[122,92]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockWriteGuard","id":"20:908:1675","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:3319-0:31:1655":{"id":"b:2:3319-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12119:26021":{"id":"2:12119:26021","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:261:1667":{"id":"a:2:2700:228-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2250-0:31:1655":{"id":"b:2:2250-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:2541"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:386:1674":{"id":"0:386:1674","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[113,0],"end":[113,90]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockReadGuard","id":"20:901:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:125:2269":{"id":"0:125:2269","crate_id":0,"name":"poisoned","span":{"filename":"src/once.rs","begin":[42,4],"end":[47,5]},"visibility":"public","docs":"Returns whether the associated `Once` has been poisoned.\n\nOnce an initialization routine for a `Once` has panicked it will forever\nindicate to future forced initialization routines that it is poisoned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2959-0:197:1666":{"id":"a:2:2740:2959-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:280:2449":{"id":"0:280:2449","crate_id":0,"name":"downgrade","span":{"filename":"src/raw_rwlock.rs","begin":[193,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:446:1656":{"id":"b:2:2541-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8252:3048-0:127:1663":{"id":"a:2:8252:3048-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[59,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked_exclusive","is_locked"],"trait":{"name":"RawRwLock","id":"20:434:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:2168","0:265:1651","0:266:2424","0:267:2428","0:268:2429","0:269:2432","0:270:2435","0:271:2437","0:272:2363","0:273:2440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:307:2482":{"id":"0:307:2482","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/raw_rwlock.rs","begin":[454,4],"end":[464,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9072:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12028:2199":{"id":"2:12028:2199","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:357:1670":{"id":"b:2:2247-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2539"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:453:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8252:3048-0:197:1666":{"id":"a:2:8252:3048-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[318,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2588:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2555:128":{"id":"2:2555:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31982:8223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:434-0:357:1670":{"id":"0:434-0:357:1670","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,54],"end":[49,65]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::RawThreadId","name":"RawThreadId","id":"0:357:1670","glob":false}}},"2:12093:34357":{"id":"2:12093:34357","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11715:14055","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::matches":"2:12090:2828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43544:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275:2442":{"id":"0:275:2442","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/raw_rwlock.rs","begin":[156,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:444-0:383:219":{"id":"0:444-0:383:219","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockWriteGuard","name":"RwLockWriteGuard","id":"0:383:219","glob":false}}},"0:267:2428":{"id":"0:267:2428","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[80,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:2469":{"id":"0:298:2469","crate_id":0,"name":"upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[367,4],"end":[376,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[517,0],"end":[521,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2740:2959-0:357:1670":{"id":"a:2:2740:2959-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:435-0:363:1671":{"id":"0:435-0:363:1671","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,67],"end":[49,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutex","name":"ReentrantMutex","id":"0:363:1671","glob":false}}},"a:2:8253:3047-0:460:1664":{"id":"a:2:8253:3047-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3047","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:161:2168":{"id":"0:161:2168","crate_id":0,"name":"INIT","span":{"filename":"src/raw_fair_mutex.rs","begin":[15,4],"end":[15,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:365:1668":{"id":"0:365:1668","crate_id":0,"name":"const_reentrant_mutex","span":{"filename":"src/remutex.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.\n\nThis allows creating a reentrant mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:363:1671","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439-0:386:1674":{"id":"0:439-0:386:1674","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,18],"end":[53,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockReadGuard","name":"MappedRwLockReadGuard","id":"0:386:1674","glob":false}}},"b:2:2250-0:460:1664":{"id":"b:2:2250-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:2541"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:467:2265":{"id":"0:467:2265","crate_id":0,"name":"Done","span":{"filename":"src/once.rs","begin":[33,4],"end":[33,8]},"visibility":"default","docs":"A closure has completed successfully.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[191,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockDowngrade","id":"20:450:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:2449"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:39:1886":{"id":"0:39:1886","crate_id":0,"name":"notify_all","span":{"filename":"src/condvar.rs","begin":[187,4],"end":[195,5]},"visibility":"public","docs":"Wakes up all blocked threads on this condvar.\n\nReturns the number of threads woken up.\n\nThis method will ensure that any current waiters on the condition\nvariable are awoken. Calls to `notify_all()` are not buffered in any\nway.\n\nTo wake up only one thread, see `notify_one()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:1651":{"id":"0:265:1651","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_rwlock.rs","begin":[64,4],"end":[64,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:432-0:365:1668":{"id":"0:432-0:365:1668","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,4],"end":[49,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::const_reentrant_mutex","name":"const_reentrant_mutex","id":"0:365:1668","glob":false}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[36,0],"end":[58,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:2269","0:126:2272"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:471:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[15,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"GetThreadId","id":"20:214:2516","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:360:2168","0:361:2518"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:208:2020":{"id":"0:208:2020","crate_id":0,"name":"bump","span":{"filename":"src/raw_mutex.rs","begin":[134,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1655":{"id":"0:31:1655","crate_id":0,"name":"Condvar","span":{"filename":"src/condvar.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"A Condition Variable\n\nCondition variables represent the ability to block a thread such that it\nconsumes no CPU time while waiting for an event to occur. Condition\nvariables are typically associated with a boolean predicate (a condition)\nand a mutex. The predicate is always verified inside of the mutex before\ndetermining that thread must block.\n\nNote that this module places one additional restriction over the system\ncondition variables: each condvar can be used with only one mutex at a\ntime. Any attempt to use multiple mutexes on the same condition variable\nsimultaneously will result in a runtime panic. However it is possible to\nswitch to a different mutex if there are no threads currently waiting on\nthe condition variable.\n\n# Differences from the standard library `Condvar`\n\n- No spurious wakeups: A wait will only return a non-timeout result if it\n  was woken up by `notify_one` or `notify_all`.\n- `Condvar::notify_all` will only wake up a single thread, the rest are\n  requeued to wait for the `Mutex` to be unlocked by the thread that was\n  woken up.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `Condvar` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n\n# Examples\n\n```\nuse parking_lot::{Mutex, Condvar};\nuse std::sync::Arc;\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\n// Inside of our lock, spawn a new thread, and then wait for it to start\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock();\n    *started = true;\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock();\nif !*started {\n    cvar.wait(&mut started);\n}\n// Note that we used an if instead of a while loop above. This is only\n// possible because parking_lot's Condvar will never spuriously wake up.\n// This means that wait() will only return after notify_one or notify_all is\n// called.\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:33","a:2:8252:3048-0:31:1655","a:2:8253:3047-0:31:1655","a:2:2683:220-0:31:1655","a:2:2740:2959-0:31:1655","a:2:2700:228-0:31:1655","b:2:2247-0:31:1655","b:2:3319-0:31:1655","b:2:2552-0:31:1655","b:2:2250-0:31:1655","b:2:2541-0:31:1655","b:2:2547-0:31:1655","b:2:2537-0:31:1655","0:67","0:65"]}}},"b:2:2537-0:127:1663":{"id":"b:2:2537-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12035:34351":{"id":"2:12035:34351","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1402","crate::ops::IndexMut":"2:2984:2923","str::slice_unchecked":"2:12034:34350"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:34371":{"id":"2:12138:34371","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:34371"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43621:6245","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:2471":{"id":"0:299:2471","crate_id":0,"name":"try_upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[379,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12030:25975":{"id":"2:12030:25975","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[510,0],"end":[515,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2588:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2683:220-0:261:1667":{"id":"a:2:2683:220-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2250-0:357:1670":{"id":"b:2:2250-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:2541"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:1677":{"id":"0:0:1677","crate_id":0,"name":"parking_lot","span":{"filename":"src/lib.rs","begin":[8,0],"end":[56,19]},"visibility":"public","docs":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n`Once` that are smaller, faster and more flexible than those in the Rust\nstandard library. It also provides a `ReentrantMutex` type.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:413-0:31:1655","0:414-0:446:1656","0:416-0:85:1657","0:417-0:83:1658","0:418-0:87:1659","0:419-0:90:1660","0:421-0:98:1661","0:422-0:103:1662","0:423-0:96:166","0:424-0:100:167","0:426-0:127:1663","0:427-0:460:1664","0:428-0:157:1665","0:429-0:197:1666","0:430-0:261:1667","0:432-0:365:1668","0:433-0:370:1669","0:434-0:357:1670","0:435-0:363:1671","0:436-0:367:1672","0:438-0:378:1673","0:439-0:386:1674","0:440-0:389:1675","0:441-0:376:217","0:442-0:380:218","0:443-0:392:1676","0:444-0:383:219","0:445-20:0:1652"],"is_stripped":false}}},"2:12141:34372":{"id":"2:12141:34372","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:34372"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43639:6244","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:127:1663":{"id":"b:2:2247-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2539"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3319-0:460:1664":{"id":"b:2:3319-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2740:2959-0:261:1667":{"id":"a:2:2740:2959-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2552-0:261:1667":{"id":"b:2:2552-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2700:228-0:127:1663":{"id":"a:2:2700:228-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:309:2484":{"id":"0:309:2484","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/raw_rwlock.rs","begin":[480,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9072:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:2365":{"id":"0:212:2365","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_mutex.rs","begin":[146,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9072:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[52,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:171:122","0:172:1798","0:173:2365","0:174:2366"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[141,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:210:122","0:211:1798","0:212:2365","0:213:2366"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:282:122":{"id":"0:282:122","crate_id":0,"name":"Duration","span":{"filename":"src/raw_rwlock.rs","begin":[206,4],"end":[206,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44096:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2541-0:261:1667":{"id":"b:2:2541-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2249:2539":{"id":"2:2249:2539","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:679:3357":{"id":"5:679:3357","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:277:2444":{"id":"0:277:2444","crate_id":0,"name":"bump_shared","span":{"filename":"src/raw_rwlock.rs","begin":[175,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2362":{"id":"0:207:2362","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_mutex.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12015:2071":{"id":"2:12015:2071","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:127:1663":{"id":"b:2:3319-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:465:2263":{"id":"0:465:2263","crate_id":0,"name":"InProgress","span":{"filename":"src/once.rs","begin":[30,4],"end":[30,14]},"visibility":"default","docs":"A thread is currently executing a closure.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:441-0:376:217":{"id":"0:441-0:376:217","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,65],"end":[53,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLock","name":"RwLock","id":"0:376:217","glob":false}}},"2:3321:1496":{"id":"2:3321:1496","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39303:6107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:2363":{"id":"0:166:2363","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_fair_mutex.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:35022":{"id":"5:5425:35022","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2962","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:5957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2962","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:5957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3048-0:31:1655":{"id":"a:2:8252:3048-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:461:2259":{"id":"0:461:2259","crate_id":0,"name":"New","span":{"filename":"src/once.rs","begin":[24,4],"end":[24,7]},"visibility":"default","docs":"A closure has not been executed yet","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:126:2272":{"id":"0:126:2272","crate_id":0,"name":"done","span":{"filename":"src/once.rs","begin":[52,4],"end":[57,5]},"visibility":"public","docs":"Returns whether the associated `Once` has successfully executed a\nclosure.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:2190":{"id":"0:164:2190","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:2168":{"id":"0:360:2168","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[16,4],"end":[16,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"RawThreadId"}}},"2:12116:25035":{"id":"2:12116:25035","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471:422":{"id":"0:471:422","crate_id":0,"name":"clone","span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:438-0:378:1673":{"id":"0:438-0:378:1673","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::const_rwlock","name":"const_rwlock","id":"0:378:1673","glob":false}}},"b:2:2541-0:31:1655":{"id":"b:2:2541-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12134:25875":{"id":"2:12134:25875","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39511:25887","Self::is_ascii":"2:12133:25874"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39511:25887","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:413-0:31:1655":{"id":"0:413-0:31:1655","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,24],"end":[41,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::Condvar","name":"Condvar","id":"0:31:1655","glob":false}}},"0:202:1934":{"id":"0:202:1934","crate_id":0,"name":"lock","span":{"filename":"src/raw_mutex.rs","begin":[66,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:1934":{"id":"0:163:1934","crate_id":0,"name":"lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[397,0],"end":[425,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_upgradable"],"trait":{"name":"RawRwLockUpgradeFair","id":"20:471:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:301:2474","0:302:2475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2683:220-0:157:1665":{"id":"a:2:2683:220-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:295:2462":{"id":"0:295:2462","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[324,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12140:8690":{"id":"2:12140:8690","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:8690"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43630:5993","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:1651":{"id":"0:201:1651","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_mutex.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2552-0:197:1666":{"id":"b:2:2552-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:131:943":{"id":"0:131:943","crate_id":0,"name":"new","span":{"filename":"src/once.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a new `Once` value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:261:1667":{"id":"b:2:2537-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12113:34366":{"id":"2:12113:34366","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12090:2828":{"id":"2:12090:2828","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11715:14055","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::matches":"2:12090:2828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43526:6336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:357:1670":{"id":"b:2:2547-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2683:220-0:197:1666":{"id":"a:2:2683:220-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:272:2363":{"id":"0:272:2363","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_rwlock.rs","begin":[142,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12072:34353":{"id":"2:12072:34353","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11715:14055","str::split":"2:12063:26008","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7243:121","str::rsplit_terminator":"2:12075:34354"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43372:6332","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:392:1676":{"id":"0:392:1676","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[126,0],"end":[126,98]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::RwLockUpgradableReadGuard","id":"20:889:1676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:289:2457":{"id":"0:289:2457","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[272,4],"end":[278,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:2455":{"id":"0:287:2455","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/raw_rwlock.rs","begin":[253,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9072:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2959-0:446:1656":{"id":"a:2:2740:2959-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[119,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:207:2362","0:208:2020"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5442:8805":{"id":"5:5442:8805","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3047-0:197:1666":{"id":"a:2:8253:3047-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3047","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12024:314":{"id":"2:12024:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12025:25977","`u8`":"1:11934:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:31:1655":{"id":"b:2:2537-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:1661":{"id":"0:98:1661","crate_id":0,"name":"const_mutex","span":{"filename":"src/mutex.rs","begin":[92,0],"end":[94,1]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:96:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:677-0:460:1664":{"id":"b:5:677-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:3357","5:680:3358","5:681:3359"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2683:220-0:127:1663":{"id":"a:2:2683:220-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68:670":{"id":"0:68:670","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[518,4],"end":[520,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:2366":{"id":"0:174:2366","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_fair_mutex.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:2364","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:197:1666":{"id":"b:2:2547-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:43:1902":{"id":"0:43:1902","crate_id":0,"name":"wait","span":{"filename":"src/condvar.rs","begin":[255,4],"end":[257,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[294,0],"end":[320,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursiveTimed","id":"20:462:2459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:292:2460","0:293:2461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12017:34347":{"id":"2:12017:34347","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:25878":{"id":"2:12136:25878","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:34359":{"id":"2:12099:34359","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11715:14055","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::match_indices":"2:12096:34358"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43490:6335","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:197:1666":{"id":"b:2:2247-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2539"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12052:26020":{"id":"2:12052:26020","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:34367":{"id":"2:12122:34367","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12040:5983":{"id":"2:12040:5983","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43308:4232","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:2020":{"id":"0:169:2020","crate_id":0,"name":"bump","span":{"filename":"src/raw_fair_mutex.rs","begin":[47,4],"end":[49,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:446:1656":{"id":"a:2:2700:228-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12044:34352":{"id":"2:12044:34352","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43586:6339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3048-0:261:1667":{"id":"a:2:8252:3048-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[427,0],"end":[450,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeDowngrade","id":"20:474:2477","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:304:2478","0:305:2479"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2547-0:261:1667":{"id":"b:2:2547-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12026:2504":{"id":"2:12026:2504","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:421-0:98:1661":{"id":"0:421-0:98:1661","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::const_mutex","name":"const_mutex","id":"0:98:1661","glob":false}}},"2:12084:34355":{"id":"2:12084:34355","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:2485":{"id":"0:310:2485","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/raw_rwlock.rs","begin":[493,4],"end":[503,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44096:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:292:2460":{"id":"0:292:2460","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/raw_rwlock.rs","begin":[296,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2451","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:458":{"id":"0:458","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:459:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[325,0],"end":[331,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8252:3048-0:357:1670":{"id":"a:2:8252:3048-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2537-0:460:1664":{"id":"b:2:2537-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:361:2518":{"id":"0:361:2518","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[18,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"2:22402:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12069:26012":{"id":"2:12069:26012","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11715:14055","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::split":"2:12063:26008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43340:6045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:1798":{"id":"0:211:1798","crate_id":0,"name":"Instant","span":{"filename":"src/raw_mutex.rs","begin":[143,4],"end":[143,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9072:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:422-0:103:1662":{"id":"0:422-0:103:1662","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,35],"end":[43,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MappedMutexGuard","name":"MappedMutexGuard","id":"0:103:1662","glob":false}}},"0:424-0:100:167":{"id":"0:424-0:100:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,60],"end":[43,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MutexGuard","name":"MutexGuard","id":"0:100:167","glob":false}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12039:6350":{"id":"2:12039:6350","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43298:6330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:31747":{"id":"2:12042:31747","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12041:31728"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43605:6341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:31:1655":{"id":"a:2:2700:228-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:479:670":{"id":"0:479:670","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433-0:370:1669":{"id":"0:433-0:370:1669","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,27],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::MappedReentrantMutexGuard","name":"MappedReentrantMutexGuard","id":"0:370:1669","glob":false}}},"a:2:2683:220-0:357:1670":{"id":"a:2:2683:220-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12063:26008":{"id":"2:12063:26008","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11715:14055","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::split_whitespace":"2:12041:31728","str::rsplit":"2:12069:26012"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43322:6040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:2461":{"id":"0:293:2461","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/raw_rwlock.rs","begin":[309,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2451","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:440-0:389:1675":{"id":"0:440-0:389:1675","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,41],"end":[53,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockWriteGuard","name":"MappedRwLockWriteGuard","id":"0:389:1675","glob":false}}},"b:2:2541-0:357:1670":{"id":"b:2:2541-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90:1660":{"id":"0:90:1660","crate_id":0,"name":"MappedFairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[101,0],"end":[101,87]},"visibility":"public","docs":"An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:849:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:2252:2541":{"id":"2:2252:2541","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[85,0],"end":[316,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:943","0:132:1389","0:133:391","0:136:2330"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:429-0:197:1666":{"id":"0:429-0:197:1666","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[46,0],"end":[46,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_mutex::RawMutex","name":"RawMutex","id":"0:197:1666","glob":false}}},"b:2:2247-0:261:1667":{"id":"b:2:2247-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2539"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:103:1662":{"id":"0:103:1662","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[110,0],"end":[110,79]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:849:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:2541-0:157:1665":{"id":"b:2:2541-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:200:2168":{"id":"0:200:2168","crate_id":0,"name":"INIT","span":{"filename":"src/raw_mutex.rs","begin":[59,4],"end":[61,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:2552-0:31:1655":{"id":"b:2:2552-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:284:2452":{"id":"0:284:2452","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/raw_rwlock.rs","begin":[210,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2451","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:1673":{"id":"0:378:1673","crate_id":0,"name":"const_rwlock","span":{"filename":"src/rwlock.rs","begin":[94,0],"end":[96,1]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.\n\nThis allows creating a `RwLock<T>` in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:376:217","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:1920":{"id":"0:45:1920","crate_id":0,"name":"wait_until","span":{"filename":"src/condvar.rs","begin":[283,4],"end":[292,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9072:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:460:1664":{"id":"b:2:2541-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:165:1927":{"id":"0:165:1927","crate_id":0,"name":"unlock","span":{"filename":"src/raw_fair_mutex.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:304:2478":{"id":"0:304:2478","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[429,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:1659":{"id":"0:87:1659","crate_id":0,"name":"FairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[92,0],"end":[92,75]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:841:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:34:943":{"id":"0:34:943","crate_id":0,"name":"new","span":{"filename":"src/condvar.rs","begin":[98,4],"end":[102,5]},"visibility":"public","docs":"Creates a new condition variable which is ready to be waited on and\nnotified.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[94,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:34:943","0:35:1864","0:39:1886","0:43:1902","0:45:1920","0:51:1939","0:56:1950","0:59:1956","0:62:1961"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8253:3047-0:127:1663":{"id":"a:2:8253:3047-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3047","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:213:2366":{"id":"0:213:2366","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_mutex.rs","begin":[163,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44096:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:1798":{"id":"0:283:1798","crate_id":0,"name":"Instant","span":{"filename":"src/raw_rwlock.rs","begin":[207,4],"end":[207,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9072:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:419-0:90:1660":{"id":"0:419-0:90:1660","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,72],"end":[42,92]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::MappedFairMutexGuard","name":"MappedFairMutexGuard","id":"0:90:1660","glob":false}}},"0:426-0:127:1663":{"id":"0:426-0:127:1663","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,21],"end":[44,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::Once","name":"Once","id":"0:127:1663","glob":false}}},"0:56:1950":{"id":"0:56:1950","crate_id":0,"name":"wait_while","span":{"filename":"src/condvar.rs","begin":[425,4],"end":[431,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification. If the provided condition evaluates to `false`, then the\nthread is no longer blocked and the operation is completed. If the\ncondition evaluates to `true`, then the thread is blocked again and\nwaits for another notification before repeating this process.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2928:1945","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2959-0:460:1664":{"id":"a:2:2740:2959-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:430-0:261:1667":{"id":"0:430-0:261:1667","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_rwlock::RawRwLock","name":"RawRwLock","id":"0:261:1667","glob":false}}},"2:12045:31762":{"id":"2:12045:31762","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43614:6062","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12049:26019":{"id":"2:12049:26019","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12081:26016":{"id":"2:12081:26016","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12078:26014","self::pattern":"2:11715:14055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43444:6048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3047-0:446:1656":{"id":"a:2:8253:3047-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3047","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12106:34362":{"id":"2:12106:34362","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160":{"id":"0:160","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[14,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:161:2168","0:162:1651","0:163:1934","0:164:2190","0:165:1927","0:166:2363"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12128:34369":{"id":"2:12128:34369","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:3200":{"id":"5:5426:3200","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:460:1664":{"id":"b:2:2247-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2539"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2250-0:157:1665":{"id":"b:2:2250-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:2541"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2552-0:446:1656":{"id":"b:2:2552-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[40,0],"end":[50,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:2362","0:169:2020"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8253:3047-0:261:1667":{"id":"a:2:8253:3047-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3047","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:446:1656":{"id":"0:446:1656","crate_id":0,"name":"WaitTimeoutResult","span":{"filename":"src/condvar.rs","begin":[23,0],"end":[23,35]},"visibility":"public","docs":"A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:8252:3048-0:446:1656","a:2:8253:3047-0:446:1656","a:2:2683:220-0:446:1656","a:2:2740:2959-0:446:1656","a:2:2700:228-0:446:1656","b:2:2247-0:446:1656","b:2:3319-0:446:1656","b:2:2552-0:446:1656","b:2:2250-0:446:1656","b:2:2541-0:446:1656","b:2:2547-0:446:1656","b:2:2537-0:446:1656","b:5:677-0:446:1656","0:458","0:454","0:452","0:455","0:449","0:457","0:451"]}}},"b:2:2250-0:127:1663":{"id":"b:2:2250-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:2541"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:301:2474":{"id":"0:301:2474","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/raw_rwlock.rs","begin":[399,4],"end":[417,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:418-0:87:1659":{"id":"0:418-0:87:1659","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,56],"end":[42,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutexGuard","name":"FairMutexGuard","id":"0:87:1659","glob":false}}},"0:85:1657":{"id":"0:85:1657","crate_id":0,"name":"const_fair_mutex","span":{"filename":"src/fair_mutex.rs","begin":[83,0],"end":[85,1]},"visibility":"public","docs":"Creates a new fair mutex in an unlocked state ready for use.\n\nThis allows creating a fair mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"FairMutex","id":"0:83:1658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[25,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:1802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:302:2475":{"id":"0:302:2475","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[420,4],"end":[424,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:417-0:83:1658":{"id":"0:417-0:83:1658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,45],"end":[42,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutex","name":"FairMutex","id":"0:83:1658","glob":false}}},"0:376:217":{"id":"0:376:217","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[89,0],"end":[89,52]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThis lock uses a task-fair locking policy which avoids both reader and\nwriter starvation. This means that readers trying to acquire the lock will\nblock even if the lock is unlocked when there are writers waiting to acquire\nthe lock. Because of this, attempts to recursively acquire a read lock\nwithin a single thread may result in a deadlock.\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same lock in succession, which can starve\nother threads waiting to acquire the rwlock. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na rwlock it has just released, this can starve other threads.\n\nThis rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the rwlock.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`\nor `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply\ndropping the guard.\n\n# Differences from the standard library `RwLock`\n\n- Supports atomically downgrading a write lock into a read lock.\n- Task-fair locking policy instead of an unspecified platform default.\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `RwLock` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the rwlock is fair on average.\n- Optionally allows making the rwlock fair by calling\n  `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read();\n    let r2 = lock.read();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here\n```","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::RwLock","id":"20:482:217","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12066:26010":{"id":"2:12066:26010","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11538:6042","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12125:34368":{"id":"2:12125:34368","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:453:612":{"id":"0:453:612","crate_id":0,"name":"eq","span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:60":{"id":"0:151:60","crate_id":0,"name":"default","span":{"filename":"src/once.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:476":{"id":"0:476","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:477:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8253:3047-0:357:1670":{"id":"a:2:8253:3047-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:3047","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12036:26000":{"id":"2:12036:26000","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12037:26001"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2551:1483":{"id":"2:2551:1483","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12059:3299":{"id":"2:12059:3299","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41355:179","prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:2432":{"id":"0:269:2432","crate_id":0,"name":"lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[107,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5440:35025":{"id":"5:5440:35025","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:1802":{"id":"0:30:1802","crate_id":0,"name":"timed_out","span":{"filename":"src/condvar.rs","begin":[28,4],"end":[30,5]},"visibility":"public","docs":"Returns whether the wait was known to have timed out.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:446:1656":{"id":"a:2:2683:220-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[154,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_shared","bump_exclusive"],"trait":{"name":"RawRwLockFair","id":"20:445:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:275:2442","0:276:2443","0:277:2444","0:278:2446"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:286:2454":{"id":"0:286:2454","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/raw_rwlock.rs","begin":[236,4],"end":[250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44096:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:2440":{"id":"0:273:2440","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[148,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,31],"end":[22,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:270:2435":{"id":"0:270:2435","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[116,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:357:1670":{"id":"b:2:2537-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12096:34358":{"id":"2:12096:34358","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11715:14055","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12099:34359"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43472:6334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:1665":{"id":"0:157:1665","crate_id":0,"name":"RawFairMutex","span":{"filename":"src/raw_fair_mutex.rs","begin":[12,0],"end":[12,34]},"visibility":"public","docs":"Raw fair mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8252:3048-0:157:1665","a:2:8253:3047-0:157:1665","a:2:2683:220-0:157:1665","a:2:2740:2959-0:157:1665","a:2:2700:228-0:157:1665","b:2:2247-0:157:1665","b:2:3319-0:157:1665","b:2:2552-0:157:1665","b:2:2250-0:157:1665","b:2:2541-0:157:1665","b:2:2547-0:157:1665","b:2:2537-0:157:1665","0:167","0:160","0:170"]}}},"b:2:2541-0:127:1663":{"id":"b:2:2541-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2547-0:127:1663":{"id":"b:2:2547-0:127:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:171:122":{"id":"0:171:122","crate_id":0,"name":"Duration","span":{"filename":"src/raw_fair_mutex.rs","begin":[53,4],"end":[53,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:370:1669":{"id":"0:370:1669","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[68,0],"end":[69,70]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::MappedReentrantMutexGuard","id":"20:865:1669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:479:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:677-0:446:1656":{"id":"b:5:677-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:3357","5:680:3358","5:681:3359"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12078:26014":{"id":"2:12078:26014","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055","str::rsplitn":"2:12081:26016"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43426:6047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:26018":{"id":"2:12046:26018","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5441:35026":{"id":"5:5441:35026","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2962","`String`":"5:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2962","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:5957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:1927":{"id":"0:204:1927","crate_id":0,"name":"unlock","span":{"filename":"src/raw_mutex.rs","begin":[100,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:1798":{"id":"0:172:1798","crate_id":0,"name":"Instant","span":{"filename":"src/raw_fair_mutex.rs","begin":[54,4],"end":[54,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[270,0],"end":[292,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursive","id":"20:459:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:2457","0:290:2458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12055:3338":{"id":"2:12055:3338","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41355:179","prim@char":"1:11917:418","self::pattern":"2:11715:14055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:3048-0:446:1656":{"id":"a:2:8252:3048-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:100:167":{"id":"0:100:167","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[101,0],"end":[101,67]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:841:167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:2547-0:446:1656":{"id":"b:2:2547-0:446:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,9],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132:1389":{"id":"0:132:1389","crate_id":0,"name":"state","span":{"filename":"src/once.rs","begin":[94,4],"end":[105,5]},"visibility":"public","docs":"Returns the current state of this `Once`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:60":{"id":"0:66:60","crate_id":0,"name":"default","span":{"filename":"src/condvar.rs","begin":[512,4],"end":[514,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:34356":{"id":"2:12087:34356","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:14053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:460:1664":{"id":"b:2:2547-0:460:1664","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:276:2443":{"id":"0:276:2443","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/raw_rwlock.rs","begin":[162,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:357:1670":{"id":"b:2:3319-0:357:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:380:218":{"id":"0:380:218","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[100,0],"end":[100,78]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::RwLockReadGuard","id":"20:873:218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:436-0:367:1672":{"id":"0:436-0:367:1672","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutexGuard","name":"ReentrantMutexGuard","id":"0:367:1672","glob":false}}},"0:445-20:0:1652":{"id":"0:445-20:0:1652","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[56,0],"end":[56,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"::lock_api","name":"lock_api","id":"20:0:1652","glob":false}}},"0:168:2362":{"id":"0:168:2362","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_fair_mutex.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:422":{"id":"0:459:422","crate_id":0,"name":"clone","span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:157:1665":{"id":"b:2:3319-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:268:2429":{"id":"0:268:2429","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:427-0:460:1664":{"id":"0:427-0:460:1664","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,27],"end":[44,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::OnceState","name":"OnceState","id":"0:460:1664","glob":false}}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199":{"id":"0:199","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[58,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:200:2168","0:201:1651","0:202:1934","0:203:2190","0:204:1927","0:205:2363"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:680:3358":{"id":"5:680:3358","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12016:34346":{"id":"2:12016:34346","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:34361":{"id":"2:12104:34361","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:34363":{"id":"2:12108:34363","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[322,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgrade","id":"20:465:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:2462","0:296:2465","0:297:2467","0:298:2469","0:299:2471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383:219":{"id":"0:383:219","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[104,0],"end":[104,80]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::RwLockWriteGuard","id":"20:881:219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:442-0:380:218":{"id":"0:442-0:380:218","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,73],"end":[53,88]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockReadGuard","name":"RwLockReadGuard","id":"0:380:218","glob":false}}},"2:12038:6063":{"id":"2:12038:6063","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43292:6055","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2543:696":{"id":"2:2543:696","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424":{"id":"5:5424","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5425:35022","5:5426:3200","5:5429:35023","5:5432:35024","5:5440:35025","5:5441:35026","5:5442:8805","5:5443:27138","5:5444:27139"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2537-0:157:1665":{"id":"b:2:2537-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:3293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5432:35024":{"id":"5:5432:35024","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:2446":{"id":"0:278:2446","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[184,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:363:1671":{"id":"0:363:1671","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[41,0],"end":[41,80]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](type.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutex","id":"20:255:1671","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12135:25877":{"id":"2:12135:25877","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2959-0:31:1655":{"id":"a:2:2740:2959-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:290:2458":{"id":"0:290:2458","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[281,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460:1664":{"id":"0:460:1664","crate_id":0,"name":"OnceState","span":{"filename":"src/once.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"Current state of a `Once`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:461:2259","0:463:2261","0:465:2263","0:467:2265"],"impls":["0:124","a:2:8252:3048-0:460:1664","a:2:8253:3047-0:460:1664","a:2:2683:220-0:460:1664","a:2:2740:2959-0:460:1664","a:2:2700:228-0:460:1664","b:2:2247-0:460:1664","b:2:3319-0:460:1664","b:2:2552-0:460:1664","b:2:2250-0:460:1664","b:2:2541-0:460:1664","b:2:2547-0:460:1664","b:2:2537-0:460:1664","b:5:677-0:460:1664","0:470","0:473","0:478","0:475","0:472","0:476","0:469"]}}},"0:136:2330":{"id":"0:136:2330","crate_id":0,"name":"call_once_force","span":{"filename":"src/once.rs","begin":[179,4],"end":[191,5]},"visibility":"public","docs":"Performs the same function as `call_once` except ignores poisoning.\n\nIf this `Once` has been poisoned (some initialization panicked) then\nthis function will continue to attempt to call initialization functions\nuntil one of them doesn't panic.\n\nThe closure `f` is yielded a structure which can be used to query the\nstate of this `Once` (whether initialization has previously panicked or\nnot).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2931:2319","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"OnceState","id":"0:460:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[452,0],"end":[504,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeTimed","id":"20:477:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:307:2482","0:308:2483","0:309:2484","0:310:2485"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:266:2424":{"id":"0:266:2424","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[67,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:2363":{"id":"0:205:2363","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_mutex.rs","begin":[113,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[205,0],"end":[268,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockTimed","id":"20:452:2451","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:122","0:283:1798","0:284:2452","0:285:2453","0:286:2454","0:287:2455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59:1956":{"id":"0:59:1956","crate_id":0,"name":"wait_while_until","span":{"filename":"src/condvar.rs","begin":[461,4],"end":[472,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant. If the provided condition evaluates to\n`false`, then the thread is no longer blocked and the operation is\ncompleted. If the condition evaluates to `true`, then the thread is\nblocked again and waits for another notification before repeating\nthis process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9072:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2928:1945","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308:2483":{"id":"0:308:2483","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/raw_rwlock.rs","begin":[467,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44096:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:1482":{"id":"2:2556:1482","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2959-0:157:1665":{"id":"a:2:2740:2959-0:157:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2959","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:463:2261":{"id":"0:463:2261","crate_id":0,"name":"Poisoned","span":{"filename":"src/once.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":"A closure was executed but panicked.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2700:228-0:197:1666":{"id":"a:2:2700:228-0:197:1666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12025:25977":{"id":"2:12025:25977","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:31:1655":{"id":"b:2:2247-0:31:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2539"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12019:34348":{"id":"2:12019:34348","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12017:34347"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:27811":{"id":"2:12043:27811","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43576:6338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:1864":{"id":"0:35:1864","crate_id":0,"name":"notify_one","span":{"filename":"src/condvar.rs","begin":[128,4],"end":[136,5]},"visibility":"public","docs":"Wakes up one blocked thread on this condvar.\n\nReturns whether a thread was woken up.\n\nIf there is a blocked thread on this condition variable, then it will\nbe woken up from its call to `wait` or `wait_timeout`. Calls to\n`notify_one` are not buffered in any way.\n\nTo wake up all threads, see `notify_all()`.\n\n# Examples\n\n```\nuse parking_lot::Condvar;\n\nlet condvar = Condvar::new();\n\n// do something with condvar, share it with other threads\n\nif !condvar.notify_one() {\n    println!(\"Nobody was listening for this.\");\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:122":{"id":"0:210:122","crate_id":0,"name":"Duration","span":{"filename":"src/raw_mutex.rs","begin":[142,4],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44096:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2250-0:261:1667":{"id":"b:2:2250-0:261:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:2541"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:414-0:446:1656":{"id":"0:414-0:446:1656","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,33],"end":[41,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::WaitTimeoutResult","name":"WaitTimeoutResult","id":"0:446:1656","glob":false}}},"0:127:1663":{"id":"0:127:1663","crate_id":0,"name":"Once","span":{"filename":"src/once.rs","begin":[83,0],"end":[83,26]},"visibility":"public","docs":"A synchronization primitive which can be used to run a one-time\ninitialization. Useful for one-time initialization for globals, FFI or\nrelated functionality.\n\n# Differences from the standard library `Once`\n\n- Only requires 1 byte of space, instead of 1 word.\n- Not required to be `'static`.\n- Relaxed memory barriers in the fast path, which can significantly improve\n  performance on some architectures.\n- Efficient handling of micro-contention using adaptive spinning.\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic START: Once = Once::new();\n\nSTART.call_once(|| {\n    // run initialization here\n});\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:130","a:2:8252:3048-0:127:1663","a:2:8253:3047-0:127:1663","a:2:2683:220-0:127:1663","a:2:2740:2959-0:127:1663","a:2:2700:228-0:127:1663","b:2:2247-0:127:1663","b:2:3319-0:127:1663","b:2:2552-0:127:1663","b:2:2250-0:127:1663","b:2:2541-0:127:1663","b:2:2547-0:127:1663","b:2:2537-0:127:1663","0:152","0:150"]}}}},"paths":{"2:41471:3045":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:12553:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:7626:5704":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:3898:8817":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:10751:29614":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:21453:33477":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:30234:3633":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"25:4603:7567":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:39971:6242":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:8443:20874":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13698:5212":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:44354:6373":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40643:1663":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:9072:1798":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:11941:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"25:4521:7542":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:44057:8306":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:46381:6425":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:43308:4232":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:22534:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:2524:5300":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:44299:6369":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"25:4312:7425":{"crate_id":25,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:5838:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:3799:4022":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:2180:8221":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:8841:32715":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"25:5846:7836":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"13:226:8218":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"25:6817:8109":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:46123:6406":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12318:4810":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:43049:6312":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:9108:35927":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:3472:31104":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4290:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"25:6005:7923":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"23:57:3957":{"crate_id":23,"path":["smallvec","Drain"],"kind":"struct"},"2:2469:14123":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:4045:14029":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:20780:3369":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"25:5917:7877":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:12158:4768":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:7875:6572":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:2832:2916":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:5531:6001":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:4847:7649":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:10967:4551":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"25:1524:7276":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"23:349:24749":{"crate_id":23,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:46154:6407":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"25:5815:7817":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:9964:3737":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:8953:4355":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:3233:6515":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:3373:14087":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"11:805:8706":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:5044:6535":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8263:6620":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"25:1670:7379":{"crate_id":25,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11174:4095":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"25:4540:7552":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11060:4525":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4799:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:42112:3275":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11556:4649":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"18:671:4206":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:10923:4548":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"25:5796:7815":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2816:2912":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:40245:6261":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:40335:6009":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:43149:6319":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10354:4490":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:7619:3179":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:6505:2954":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:1746:8235":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:9721:4405":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10569:4512":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:2795:2907":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:2502:5299":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12894:4973":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:6920:4221":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"20:30:2364":{"crate_id":20,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"1:3152:30830":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:4327:5352":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:4793:7629":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13249:5076":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"20:474:2477":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"2:30194:3632":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:3214:34332":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:8252:3048":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:43322:6040":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"25:561:7241":{"crate_id":25,"path":["libc","unix","linger"],"kind":"struct"},"2:44077:2972":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:7624:3180":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10104:4449":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:2201:5977":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"25:6645:8037":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:21889:31805":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:2032:5958":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:44312:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:1466:2073":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:5797:5402":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7509:5332":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:3749:5346":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:8678:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:506:7204":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:2350:8765":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:45955:6401":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:3201:5885":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12923:4984":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"9:421:19815":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:10711:6570":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11520:4644":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:2855:2921":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6774:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:3580:3737":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:5383:4011":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:2764:5310":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"25:4946:7709":{"crate_id":25,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10598:4551":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:11220:4582":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:5367:19925":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:676:8693":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:43100:6313":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13041:5025":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:5963:5425":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"25:5964:7903":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:3638:8815":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:45646:6388":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:1071:5875":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13469:5134":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"25:594:7259":{"crate_id":25,"path":["libc","unix","protoent"],"kind":"struct"},"18:609:4194":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:46617:6429":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:7722:6567":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11422:4627":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:4937:7704":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"25:553:7236":{"crate_id":25,"path":["libc","unix","winsize"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4419:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:5071:5373":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:119:3979":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:749:3957":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:5281:14045":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13411:5120":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:9876:4304":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11928:644":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:4144:2993":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"15:198:19909":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:7256:5984":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:43526:6336":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:5277:14044":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:43774:6352":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"25:4807:7635":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"11:2194:8224":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:47671:6476":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:44045:8303":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"25:5887:7854":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8854:6655":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:35:3985":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:9365:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13356:5102":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:4872:5367":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:4969:5370":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:11197:6690":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"25:5065:7763":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4962:7715":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10670:4527":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:7574:8163":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:9424:4376":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4663:7572":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:975:4242":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13453:5131":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:4941:4011":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"11:1611:3972":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:8931:4236":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:40348:6269":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:4362:4013":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:43900:14068":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"25:5041:7756":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6687:8039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11920:1053":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"11:399:35897":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5881:7849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4488:7523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12006:4747":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4703:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:10445:6512":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:9628:4396":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6919:35916":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:9796:4411":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:2481:6507":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:2786:5311":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"25:4952:7710":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"25:6570:7991":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"25:1687:7386":{"crate_id":25,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:6211:4073":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:39331:2984":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"25:4433:7499":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:5013:6535":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"7:32:19799":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:9068:35926":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:21837:3011":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:5527:3964":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:43390:6333":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4605:7567":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:568:7244":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:10681:8314":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6558:5527":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11446:4631":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11422:6524":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:1695:7389":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:5920:5270":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13777:5233":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"25:1706:7393":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:4868:8871":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:10095:6043":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:6710:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10589:4517":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7293:5645":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:6606:8010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8439:6643":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:41404:3303":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11628:4676":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"25:586:7254":{"crate_id":25,"path":["libc","unix","servent"],"kind":"struct"},"1:8195:6622":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"25:5833:7827":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4534:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13309:5092":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:44256:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13257:5078":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:45757:6395":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"25:493:7200":{"crate_id":25,"path":["libc","unix","timespec"],"kind":"struct"},"6:7598:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:14:2606":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:31982:8223":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:8779:652":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"2:2705:2989":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"25:4751:7607":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:41219:8814":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:4425:4013":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:2921:2013":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:9617:4395":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:579:7249":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"25:118:14501":{"crate_id":25,"path":["libc","unix","FILE"],"kind":"enum"},"16:6390:5510":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:9145:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:8256:5780":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"25:4443:7505":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:9566:4367":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:8632:20857":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8249:8845":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:1589:5885":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13625:5191":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:11401:6523":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:4904:5368":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:43220:6324":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6164:5459":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:5655:5322":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:21014:6073":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"25:4815:7638":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:13821:5248":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:7488:5697":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:9906:6286":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10555:4507":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:6725:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6022:20813":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:8805:6653":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4972:7721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:43138:6318":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:39957:6241":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:6935:4083":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13194:5062":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:44248:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"20:841:167":{"crate_id":20,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"2:21872:6083":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:7572:35917":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:12385:6069":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"25:1908:15846":{"crate_id":25,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11891:4730":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:653:14856":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:2642:5305":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:9156:3276":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:7600:3189":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10615:4520":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:45486:6381":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"20:27:2360":{"crate_id":20,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"17:3266:4255":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:8989:6663":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:4845:5366":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:8156:5338":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"9:388:19814":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"25:7555:8158":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:4702:5361":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:2850:2920":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6935:5590":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"25:4547:7554":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:42457:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:46647:6430":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"25:6041:7933":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:44065:8308":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"25:4726:7597":{"crate_id":25,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11832:4722":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"25:4892:7673":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6066:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:3063:4263":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"20:8:1654":{"crate_id":20,"path":["lock_api","GuardNoSend"],"kind":"struct"},"2:43118:6316":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:3235:5886":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"22:252:2407":{"crate_id":22,"path":["parking_lot_core","parking_lot","FilterOp"],"kind":"enum"},"16:4624:5360":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:40685:6023":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:8820:670":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"17:10527:20988":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:7556:4087":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:2160:3369":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:5357:6540":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:3385:5992":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:2298:19927":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"25:6831:8118":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:1636:3629":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:2690:1903":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:8759:6650":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7244:35921":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:6795:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:4392:4011":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:7269:4019":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:7815:6568":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:2128:2011":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"20:445:2441":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"16:7467:5694":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"14:31:5856":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:7516:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:41790:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:554:1968":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:2967:19954":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:1924:8747":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:4097:29598":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:3513:3957":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:3899:5350":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:7645:3178":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:5233:3989":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:6179:5461":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:3640:4267":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:3300:5343":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:2808:5312":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:55:5749":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"11:2033:5614":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:11923:1402":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:12835:4921":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6670:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:20752:8908":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"17:420:4239":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:7271:8134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5899:7861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7259:3044":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:5858:2950":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:3083:6510":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"14:221:5861":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10686:6569":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:643:8692":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:9408:14127":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11770:4707":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"20:319:4173":{"crate_id":20,"path":["lock_api","remutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:7557:5700":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"25:4778:7624":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"25:5991:7912":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:10989:4256":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:4435:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"7:79:19806":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13033:5024":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:2757:2905":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:42654:6305":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"20:214:2516":{"crate_id":20,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"6:5919:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4542:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:5408:6543":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:11337:4097":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:11239:6555":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9772:4410":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12085:4758":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:0:2721":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:258:3989":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12980:5018":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"25:1646:7362":{"crate_id":25,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4760:4071":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4455:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2219:8762":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:6819:8109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:41202:6029":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:41950:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:20851:8911":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:40432:6014":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:7971:8804":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:20589:33593":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:2046:5959":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"25:4365:7468":{"crate_id":25,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10545:4256":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:3155:25739":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:6270:3957":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:11933:742":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"19:0:1035":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:4010:8824":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"25:5734:7772":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:8310:20870":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:30322:31776":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:6904:5587":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:8253:3047":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:1008:3989":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10015:4438":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:494:7200":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12799:4890":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"23:343:24748":{"crate_id":23,"path":["smallvec","ToSmallVec"],"kind":"trait"},"6:6564:7986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:39178:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12072:4756":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:41421:3738":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"11:1501:19890":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9453:20892":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:7092:5976":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12536:4847":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10743:4537":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"25:4941:7707":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:9127:3190":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"25:1554:7296":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:2060:5875":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"25:4515:7539":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:45933:6400":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:3327:4022":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:45312:6374":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:488:7198":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4853:7652":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:930:5867":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:699:4210":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:9826:4413":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:5594:5323":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13678:5209":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:39920:6237":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:10876:25549":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10092:4448":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"9:0:2723":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:1479:5880":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:9512:4386":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:1637:7354":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:4531:8864":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5766:7797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13399:5117":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11193:4574":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:40383:2506":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:30264:31796":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:5741:20811":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12592:4854":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"18:755:4225":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"20:459:2456":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"1:3193:6513":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5677:20810":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:8389:20872":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4763:7613":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:7522:8150":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:12516:4062":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"25:5790:7812":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:4031:3989":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6981:5601":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"25:4425:7496":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:7294:8145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"25:1730:7402":{"crate_id":25,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:255:1671":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"1:11478:6691":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10857:20882":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:5104:5374":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:9529:4049":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:9415:4089":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:11935:1501":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:40092:31792":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:7243:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:46025:6404":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:5402:4354":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:4665:8846":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:43757:6351":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"25:4338:7445":{"crate_id":25,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:40165:6254":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"20:0:1652":{"crate_id":20,"path":["lock_api"],"kind":"module"},"6:4753:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:4437:8846":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"25:7508:8148":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:21728:6075":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"25:6019:7926":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6442:5514":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:723:5865":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2468:8780":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:1520:5956":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:40155:4041":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"25:6586:8003":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11471:4634":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"25:1693:7389":{"crate_id":25,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:11120:1798":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:42417:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4943:7707":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"13:0:2720":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:7249:8133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:4916:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:9110:2939":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"24:0:2722":{"crate_id":24,"path":["cfg_if"],"kind":"module"},"1:11224:6554":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:2426:5296":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:40001:5993":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:6771:14152":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:8090:5764":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:9028:4362":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:9523:4387":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"25:4565:7565":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:844:3737":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:7966:6575":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"10:44:5888":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:11032:6651":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:1844:3823":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"25:1492:7263":{"crate_id":25,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:1099:35319":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11355:4616":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10386:4090":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"25:4737:7601":{"crate_id":25,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"25:4960:7715":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:12360:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:41162:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"22:84:2393":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","release_resource"],"kind":"function"},"5:1135:35317":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"9:52:8356":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:875:5865":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10416:4497":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:9228:35923":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11544:4648":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:21126:6073":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"25:540:7230":{"crate_id":25,"path":["libc","unix","iovec"],"kind":"struct"},"11:1012:5875":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:7062:34329":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11946:4739":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:21926:31795":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6717:5564":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:7168:14157":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:21124:8906":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:5862:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:5976:5276":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:41489:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13426:5124":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:10894:6653":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:49633:8916":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:40315:6268":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:10699:6683":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"10:36:8226":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"25:1714:7397":{"crate_id":25,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6061:19926":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9641:4397":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:6849:8124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:41548:3738":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8777:6651":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:541:7230":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:44129:2973":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:2546:5301":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:562:7241":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:10056:6042":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:1048:5614":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11585:4660":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:8867:8894":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"25:4869:7663":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:47697:6478":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13477:5135":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:2967:35310":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"9:234:6305":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:11529:6558":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12646:4868":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"25:4398:7481":{"crate_id":25,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13433:5125":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:4233:3737":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:43586:6339":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:11064:2972":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:501:2011":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:6890:5328":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:21:683":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8183:6338":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:21569:8780":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"25:4661:7572":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:2752:2900":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:39296:2928":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:532:7224":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:3272:6517":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:1574:7306":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:5811:5403":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:5616:5379":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"25:4675:7573":{"crate_id":25,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"25:6562:7986":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:7726:6100":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13744:5226":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:1773:4022":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:888:5866":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:43490:6335":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"25:487:7198":{"crate_id":25,"path":["libc","unix","timeval"],"kind":"struct"},"6:5817:7817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:7029:5608":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:42642:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5848:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7366:20819":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"25:4970:7721":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:41556:3304":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:819:3995":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:7837:5721":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10635:4522":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4878:1005":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10691:20989":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:8189:6620":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:21962:3014":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13857:5252":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6597:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4894:7673":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:6361:5507":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:1787:4244":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:9612:4053":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:3162:2929":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:10013:6040":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:10261:6048":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:6572:7991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4684:7574":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:462:2459":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"2:45402:6378":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"25:4486:7523":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13240:5075":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"7:0:1548":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:1538:5882":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:40035:6248":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11299:4601":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:564:4186":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:45979:6402":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:11101:6954":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:40061:6251":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:10657:6677":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:42435:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12345:4813":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:3348:6276":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"25:0:820":{"crate_id":25,"path":["libc"],"kind":"module"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:39929:6238":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:154:3976":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:13612:5185":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"20:452:2451":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"1:10451:6516":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:7201:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:41497:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:41830:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:40205:6257":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:47712:6479":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:538:4184":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:42380:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:20889:3369":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"25:6708:8046":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:39338:6109":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:45526:6383":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:3703:6523":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:3378:4011":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"25:6604:8010":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:8573:20878":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:1556:7296":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"25:578:7249":{"crate_id":25,"path":["libc","unix","tms"],"kind":"struct"},"1:11930:744":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4637:7570":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:5754:3957":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"20:865:1669":{"crate_id":20,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"16:4037:5351":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:42352:8238":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13461:5132":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:3904:8816":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"12:0:2726":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6254:5496":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:6355:4173":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:47367:6466":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13332:5095":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4928:7698":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"25:1517:7273":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:47735:6480":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11922:1372":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:44117:2942":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:39981:6243":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:22501:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"11:736:5866":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:10864:6544":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:6431:5513":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:5462:6544":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:7706:8736":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"25:481:7195":{"crate_id":25,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:1755:3388":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:43292:6055":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:1895:6503":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5798:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:22270:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:39076:2933":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:8109:5767":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:10377:4491":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:6704:8044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:47686:6477":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:3668:3989":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11339:4612":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:6780:8896":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:8420:20873":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:535:5274":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:7043:29595":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:8170:5773":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:1565:3304":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:1947:4248":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:491:4176":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:21342:8903":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:11069:20884":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"23:163:3960":{"crate_id":23,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"6:5966:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:10079:6668":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:7539:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:599:35935":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:7961:6574":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2811:2911":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8176:6040":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:1572:4022":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:45557:6384":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:4596:5359":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:482:7195":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:6561:1671":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:5630:5383":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:45787:6396":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4677:7573":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:11268:6053":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"25:5012:7737":{"crate_id":25,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:32018:6100":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:44073:8310":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:42408:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:9907:4425":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:1423:3738":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"25:4745:7605":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"25:4377:7471":{"crate_id":25,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:3078:2926":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13667:5204":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:1845:5884":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11573:4657":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"25:7275:8136":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4314:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8170:4232":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:8791:6652":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"25:6168:7979":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13101:5039":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:2931:2319":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:2049:5874":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"25:6622:8019":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"25:1542:7287":{"crate_id":25,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13344:5101":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:2804:2914":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11109:4563":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:6327:5502":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:7635:32713":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"22:83:1933":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","acquire_resource"],"kind":"function"},"1:5343:6536":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:4388:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:4757:5363":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"25:4682:7574":{"crate_id":25,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:2404:5295":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:595:7259":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10039:4442":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"25:4935:7704":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:41990:2855":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4841:7648":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"25:7583:8164":{"crate_id":25,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:11883:8377":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9098:4363":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:22237:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:1716:7397":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1526:7276":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:8360:20871":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:8047:5759":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"25:61:14447":{"crate_id":25,"path":["libc","unix","DIR"],"kind":"enum"},"17:8521:20876":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:3225:5342":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:41429:3304":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:9478:4381":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4379:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:43188:6321":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6488:5515":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:8683:4226":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:8271:6629":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:11735:14053":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10334:4366":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:6032:4075":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"25:7502:8147":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"25:6025:7929":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13385:5110":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11037:20883":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:5993:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:7164:2974":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:760:4022":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6868:5585":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:22435:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:21849:31789":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:12563:4851":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10897:4547":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:9265:4367":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7669:5335":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:779:3992":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:7699:6564":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:4462:7511":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:3647:3304":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:1512:7271":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:42876:6039":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:8598:20879":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:5471:4011":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:4605:14112":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:6108:4062":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4861:7657":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:6396:1664":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:587:7254":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4907:7683":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:12483:4843":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"18:96:24721":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4340:7445":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:1589:7318":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6021:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"25:6802:8102":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:7013:5957":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5724:5394":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"25:1635:7354":{"crate_id":25,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:908:1675":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:2799:2909":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:6786:4037":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"14:40:4598":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13763:5231":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2572:5302":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:3700:6522":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:707:4212":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:10206:6046":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:42392:5736":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:5787:2957":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10283:4486":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:5418:5377":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:7820:6569":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:7317:35918":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:3734:5959":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:45857:6398":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"20:477:2481":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"1:5522:7940":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13082:5038":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:5377:6541":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9596:4393":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:40306:6004":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:5393:6542":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:9895:4421":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:6474:5337":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"21:60:24740":{"crate_id":21,"path":["scopeguard","Always"],"kind":"enum"},"17:13376:5109":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:40080:6252":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:11484:4635":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13066:5035":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:7827:6570":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"23:330:3964":{"crate_id":23,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"15:219:8353":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13812:5246":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:8289:6631":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:1115:35302":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:1820:2991":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11459:4633":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:11786:14061":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:2668:5306":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:20919:8912":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:6321:5501":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:21347:8913":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:6696:20816":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:562:4241":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:43175:6255":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:6867:8127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:10303:4487":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"0:0:1677":{"crate_id":0,"path":["parking_lot"],"kind":"module"},"1:6392:1663":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:47750:6481":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:11427:6056":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4954:7710":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5014:7737":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:7227:31792":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6719:8049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:2842:2918":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:39993:6244":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:11932:746":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:6124:4079":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:20606:33594":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:630:3737":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:13181:5056":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4983:7727":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4018:8826":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10270:4484":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11360:6522":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12259:4804":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:5709:2701":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:6508:2955":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:7285:31430":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:1785:6500":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:9534:4389":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:43605:6341":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:6043:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4706:8835":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:20546:3260":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"25:4613:7568":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:6629:4033":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:4702:8832":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"25:4914:7689":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:2931:19953":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:9154:3275":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"25:1660:7373":{"crate_id":25,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:47631:6472":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6014:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"25:4371:7469":{"crate_id":25,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11821:4719":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:7022:3304":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:1461:5865":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:11918:1520":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5835:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:911:4022":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:9670:4402":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:46076:6405":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:30798:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:119:14501":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"25:5048:7759":{"crate_id":25,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:1543:4011":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:32022:6101":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:12510:4845":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:635:6491":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:644:4177":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:3585:5345":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6671:5552":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:9683:4403":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"25:4301:7417":{"crate_id":25,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5792:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12331:4812":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"18:582:3260":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:6588:3312":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"25:5879:7849":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:4113:2992":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"25:499:7201":{"crate_id":25,"path":["libc","unix","rlimit"],"kind":"struct"},"2:10275:6049":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:1544:7287":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:9469:4379":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:6389:3304":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:2957:35307":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"25:7514:8149":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:4163:4011":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:5736:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:660:4200":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:7837:6571":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:41327:6030":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:10761:20880":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:2905:5316":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:8490:20875":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13803:5242":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:3424:6520":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:386:4237":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:1535:7281":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:3996:8822":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:7519:5699":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13324:5094":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:22336:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:3481:8778":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:5990:6005":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"14:187:19902":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:7214:2961":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5986:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:6893:28070":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13159:5052":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"25:7543:8156":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"25:7460:8146":{"crate_id":25,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"25:4761:7613":{"crate_id":25,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:7594:3740":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:41540:3737":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:9091:2938":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"14:215:5859":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:1121:5879":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:9917:4426":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:10977:4094":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:6007:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:113:24722":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:11234:4583":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:1666:1091":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4625:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10851:6567":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:7529:5333":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"6:7462:8146":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11717:4101":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:22402:2515":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:1732:7402":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:8673:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:44041:8302":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:9350:35924":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:46335:6424":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:9120:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:43576:6338":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9148:35925":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:45356:6376":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"25:4503:7533":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2162:3370":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:8025:5758":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:40185:6255":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:41413:3737":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"11:1826:3957":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"9:502:5939":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:39914:5993":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:11720:6035":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:41304:6525":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:857:3738":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12059:4755":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:11937:1503":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:1577:5883":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:7121:3304":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:43128:6317":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:7596:20820":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"11:2168:8219":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:11282:4598":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:8954:25044":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"25:531:7224":{"crate_id":25,"path":["libc","unix","hostent"],"kind":"struct"},"25:4989:7729":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5889:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:3047:19955":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:8997:6665":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"18:766:24731":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12770:4870":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:2319:5285":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:21781:6076":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:2743:3268":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:7411:5429":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:44049:8304":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9866:4416":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:45664:6389":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:8315:6529":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"20:881:219":{"crate_id":20,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:311:8290":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:41248:8237":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:7599:8780":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10257:4483":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:1505:7268":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:554:7236":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"25:1699:7390":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:2691:2990":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"9:352:19828":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:6535:3978":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:6724:31725":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:21976:3012":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"25:1592:7320":{"crate_id":25,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4482:7520":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:2720:5308":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"9:325:8227":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"25:6012:7925":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:46177:6408":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"11:798:5867":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12915:4983":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6662:5551":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:7683:5336":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:8858:4231":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:1708:7393":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4367:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7103:6665":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4327:7435":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"11:1858:5886":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:9545:4348":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:9164:3279":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"11:844:5873":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2787:2910":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:40418:6275":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:4540:5357":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:43934:6364":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"22:192:1792":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkResult"],"kind":"enum"},"2:47640:6473":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:4649:7571":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12224:4793":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:204:3987":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:2925:2041":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:1439:3304":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12113:4763":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:3934:4011":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:8753:4228":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:4785:31926":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:7767:20821":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11924:4738":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:80:24720":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2879:5315":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6155:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:332:3981":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:11490:25511":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:7196:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:6432:2958":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:8899:8895":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:8979:35931":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"23:280:3304":{"crate_id":23,"path":["smallvec","IntoIter"],"kind":"struct"},"6:1594:7320":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"20:901:1674":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"22:73:1795":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_PARK_TOKEN"],"kind":"constant"},"11:97:8286":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:11191:6550":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:40358:6270":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12033:4752":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4599:8032":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"22:211:1794":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkResult"],"kind":"struct"},"17:9946:4430":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:43954:6066":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:2767:2901":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13842:5251":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11861:4727":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:40016:14118":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:0:2730":{"crate_id":17,"path":["object"],"kind":"module"},"11:793:5880":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12046:4753":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:39264:2925":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:44096:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:47179:6464":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:7588:5703":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:13721:5225":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:8788:4229":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:42126:3276":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"23:118:3961":{"crate_id":23,"path":["smallvec","SmallVec"],"kind":"struct"},"2:30250:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:2694:5307":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:8283:20869":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:3593:3738":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:480:4064":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11615:4672":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:9149:29618":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:2737:3266":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6376:5319":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"25:6865:8127":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"25:4692:7581":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6544:5325":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11372:4618":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:8111:6519":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4809:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"25:1566:7304":{"crate_id":25,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:10247:6047":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:45609:6386":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12138:4765":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10026:4439":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:1583:5884":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8416:6305":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:5643:5388":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8076:6612":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:10343:6650":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:3231:6514":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:6677:14159":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10448:6514":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:45711:6390":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:42119:3274":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:7030:5975":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:9853:4415":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:1831:4022":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"22:82:1648":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock"],"kind":"module"},"25:4386:7476":{"crate_id":25,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:7213:5978":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11056:29612":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"25:4532:7547":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:4186:2404":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13015:5019":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5024:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"25:6074:7942":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:3191:6512":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:45332:6375":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13145:5051":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:3181:32864":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:5708:5392":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:8813:3737":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"25:1497:7265":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:856:1672":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:9152:3274":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:5007:7734":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:43266:6326":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:43630:5993":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"25:6668:8038":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:43596:6340":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:25857:3010":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:21864:6082":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:8548:20877":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"25:6133:7954":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:9443:4378":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:7266:2960":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:39037:2936":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:10029:28041":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:11941:1131":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:40075:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12449:4830":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:44341:5887":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:10465:4501":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:41353:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:8846:8375":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:9162:3278":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7757:5709":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:1846:6502":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"21:0:2888":{"crate_id":21,"path":["scopeguard"],"kind":"module"},"2:22600:3013":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"25:4647:7571":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:40636:6018":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:45508:6382":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11522:6558":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:9410:6568":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:40677:6021":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"25:1533:7281":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:9557:4366":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:10167:8891":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:11675:3008":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:10316:4488":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:11940:1558":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10660:4525":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:41710:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:681:4207":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:43743:6348":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:247:4235":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13169:5053":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:4389:2986":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:5774:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:2580:6508":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:40446:6015":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:2186:35896":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"20:873:218":{"crate_id":20,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"2:20587:33589":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11502:4643":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"25:4713:7593":{"crate_id":25,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2742:5309":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13564:5184":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13233:5073":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"25:4584:7566":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:3446:5344":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:6135:7954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:7449:5686":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:1489:5863":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:4728:5362":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:2240:8294":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9498:4385":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:5586:4073":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:8214:5665":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4739:7601":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7437:5685":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:4662:8873":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6506:5523":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:5779:5398":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"20:20:1666":{"crate_id":20,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"5:6619:4031":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2470:5298":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6990:5604":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:9748:4366":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12419:4824":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"25:4851:7652":{"crate_id":25,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:10741:6521":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:4279:6527":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10705:4530":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:5742:1655":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9178:4365":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"25:4797:7632":{"crate_id":25,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13219:5070":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"25:4845:7649":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"25:6717:8049":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:1672:7379":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:8823:4230":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:11729:4212":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"25:6793:8099":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:4335:2984":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13135:5050":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10125:4451":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:4073:3738":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:11899:27796":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12358:4814":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4786:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:40397:6012":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:487:4240":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:46493:6427":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:21093:8780":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:6129:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"25:7247:8133":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"14:202:14069":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:21098:8899":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"25:651:14856":{"crate_id":25,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"11:1048:35903":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"25:5022:7742":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:1680:7380":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:42633:6301":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6833:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:5978:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:8129:5768":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:10491:4503":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:3782:5347":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:242:4234":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:547:7233":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:21675:6074":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"25:4623:7569":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"25:6595:8009":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:9380:20890":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:11931:745":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:44069:8309":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:43921:6360":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2773:2904":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:1818:3737":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8237:6525":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:2366:8770":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:959:5873":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:2910:1796":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"25:4410:7490":{"crate_id":25,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13516:5147":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:43911:6356":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:618:6490":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:690:4209":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:11319:4611":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13499:5140":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11391:4623":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:10255:28038":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:6865:4082":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:9986:4433":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12433:4826":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"14:165:19895":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7478:5331":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6840:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"25:5005:7734":{"crate_id":25,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"25:4325:7435":{"crate_id":25,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10681:4528":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:3962:8821":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:40236:6260":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:3233:2935":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:40326:6008":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:4587:8821":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:2963:35308":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"25:4791:7629":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:41480:3450":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:7528:8151":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:8366:6640":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:953:5872":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:6293:5499":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"25:6615:8015":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"25:6741:8060":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:2616:5304":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:45587:6385":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:23047:3009":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:9413:6038":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11969:4743":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"22:270:2367":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkToken"],"kind":"struct"},"2:39511:25887":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:20770:8904":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4412:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:7545:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4517:7539":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:1648:7362":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:39303:6107":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:10885:4546":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:11934:1504":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:41438:3044":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:44329:6372":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:1594:5886":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:3998:5994":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:5933:4073":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9933:4428":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:44238:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10238:6543":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7711:5707":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"18:515:4174":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11785:4711":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:12311:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:4818:5365":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"25:5952:7898":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:2980:2922":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:7891:5958":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:2620:6509":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:2212:6506":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"25:4392:7478":{"crate_id":25,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:6520:5525":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:46257:6409":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:5571:5321":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:836:5872":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2791:2908":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:39324:6108":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:11011:4553":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:2838:2917":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:20739:8907":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"25:4635:7570":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:4601:8034":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:7563:8159":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:4127:8842":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"20:217:2889":{"crate_id":20,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"17:12902:4976":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"25:4453:7508":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:21441:6071":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:4597:8030":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"25:473:7190":{"crate_id":25,"path":["libc","unix","group"],"kind":"struct"},"2:47651:6474":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:22303:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"25:5071:7765":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:365:3983":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:8498:6530":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:7635:5705":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:2348:3361":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13121:5047":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:42872:8301":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:21797:8295":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:947:5870":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"25:1503:7268":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:43886:6355":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:1821:6501":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:273:2962":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:6743:8060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"18:727:4219":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"20:563:4173":{"crate_id":20,"path":["lock_api","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:2376:8775":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10440:4499":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5876:7848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:5032:5372":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"25:1628:7350":{"crate_id":25,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:47491:6468":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4694:7581":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:21571:8901":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"25:5976:7910":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10721:4532":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:5944:5418":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:21955:8298":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4567:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:43372:6332":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:7608:8170":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"22:298:2251":{"crate_id":22,"path":["parking_lot_core","spinwait","SpinWait"],"kind":"struct"},"6:4886:7668":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:12522:4846":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:7537:4085":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13419:5123":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:13879:5258":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:4877:8872":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"25:6127:7953":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8835:6545":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11258:4597":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"25:505:7204":{"crate_id":25,"path":["libc","unix","rusage"],"kind":"struct"},"2:4:1018":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:624:35933":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"25:5764:7797":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4199:6526":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"25:4830:7642":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"25:4472:7515":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:9696:4385":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"25:5802:7816":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:46571:6428":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"10:0:2724":{"crate_id":10,"path":["adler"],"kind":"module"},"6:4468:7512":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:434:1667":{"crate_id":20,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"6:4769:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"25:6838:8121":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:7205:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:2138:5960":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"25:4821:7639":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:6980:1640":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:11888:8696":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:3463:3273":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:43426:6047":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:7883:6573":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:40265:5998":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11813:4717":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"25:5772:7799":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:3406:6623":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:7557:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:355:3187":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:10676:8312":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:1254:5614":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:22567:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10428:4498":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:10735:4535":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:2962:2932":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"11:667:5863":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:39154:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:9032:6950":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5804:7816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:500:7201":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:2558:4053":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:6243:35920":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:1602:7325":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:9150:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:13211:5067":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:20948:8898":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"21:19:3972":{"crate_id":21,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"18:531:4181":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:6717:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4722:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:2740:2959":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:8256:20856":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:4148:8844":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:901:3957":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12372:4817":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:43849:6065":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:2215:2605":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6854:5583":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9218:4366":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:41870:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6647:8037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"25:4460:7511":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:8254:3046":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:7042:5611":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"25:7572:8163":{"crate_id":25,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"21:14:24739":{"crate_id":21,"path":["scopeguard","Strategy"],"kind":"trait"},"17:9275:35930":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:9158:3277":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:2956:3357":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10626:4521":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:43822:6354":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:6170:7979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:8977:6661":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10516:4505":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:6644:4173":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"18:652:4177":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10402:4493":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:3142:4254":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:1910:15846":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:936:8706":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:6575:1672":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"15:0:2728":{"crate_id":15,"path":["addr2line"],"kind":"module"},"25:1510:7271":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:11464:6059":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10142:20963":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"25:5874:7848":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:1517:5881":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"25:4767:7616":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:8936:6656":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:7360:4022":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:2855:4070":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:10168:6045":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11800:4715":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:9011:25524":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4586:7566":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:5067:7763":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6351:20814":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"25:7269:8134":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"11:1822:3304":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:922:5863":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"14:7:5856":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4817:7638":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:46831:6432":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:42857:6311":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"11:1068:5877":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:47660:6475":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:2862:5314":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:1470:5866":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:20879:8905":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:0:2729":{"crate_id":16,"path":["gimli"],"kind":"module"},"25:4701:7586":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5693:5389":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:21988:3015":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:10000:4434":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:285:8287":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:5557:5318":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:43210:6323":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:7335:35919":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:41565:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10960:4092":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11497:8251":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:4400:5353":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:46681:6431":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:8195:20858":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:1561:3737":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11653:4680":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"11:1838:5883":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:4568:5358":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12236:4795":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:657:3304":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:8667:4354":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:6035:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13292:5084":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:8922:1656":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:590:4187":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:9988:3738":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:11083:2938":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12282:4805":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:0:820":{"crate_id":6,"path":["libc"],"kind":"module"},"1:867:3304":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"25:4905:7683":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:11993:4744":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12496:4844":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6218:5483":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4715:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2830:5313":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9188:35922":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:2357:5293":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:40407:6272":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"22:46:3966":{"crate_id":22,"path":["parking_lot_core","parking_lot","ThreadData"],"kind":"struct"},"6:5050:7759":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4523:7542":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:2826:2915":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:9312:4368":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:6468:3989":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:7499:6694":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:11252:14189":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"14:160:5856":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8883:8893":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:11938:1500":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"22:230:1793":{"crate_id":22,"path":["parking_lot_core","parking_lot","RequeueOp"],"kind":"enum"},"1:3488:8796":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:4783:8831":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:11929:747":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:43621:6245":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:8525:6649":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:817:5870":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3270:6516":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:41268:31780":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"25:7606:8170":{"crate_id":25,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:42625:6300":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9213:3823":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:8244:8311":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:8163:6275":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11600:4666":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7810:4305":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"25:6153:7968":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:47827:6484":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10840:4544":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:8359:6035":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3934:8818":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"25:6685:8039":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:9806:8780":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:11715:14055":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:12098:4760":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:1915:3391":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"13:110:35904":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:3719:5958":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"22:72:2252":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_UNPARK_TOKEN"],"kind":"constant"},"5:2458:7049":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"25:7596:8168":{"crate_id":25,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:40009:6245":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"25:5897:7861":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"25:4884:7668":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:5593:4074":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:7488:4241":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:4380:2985":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13367:5106":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"25:5826:7825":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:10289:6050":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:6137:8990":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:30428:31779":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"18:507:4177":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:2594:5303":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:43728:6343":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"25:4926:7698":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:5716:2951":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:40297:6267":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:2928:1945":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40658:6276":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"25:4859:7657":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"25:7292:8145":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:5847:5410":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13506:5142":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:47289:6465":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:45424:6379":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"25:122:14502":{"crate_id":25,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:41910:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:1285:5874":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:0:2731":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7697:5326":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:20992:8780":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:8132:8779":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9959:4431":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"11:986:5874":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"11:0:2725":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:5346:5376":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:39138:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:481:4175":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:7498:5698":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:12461:4832":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:12608:8707":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:20574:33473":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"25:4417:7494":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:40667:4047":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:4436:2987":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:9110:3273":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6575:20815":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11879:4728":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:5589:6003":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6943:20817":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:5057:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13791:5240":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:2687:7047":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:47575:6470":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:20778:32520":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:11136:4564":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:10855:5936":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:12178:4769":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9340:4369":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:13659:5203":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:4510:5356":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:7052:4000":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"25:546:7233":{"crate_id":25,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11844:4724":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11902:4731":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:4135:8843":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:2174:8220":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9973:4432":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:43201:6322":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:7504:8147":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:43614:6062":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:1919:20921":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:926:5864":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:917:5880":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:45627:6387":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:5525:8889":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:47765:6482":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"25:4981:7727":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"25:7549:8157":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:7377:4027":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:12298:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:40028:6247":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:42133:3277":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:7077:20818":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:11272:8316":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10580:4516":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:4445:5354":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"20:471:2473":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"2:11282:14056":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:41590:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:5948:4011":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:3175:5884":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6201:5476":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:11044:6652":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12019:4456":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6336:5503":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:9322:35929":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13865:5255":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:42672:6310":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1701:7390":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:3141:2927":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"25:6847:8124":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7065:5613":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:638:6493":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:9409:20891":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:4119:8841":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"25:5055:7762":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:40214:6258":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:2130:19884":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:5000:5371":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:12505:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:5954:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:39242:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:7243:5981":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:7280:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:39220:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13265:5080":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:9816:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12126:4764":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:6600:3964":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:1270:5875":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:10774:6051":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4780:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"15:180:19908":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:11936:1502":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:6076:7942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:4351:6528":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:11740:14052":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:20559:33473":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:1568:3957":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:8142:5771":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:4409:2885":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4373:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:8909:4232":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11532:4647":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"9:174:8366":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:9627:4057":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:3180:34331":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:45456:6380":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12388:4819":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:614:35934":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:7076:3304":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:6876:5327":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"25:6723:8050":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4832:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:11866:6697":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:39123:2924":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11090:4560":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:1662:7373":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"25:4720:7594":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12403:4823":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:1299:5879":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13488:5139":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:45809:6397":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2544:4067":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:3168:2931":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:1689:7386":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:736:24730":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:695:5864":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:5886:5412":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:3209:5883":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:10010:6501":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:8508:3737":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:2933:4252":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:6804:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:8456:8884":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:43444:6048":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:47788:6483":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4823:7639":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13651:5200":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"11:1103:5878":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"20:482:217":{"crate_id":20,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"2:40042:14119":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:12333:33862":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:7743:5324":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:11503:6061":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:43472:6334":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:42617:6298":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8104:4221":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:12607:4858":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:9839:4414":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:3158:25740":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:7305:5986":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:22468:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:2167:8291":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:3956:8820":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6728:5565":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:39317:5665":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:8200:8813":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"23:0:2890":{"crate_id":23,"path":["smallvec"],"kind":"module"},"17:11641:4677":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:123:14502":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:4789:5364":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:2984:2923":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:3872:5349":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:1408:3737":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"11:968:5614":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:9138:4364":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:47537:6469":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10936:4550":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:10807:6052":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"25:5984:7911":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"25:7537:8155":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"25:4839:7648":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:4325:2983":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12959:5013":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"23:327:24747":{"crate_id":23,"path":["smallvec","Array"],"kind":"trait"},"17:12550:4850":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:849:1662":{"crate_id":20,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:8718:4227":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:46001:6403":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12622:4525":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:1519:7273":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:4932:5369":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:4001:3957":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:40629:6017":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"25:525:7221":{"crate_id":25,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:474:7190":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:6132:5454":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:47613:6471":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:1080:5879":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9653:4399":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:9373:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:1499:7265":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:4263:2978":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:3196:2934":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:626:5953":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:8255:6627":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:5386:4353":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7016:5605":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:40283:6264":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"25:6064:7939":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4948:7709":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"25:6772:8085":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10478:4502":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:41339:6032":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:41630:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:361:3188":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:2821:2913":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10505:4504":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:3815:5348":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:1568:7304":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:42362:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:5684:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:12634:4861":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:9595:4052":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:9577:4392":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:5062:2950":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:30826:3260":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"25:7561:8159":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:41185:6027":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:2748:3270":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:6316:3989":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21000:8902":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:7585:8164":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"22:0:1678":{"crate_id":22,"path":["parking_lot_core"],"kind":"module"},"16:8180:20823":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:636:4199":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:7084:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9886:4418":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:585:8689":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:40108:6253":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:10971:4093":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"25:6033:7931":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"25:1587:7318":{"crate_id":25,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6617:8015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13316:5093":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:11924:1486":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:3805:6524":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"25:7526:8151":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"25:567:7244":{"crate_id":25,"path":["libc","unix","sigval"],"kind":"struct"},"6:1630:7350":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:21910:31786":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:11538:6042":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:20814:8910":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4505:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:526:7221":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:9038:35928":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:5874:14421":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:10491:3178":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:530:2245":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5079:7768":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:43109:6314":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:2391:2737":{"crate_id":1,"path":["std","io"],"kind":"module"},"20:87:4173":{"crate_id":20,"path":["lock_api","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:4303:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4427:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:4010:5995":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:40255:6263":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:7859:20822":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:4811:798":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11163:4570":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:43280:6329":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:573:7246":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:875:3997":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:40652:6019":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"25:4466:7512":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:8651:4353":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10712:20990":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:40227:6259":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"25:5077:7768":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:4006:8823":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:1062:5874":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"25:4553:7556":{"crate_id":25,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:21117:8780":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"11:403:35898":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:2378:5294":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2779:2903":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"25:6702:8044":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:41670:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:4926:3036":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:4615:7568":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:6460:5320":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:2337:5287":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8947:3174":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:4845:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:43639:6244":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9488:4384":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13689:5210":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11434:4628":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:8072:5762":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:6819:5579":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4394:7478":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"25:1600:7325":{"crate_id":25,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"20:465:2406":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"2:21813:6077":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:10452:4500":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:7543:5334":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13024:5023":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4747:7605":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"9:445:19813":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:7598:14156":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:0:1394":{"crate_id":1,"path":["std"],"kind":"module"},"2:43706:14067":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4555:7556":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:20994:8900":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"8:0:2722":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:39941:31801":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11939:792":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:1978:4251":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:7294:5985":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7803:5717":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:10052:4444":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:7551:8157":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:44291:6367":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:892:3737":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:46411:6426":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:45903:6399":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:1931:655":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:2220:35415":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:3168:3737":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6236:5493":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:574:4177":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12194:4774":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:1669:3989":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:7321:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5043:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:22369:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:6400:5511":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"11:644:3738":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4991:7729":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:521:24732":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:1034:4243":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8829:3304":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:47037:6463":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"25:5860:7847":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:1494:7263":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8153:6258":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4495:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9822:4412":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8348:3040":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"22:284:2408":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkToken"],"kind":"struct"},"1:4459:8847":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5073:7765":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:10133:6044":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:7591:3739":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:1783:6499":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"11:1027:19889":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13443:5128":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:7277:8136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:6761:4034":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:6793:5578":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"9:481:19812":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:43230:6325":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:2762:2902":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:44053:8305":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:11266:8315":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6307:5317":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:7168:5977":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12307:4809":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:40367:6010":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"20:450:2448":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"2:20932:8780":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:8120:6521":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:4704:8834":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2783:2906":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10823:4325":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"14:0:2727":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:2959:8232":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:43298:6330":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:7510:8148":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10649:4523":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:6156:6548":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:7180:8705":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:47429:6467":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4445:7505":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"23:97:24746":{"crate_id":23,"path":["smallvec","SmallVecData"],"kind":"enum"},"17:12293:4807":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9734:4406":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:3030:5339":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:11254:6557":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"25:4876:1005":{"crate_id":25,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:4549:7554":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4728:7597":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"25:572:7246":{"crate_id":25,"path":["libc","unix","itimerval"],"kind":"struct"},"25:1572:7306":{"crate_id":25,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10068:4446":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:5998:20812":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8984:6662":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:43340:6045":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6588:8003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:7673:8694":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:44061:8307":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:4258:2977":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:32109:3271":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:30228:3385":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:20604:33591":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:5828:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"25:4493:7526":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13639:5197":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:30003:3007":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2846:2919":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11721:4682":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:40274:6000":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:41750:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:3948:8819":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:8293:8019":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"20:35:166":{"crate_id":20,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"6:6624:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"25:4288:7408":{"crate_id":25,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:1852:5885":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4400:7481":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:41291:6289":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:43544:6337":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10080:4447":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:4480:5355":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8821:6654":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:10798:20881":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:1500:5864":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2364:8769":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:6767:5577":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"25:1678:7380":{"crate_id":25,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:719:4216":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:9298:6037":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:4474:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:39198:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"20:889:1676":{"crate_id":20,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"2:40122:8749":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:13053:5030":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:45378:6377":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:4871:7663":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:7042:3957":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:42664:6309":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:11916:940":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:7694:6498":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:11410:4624":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:8514:6648":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:11487:6060":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:7113:3304":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:62:14447":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:9109:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"25:4480:7520":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:5305:5375":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6027:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"25:4784:7627":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:9160:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:11927:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:3315:8801":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12576:4852":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"25:7520:8150":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:1732:3389":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:2448:5297":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:4193:4011":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:7688:8695":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"}},"external_crates":{"23":{"name":"smallvec","html_root_url":null},"20":{"name":"lock_api","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"libc","html_root_url":null},"22":{"name":"parking_lot_core","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"21":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}