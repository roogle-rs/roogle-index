{"root":"0:0:1811","crate_version":"0.12.1","includes_private":false,"index":{"0:266:2558":{"id":"0:266:2558","crate_id":0,"name":"lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[67,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:712":{"id":"0:479:712","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:127:1797":{"id":"b:2:2610-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2303-0:460:1798":{"id":"b:2:2303-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:2674"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2302:2672":{"id":"2:2302:2672","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1797":{"id":"0:127:1797","crate_id":0,"name":"Once","span":{"filename":"src/once.rs","begin":[83,0],"end":[83,26]},"visibility":"public","docs":"A synchronization primitive which can be used to run a one-time\ninitialization. Useful for one-time initialization for globals, FFI or\nrelated functionality.\n\n# Differences from the standard library `Once`\n\n- Only requires 1 byte of space, instead of 1 word.\n- Not required to be `'static`.\n- Relaxed memory barriers in the fast path, which can significantly improve\n  performance on some architectures.\n- Efficient handling of micro-contention using adaptive spinning.\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic START: Once = Once::new();\n\nSTART.call_once(|| {\n    // run initialization here\n});\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:130","a:2:8878:3174-0:127:1797","a:2:8879:3173-0:127:1797","a:2:2872:3086-0:127:1797","a:2:2832:253-0:127:1797","a:2:2815:243-0:127:1797","b:2:2300-0:127:1797","b:2:2616-0:127:1797","b:2:2606-0:127:1797","b:2:3450-0:127:1797","b:2:2610-0:127:1797","b:2:2621-0:127:1797","b:2:2303-0:127:1797","0:152","0:150"]}}},"b:2:2610-0:261:1801":{"id":"b:2:2610-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:276:2577":{"id":"0:276:2577","crate_id":0,"name":"unlock_exclusive_fair","span":{"filename":"src/raw_rwlock.rs","begin":[162,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:363:1805":{"id":"0:363:1805","crate_id":0,"name":"ReentrantMutex","span":{"filename":"src/remutex.rs","begin":[41,0],"end":[41,80]},"visibility":"public","docs":"A mutex which can be recursively locked by a single thread.\n\nThis type is identical to `Mutex` except for the following points:\n\n- Locking multiple times from the same thread will work correctly instead of\n  deadlocking.\n- `ReentrantMutexGuard` does not give mutable references to the locked data.\n  Use a `RefCell` if you need this.\n\nSee [`Mutex`](type.Mutex.html) for more details about the underlying mutex\nprimitive.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutex","id":"20:255:1805","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:3452:1625":{"id":"2:3452:1625","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39691:6802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:1792":{"id":"0:83:1792","crate_id":0,"name":"FairMutex","span":{"filename":"src/fair_mutex.rs","begin":[78,0],"end":[78,57]},"visibility":"public","docs":"A mutual exclusive primitive that is always fair, useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\nThe regular mutex provided by `parking_lot` uses eventual fairness\n(after some time it will default to the fair algorithm), but eventual\nfairness does not provide the same guarantees an always fair method would.\nFair mutexes are generally slower, but sometimes needed.\n\nIn a fair mutex the waiters form a queue, and the lock is always granted to\nthe next requester in the queue, in first-in first-out order. This ensures\nthat one thread cannot starve others by quickly re-acquiring the lock after\nreleasing it.\n\nA fair mutex may not be interesting if threads have different priorities (this is known as\npriority inversion).\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `FairMutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n\n# Examples\n\n```\nuse parking_lot::FairMutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(FairMutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:182","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:2872:3086-0:31:1789":{"id":"a:2:2872:3086-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:3086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:100:183":{"id":"0:100:183","crate_id":0,"name":"MutexGuard","span":{"filename":"src/mutex.rs","begin":[101,0],"end":[101,67]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:841:183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:2303-0:127:1797":{"id":"b:2:2303-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:2674"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:208:2156":{"id":"0:208:2156","crate_id":0,"name":"bump","span":{"filename":"src/raw_mutex.rs","begin":[134,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:261:1801":{"id":"b:2:2616-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12742:25992":{"id":"2:12742:25992","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12741:25991"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2621-0:357:1804":{"id":"b:2:2621-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12807:32991":{"id":"2:12807:32991","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:31:1789":{"id":"b:2:2610-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:432-0:365:1802":{"id":"0:432-0:365:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,4],"end":[49,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::const_reentrant_mutex","name":"const_reentrant_mutex","id":"0:365:1802","glob":false}}},"2:12811:32993":{"id":"2:12811:32993","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:453:656":{"id":"0:453:656","crate_id":0,"name":"eq","span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2815:243-0:460:1798":{"id":"a:2:2815:243-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8878:3174-0:197:1800":{"id":"a:2:8878:3174-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:3174","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2625:1610":{"id":"2:2625:1610","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:197:1800":{"id":"b:2:2616-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2621-0:197:1800":{"id":"b:2:2621-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:59:2094":{"id":"0:59:2094","crate_id":0,"name":"wait_while_until","span":{"filename":"src/condvar.rs","begin":[461,4],"end":[472,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant. If the provided condition evaluates to\n`false`, then the thread is no longer blocked and the operation is\ncompleted. If the condition evaluates to `true`, then the thread is\nblocked again and waits for another notification before repeating\nthis process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9110:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3080:138","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:301:2608":{"id":"0:301:2608","crate_id":0,"name":"unlock_upgradable_fair","span":{"filename":"src/raw_rwlock.rs","begin":[399,4],"end":[417,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:357:1804":{"id":"b:2:2616-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2832:253-0:197:1800":{"id":"a:2:2832:253-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:417-0:83:1792":{"id":"0:417-0:83:1792","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,45],"end":[42,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutex","name":"FairMutex","id":"0:83:1792","glob":false}}},"0:439-0:386:1808":{"id":"0:439-0:386:1808","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,18],"end":[53,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockReadGuard","name":"MappedRwLockReadGuard","id":"0:386:1808","glob":false}}},"2:12757:25562":{"id":"2:12757:25562","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2059":{"id":"0:45:2059","crate_id":0,"name":"wait_until","span":{"filename":"src/condvar.rs","begin":[283,4],"end":[292,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after\nthe specified time instant.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked roughly until `timeout` is reached. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9110:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2606-0:31:1789":{"id":"b:2:2606-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:3435"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:430-0:261:1801":{"id":"0:430-0:261:1801","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_rwlock::RawRwLock","name":"RawRwLock","id":"0:261:1801","glob":false}}},"2:12748:27935":{"id":"2:12748:27935","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44105:6907","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:2025":{"id":"0:39:2025","crate_id":0,"name":"notify_all","span":{"filename":"src/condvar.rs","begin":[187,4],"end":[195,5]},"visibility":"public","docs":"Wakes up all blocked threads on this condvar.\n\nReturns the number of threads woken up.\n\nThis method will ensure that any current waiters on the condition\nvariable are awoken. Calls to `notify_all()` are not buffered in any\nway.\n\nTo wake up only one thread, see `notify_one()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:2589":{"id":"0:287:2589","crate_id":0,"name":"try_lock_exclusive_until","span":{"filename":"src/raw_rwlock.rs","begin":[253,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9110:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:25558":{"id":"2:12821:25558","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465:2398":{"id":"0:465:2398","crate_id":0,"name":"InProgress","span":{"filename":"src/once.rs","begin":[30,4],"end":[30,14]},"visibility":"default","docs":"A thread is currently executing a closure.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2300-0:127:1797":{"id":"b:2:2300-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2672"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:278:2580":{"id":"0:278:2580","crate_id":0,"name":"bump_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[184,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:275:2576":{"id":"0:275:2576","crate_id":0,"name":"unlock_shared_fair","span":{"filename":"src/raw_rwlock.rs","begin":[156,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:2497":{"id":"0:166:2497","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_fair_mutex.rs","begin":[35,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426-0:127:1797":{"id":"0:426-0:127:1797","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,21],"end":[44,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::Once","name":"Once","id":"0:127:1797","glob":false}}},"0:271:2571":{"id":"0:271:2571","crate_id":0,"name":"unlock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[129,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:1791":{"id":"0:85:1791","crate_id":0,"name":"const_fair_mutex","span":{"filename":"src/fair_mutex.rs","begin":[83,0],"end":[85,1]},"visibility":"public","docs":"Creates a new fair mutex in an unlocked state ready for use.\n\nThis allows creating a fair mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"FairMutex","id":"0:83:1792","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:1796":{"id":"0:103:1796","crate_id":0,"name":"MappedMutexGuard","span":{"filename":"src/mutex.rs","begin":[110,0],"end":[110,79]},"visibility":"public","docs":"An RAII mutex guard returned by `MutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedMutexGuard` and `MutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:849:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:8878:3174-0:446:1790":{"id":"a:2:8878:3174-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:3174","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2612:739":{"id":"2:2612:739","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:2041":{"id":"0:43:2041","crate_id":0,"name":"wait","span":{"filename":"src/condvar.rs","begin":[255,4],"end":[257,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12813:32994":{"id":"2:12813:32994","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12719:867":{"id":"2:12719:867","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12034:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2078":{"id":"0:51:2078","crate_id":0,"name":"wait_for","span":{"filename":"src/condvar.rs","begin":[379,4],"end":[386,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44621:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2872:3086-0:197:1800":{"id":"a:2:2872:3086-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:3086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:289:2591":{"id":"0:289:2591","crate_id":0,"name":"lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[272,4],"end":[278,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2300-0:460:1798":{"id":"b:2:2300-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2672"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:436-0:367:1806":{"id":"0:436-0:367:1806","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutexGuard","name":"ReentrantMutexGuard","id":"0:367:1806","glob":false}}},"0:440-0:389:1809":{"id":"0:440-0:389:1809","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,41],"end":[53,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::MappedRwLockWriteGuard","name":"MappedRwLockWriteGuard","id":"0:389:1809","glob":false}}},"2:12838:27155":{"id":"2:12838:27155","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2621-0:127:1797":{"id":"b:2:2621-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12777:32986":{"id":"2:12777:32986","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12415:14331","str::split":"2:12768:25999","prim@char":"1:12034:448","`DoubleEndedIterator`":"2:7785:127","str::rsplit_terminator":"2:12780:32987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43901:6901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:128":{"id":"0:171:128","crate_id":0,"name":"Duration","span":{"filename":"src/raw_fair_mutex.rs","begin":[53,4],"end":[53,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[59,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked","is_locked_exclusive"],"trait":{"name":"RawRwLock","id":"20:434:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:264:2303","0:265:1785","0:266:2558","0:267:2562","0:268:2563","0:269:2566","0:270:2569","0:271:2571","0:272:2497","0:273:2574"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:304:2612":{"id":"0:304:2612","crate_id":0,"name":"downgrade_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[429,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3450-0:460:1798":{"id":"b:2:3450-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2606-0:197:1800":{"id":"b:2:2606-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:3435"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2364:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:453:656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12786:26007":{"id":"2:12786:26007","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12034:448","str::splitn":"2:12783:26005","self::pattern":"2:12415:14331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43973:6744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:27159":{"id":"2:12841:27159","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[318,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2657:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:87:1793":{"id":"0:87:1793","crate_id":0,"name":"FairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[92,0],"end":[92,75]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` and `DerefMut` implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MutexGuard","id":"20:841:183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:200:2303":{"id":"0:200:2303","crate_id":0,"name":"INIT","span":{"filename":"src/raw_mutex.rs","begin":[59,4],"end":[61,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:2300-0:197:1800":{"id":"b:2:2300-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2672"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:308:2617":{"id":"0:308:2617","crate_id":0,"name":"try_lock_upgradable_for","span":{"filename":"src/raw_rwlock.rs","begin":[467,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44621:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12743:6759":{"id":"2:12743:6759","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43821:6751","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:2066":{"id":"0:204:2066","crate_id":0,"name":"unlock","span":{"filename":"src/raw_mutex.rs","begin":[100,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:1807":{"id":"0:378:1807","crate_id":0,"name":"const_rwlock","span":{"filename":"src/rwlock.rs","begin":[94,0],"end":[96,1]},"visibility":"public","docs":"Creates a new instance of an `RwLock<T>` which is unlocked.\n\nThis allows creating a `RwLock<T>` in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"RwLock","id":"0:376:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:33661":{"id":"5:5526:33661","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3089","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:3089","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:712":{"id":"0:68:712","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[518,4],"end":[520,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[517,0],"end":[521,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:56:2088":{"id":"0:56:2088","crate_id":0,"name":"wait_while","span":{"filename":"src/condvar.rs","begin":[425,4],"end":[431,5]},"visibility":"public","docs":"Blocks the current thread until this condition variable receives a\nnotification. If the provided condition evaluates to `false`, then the\nthread is no longer blocked and the operation is completed. If the\ncondition evaluates to `true`, then the thread is blocked again and\nwaits for another notification before repeating this process.\n\nThis function will atomically unlock the mutex specified (represented by\n`mutex_guard`) and block the current thread. This means that any calls\nto `notify_*()` which happen logically after the mutex is unlocked are\ncandidates to wake this thread up. When this function call returns, the\nlock specified will have been re-acquired.\n\n# Panics\n\nThis function will panic if another thread is waiting on the `Condvar`\nwith a different `Mutex` object.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3080:138","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370:1803":{"id":"0:370:1803","crate_id":0,"name":"MappedReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[68,0],"end":[69,70]},"visibility":"public","docs":"An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedReentrantMutexGuard","id":"20:865:1803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:386:1808":{"id":"0:386:1808","crate_id":0,"name":"MappedRwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[113,0],"end":[113,90]},"visibility":"public","docs":"An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockReadGuard","id":"20:901:1808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:3450-0:31:1789":{"id":"b:2:3450-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:285:2587":{"id":"0:285:2587","crate_id":0,"name":"try_lock_shared_until","span":{"filename":"src/raw_rwlock.rs","begin":[223,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2585","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12764:3441":{"id":"2:12764:3441","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41931:197","prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:31059":{"id":"2:12746:31059","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12747:31075"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44125:6909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:414-0:446:1790":{"id":"0:414-0:446:1790","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,33],"end":[41,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::WaitTimeoutResult","name":"WaitTimeoutResult","id":"0:446:1790","glob":false}}},"0:365:1802":{"id":"0:365:1802","crate_id":0,"name":"const_reentrant_mutex","span":{"filename":"src/remutex.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"Creates a new reentrant mutex in an unlocked state ready for use.\n\nThis allows creating a reentrant mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"ReentrantMutex","id":"0:363:1805","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:2601":{"id":"0:297:2601","crate_id":0,"name":"unlock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[346,4],"end":[364,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:446:1790":{"id":"0:446:1790","crate_id":0,"name":"WaitTimeoutResult","span":{"filename":"src/condvar.rs","begin":[23,0],"end":[23,35]},"visibility":"public","docs":"A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:29","a:2:8878:3174-0:446:1790","a:2:8879:3173-0:446:1790","a:2:2872:3086-0:446:1790","a:2:2832:253-0:446:1790","a:2:2815:243-0:446:1790","b:2:2300-0:446:1790","b:2:2616-0:446:1790","b:2:2606-0:446:1790","b:2:3450-0:446:1790","b:2:2610-0:446:1790","b:2:2621-0:446:1790","b:2:2303-0:446:1790","b:5:682-0:446:1790","0:451","0:449","0:455","0:457","0:458","0:454","0:452"]}}},"b:2:3450-0:157:1799":{"id":"b:2:3450-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:172:158":{"id":"0:172:158","crate_id":0,"name":"Instant","span":{"filename":"src/raw_fair_mutex.rs","begin":[54,4],"end":[54,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutexTimed","id":"20:30:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"2:2624:134":{"id":"2:2624:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32351:8670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[191,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockDowngrade","id":"20:450:2582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:280:2583"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2610-0:357:1804":{"id":"b:2:2610-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:450:712":{"id":"0:450:712","crate_id":0,"name":"fmt","span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[36,0],"end":[58,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:2404","0:126:2407"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2621-0:460:1798":{"id":"b:2:2621-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:471:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:267:2562":{"id":"0:267:2562","crate_id":0,"name":"try_lock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[80,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/remutex.rs","begin":[15,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"GetThreadId","id":"20:214:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:360:2303","0:361:2651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12754:25560":{"id":"2:12754:25560","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12789:26009":{"id":"2:12789:26009","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:1785":{"id":"0:265:1785","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_rwlock.rs","begin":[64,4],"end":[64,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2303-0:261:1801":{"id":"b:2:2303-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:2674"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:1795":{"id":"0:98:1795","crate_id":0,"name":"const_mutex","span":{"filename":"src/mutex.rs","begin":[92,0],"end":[94,1]},"visibility":"public","docs":"Creates a new mutex in an unlocked state ready for use.\n\nThis allows creating a mutex in a constant context on stable Rust.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["val",{"generic":"T"}]],"output":{"resolved_path":{"name":"Mutex","id":"0:96:182","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12798:32988":{"id":"2:12798:32988","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12415:14331","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::matches":"2:12795:2960"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44073:6906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12827:32998":{"id":"2:12827:32998","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2621-0:31:1789":{"id":"b:2:2621-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:290:2592":{"id":"0:290:2592","crate_id":0,"name":"try_lock_shared_recursive","span":{"filename":"src/raw_rwlock.rs","begin":[281,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5541:33664":{"id":"5:5541:33664","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[510,0],"end":[515,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2657:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2825:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:272:2497":{"id":"0:272:2497","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_rwlock.rs","begin":[142,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2815:243-0:357:1804":{"id":"a:2:2815:243-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:284:2586":{"id":"0:284:2586","crate_id":0,"name":"try_lock_shared_for","span":{"filename":"src/raw_rwlock.rs","begin":[210,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2585","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:253-0:261:1801":{"id":"a:2:2832:253-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:207:2496":{"id":"0:207:2496","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_mutex.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2609:3435":{"id":"2:2609:3435","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2583:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:3502":{"id":"5:686:3502","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:460:1798":{"id":"b:5:682-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3500","5:685:3501","5:686:3502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12846:33003":{"id":"2:12846:33003","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4613:33003"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44168:6811","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:3500":{"id":"5:684:3500","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:2:8879:3173-0:261:1801":{"id":"a:2:8879:3173-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:3173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:442-0:380:240":{"id":"0:442-0:380:240","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,73],"end":[53,88]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockReadGuard","name":"RwLockReadGuard","id":"0:380:240","glob":false}}},"b:2:3450-0:446:1790":{"id":"b:2:3450-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:309:2618":{"id":"0:309:2618","crate_id":0,"name":"try_upgrade_until","span":{"filename":"src/raw_rwlock.rs","begin":[480,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9110:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[52,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:171:128","0:172:158","0:173:2499","0:174:2500"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[141,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawMutexTimed","id":"20:30:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:210:128","0:211:158","0:212:2499","0:213:2500"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:96:182":{"id":"0:96:182","crate_id":0,"name":"Mutex","span":{"filename":"src/mutex.rs","begin":[87,0],"end":[87,49]},"visibility":"public","docs":"A mutual exclusion primitive useful for protecting shared data\n\nThis mutex will block threads waiting for the lock to become available. The\nmutex can be statically initialized or created by the `new`\nconstructor. Each mutex has a type parameter which represents the data that\nit is protecting. The data can only be accessed through the RAII guards\nreturned from `lock` and `try_lock`, which guarantees that the data is only\never accessed when the mutex is locked.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same mutex in succession, which can starve\nother threads waiting to acquire the mutex. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na mutex it has just released, this can starve other threads.\n\nThis mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the mutex.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `MutexGuard::unlock_fair` when\nunlocking a mutex instead of simply dropping the `MutexGuard`.\n\n# Differences from the standard library `Mutex`\n\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 byte of space, whereas the standard library boxes the\n  `Mutex` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the mutex is fair on average.\n- Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::Mutex;\nuse std::sync::{Arc, mpsc::channel};\nuse std::thread;\n\nconst N: usize = 10;\n\n// Spawn a few threads to increment a shared variable (non-atomically), and\n// let the main thread know once all increments are done.\n//\n// Here we're using an Arc to share memory among threads, and the data inside\n// the Arc is protected with a mutex.\nlet data = Arc::new(Mutex::new(0));\n\nlet (tx, rx) = channel();\nfor _ in 0..10 {\n    let (data, tx) = (Arc::clone(&data), tx.clone());\n    thread::spawn(move || {\n        // The shared state can only be accessed once the lock is held.\n        // Our non-atomic increment is safe because we're the only thread\n        // which can access the shared state when the lock is held.\n        let mut data = data.lock();\n        *data += 1;\n        if *data == N {\n            tx.send(()).unwrap();\n        }\n        // the lock is unlocked here when `data` goes out of scope.\n    });\n}\n\nrx.recv().unwrap();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::Mutex","id":"20:35:182","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12804:32990":{"id":"2:12804:32990","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12415:14331","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::match_indices":"2:12801:32989"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44019:6904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525":{"id":"5:5525","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5526:33661","5:5527:3331","5:5530:33662","5:5533:33663","5:5541:33664","5:5542:33665","5:5543:9081","5:5544:27291","5:5545:27292"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:296:2599":{"id":"0:296:2599","crate_id":0,"name":"try_lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[333,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:422-0:103:1796":{"id":"0:422-0:103:1796","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,35],"end":[43,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MappedMutexGuard","name":"MappedMutexGuard","id":"0:103:1796","glob":false}}},"0:443-0:392:1810":{"id":"0:443-0:392:1810","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,4],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockUpgradableReadGuard","name":"RwLockUpgradableReadGuard","id":"0:392:1810","glob":false}}},"b:2:2616-0:127:1797":{"id":"b:2:2616-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:413-0:31:1789":{"id":"0:413-0:31:1789","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,24],"end":[41,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::condvar::Condvar","name":"Condvar","id":"0:31:1789","glob":false}}},"a:2:8879:3173-0:197:1800":{"id":"a:2:8879:3173-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:3173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12845:8958":{"id":"2:12845:8958","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4616:8958"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44159:6688","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367:1806":{"id":"0:367:1806","crate_id":0,"name":"ReentrantMutexGuard","span":{"filename":"src/remutex.rs","begin":[59,0],"end":[59,98]},"visibility":"public","docs":"An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\nis dropped (falls out of scope), the lock will be unlocked.\n\nThe data protected by the mutex can be accessed through this guard via its\n`Deref` implementation.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::ReentrantMutexGuard","id":"20:856:1806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_mutex::RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:380:240":{"id":"0:380:240","crate_id":0,"name":"RwLockReadGuard","span":{"filename":"src/rwlock.rs","begin":[100,0],"end":[100,78]},"visibility":"public","docs":"RAII structure used to release the shared read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockReadGuard","id":"20:873:240","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12809:32992":{"id":"2:12809:32992","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:9081":{"id":"5:5543:9081","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:2325":{"id":"0:164:2325","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:253-0:446:1790":{"id":"a:2:2832:253-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:213:2500":{"id":"0:213:2500","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_mutex.rs","begin":[163,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44621:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:2073":{"id":"0:163:2073","crate_id":0,"name":"lock","span":{"filename":"src/raw_fair_mutex.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433-0:370:1803":{"id":"0:433-0:370:1803","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,27],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::MappedReentrantMutexGuard","name":"MappedReentrantMutexGuard","id":"0:370:1803","glob":false}}},"b:2:2300-0:261:1801":{"id":"b:2:2300-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2672"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8878:3174-0:460:1798":{"id":"a:2:8878:3174-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:3174","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12739:32983":{"id":"2:12739:32983","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12040:1529","str::slice_mut_unchecked":"2:12740:32984","crate::ops::Index":"2:3112:3050"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12751:26011":{"id":"2:12751:26011","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:32997":{"id":"2:12818:32997","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12730:25968":{"id":"2:12730:25968","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12051:1634"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8878:3174-0:127:1797":{"id":"a:2:8878:3174-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:3174","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2872:3086-0:157:1799":{"id":"a:2:2872:3086-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:3086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:383:241":{"id":"0:383:241","crate_id":0,"name":"RwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[104,0],"end":[104,80]},"visibility":"public","docs":"RAII structure used to release the exclusive write access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockWriteGuard","id":"20:881:241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:2606-0:157:1799":{"id":"b:2:2606-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:3435"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:131:1029":{"id":"0:131:1029","crate_id":0,"name":"new","span":{"filename":"src/once.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a new `Once` value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361:2651":{"id":"0:361:2651","crate_id":0,"name":"nonzero_thread_id","span":{"filename":"src/remutex.rs","begin":[18,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"2:23135:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:1516":{"id":"0:132:1516","crate_id":0,"name":"state","span":{"filename":"src/once.rs","begin":[94,4],"end":[105,5]},"visibility":"public","docs":"Returns the current state of this `Once`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12720:2206":{"id":"2:12720:2206","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:460:1798":{"id":"b:2:2616-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[397,0],"end":[425,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_upgradable"],"trait":{"name":"RawRwLockUpgradeFair","id":"20:471:2607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:301:2608","0:302:2609"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:445-20:0:1786":{"id":"0:445-20:0:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[56,0],"end":[56,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"::lock_api","name":"lock_api","id":"20:0:1786","glob":false}}},"2:12721:32979":{"id":"2:12721:32979","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12722:32980":{"id":"2:12722:32980","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12735:25966":{"id":"2:12735:25966","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:26005":{"id":"2:12783:26005","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331","str::rsplitn":"2:12786:26007"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43955:6743","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:2303":{"id":"0:264:2303","crate_id":0,"name":"INIT","span":{"filename":"src/raw_rwlock.rs","begin":[60,4],"end":[62,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:35:2003":{"id":"0:35:2003","crate_id":0,"name":"notify_one","span":{"filename":"src/condvar.rs","begin":[128,4],"end":[136,5]},"visibility":"public","docs":"Wakes up one blocked thread on this condvar.\n\nReturns whether a thread was woken up.\n\nIf there is a blocked thread on this condition variable, then it will\nbe woken up from its call to `wait` or `wait_timeout`. Calls to\n`notify_one` are not buffered in any way.\n\nTo wake up all threads, see `notify_all()`.\n\n# Examples\n\n```\nuse parking_lot::Condvar;\n\nlet condvar = Condvar::new();\n\n// do something with condvar, share it with other threads\n\nif !condvar.notify_one() {\n    println!(\"Nobody was listening for this.\");\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427-0:460:1798":{"id":"0:427-0:460:1798","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[44,27],"end":[44,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::once::OnceState","name":"OnceState","id":"0:460:1798","glob":false}}},"0:463:2396":{"id":"0:463:2396","crate_id":0,"name":"Poisoned","span":{"filename":"src/once.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":"A closure was executed but panicked.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:286:2588":{"id":"0:286:2588","crate_id":0,"name":"try_lock_exclusive_for","span":{"filename":"src/raw_rwlock.rs","begin":[236,4],"end":[250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44621:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8879:3173-0:127:1797":{"id":"a:2:8879:3173-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:3173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:438-0:378:1807":{"id":"0:438-0:378:1807","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::const_rwlock","name":"const_rwlock","id":"0:378:1807","glob":false}}},"b:2:2610-0:460:1798":{"id":"b:2:2610-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12731:2638":{"id":"2:12731:2638","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5542:33665":{"id":"5:5542:33665","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:3089","`String`":"5:7524:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3089","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:1941":{"id":"0:30:1941","crate_id":0,"name":"timed_out","span":{"filename":"src/condvar.rs","begin":[28,4],"end":[30,5]},"visibility":"public","docs":"Returns whether the wait was known to have timed out.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2621-0:157:1799":{"id":"b:2:2621-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5527:3331":{"id":"5:5527:3331","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8878:3174-0:261:1801":{"id":"a:2:8878:3174-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:3174","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2305:2674":{"id":"2:2305:2674","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12843:33002":{"id":"2:12843:33002","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4615:33002"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44150:6812","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[119,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:207:2496","0:208:2156"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8879:3173-0:460:1798":{"id":"a:2:8879:3173-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:3173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:62:2099":{"id":"0:62:2099","crate_id":0,"name":"wait_while_for","span":{"filename":"src/condvar.rs","begin":[496,4],"end":[507,5]},"visibility":"public","docs":"Waits on this condition variable for a notification, timing out after a\nspecified duration. If the provided condition evaluates to `false`,\nthen the thread is no longer blocked and the operation is completed.\nIf the condition evaluates to `true`, then the thread is blocked again\nand waits for another notification before repeating this process.\n\nThe semantics of this function are equivalent to `wait()` except that\nthe thread will be blocked for roughly no longer than `timeout`. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that may not cause the maximum\namount of time waited to be precisely `timeout`.\n\nNote that the best effort is made to ensure that the time waited is\nmeasured with a monotonic clock, and not affected by the changes made to\nthe system time.\n\nThe returned `WaitTimeoutResult` value indicates if the timeout is\nknown to have elapsed.\n\nLike `wait`, the lock specified will be re-acquired when this function\nreturns, regardless of whether the timeout elapsed or not.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mutex_guard",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MutexGuard","id":"0:100:183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}],["condition",{"generic":"F"}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44621:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3080:138","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8878:3174-0:31:1789":{"id":"a:2:8878:3174-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:3174","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12792:26010":{"id":"2:12792:26010","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[294,0],"end":[320,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursiveTimed","id":"20:462:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:292:2594","0:293:2595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:173:2499":{"id":"0:173:2499","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_fair_mutex.rs","begin":[57,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:2498","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1789":{"id":"0:31:1789","crate_id":0,"name":"Condvar","span":{"filename":"src/condvar.rs","begin":[90,0],"end":[92,1]},"visibility":"public","docs":"A Condition Variable\n\nCondition variables represent the ability to block a thread such that it\nconsumes no CPU time while waiting for an event to occur. Condition\nvariables are typically associated with a boolean predicate (a condition)\nand a mutex. The predicate is always verified inside of the mutex before\ndetermining that thread must block.\n\nNote that this module places one additional restriction over the system\ncondition variables: each condvar can be used with only one mutex at a\ntime. Any attempt to use multiple mutexes on the same condition variable\nsimultaneously will result in a runtime panic. However it is possible to\nswitch to a different mutex if there are no threads currently waiting on\nthe condition variable.\n\n# Differences from the standard library `Condvar`\n\n- No spurious wakeups: A wait will only return a non-timeout result if it\n  was woken up by `notify_one` or `notify_all`.\n- `Condvar::notify_all` will only wake up a single thread, the rest are\n  requeued to wait for the `Mutex` to be unlocked by the thread that was\n  woken up.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `Condvar` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n\n# Examples\n\n```\nuse parking_lot::{Mutex, Condvar};\nuse std::sync::Arc;\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\n// Inside of our lock, spawn a new thread, and then wait for it to start\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock();\n    *started = true;\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock();\nif !*started {\n    cvar.wait(&mut started);\n}\n// Note that we used an if instead of a while loop above. This is only\n// possible because parking_lot's Condvar will never spuriously wake up.\n// This means that wait() will only return after notify_one or notify_all is\n// called.\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:33","a:2:8878:3174-0:31:1789","a:2:8879:3173-0:31:1789","a:2:2872:3086-0:31:1789","a:2:2832:253-0:31:1789","a:2:2815:243-0:31:1789","b:2:2300-0:31:1789","b:2:2616-0:31:1789","b:2:2606-0:31:1789","b:2:3450-0:31:1789","b:2:2610-0:31:1789","b:2:2621-0:31:1789","b:2:2303-0:31:1789","0:65","0:67"]}}},"2:12774:26003":{"id":"2:12774:26003","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12415:14331","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::split":"2:12768:25999"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43869:6741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2606-0:460:1798":{"id":"b:2:2606-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:3435"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:269:2566":{"id":"0:269:2566","crate_id":0,"name":"lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[107,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:2500":{"id":"0:174:2500","crate_id":0,"name":"try_lock_for","span":{"filename":"src/raw_fair_mutex.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:30:2498","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419-0:90:1794":{"id":"0:419-0:90:1794","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,72],"end":[42,92]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::MappedFairMutexGuard","name":"MappedFairMutexGuard","id":"0:90:1794","glob":false}}},"0:459:452":{"id":"0:459:452","crate_id":0,"name":"clone","span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5545:27292":{"id":"5:5545:27292","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12842:27160"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:1785":{"id":"0:162:1785","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_fair_mutex.rs","begin":[17,4],"end":[17,69]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"GuardMarker","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"trait":{"name":"RawMutex","id":"20:20:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[427,0],"end":[450,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeDowngrade","id":"20:474:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:304:2612","0:305:2613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2303-0:357:1804":{"id":"b:2:2303-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:2674"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2872:3086-0:357:1804":{"id":"a:2:2872:3086-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:3086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211:158":{"id":"0:211:158","crate_id":0,"name":"Instant","span":{"filename":"src/raw_mutex.rs","begin":[143,4],"end":[143,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9110:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2826:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:392:1810":{"id":"0:392:1810","crate_id":0,"name":"RwLockUpgradableReadGuard","span":{"filename":"src/rwlock.rs","begin":[126,0],"end":[126,98]},"visibility":"public","docs":"RAII structure used to release the upgradable read access of a lock when\ndropped.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLockUpgradableReadGuard","id":"20:889:1810","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:458":{"id":"0:458","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,37],"end":[22,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:459:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:125:2404":{"id":"0:125:2404","crate_id":0,"name":"poisoned","span":{"filename":"src/once.rs","begin":[42,4],"end":[47,5]},"visibility":"public","docs":"Returns whether the associated `Once` has been poisoned.\n\nOnce an initialization routine for a `Once` has panicked it will forever\nindicate to future forced initialization routines that it is poisoned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[325,0],"end":[331,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:273:2574":{"id":"0:273:2574","crate_id":0,"name":"is_locked_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[148,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423-0:96:182":{"id":"0:423-0:96:182","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,53],"end":[43,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::Mutex","name":"Mutex","id":"0:96:182","glob":false}}},"b:2:2606-0:261:1801":{"id":"b:2:2606-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:3435"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:444-0:383:241":{"id":"0:444-0:383:241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLockWriteGuard","name":"RwLockWriteGuard","id":"0:383:241","glob":false}}},"a:2:2815:243-0:157:1799":{"id":"a:2:2815:243-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12750:31384":{"id":"2:12750:31384","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44143:6758","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424-0:100:183":{"id":"0:424-0:100:183","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,60],"end":[43,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::MutexGuard","name":"MutexGuard","id":"0:100:183","glob":false}}},"0:161:2303":{"id":"0:161:2303","crate_id":0,"name":"INIT","span":{"filename":"src/raw_fair_mutex.rs","begin":[15,4],"end":[15,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,16],"end":[22,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2825:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2832:253-0:460:1798":{"id":"a:2:2832:253-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2621-0:446:1790":{"id":"b:2:2621-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:2499":{"id":"0:212:2499","crate_id":0,"name":"try_lock_until","span":{"filename":"src/raw_mutex.rs","begin":[146,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9110:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:33662":{"id":"5:5530:33662","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389:1809":{"id":"0:389:1809","crate_id":0,"name":"MappedRwLockWriteGuard","span":{"filename":"src/rwlock.rs","begin":[122,0],"end":[122,92]},"visibility":"public","docs":"An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedRwLockWriteGuard","id":"20:908:1809","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:2616-0:31:1789":{"id":"b:2:2616-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133:420":{"id":"0:133:420","crate_id":0,"name":"call_once","span":{"filename":"src/once.rs","begin":[157,4],"end":[167,5]},"visibility":"public","docs":"Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.\n\nThis method will block the calling thread if another initialization\nroutine is currently running.\n\nWhen this function returns, it is guaranteed that some initialization\nhas run and completed (it may not be the closure specified). It is also\nguaranteed that any memory writes performed by the executed closure can\nbe reliably observed by other threads at this point (there is a\nhappens-before relation between the closure and code executing after the\nreturn).\n\n# Examples\n\n```\nuse parking_lot::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\n// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g. write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\nfn get_cached_val() -> usize {\n    unsafe {\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\nfn expensive_computation() -> usize {\n    // ...\n# 2\n}\n```\n\n# Panics\n\nThe closure `f` will only be executed once if this is called\nconcurrently amongst many threads. If that closure panics, however, then\nit will *poison* this `Once` instance, causing all future invocations of\n`call_once` to also panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:139","args":{"parenthesized":{"inputs":[],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:128":{"id":"0:210:128","crate_id":0,"name":"Duration","span":{"filename":"src/raw_mutex.rs","begin":[142,4],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44621:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12745:6553":{"id":"2:12745:6553","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43837:4769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:1029":{"id":"0:34:1029","crate_id":0,"name":"new","span":{"filename":"src/condvar.rs","begin":[98,4],"end":[102,5]},"visibility":"public","docs":"Creates a new condition variable which is ready to be waited on and\nnotified.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2815:243-0:127:1797":{"id":"a:2:2815:243-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:168:2496":{"id":"0:168:2496","crate_id":0,"name":"unlock_fair","span":{"filename":"src/raw_fair_mutex.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:2303":{"id":"0:360:2303","crate_id":0,"name":"INIT","span":{"filename":"src/remutex.rs","begin":[16,4],"end":[16,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"RawThreadId"}}},"2:12724:32981":{"id":"2:12724:32981","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12722:32980"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1811":{"id":"0:0:1811","crate_id":0,"name":"parking_lot","span":{"filename":"src/lib.rs","begin":[8,0],"end":[56,19]},"visibility":"public","docs":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n`Once` that are smaller, faster and more flexible than those in the Rust\nstandard library. It also provides a `ReentrantMutex` type.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:413-0:31:1789","0:414-0:446:1790","0:416-0:85:1791","0:417-0:83:1792","0:418-0:87:1793","0:419-0:90:1794","0:421-0:98:1795","0:422-0:103:1796","0:423-0:96:182","0:424-0:100:183","0:426-0:127:1797","0:427-0:460:1798","0:428-0:157:1799","0:429-0:197:1800","0:430-0:261:1801","0:432-0:365:1802","0:433-0:370:1803","0:434-0:357:1804","0:435-0:363:1805","0:436-0:367:1806","0:438-0:378:1807","0:439-0:386:1808","0:440-0:389:1809","0:441-0:376:239","0:442-0:380:240","0:443-0:392:1810","0:444-0:383:241","0:445-20:0:1786"],"is_stripped":false}}},"0:283:158":{"id":"0:283:158","crate_id":0,"name":"Instant","span":{"filename":"src/raw_rwlock.rs","begin":[207,4],"end":[207,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Instant","id":"1:9110:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:8879:3173-0:446:1790":{"id":"a:2:8879:3173-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:3173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[85,0],"end":[316,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:1029","0:132:1516","0:133:420","0:136:2464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:299:2605":{"id":"0:299:2605","crate_id":0,"name":"try_upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[379,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:2616":{"id":"0:307:2616","crate_id":0,"name":"try_lock_upgradable_until","span":{"filename":"src/raw_rwlock.rs","begin":[454,4],"end":[464,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Instant","id":"1:9110:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12729:339":{"id":"2:12729:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12730:25968","`u8`":"1:12051:1634"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2300-0:31:1789":{"id":"b:2:2300-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2672"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2303-0:446:1790":{"id":"b:2:2303-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:2674"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12771:26001":{"id":"2:12771:26001","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12231:6738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2872:3086-0:261:1801":{"id":"a:2:2872:3086-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:3086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2369:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:685:3501":{"id":"5:685:3501","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[94,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:34:1029","0:35:2003","0:39:2025","0:43:2041","0:45:2059","0:51:2078","0:56:2088","0:59:2094","0:62:2099"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12830:32999":{"id":"2:12830:32999","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2815:243-0:261:1801":{"id":"a:2:2815:243-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12836:33001":{"id":"2:12836:33001","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12376:133","`FromStr`":"2:12375:3136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12375:3136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12375:3136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:2464":{"id":"0:136:2464","crate_id":0,"name":"call_once_force","span":{"filename":"src/once.rs","begin":[179,4],"end":[191,5]},"visibility":"public","docs":"Performs the same function as `call_once` except ignores poisoning.\n\nIf this `Once` has been poisoned (some initialization panicked) then\nthis function will continue to attempt to call initialization functions\nuntil one of them doesn't panic.\n\nThe closure `f` is yielded a structure which can be used to query the\nstate of this `Once` (whether initialization has previously panicked or\nnot).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3083:139","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12728:32982":{"id":"2:12728:32982","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:26012":{"id":"2:12824:26012","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:128":{"id":"0:282:128","crate_id":0,"name":"Duration","span":{"filename":"src/raw_rwlock.rs","begin":[206,4],"end":[206,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Duration","id":"2:44621:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12840:27158":{"id":"2:12840:27158","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160":{"id":"0:160","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[14,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:161:2303","0:162:1785","0:163:2073","0:164:2325","0:165:2066","0:166:2497"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:302:2609":{"id":"0:302:2609","crate_id":0,"name":"bump_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[420,4],"end":[424,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12744:6919":{"id":"2:12744:6919","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43827:6899","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2300-0:357:1804":{"id":"b:2:2300-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2672"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:197:1800":{"id":"0:197:1800","crate_id":0,"name":"RawMutex","span":{"filename":"src/raw_mutex.rs","begin":[32,0],"end":[56,1]},"visibility":"public","docs":"Raw mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8878:3174-0:197:1800","a:2:8879:3173-0:197:1800","a:2:2872:3086-0:197:1800","a:2:2832:253-0:197:1800","a:2:2815:243-0:197:1800","b:2:2300-0:197:1800","b:2:2616-0:197:1800","b:2:2606-0:197:1800","b:2:3450-0:197:1800","b:2:2610-0:197:1800","b:2:2621-0:197:1800","b:2:2303-0:197:1800","0:199","0:209","0:206"]}}},"0:461:2394":{"id":"0:461:2394","crate_id":0,"name":"New","span":{"filename":"src/once.rs","begin":[24,4],"end":[24,7]},"visibility":"default","docs":"A closure has not been executed yet","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:441-0:376:239":{"id":"0:441-0:376:239","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,65],"end":[53,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::rwlock::RwLock","name":"RwLock","id":"0:376:239","glob":false}}},"0:261:1801":{"id":"0:261:1801","crate_id":0,"name":"RawRwLock","span":{"filename":"src/raw_rwlock.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Raw reader-writer lock type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8878:3174-0:261:1801","a:2:8879:3173-0:261:1801","a:2:2872:3086-0:261:1801","a:2:2832:253-0:261:1801","a:2:2815:243-0:261:1801","b:2:2300-0:261:1801","b:2:2616-0:261:1801","b:2:2606-0:261:1801","b:2:3450-0:261:1801","b:2:2610-0:261:1801","b:2:2621-0:261:1801","b:2:2303-0:261:1801","0:281","0:274","0:300","0:263","0:303","0:279","0:294","0:291","0:306","0:288"]}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,27],"end":[22,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2369:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:293:2595":{"id":"0:293:2595","crate_id":0,"name":"try_lock_shared_recursive_until","span":{"filename":"src/raw_rwlock.rs","begin":[309,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Instant","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2585","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:2156":{"id":"0:169:2156","crate_id":0,"name":"bump","span":{"filename":"src/raw_fair_mutex.rs","begin":[47,4],"end":[49,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/raw_fair_mutex.rs","begin":[40,0],"end":[50,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump"],"trait":{"name":"RawMutexFair","id":"20:27:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:2496","0:169:2156"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12842:27160":{"id":"2:12842:27160","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2872:3086-0:446:1790":{"id":"a:2:2872:3086-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:3086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12768:25999":{"id":"2:12768:25999","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12415:14331","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::split_whitespace":"2:12746:31059","str::rsplit":"2:12774:26003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43851:6736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:357:1804":{"id":"0:357:1804","crate_id":0,"name":"RawThreadId","span":{"filename":"src/remutex.rs","begin":[13,0],"end":[13,23]},"visibility":"public","docs":"Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:8878:3174-0:357:1804","a:2:8879:3173-0:357:1804","a:2:2872:3086-0:357:1804","a:2:2832:253-0:357:1804","a:2:2815:243-0:357:1804","b:2:2300-0:357:1804","b:2:2616-0:357:1804","b:2:2606-0:357:1804","b:2:3450-0:357:1804","b:2:2610-0:357:1804","b:2:2621-0:357:1804","b:2:2303-0:357:1804","0:359"]}}},"b:2:2621-0:261:1801":{"id":"b:2:2621-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:134","2:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2300-0:157:1799":{"id":"b:2:2300-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2672"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[25,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:1941"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2872:3086-0:127:1797":{"id":"a:2:2872:3086-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:3086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12833:33000":{"id":"2:12833:33000","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:477:656":{"id":"0:477:656","crate_id":0,"name":"eq","span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:450:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:305:2613":{"id":"0:305:2613","crate_id":0,"name":"downgrade_to_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[439,4],"end":[449,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2815:243-0:446:1790":{"id":"a:2:2815:243-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:151:60":{"id":"0:151:60","crate_id":0,"name":"default","span":{"filename":"src/once.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:467:2400":{"id":"0:467:2400","crate_id":0,"name":"Done","span":{"filename":"src/once.rs","begin":[33,4],"end":[33,8]},"visibility":"default","docs":"A closure has completed successfully.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:476":{"id":"0:476","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,26],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2364:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:477:656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2610-0:197:1800":{"id":"b:2:2610-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12795:2960":{"id":"2:12795:2960","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12415:14331","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::rmatches":"2:12798:32988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44055:6905","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2619:134":{"id":"2:2619:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:3450-0:357:1804":{"id":"b:2:3450-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2620:1612":{"id":"2:2620:1612","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12718":{"id":"2:12718","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12719:867","2:12720:2206","2:12721:32979","2:12722:32980","2:12724:32981","2:12727:25920","2:12728:32982","2:12729:339","2:12730:25968","2:12731:2638","2:12733:2334","2:12735:25966","2:12737:25967","2:12739:32983","2:12740:32984","2:12741:25991","2:12742:25992","2:12743:6759","2:12744:6919","2:12745:6553","2:12746:31059","2:12747:31075","2:12748:27935","2:12749:32985","2:12750:31384","2:12751:26011","2:12754:25560","2:12757:25562","2:12760:3480","2:12764:3441","2:12768:25999","2:12771:26001","2:12774:26003","2:12777:32986","2:12780:32987","2:12783:26005","2:12786:26007","2:12789:26009","2:12792:26010","2:12795:2960","2:12798:32988","2:12801:32989","2:12804:32990","2:12807:32991","2:12809:32992","2:12811:32993","2:12813:32994","2:12814:32995","2:12815:32996","2:12818:32997","2:12821:25558","2:12824:26012","2:12827:32998","2:12830:32999","2:12833:33000","2:12836:33001","2:12838:27155","2:12839:27156","2:12840:27158","2:12841:27159","2:12842:27160","2:12843:33002","2:12845:8958","2:12846:33003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8879:3173-0:31:1789":{"id":"a:2:8879:3173-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:3173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5544:27291":{"id":"5:5544:27291","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12841:27159"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[154,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["bump_exclusive","bump_shared"],"trait":{"name":"RawRwLockFair","id":"20:445:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:275:2576","0:276:2577","0:277:2578","0:278:2580"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:165:2066":{"id":"0:165:2066","crate_id":0,"name":"unlock","span":{"filename":"src/raw_fair_mutex.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12741:25991":{"id":"2:12741:25991","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12742:25992"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12749:32985":{"id":"2:12749:32985","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44115:6908","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12760:3480":{"id":"2:12760:3480","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41931:197","prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2815:243-0:31:1789":{"id":"a:2:2815:243-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/condvar.rs","begin":[22,31],"end":[22,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2827:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2606-0:127:1797":{"id":"b:2:2606-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:3435"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12814:32995":{"id":"2:12814:32995","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:253-0:357:1804":{"id":"a:2:2832:253-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2606-0:446:1790":{"id":"b:2:2606-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:3435"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:203:2325":{"id":"0:203:2325","crate_id":0,"name":"try_lock","span":{"filename":"src/raw_mutex.rs","begin":[78,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,37],"end":[21,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:479:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:376:239":{"id":"0:376:239","crate_id":0,"name":"RwLock","span":{"filename":"src/rwlock.rs","begin":[89,0],"end":[89,52]},"visibility":"public","docs":"A reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).\n\nThis lock uses a task-fair locking policy which avoids both reader and\nwriter starvation. This means that readers trying to acquire the lock will\nblock even if the lock is unlocked when there are writers waiting to acquire\nthe lock. Because of this, attempts to recursively acquire a read lock\nwithin a single thread may result in a deadlock.\n\nThe type parameter `T` represents the data that this lock protects. It is\nrequired that `T` satisfies `Send` to be shared across threads and `Sync` to\nallow concurrent access through readers. The RAII guards returned from the\nlocking methods implement `Deref` (and `DerefMut` for the `write` methods)\nto allow access to the contained of the lock.\n\n# Fairness\n\nA typical unfair lock can often end up in a situation where a single thread\nquickly acquires and releases the same lock in succession, which can starve\nother threads waiting to acquire the rwlock. While this improves throughput\nbecause it doesn't force a context switch when a thread tries to re-acquire\na rwlock it has just released, this can starve other threads.\n\nThis rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)\nto ensure that the lock will be fair on average without sacrificing\nthroughput. This is done by forcing a fair unlock on average every 0.5ms,\nwhich will force the lock to go to the next thread waiting for the rwlock.\n\nAdditionally, any critical section longer than 1ms will always use a fair\nunlock, which has a negligible impact on throughput considering the length\nof the critical section.\n\nYou can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`\nor `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply\ndropping the guard.\n\n# Differences from the standard library `RwLock`\n\n- Supports atomically downgrading a write lock into a read lock.\n- Task-fair locking policy instead of an unspecified platform default.\n- No poisoning, the lock is released normally on panic.\n- Only requires 1 word of space, whereas the standard library boxes the\n  `RwLock` due to platform limitations.\n- Can be statically constructed.\n- Does not require any drop glue when dropped.\n- Inline fast path for the uncontended case.\n- Efficient handling of micro-contention using adaptive spinning.\n- Allows raw locking & unlocking without a guard.\n- Supports eventual fairness so that the rwlock is fair on average.\n- Optionally allows making the rwlock fair by calling\n  `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.\n\n# Examples\n\n```\nuse parking_lot::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read();\n    let r2 = lock.read();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here\n```","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::RwLock","id":"20:482:239","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::raw_rwlock::RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:202:2073":{"id":"0:202:2073","crate_id":0,"name":"lock","span":{"filename":"src/raw_mutex.rs","begin":[66,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:2619":{"id":"0:310:2619","crate_id":0,"name":"try_upgrade_for","span":{"filename":"src/raw_rwlock.rs","begin":[493,4],"end":[503,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44621:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:253-0:157:1799":{"id":"a:2:2832:253-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:205:2497":{"id":"0:205:2497","crate_id":0,"name":"is_locked","span":{"filename":"src/raw_mutex.rs","begin":[113,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292:2594":{"id":"0:292:2594","crate_id":0,"name":"try_lock_shared_recursive_for","span":{"filename":"src/raw_rwlock.rs","begin":[296,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["timeout",{"qualified_path":{"name":"Duration","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"20:452:2585","args":null}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3450-0:261:1801":{"id":"b:2:3450-0:261:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[270,0],"end":[292,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockRecursive","id":"20:459:2590","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:2591","0:290:2592"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:434-0:357:1804":{"id":"0:434-0:357:1804","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,54],"end":[49,65]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::RawThreadId","name":"RawThreadId","id":"0:357:1804","glob":false}}},"b:2:2300-0:446:1790":{"id":"b:2:2300-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2302:2672"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5533:33663":{"id":"5:5533:33663","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2303-0:197:1800":{"id":"b:2:2303-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:2674"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:157:1799":{"id":"0:157:1799","crate_id":0,"name":"RawFairMutex","span":{"filename":"src/raw_fair_mutex.rs","begin":[12,0],"end":[12,34]},"visibility":"public","docs":"Raw fair mutex type backed by the parking lot.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8878:3174-0:157:1799","a:2:8879:3173-0:157:1799","a:2:2872:3086-0:157:1799","a:2:2832:253-0:157:1799","a:2:2815:243-0:157:1799","b:2:2300-0:157:1799","b:2:2616-0:157:1799","b:2:2606-0:157:1799","b:2:3450-0:157:1799","b:2:2610-0:157:1799","b:2:2621-0:157:1799","b:2:2303-0:157:1799","0:167","0:160","0:170"]}}},"a:2:2832:253-0:31:1789":{"id":"a:2:2832:253-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2815:243-0:197:1800":{"id":"a:2:2815:243-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2610-0:157:1799":{"id":"b:2:2610-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:277:2578":{"id":"0:277:2578","crate_id":0,"name":"bump_shared","span":{"filename":"src/raw_rwlock.rs","begin":[175,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,9],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2827:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2303-0:157:1799":{"id":"b:2:2303-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:2674"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:66:60":{"id":"0:66:60","crate_id":0,"name":"default","span":{"filename":"src/condvar.rs","begin":[512,4],"end":[514,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12740:32984":{"id":"2:12740:32984","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12040:1529","crate::ops::IndexMut":"2:3116:3051","str::slice_unchecked":"2:12739:32983"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:429-0:197:1800":{"id":"0:429-0:197:1800","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[46,0],"end":[46,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_mutex::RawMutex","name":"RawMutex","id":"0:197:1800","glob":false}}},"2:12839:27156":{"id":"2:12839:27156","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39878:25919","Self::is_ascii":"2:12838:27155"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39878:25919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416-0:85:1791":{"id":"0:416-0:85:1791","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,27],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::const_fair_mutex","name":"const_fair_mutex","id":"0:85:1791","glob":false}}},"b:2:2610-0:446:1790":{"id":"b:2:2610-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90:1794":{"id":"0:90:1794","crate_id":0,"name":"MappedFairMutexGuard","span":{"filename":"src/fair_mutex.rs","begin":[101,0],"end":[101,87]},"visibility":"public","docs":"An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\nsubfield of the protected data.\n\nThe main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the\nformer doesn't support temporarily unlocking and re-locking, since that\ncould introduce soundness issues if the locked object is modified by another\nthread.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"lock_api::MappedMutexGuard","id":"20:849:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"crate::raw_fair_mutex::RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:421-0:98:1795":{"id":"0:421-0:98:1795","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::mutex::const_mutex","name":"const_mutex","id":"0:98:1795","glob":false}}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/once.rs","begin":[21,22],"end":[21,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2826:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199":{"id":"0:199","crate_id":0,"name":null,"span":{"filename":"src/raw_mutex.rs","begin":[58,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_locked"],"trait":{"name":"RawMutex","id":"20:20:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:200:2303","0:201:1785","0:202:2073","0:203:2325","0:204:2066","0:205:2497"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:428-0:157:1799":{"id":"0:428-0:157:1799","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::raw_fair_mutex::RawFairMutex","name":"RawFairMutex","id":"0:157:1799","glob":false}}},"0:435-0:363:1805":{"id":"0:435-0:363:1805","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[49,67],"end":[49,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::remutex::ReentrantMutex","name":"ReentrantMutex","id":"0:363:1805","glob":false}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[322,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgrade","id":"20:465:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:2596","0:296:2599","0:297:2601","0:298:2603","0:299:2605"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:268:2563":{"id":"0:268:2563","crate_id":0,"name":"unlock_exclusive","span":{"filename":"src/raw_rwlock.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8878:3174-0:357:1804":{"id":"a:2:8878:3174-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:3174","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:682-0:446:1790":{"id":"b:5:682-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3500","5:685:3501","5:686:3502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:126:2407":{"id":"0:126:2407","crate_id":0,"name":"done","span":{"filename":"src/once.rs","begin":[52,4],"end":[57,5]},"visibility":"public","docs":"Returns whether the associated `Once` has successfully executed a\nclosure.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12733:2334":{"id":"2:12733:2334","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:32996":{"id":"2:12815:32996","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:14331"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12440:14328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471:452":{"id":"0:471:452","crate_id":0,"name":"clone","span":{"filename":"src/once.rs","begin":[21,15],"end":[21,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8878:3174-0:157:1799":{"id":"a:2:8878:3174-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8878:3174","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2616-0:446:1790":{"id":"b:2:2616-0:446:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WaitTimeoutResult","id":"0:446:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8879:3173-0:157:1799":{"id":"a:2:8879:3173-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:3173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:270:2569":{"id":"0:270:2569","crate_id":0,"name":"try_lock_shared","span":{"filename":"src/raw_rwlock.rs","begin":[116,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:2583":{"id":"0:280:2583","crate_id":0,"name":"downgrade","span":{"filename":"src/raw_rwlock.rs","begin":[193,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:2596":{"id":"0:295:2596","crate_id":0,"name":"lock_upgradable","span":{"filename":"src/raw_rwlock.rs","begin":[324,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2616-0:157:1799":{"id":"b:2:2616-0:157:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawFairMutex","id":"0:157:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2619:134","2:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2832:253-0:127:1797":{"id":"a:2:2832:253-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:298:2603":{"id":"0:298:2603","crate_id":0,"name":"upgrade","span":{"filename":"src/raw_rwlock.rs","begin":[367,4],"end":[376,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[205,0],"end":[268,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockTimed","id":"20:452:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:128","0:283:158","0:284:2586","0:285:2587","0:286:2588","0:287:2589"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2303-0:31:1789":{"id":"b:2:2303-0:31:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Condvar","id":"0:31:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2305:2674"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/raw_rwlock.rs","begin":[452,0],"end":[504,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RawRwLockUpgradeTimed","id":"20:477:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawRwLock","id":"0:261:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:307:2616","0:308:2617","0:309:2618","0:310:2619"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12801:32989":{"id":"2:12801:32989","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12415:14331","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::rmatch_indices":"2:12804:32990"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44001:6903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8879:3173-0:357:1804":{"id":"a:2:8879:3173-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8879:3173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:153:712":{"id":"0:153:712","crate_id":0,"name":"fmt","span":{"filename":"src/once.rs","begin":[326,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460:1798":{"id":"0:460:1798","crate_id":0,"name":"OnceState","span":{"filename":"src/once.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"Current state of a `Once`.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:461:2394","0:463:2396","0:465:2398","0:467:2400"],"impls":["0:124","a:2:8878:3174-0:460:1798","a:2:8879:3173-0:460:1798","a:2:2872:3086-0:460:1798","a:2:2832:253-0:460:1798","a:2:2815:243-0:460:1798","b:2:2300-0:460:1798","b:2:2616-0:460:1798","b:2:2606-0:460:1798","b:2:3450-0:460:1798","b:2:2610-0:460:1798","b:2:2621-0:460:1798","b:2:2303-0:460:1798","b:5:682-0:460:1798","0:478","0:472","0:473","0:470","0:475","0:469","0:476"]}}},"2:12727:25920":{"id":"2:12727:25920","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11970:14332"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:418-0:87:1793":{"id":"0:418-0:87:1793","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,56],"end":[42,70]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fair_mutex::FairMutexGuard","name":"FairMutexGuard","id":"0:87:1793","glob":false}}},"b:2:3450-0:127:1797":{"id":"b:2:3450-0:127:1797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Once","id":"0:127:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:201:1785":{"id":"0:201:1785","crate_id":0,"name":"GuardMarker","span":{"filename":"src/raw_mutex.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GuardNoSend","id":"20:8:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12737:25967":{"id":"2:12737:25967","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3450-0:197:1800":{"id":"b:2:3450-0:197:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2822:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawMutex","id":"0:197:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2606-0:357:1804":{"id":"b:2:2606-0:357:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawThreadId","id":"0:357:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:3435"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12747:31075":{"id":"2:12747:31075","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12746:31059"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44134:6910","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2872:3086-0:460:1798":{"id":"a:2:2872:3086-0:460:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2872:3086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceState","id":"0:460:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12780:32987":{"id":"2:12780:32987","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12415:14331","str::split":"2:12768:25999","prim@char":"1:12034:448","str::split_terminator":"2:12777:32986"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43919:6902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:6731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:14329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:22:726":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:2201:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:2538:14391":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:9868:4920":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:11846:5141":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:10638:5000":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:7622:8597":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"25:6664:8437":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:39608:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5130:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:42481:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:9887:4922":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:11491:6748":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2880:3410":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:8239:6229":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:31167:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"20:482:239":{"crate_id":20,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"2:21979:9051":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"25:4762:8027":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:8227:7184":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6711:8461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:48066:7038":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:4949:5932":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:44446:6929":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6531:6087":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:495:7642":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4738:8014":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:47566:7032":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:43223:6874":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:46940:6995":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:357:3318":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3368:6844":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:9015:7225":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:2383:3882":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:39684:3055":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:3232:4790":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:9412:696":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"2:12420:6731":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:14449:5803":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4686:8010":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4647:8007":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:7633:8601":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:6646:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:23228:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:10764:8775":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10266:4957":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"25:5889:8262":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"25:6680:8449":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12555:5298":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:3557:4510":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:48200:7045":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:12045:688":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13568:5550":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:2352:6441":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:44590:8769":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"11:328:8750":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:3692:3445":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:12000:8838":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:2209:4789":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:44055:6905":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8201:6843":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:12038:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:7844:7131":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:3299:3058":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"25:4912:8093":{"crate_id":25,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:4210:3121":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:9187:28182":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:21421:9051":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:6813:9172":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4461:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:2369:6455":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:4585:5921":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:2837:3118":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11125:5069":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:7894:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8960:1790":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8158:7085":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:3502:9049":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"11:832:6446":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"25:4399:7887":{"crate_id":25,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:574:4714":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6499:5901":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:8797:7214":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4603:7993":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8309:7193":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:3165:30548":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:42702:3417":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:4505:3115":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:40530:6821":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:3589:3882":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5009:8150":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13877:5633":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:629:6523":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"25:4521:7952":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:23042:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:4052:9102":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:2150:21311":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:11160:7216":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:42057:3596":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5085:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"25:7655:8605":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"20:462:2593":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursiveTimed"],"kind":"trait"},"25:6896:8548":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:2894:3030":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:533:2380":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:8353:7093":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11202:5074":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"25:7341:8579":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:42074:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"9:507:6509":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:42206:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8233:7186":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:21197:32326":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"25:4937:1092":{"crate_id":25,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:7600:4638":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4939:1092":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13025:5384":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11357:7119":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"22:270:2501":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkToken"],"kind":"struct"},"6:4628:8006":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:4131:29841":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"23:164:4513":{"crate_id":23,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"17:11743:5127":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:40933:6712":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:46286:6964":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:2504:5863":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:363:3319":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:44777:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:3888:5912":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11935:5165":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:7328:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"25:6126:8377":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:46015:6950":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:6159:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:1651:3774":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:44598:8771":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:2884:3028":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"22:230:1932":{"crate_id":22,"path":["parking_lot_core","parking_lot","RequeueOp"],"kind":"enum"},"21:0:3016":{"crate_id":21,"path":["scopeguard"],"kind":"module"},"6:1697:7831":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:1073:6445":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:22151:9262":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:42362:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:7487:6551":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"21:58:25229":{"crate_id":21,"path":["scopeguard","Always"],"kind":"enum"},"1:3280:7081":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:9306:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:8843:7217":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"11:1160:6445":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:5816:5966":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:6228:8400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:10157:7234":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:10490:9051":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"25:4876:8079":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10469:4982":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6456:6077":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:7645:3320":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"22:0:1812":{"crate_id":22,"path":["parking_lot_core"],"kind":"module"},"11:1603:6448":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13114:5399":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"20:908:1809":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:9276:3972":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:10457:4978":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"25:526:7663":{"crate_id":25,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:3243:7080":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:7708:5900":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"25:4781:8035":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"25:5967:8295":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:1126:34289":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:13260:5425":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:6798:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:1481:2208":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:10113:4941":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:22731:3141":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:32351:8670":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:9476:7131":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12712:5322":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:5383:7100":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:10384:4966":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"14:160:6422":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:2321:5849":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6318:6064":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"25:506:7646":{"crate_id":25,"path":["libc","unix","rusage"],"kind":"struct"},"6:596:7701":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3201:7077":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13740:5601":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:40698:6704":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:40550:6822":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:22698:8759":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6376:21188":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4161:9118":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4388:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4922:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:30605:3778":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:13315:8977":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12306:5247":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"25:482:7637":{"crate_id":25,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:12486:14337":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:5989:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:12196:6757":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:22632:31316":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:46706:6977":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:40279:6688":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:9456:34401":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:11595:7258":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:1644:629":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"25:5128:8209":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"25:4806:8046":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12847:5341":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4488:7938":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:9849:3417":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:4742:9108":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:2057:6529":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"9:177:8827":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:6100:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:489:7640":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:42323:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:2822:2042":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:8660:21230":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:1734:7844":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"25:500:7643":{"crate_id":25,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10548:4990":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:3764:5909":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:10942:7130":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:6107:4564":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:44282:6920":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12474:5286":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:12052:1631":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:5928:8274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:10824:7085":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:13203:5417":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:5378:14320":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:42695:3416":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:6949:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:564:4723":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:1913:16130":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:6346:6066":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:4943:848":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:44299:6921":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:42961:6300":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:4458:3114":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:10852:6741":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4998:8145":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"25:5895:8263":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:3293:3056":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:40707:6705":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12438:5278":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:8248:32663":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"25:4753:8022":{"crate_id":25,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:690:4746":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:12016:28175":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:7838:3087":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:6844:6143":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:22705:3140":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:6251:4630":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:42949:31896":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:12231:6738":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"25:4582:7983":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:42688:3414":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:1051:6441":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:40678:6700":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:22607:6777":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:43837:4769":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:13576:5551":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:39466:3060":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11227:5083":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:11217:4206":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:10060:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:4030:9098":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:41717:9090":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:2537:9051":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2953:3041":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"15:306:20279":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:42005:3445":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12197:5215":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6583:6091":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:2406:5859":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"25:4471:7932":{"crate_id":25,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:9311:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:837:3882":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:22333:9257":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:48264:7049":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"25:4478:7936":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"25:6716:8465":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:2670:5870":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:42986:3424":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:30633:31323":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:1535:3882":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10699:5011":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7269:34392":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"25:5150:8215":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:3600:5908":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:507:7646":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:3049:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:4627:9097":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:44870:6456":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:22580:3137":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:14402:5789":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:30565:3777":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"22:73:1934":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_PARK_TOKEN"],"kind":"constant"},"2:21869:32334":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:5570:8386":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:868:6431":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:43733:6890":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:6741:8483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:1281:6441":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:10759:8773":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:21195:32339":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:4932:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:14500:5814":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:8195:6337":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"25:4447:7918":{"crate_id":25,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:4082:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9712:34402":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:46175:6957":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:3312:32274":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4506:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:6542:3081":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:9811:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:7668:8609":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"20:901:1808":{"crate_id":20,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:1967:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:7296:4553":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:4527:5919":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:8115:6328":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:5634:5942":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10604:4995":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:7240:31144":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:21540:9051":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:40617:6829":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:8979:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"25:4945:8109":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:12253:5233":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:9110:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:4356:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6818:6142":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:9052:21231":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4543:7961":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12185:5214":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"14:31:6422":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"25:494:7642":{"crate_id":25,"path":["libc","unix","timespec"],"kind":"struct"},"16:3461:5907":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:12033:1025":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8327:7195":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:40407:14387":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:42520:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"22:83:2072":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","acquire_resource"],"kind":"function"},"6:6889:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:434:4776":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"25:4996:8145":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:8873:7109":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:9469:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"15:394:20288":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:44425:14344":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:2974:3046":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:7381:28437":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:14174:5710":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12599:5306":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:1531:6526":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"25:7666:8609":{"crate_id":25,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2364:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42167:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:9197:8694":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:7041:6169":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"11:2542:8667":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"25:6656:8432":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:32405:3112":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:1528:7718":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8170:9050":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:2580:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:2043:6528":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11762:5130":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:3168:30536":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:4746:9111":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10981:4910":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:7292:14428":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:6804:8492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:44646:3069":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:724:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:3287:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:10097:7233":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:8766:21245":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5727:5955":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:919:6430":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:588:8957":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13245:5421":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13136:5410":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13149:5411":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:62:14728":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"25:6077:8358":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:41133:1797":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"25:6167:8388":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"20:477:2615":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeTimed"],"kind":"trait"},"17:11887:5150":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:4202:4564":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"21:17:4525":{"crate_id":21,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"2:43194:6869":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:5982:5989":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6386:6071":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:0:2854":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:6985:30882":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:11199:3065":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:3112:3050":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:43026:3425":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:9973:4931":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:40779:6840":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:3728:6528":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:41126:6715":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:7896:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:2403:3883":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"20:214:2649":{"crate_id":20,"path":["lock_api","remutex","GetThreadId"],"kind":"trait"},"20:0:1786":{"crate_id":20,"path":["lock_api"],"kind":"module"},"25:4787:8038":{"crate_id":25,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:9138:4764":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:9575:34397":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:5573:9165":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:10323:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:10500:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14309:5763":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:7371:8582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:9851:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:46910:6994":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:3282:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:3677:4542":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:8954:21251":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5033:8162":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"25:1672:7821":{"crate_id":25,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:1749:3530":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"25:5883:8259":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:2371:9041":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5982:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:22112:9261":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"25:7677:8610":{"crate_id":25,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:5866:5974":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:5715:6698":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:894:4510":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:22289:9051":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"25:4608:7995":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:7581:4636":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:23197:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"18:521:25221":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:15:2739":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11138:5070":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5044:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:2124:6178":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"25:6226:8400":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4847:8068":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:1566:20254":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4455:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:8454:6874":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:1744:653":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:41830:31306":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:4966:3162":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"18:636:4736":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:42440:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"25:6069:8357":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:9100:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:9651:4910":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:7522:1774":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:10740:6738":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"25:6261:8425":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"9:0:2856":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:614:34406":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:1703:7832":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:39878:25919":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12725:5323":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:2380:5858":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:582:3400":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:5867:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:40381:14386":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:1110:34229":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:22653:31331":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11152:5071":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:5130:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:6017:21186":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:44658:3099":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:3116:3051":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:6832:4517":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:6691:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:44019:6904":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:46652:6975":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:644:4714":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:6248:8414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12155:5210":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:915:6429":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:43851:6736":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"20:30:2498":{"crate_id":20,"path":["lock_api","mutex","RawMutexTimed"],"kind":"trait"},"2:2827:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:9129:3065":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:6898:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4755:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:40608:6828":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:8072:6323":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"25:562:7683":{"crate_id":25,"path":["libc","unix","linger"],"kind":"struct"},"1:3396:4564":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"20:889:1810":{"crate_id":20,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"1:8829:7216":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:3073:2149":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2913:4622":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:2381:9046":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:11172:30382":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:43821:6751":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:6156:6020":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:5696:21184":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:7739:9006":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:3315:5906":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"25:1695:7831":{"crate_id":25,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:22524:6771":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:7541:7261":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"25:5066:8175":{"crate_id":25,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10576:4992":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:2569:6547":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:22719:3138":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:7856:7133":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:4253:2538":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:44459:6933":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"25:7596:8593":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:14119:5695":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:0:528":{"crate_id":2,"path":["core"],"kind":"module"},"16:2810:5876":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6721:21190":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:44582:8767":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:4242:3882":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"25:1637:7796":{"crate_id":25,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:4571:9140":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:9781:4913":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6927:8564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"18:96:25210":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"11:742:6430":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:850:3883":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:5897:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:4417:5916":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:3220:6449":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:1019:4542":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"20:452:2585":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockTimed"],"kind":"trait"},"17:9702:4911":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:48189:7044":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6960:6154":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:7710:14433":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:4449:3113":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:8205:21197":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4776:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:46138:6955":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:10973:6746":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10963:5055":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"11:1007:6178":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"25:4459:7923":{"crate_id":25,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:10988:7217":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:30797:31315":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:10739:5015":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4947:8109":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:5634:4630":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:3080:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:7462:4758":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:6059:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:2931:3037":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:536:5837":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:32412:6796":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"25:7620:8597":{"crate_id":25,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:14297:5760":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12699:5320":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:4493:9123":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4968:8124":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:2369:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:44578:8766":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11075:5065":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:42047:3171":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"25:1716:7839":{"crate_id":25,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:865:1803":{"crate_id":20,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"17:12659:5314":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13056:5390":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:3225:34286":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:6243:6049":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:40520:4592":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:2583:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2212:3513":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:2987:3049":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"9:426:20178":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:40720:6837":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"25:4541:7961":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"18:766:25220":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4824:8054":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:42681:3415":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:6764:8484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12960:5376":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:4841:8065":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6261:6059":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:1511:6430":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4814:8048":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"25:1589:7760":{"crate_id":25,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6718:8465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:681:4744":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13686:5591":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13488:5488":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:1075:4779":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:14479:5811":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:1558:7738":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:22204:3512":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6114:8372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:5951:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:3162:28383":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:4434:4566":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"25:547:7675":{"crate_id":25,"path":["libc","unix","pollfd"],"kind":"struct"},"16:4613:5922":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:2923:3036":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10441:4972":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:10789:21353":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8921:9169":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:149:4529":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"25:474:7632":{"crate_id":25,"path":["libc","unix","group"],"kind":"struct"},"16:7284:3170":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:44231:14343":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"25:579:7691":{"crate_id":25,"path":["libc","unix","tms"],"kind":"struct"},"1:646:8960":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:1041:6178":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:582:4778":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:1961:3532":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:5648:5946":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:21549:9175":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"25:5102:8197":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:9847:3416":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:4233:7090":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"25:4828:8057":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:10281:4605":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11518:7087":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:7513:6261":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:43211:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:1500:6429":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:10740:7243":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"25:5857:8244":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"25:7386:8591":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7651:6268":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:2210:3512":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"11:351:34364":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:2877:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:1539:3445":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:2562:8671":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12622:5310":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:44143:6758":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:21551:6768":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:40294:6805":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10421:4844":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:46055:6952":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:8238:9089":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:43202:6870":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:0:1521":{"crate_id":1,"path":["std"],"kind":"module"},"17:11449:21255":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:3062:1936":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:8275:7089":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"20:471:2607":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeFair"],"kind":"trait"},"16:6204:6027":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:45931:6947":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10495:4985":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"25:595:7701":{"crate_id":25,"path":["libc","unix","protoent"],"kind":"struct"},"2:2970:3045":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"25:5115:8203":{"crate_id":25,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"25:4858:8073":{"crate_id":25,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:40769:6709":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"25:5919:8272":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:7736:6271":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:8477:7207":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:4835:5928":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11236:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"16:4889:5930":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"14:221:6427":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:2316:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:7755:7130":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:13260:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:8991:6731":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10448:4975":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:1664:7815":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11711:5090":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:10804:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:21168:32331":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:10340:30050":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:2875:3408":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2869:3406":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:7604:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"25:587:7696":{"crate_id":25,"path":["libc","unix","servent"],"kind":"struct"},"5:825:4548":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:10890:6742":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1680:4542":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5052:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:10166:21284":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:5627:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:2964:3044":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2982:3048":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"25:4504:7946":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"25:7649:8604":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:923:6433":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:7534:5896":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"25:1594:7762":{"crate_id":25,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:5640:4517":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"25:5827:8219":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:44253:6912":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13163:5412":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4724:8013":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10140:21283":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:13633:5585":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:9208:4766":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:8386:3166":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:14127:5697":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:7257:6527":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"11:811:4574":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"25:4953:8114":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"25:5939:8283":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:434:1801":{"crate_id":20,"path":["lock_api","rwlock","RawRwLock"],"kind":"trait"},"1:11036:4643":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:7616:8596":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:2427:2870":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:48142:7040":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"25:6802:8492":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:47100:6997":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:6813:8495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"23:0:3018":{"crate_id":23,"path":["smallvec"],"kind":"module"},"6:119:14782":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:10100:6733":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"23:344:25237":{"crate_id":23,"path":["smallvec","ToSmallVec"],"kind":"trait"},"17:11063:5064":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"25:5865:8246":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:42931:3424":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:22202:31391":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:555:7678":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:2872:3086":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:7018:4588":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:13017:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"11:1923:6452":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:45907:6946":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:22338:9255":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:6120:8375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:6432:1798":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:2968:34354":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:8007:7139":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"25:1526:7718":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:5782:1789":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:5743:5957":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:6012:8324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10904:5050":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:9853:21265":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:3808:4574":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:4843:417":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:22304:9256":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:1514:7713":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10629:4999":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:5963:5982":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12025:5185":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:40487:9020":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"9:450:20176":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11317:5092":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:40919:6711":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"25:4906:8090":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:4462:5917":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:2139:2147":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:6658:8432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"25:1505:7710":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:1419:3882":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:40400:6815":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11474:4864":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12268:5239":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7436:5993":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:23104:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:929:8976":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6268:34391":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:41746:8684":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:11618:5117":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:23073:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10727:5014":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11720:21258":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:8905:9170":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:2297:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"11:2151:6441":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:45885:6945":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"22:298:2386":{"crate_id":22,"path":["parking_lot_core","spinwait","SpinWait"],"kind":"struct"},"2:44828:6938":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:12048:791":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:10955:7107":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:3049:20326":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13086:5393":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:48020:7037":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4566:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:3364:3062":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:622:7057":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"25:1630:7792":{"crate_id":25,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:44574:8765":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"25:1556:7738":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:8134:6331":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"25:4722:8013":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:785:4545":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:6071:8357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:14057:5680":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4595:7988":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"11:2443:4510":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"25:5007:8150":{"crate_id":25,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12791:5332":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:6961:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:4058:6689":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:8687:21243":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8208:4769":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:12415:14331":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"25:4601:7993":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"14:215:6425":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:7424:8975":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:5152:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:43186:6867":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"9:486:20175":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"25:1544:7729":{"crate_id":25,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"25:4798:8042":{"crate_id":25,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8563:7213":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13216:5418":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:1570:7746":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7503:5895":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"9:357:20191":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:5017:5934":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:11180:3098":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12831:5336":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:14025:5669":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"25:0:872":{"crate_id":25,"path":["libc"],"kind":"module"},"17:14515:5815":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:10341:4963":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:9446:4906":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:41866:7089":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"20:465:2540":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgrade"],"kind":"trait"},"5:1265:6178":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10198:4951":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:46037:6951":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11146:7215":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"25:4839:8065":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:7457:6548":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:9391:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:26168:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:774:6431":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13898:5638":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12998:5380":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:8815:7215":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6792:6141":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11382:5100":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:4169:9119":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:6676:4542":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:113:25211":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:40739:6707":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:11940:14472":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"25:6689:8455":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"11:1066:20253":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7610:8595":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:5384:21183":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"25:1568:7746":{"crate_id":25,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12497:5291":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"25:7602:8594":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:1710:7835":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11662:5119":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:2825:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"25:568:7686":{"crate_id":25,"path":["libc","unix","sigval"],"kind":"struct"},"5:7608:4574":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:8097:6326":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"11:2498:20249":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"25:7363:8580":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:1310:6445":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6545:6089":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:44767:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:3915:5913":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:6445:8755":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"9:393:20177":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:44883:6942":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:43426:6880":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:5995:5839":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:10099:7232":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:11478:7086":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:2881:5879":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:5433:7106":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"25:1494:7705":{"crate_id":25,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:43809:6898":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:22175:9051":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:4364:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12173:5211":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:47896:7035":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5941:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:1568:6452":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:46432:6968":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12423:5274":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4516:7949":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:12044:686":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:4371:4566":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:41929:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:4:1105":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:1910:699":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:40285:6804":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:43919:6902":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"25:6709:8461":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:800:4510":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"25:4664:8008":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:3982:9095":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"25:4554:7967":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10521:4988":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:7862:6285":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:22258:3512":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:12034:448":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13803:5614":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4496:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:6781:8485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:9243:4767":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:1582:6447":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"25:4674:8009":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6136:8379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"22:252:2541":{"crate_id":22,"path":["parking_lot_core","parking_lot","FilterOp"],"kind":"enum"},"6:6666:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12877:5360":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:14421:5794":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"25:7700:8616":{"crate_id":25,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:1407:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:2012:4782":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"25:5121:8206":{"crate_id":25,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:491:4713":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:12041:1615":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:39542:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:4994:4564":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:40457:31310":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11408:21254":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:13189:5414":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:7690:3307":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:2978:3047":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:6545:3082":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:7782:6273":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"22:211:1933":{"crate_id":22,"path":["parking_lot_core","parking_lot","UnparkResult"],"kind":"struct"},"1:2210:9033":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"25:4386:7877":{"crate_id":25,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:12375:3136":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:22244:9264":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:10562:4991":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:11262:5085":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"11:1087:34367":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:2428:5860":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:9165:3321":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"5:7274:6545":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"11:844:8976":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5910:8264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:12057:1689":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:41853:6857":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:21429:9177":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:4344:5915":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"25:4426:7910":{"crate_id":25,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:41980:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11099:5067":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:9148:3066":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:8878:3174":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:22556:6772":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:30338:3135":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:12120:6752":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12087:5195":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6600:21189":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:123:14783":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:515:4711":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:44820:6936":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:11390:8777":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:9934:4928":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:5382:14321":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:7644:9051":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:5712:5952":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:6332:5881":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:13091:6765":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:46316:6965":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3282:7082":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:10697:6736":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:6598:1805":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:563:7683":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:1596:7762":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4351:7850":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:31195:3400":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:7365:8580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:22540:8756":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:2933:20324":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10946:6506":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:47022:6996":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"20:87:4710":{"crate_id":20,"path":["lock_api","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:7756:3088":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:736:25219":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:43004:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:48356:7053":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:7320:3445":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7342:34389":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:8880:3172":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12281:5243":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"25:4966:8124":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:2355:9036":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:2969:20325":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:14084:5687":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:5403:4896":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10024:4911":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4535:7956":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"25:6698:8456":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44594:8770":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5829:8219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"25:7608:8595":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:41908:6728":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:9329:4769":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:7598:8593":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:47176:6999":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:10715:5013":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"14:40:5165":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6569:5889":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:8167:6335":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:1481:6432":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"25:4736:8014":{"crate_id":25,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:2936:3042":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:14077:5686":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"25:7643:8603":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:44566:8763":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:3032:5903":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:875:6438":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"21:12:25228":{"crate_id":21,"path":["scopeguard","Strategy"],"kind":"trait"},"2:45861:6944":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4989:8139":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12209:5216":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"25:7690:8614":{"crate_id":25,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:2907:5880":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:10095:9055":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"23:350:8618":{"crate_id":23,"path":["smallvec","ConstNonNull"],"kind":"struct"},"20:841:183":{"crate_id":20,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"2:43445:6734":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:10817:6740":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10411:4968":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6279:6062":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:44159:6688":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:2668:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:9103:4763":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:8896:21249":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:40586:6826":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:48169:7042":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:43241:6879":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11192:4794":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:533:7666":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:1820:3972":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13072:5391":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"25:1911:16130":{"crate_id":25,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:1759:7065":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:7768:5888":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:1891:4510":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:40599:6827":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:5123:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:7932:6528":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13839:5619":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:4902:6693":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:9071:4896":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:46484:6970":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:44436:6925":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:6439:6706":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:2577:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"20:27:2494":{"crate_id":20,"path":["lock_api","mutex","RawMutexFair"],"kind":"trait"},"1:10794:7133":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:12099:5198":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:7343:8579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:14222:5747":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:5797:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:40366:6688":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:43720:6823":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:10313:4610":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:7902:7073":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"13:0:2853":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:2294:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7102:21192":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:1558:4564":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"14:187:20266":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"25:5908:8264":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6415:6074":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5969:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:4823:9107":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6893:6149":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:2915:3034":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"22:84:2527":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock","release_resource"],"kind":"function"},"2:9843:3414":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:6164:4629":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:10930:5053":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:2206:2738":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:3932:9093":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:6169:8388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:21442:6768":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:12056:842":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"11:434:34368":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:6901:5891":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13950:5647":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:2369:9040":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:22592:31318":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13852:5625":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13982:5657":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:13923:5643":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:7706:3100":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:9373:4898":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:5310:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:12049:792":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:5322:5938":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"25:4868:8076":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11342:7118":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11816:5137":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:6485:5884":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:4884:8080":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:5905:5976":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2450:5861":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:21832:9180":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:13004:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4610:7995":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:2140:6440":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"25:4438:7913":{"crate_id":25,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11236:5084":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:46462:6969":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"11:673:3882":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:719:4753":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:12053:1632":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13694:5592":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:538:4721":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:261:4772":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:7839:4212":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:23290:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4745:8015":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13612:5580":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13869:5630":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11384:8776":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:5973:4630":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8012:9080":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:7624:4578":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:3179:3882":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6086:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:6003:14702":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:10580:3307":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:5939:5833":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12912:5371":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:4040:4542":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:699:4747":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:2359:5857":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"25:4645:8007":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:8859:7218":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6401:5883":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:40426:6818":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:9986:4933":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"20:849:1796":{"crate_id":20,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"2:44411:6924":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:5242:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:8221:6907":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12374:5249":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4710:8012":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:5435:5940":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"25:4432:7911":{"crate_id":25,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:40669:6835":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:3209:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"20:450:2582":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockDowngrade"],"kind":"trait"},"2:46864:6993":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:3441:4792":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:4070:6690":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11952:5168":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:12055:1630":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"25:6866:8531":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5885:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"25:5144:8212":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11328:5093":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:9792:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:23135:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"25:6932:8567":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:9532:34396":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:12440:14328":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7792:21195":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"25:6762:8484":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:10052:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:1682:7822":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:910:6446":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10215:4954":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5859:8244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4878:8079":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"20:217:3017":{"crate_id":20,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"1:2663:7076":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:12037:1142":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"22:72:2387":{"crate_id":22,"path":["parking_lot_core","parking_lot","DEFAULT_UNPARK_TOKEN"],"kind":"constant"},"1:2587:4619":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:41889:6726":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11049:5060":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:47958:7036":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:1546:7729":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:3797:5910":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"25:5083:8183":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11491:5110":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:7538:6555":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:1691:7828":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8546:3882":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:12063:5191":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:1450:3445":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:14317:5766":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9946:4929":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:44115:6908":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:44479:6762":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13287:5428":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:9841:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:14157:5703":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:7513:4571":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:7286:4510":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11688:21257":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12453:5282":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:11607:29936":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:1557:6450":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3672:9091":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:40473:6820":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:8714:21244":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:1490:6446":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4578:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11548:5113":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:48104:7039":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:39586:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:32387:6794":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:41119:6714":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:42559:2990":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:12180:6756":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"25:6796:8490":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8937:9171":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:2696:5871":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:9618:34395":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"25:6112:8372":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4830:8057":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:10432:7214":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:46530:6972":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:5637:4564":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:11390:5102":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:14523:5818":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:1563:6451":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:2400:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:40322:6808":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:40306:31313":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:21827:9051":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:4321:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13229:5419":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:2526:5864":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:2644:5869":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:14135:5698":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:5588:5885":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:14091:5688":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:12046:793":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6742:6128":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"14:202:14345":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:40336:6809":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:5023:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:43673:6886":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11024:5058":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:42142:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:9855:3419":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12766:5330":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6687:6115":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"23:331:4517":{"crate_id":23,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"5:7549:6556":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13827:5616":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:6428:1797":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"25:5013:8151":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2889:3033":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:7879:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"25:4975:8130":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:6189:6025":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"25:6779:8485":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:881:4550":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:5502:7107":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"18:755:4762":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:3445:7084":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:6594:3445":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:7660:6269":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7128:7229":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:898:3882":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:42014:3170":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"25:5021:8156":{"crate_id":25,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"25:1680:7822":{"crate_id":25,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:2149:6530":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:40445:6819":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:40655:6832":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:44602:3098":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"25:6134:8379":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:9087:4897":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:42066:3311":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:40393:6814":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"11:837:6433":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:3232:5848":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:21158:3400":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"25:4743:8015":{"crate_id":25,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:39652:3053":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:9836:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:12751:5327":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:4313:7091":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:7554:5897":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"25:1662:7815":{"crate_id":25,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4434:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:41175:6719":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:43746:6891":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:14002:5664":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:1501:7707":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:22418:6769":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:7137:29847":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:39705:6803":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:1632:7792":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:47210:7000":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:4330:3104":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:14069:5683":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"15:288:20278":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:7924:7137":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:5144:3077":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10535:4989":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:856:6436":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7849:7132":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8867:3445":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:39566:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:4921:5931":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5891:8262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:4774:5926":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:3427:7187":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:3565:4793":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:12058:1238":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:5121:5937":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"20:873:240":{"crate_id":20,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"6:6107:8371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:7070:3453":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:44785:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"25:4882:8080":{"crate_id":25,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12485:5289":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:8282:8772":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:881:6432":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"11:787:6432":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4616:7997":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:700:3445":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:8974:7220":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"25:6811:8495":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:5419:4897":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:11394:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"3:0:473":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:46508:6971":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"7:0:1679":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5798:5961":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:10686:5009":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:1521:7715":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:2178:8751":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7474:6250":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:47146:6998":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5146:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:2304:6178":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"25:1689:7828":{"crate_id":25,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:6359:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11273:5086":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:48241:7048":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12226:5224":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:14325:5767":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:10959:6745":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:9278:4768":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:4440:7913":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:4401:4564":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"25:4900:8089":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"25:5050:8170":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:2284:20297":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:42977:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:256:4771":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:3484:3413":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:574:7688":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:652:4714":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:13211:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:3734:7086":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6513:6079":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:43233:6878":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:42125:3883":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13102:5397":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"22:46:4519":{"crate_id":22,"path":["parking_lot_core","parking_lot","ThreadData"],"kind":"struct"},"17:14270:5748":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:7306:34137":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:1546:4574":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"12:0:2859":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11614:7122":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:504:2147":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:8154:6332":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:8404:7204":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:39427:3063":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13793:5613":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:2899:3029":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"25:4774:8034":{"crate_id":25,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:23166:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:39526:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:44150:6812":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4908:8090":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12672:5023":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:44168:6811":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:21981:9176":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:542:7672":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:11053:4645":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10317:4962":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:1472:6431":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:22669:31329":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"23:328:25236":{"crate_id":23,"path":["smallvec","Array"],"kind":"trait"},"11:1910:6450":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12294:5244":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:9481:4640":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:10398:4967":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:6837:8506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:14043:5673":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:43955:6743":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:14034:5672":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:1591:7760":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"11:1142:6444":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8552:7212":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:6993:4585":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:2766:5874":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5673:5886":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13011:5381":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10673:5006":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8851:3882":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:7544:6263":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10187:4949":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"25:6925:8564":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"23:118:4514":{"crate_id":23,"path":["smallvec","SmallVec"],"kind":"struct"},"1:3241:7079":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13041:5386":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:6222:8399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:3493:30219":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:12059:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:6072:4625":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4870:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:590:4724":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7067:6175":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:10508:4987":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:2927:3035":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"25:6911:8555":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:21214:32336":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:8595:21232":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:10060:4937":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:14379:5788":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:6868:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:41989:3882":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6083:20296":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6753:6129":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:2832:5877":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"20:20:1800":{"crate_id":20,"path":["lock_api","mutex","RawMutex"],"kind":"trait"},"5:6861:4584":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:8210:14432":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:8849:21248":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13547:5540":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:22067:9260":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:3602:3883":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:44105:6907":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:4082:3883":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"25:1519:7715":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5117:8203":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"25:6045:8345":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:9070:7383":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:6341:9266":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:8826:21247":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6943:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13668:5586":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:14461:5805":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:3191:34287":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:9853:3418":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4428:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:1903:9016":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"25:7614:8596":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"25:4373:7867":{"crate_id":25,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2548:5865":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:43694:6888":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7391:21193":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:7530:4778":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:46554:6973":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:4908:9147":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:2203:7072":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"10:0:2857":{"crate_id":10,"path":["adler"],"kind":"module"},"18:481:4712":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:6898:4633":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:1434:3883":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10098:4940":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"25:541:7672":{"crate_id":25,"path":["libc","unix","iovec"],"kind":"struct"},"2:42245:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12889:5362":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10479:4983":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:44374:6761":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:13039:32557":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:2554:34363":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11352:5095":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:12946:5374":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:7500:6554":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"25:4564:7974":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:9035:7229":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:35:4538":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"25:6118:8375":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7568:5898":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:3655:4806":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:9753:4912":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:13066:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:3338:4574":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:42921:8685":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:12137:5202":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7015:6168":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:46086:6953":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"25:4547:7964":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:42133:3445":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:5748:2834":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:9608:4909":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:12050:788":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:5830:5967":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13555:5543":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:21212:32329":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"24:0:2855":{"crate_id":24,"path":["cfg_if"],"kind":"module"},"5:7471:31310":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3996:9097":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:4641:5923":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:3272:3054":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"25:4494:7940":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:2596:5867":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:41148:6844":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:11956:6749":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:3448:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4744:9110":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13299:5435":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:9022:7226":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:14356:5775":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:5397:7104":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13974:5656":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:3212:6451":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7462:6249":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:6047:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"9:237:6874":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"20:563:4710":{"crate_id":20,"path":["lock_api","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"25:6817:8496":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:1896:4574":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:1496:7705":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:946:6438":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:2618:5868":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:23011:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:40646:6697":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"25:4684:8010":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"25:6739:8483":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:8050:6322":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"25:5953:8294":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:1874:7069":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:11983:7264":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:4808:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:41997:3883":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8301:7184":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:4917:9148":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:671:4743":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"20:35:182":{"crate_id":20,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"2:43594:6881":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14537:5821":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:8992:27595":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:2601:4606":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:4806:5927":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:2919:3038":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"20:856:1806":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:4394:3111":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:1507:7710":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8293:7191":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:707:4749":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:11621:7122":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:638:7058":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:624:34408":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:2970:8679":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"7:78:20169":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:10833:30384":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"19:0:1122":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:10945:6744":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:2788:5875":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:11216:5079":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13907:5639":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:0:2858":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:46786:6978":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:7639:8602":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6425:6075":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4473:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:43973:6744":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8494:9160":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:14347:5773":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:6128:8377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4676:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11307:5090":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"25:6246:8414":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:9004:21253":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:10475:4641":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:7440:3310":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:21180:32331":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:7360:34390":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:4745:5925":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:0:2862":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:8204:3885":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13175:5413":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"20:8:1788":{"crate_id":20,"path":["lock_api","GuardNoSend"],"kind":"struct"},"2:21423:9174":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:6474:4510":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:4105:14305":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2305:20323":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:4375:7867":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:1576:7748":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:654:15138":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:8879:3173":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11338:21378":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:9913:4923":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:44841:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"11:2536:8666":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"25:5073:8178":{"crate_id":25,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8138:4758":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:11508:21256":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:14470:5809":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:5867:4510":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4800:8042":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:396:4536":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12466:5284":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:44134:6910":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13817:5615":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:2905:3032":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:10078:7067":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:8927:21250":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:5641:7108":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:3839:7088":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7090:6177":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13990:5658":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:7907:7135":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"25:4533:7956":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:12157:6755":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:43654:6883":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:952:6439":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"14:0:2860":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6041:21187":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:3830:5911":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:4053:5914":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:11873:5149":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"25:488:7640":{"crate_id":25,"path":["libc","unix","timeval"],"kind":"struct"},"2:10298:4606":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4449:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10589:4993":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:6352:6067":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"10:36:8673":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4666:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:5542:4564":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"11:2469:4574":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"25:6105:8371":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10917:5051":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:1772:3529":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:12005:8965":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9824:21264":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:0:872":{"crate_id":6,"path":["libc"],"kind":"module"},"1:9105:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11282:5087":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"25:1499:7707":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:10782:7249":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:11911:5164":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:3986:4564":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12124:5201":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4401:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:3065:4801":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:2744:5873":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:1551:6449":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:2574:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:48279:7050":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7884:21196":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:44268:6917":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11163:5072":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:483:7637":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:5661:5951":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10814:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:6450:4598":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:40637:6695":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11587:5116":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:7718:8963":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:48160:7041":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:6851:4582":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:7412:6547":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4549:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:30691:31305":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:45841:6943":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:47708:7033":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:7733:8964":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:4385:7092":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"25:4930:8104":{"crate_id":25,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:7692:8614":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6934:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:12032:399":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:4682:14380":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12686:5319":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:39513:3052":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:4153:9117":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:2472:5862":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"25:4349:7850":{"crate_id":25,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13759:5602":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11174:21377":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:46193:6958":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:7828:6281":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"25:6887:8545":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:12646:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5068:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:5448:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"25:5972:8296":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:43795:6895":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"25:652:15138":{"crate_id":25,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:4864:32498":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:7524:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:9498:8836":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"25:1574:7748":{"crate_id":25,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10127:4943":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:22471:6770":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:21857:6767":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:7028:4634":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11245:5117":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:11458:6747":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:40755:2640":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:46386:6967":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:40627:6831":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:3246:6452":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"20:255:1805":{"crate_id":20,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"6:569:7686":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7597:34388":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:41660:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:687:3883":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4789:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"20:474:2611":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockUpgradeDowngrade"],"kind":"trait"},"11:2423:3445":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5104:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2832:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:8002:7138":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:5084:7099":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:459:2590":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockRecursive"],"kind":"trait"},"16:6879:6147":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:7613:6267":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:12039:1496":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:507:4714":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:40687:6836":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:3031:3059":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:6226:6042":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6913:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11574:5114":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:6468:3085":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10617:4996":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:44073:6906":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:2864:5878":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:10215:4602":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:5974:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"18:80:25209":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12577:5305":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:6520:4542":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:2406:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2815:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:8892:7219":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"22:82:1782":{"crate_id":22,"path":["parking_lot_core","parking_lot","deadlock"],"kind":"module"},"2:46338:6966":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"23:363:25238":{"crate_id":23,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"25:4891:8083":{"crate_id":25,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"22:192:1931":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkResult"],"kind":"enum"},"2:21368:9051":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"25:7369:8582":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7006:6165":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:9489:34399":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:40358:6811":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:7694:5899":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:5827:3084":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:7702:8616":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:2519:7074":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4902:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:42401:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:5760:21185":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:6299:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12646:5311":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:0:2863":{"crate_id":17,"path":["object"],"kind":"module"},"17:8979:21252":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:475:7632":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:9661:34394":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:7556:8592":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"10:44:6457":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:40909:6843":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"25:6835:8506":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:5053:7099":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47818:7034":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:12435:14329":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:46156:6956":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"11:883:6439":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6915:5892":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:4854:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:8803:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:10950:5054":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:261:4542":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:48226:7047":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:10371:4965":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:4637:8476":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:43645:6882":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:30599:3526":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:9472:712":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"17:9791:34400":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9522:4907":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:580:7691":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12971:5377":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:4010:4510":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"25:6220:8399":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6944:34387":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:2326:6440":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:3743:6529":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"25:1708:7835":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"25:6084:8359":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"25:532:7666":{"crate_id":25,"path":["libc","unix","hostent"],"kind":"struct"},"17:11992:5179":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"25:4920:8098":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:6612:1806":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:2623:7075":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:4497:5918":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:3938:9092":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:11292:4646":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:13677:5590":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:1917:6451":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:9973:6854":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:2178:4786":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:44125:6909":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:41142:6716":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:7669:3309":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13711:5593":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"25:5002:8148":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:43755:6892":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"25:4812:8048":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:13222:4615":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:2353:3504":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:3077:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7621:21194":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:2574:5866":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:43827:6899":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:14014:5665":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:2709:6558":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:12035:1650":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"25:573:7688":{"crate_id":25,"path":["libc","unix","itimerval"],"kind":"struct"},"20:319:4710":{"crate_id":20,"path":["lock_api","remutex","fmt","LockedPlaceholder"],"kind":"struct"},"20:881:241":{"crate_id":20,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"25:4708:8012":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:2231:4975":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:11001:5057":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:3737:7087":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:9845:3415":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:44001:6903":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:4478:3013":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"9:330:8674":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"0:0:1811":{"crate_id":0,"path":["parking_lot"],"kind":"module"},"17:1184:4781":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11309:7114":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"20:445:2575":{"crate_id":20,"path":["lock_api","rwlock","RawRwLockFair"],"kind":"trait"},"5:276:3089":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:12040:1529":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"25:5109:8200":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:12544:5297":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:364:4534":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:9173:4765":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:10534:7077":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:2948:3040":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:14146:5702":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13724:5598":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:548:7675":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:48294:7051":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:32391:6229":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:7492:6258":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:0:2864":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:9095:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7054:6172":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:4182:9120":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:12051:1634":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"25:4626:8006":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:7357:3445":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:7664:3308":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:4529:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:41683:6723":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"15:0:2861":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:12047:790":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:8536:7094":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13915:5641":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"25:4822:8054":{"crate_id":25,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4955:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12738:5325":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:5612:5887":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:2722:5872":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:3512:9069":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:8201:3884":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:46240:6959":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:4800:4623":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:7645:8603":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:5363:5939":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:10648:3882":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11972:5178":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:504:4777":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10279:4958":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13891:5636":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5004:8148":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:7582:6264":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:2823:3119":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:2958:3043":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4584:7983":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:1681:1179":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:9049:27460":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:6263:8425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:727:4756":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:7679:8610":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:4641:8480":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:12429:4749":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:41700:6725":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:1542:4510":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:4172:4564":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:1674:7821":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:2967:3500":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:14283:5754":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4783:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9897:21266":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:2590:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:1797:7067":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:6696:6116":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:43441:8762":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"25:6057:8350":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13967:5655":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:8214:6736":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:4862:5929":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:8181:5902":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:2943:3039":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:6253:6701":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4556:7967":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:7318:6209":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12238:5227":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:14101:5691":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:10672:3883":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4893:8083":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:9027:7227":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11087:5066":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4977:8130":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:6819:8496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10228:4955":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:299:8747":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:47360:7001":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:7916:7136":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"11:1107:6443":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:11047:4644":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8985:3303":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:9763:34398":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11315:7257":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:7266:3445":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"23:281:3445":{"crate_id":23,"path":["smallvec","IntoIter"],"kind":"struct"},"17:12779:5331":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"25:6010:8324":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:9999:4887":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:30621:3424":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:43901:6901":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:1296:6440":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:5982:3077":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:1146:34230":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:3327:3061":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:1763:8682":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:3083:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"25:4987:8139":{"crate_id":25,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:43869:6741":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:14336:5772":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10647:5001":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:2911:3031":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:1537:7723":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:11455:4648":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:6196:7112":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:13779:5610":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:4639:8478":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"25:1732:7844":{"crate_id":25,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:10779:6739":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13275:5090":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:4471:9122":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:2251:8754":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6361:6068":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"14:165:20259":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:10293:4910":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:4705:9122":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:4764:8027":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"25:4362:7859":{"crate_id":25,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11539:7088":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:1761:7066":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:22615:6778":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"25:7554:8592":{"crate_id":25,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"22:284:2542":{"crate_id":22,"path":["parking_lot_core","parking_lot","ParkToken"],"kind":"struct"},"2:23766:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:5088:5936":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:10249:9167":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:9793:3413":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:1822:7068":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:40577:6825":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:44586:8768":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:41157:4600":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:5075:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"25:7631:8601":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:44858:6941":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"25:4593:7988":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5111:8200":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"25:5138:8210":{"crate_id":25,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:9960:4930":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13423:5437":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12008:5183":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:40346:6810":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:2231:34134":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:1970:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:46116:6954":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:7657:8605":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:7785:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"25:5031:8162":{"crate_id":25,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1055:6440":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:2826:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"25:7637:8602":{"crate_id":25,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:501:7643":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11112:5068":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:6079:8358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"9:52:8817":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:9493:32665":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:7866:7134":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:2948:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"25:5042:8168":{"crate_id":25,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:860:3445":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:3325:9077":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:2339:5851":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:10085:4939":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10013:4910":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:40730:6838":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:6700:8456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:557:2106":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9351:4773":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:43683:6887":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:641:7060":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:2946:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:527:7663":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:4557:5920":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"25:1512:7713":{"crate_id":25,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:2974:34233":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:45985:6949":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"23:57:4510":{"crate_id":23,"path":["smallvec","Drain"],"kind":"struct"},"11:2548:8668":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:2978:34232":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:8281:6344":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:5574:5882":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:660:4737":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:40374:6812":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"25:5990:8308":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:4404:3112":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:588:7696":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:1840:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12532:5295":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14435:5796":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4523:7952":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8331:8465":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:2657:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"25:4696:8011":{"crate_id":25,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:3203:7078":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1604:7767":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:32398:6795":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"8:0:2855":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11296:5088":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"25:4576:7980":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:11372:7121":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4698:8011":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6929:6151":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"25:1701:7832":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:7176:14435":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10431:4970":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5921:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:44621:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"11:123:4532":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:430:34372":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"25:5926:8274":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"23:97:25235":{"crate_id":23,"path":["smallvec","SmallVecData"],"kind":"enum"},"1:11818:4652":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:1064:6441":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:11359:21379":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:43775:6894":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:4719:5924":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"25:5980:8301":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11640:4794":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:4044:9100":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:2469:7486":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10662:5005":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:5755:3078":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:5417:7105":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:7388:8591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:710:6429":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:44347:6923":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:400:4774":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:940:6436":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"13:226:8665":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12811:5335":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:1639:7796":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:6148:4615":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:6682:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"11:1903:6449":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6560:4531":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:11536:5112":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:5992:8308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:9638:3432":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:5955:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:41167:6717":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:46683:6976":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4914:8093":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"25:4453:7920":{"crate_id":25,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:609:4731":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"25:554:7678":{"crate_id":25,"path":["libc","unix","winsize"],"kind":"struct"},"5:5334:4542":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:8795:21246":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:7651:8604":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:207:4540":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:44570:8764":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:11970:14332":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:14164:5705":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:12054:1633":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2586:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:4986:5933":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:4040:9099":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12514:5294":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:7336:6546":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7722:5890":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:4702:9149":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12984:5379":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:10931:6743":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:21226:32337":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"25:61:14728":{"crate_id":25,"path":["libc","unix","DIR"],"kind":"enum"},"1:10842:30386":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:42117:3882":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:10772:5018":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3990:9096":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3968:9094":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"11:1883:3882":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:7747:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:1718:7839":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:14111:5694":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10751:5016":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:3186:6450":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12075:5194":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:1887:3445":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9565:4908":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:40440:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:48215:7046":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4860:8073":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:1676:4525":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:39630:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"25:4527:7953":{"crate_id":25,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:21370:9178":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:1784:4574":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:9922:4925":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5015:8151":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:43765:6893":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"25:1535:7723":{"crate_id":25,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:8147:7176":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"25:4614:7997":{"crate_id":25,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"13:110:34373":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:7365:3445":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:4855:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:10769:7132":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:904:4574":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:10037:4936":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5049:5935":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2200:630":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:482:4617":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:7743:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"25:6941:8570":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"25:6959:8573":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43663:6885":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"25:4852:8070":{"crate_id":25,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"25:4845:8068":{"crate_id":25,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"25:4486:7938":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:599:34409":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:1650:7804":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:10540:7081":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:13452:5457":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:48180:7043":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"18:531:4718":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"15:327:8814":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:22980:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:4325:3103":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:23321:3139":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:8191:6826":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"7:31:20162":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5140:8210":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:10537:7079":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"25:1602:7767":{"crate_id":25,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:39691:6802":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12935:5372":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:32499:3411":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:48317:7052":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"25:1648:7804":{"crate_id":25,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:22190:9263":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:11368:5097":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"25:6157:8385":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8287:9121":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:23259:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"25:4514:7949":{"crate_id":25,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:10970:28177":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"25:6098:8370":{"crate_id":25,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:5828:6699":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:42284:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12044:5190":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"25:118:14782":{"crate_id":25,"path":["libc","unix","FILE"],"kind":"enum"},"6:4480:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11789:5131":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"14:7:6422":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:4179:3120":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:46605:6974":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6968:21191":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:1025:6440":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:45953:6948":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10241:4929":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:102:8746":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"25:122:14783":{"crate_id":25,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:2698:7484":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7523:6262":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:40557:6823":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:10367:4964":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12112:5200":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:6467:6078":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:11532:3527":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"}},"external_crates":{"23":{"name":"smallvec","html_root_url":null},"20":{"name":"lock_api","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"libc","html_root_url":null},"22":{"name":"parking_lot_core","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"21":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}