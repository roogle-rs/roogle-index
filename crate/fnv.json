{"root":"0:0:2057","crate_version":"1.0.7","includes_private":false,"index":{"2:11986:22543":{"id":"2:11986:22543","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:27822":{"id":"2:11891:27822","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11892:27838"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42860:8712","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:27829":{"id":"2:11895:27829","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42878:8710","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3329:1467":{"id":"2:3329:1467","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:38928:8784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:10:1626":{"id":"b:2:2538-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1630"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11867:31248":{"id":"2:11867:31248","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:22812":{"id":"2:11913:22812","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11565:8709","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split_whitespace":"2:11891:27822","str::rsplit":"2:11919:22816"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42586:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5316:31923":{"id":"5:5316:31923","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2322","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2322","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:22777":{"id":"2:11876:22777","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2529:684":{"id":"2:2529:684","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:31256":{"id":"2:11934:31256","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:22779":{"id":"2:11880:22779","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:2275":{"id":"2:11940:2275","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11565:8709","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:2275"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42790:8726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:31268":{"id":"2:11972:31268","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:3084":{"id":"2:11989:3084","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4515:3084"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42894:3085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2537:1454":{"id":"2:2537:1454","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11863":{"id":"2:11863","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11864:801","2:11865:2356","2:11866:31247","2:11867:31248","2:11869:31249","2:11872:27158","2:11873:31250","2:11874:311","2:11875:22781","2:11876:22777","2:11878:22778","2:11880:22779","2:11882:22780","2:11884:31251","2:11885:31252","2:11886:22804","2:11887:22805","2:11888:27828","2:11889:29240","2:11890:1634","2:11891:27822","2:11892:27838","2:11893:25026","2:11894:31253","2:11895:27829","2:11896:22822","2:11899:22823","2:11902:22824","2:11905:2396","2:11909:2355","2:11913:22812","2:11916:22814","2:11919:22816","2:11922:31254","2:11925:31255","2:11928:22818","2:11931:22820","2:11934:31256","2:11937:31257","2:11940:2275","2:11943:31258","2:11946:31259","2:11949:31260","2:11952:31261","2:11954:31262","2:11956:31263","2:11958:31264","2:11959:31265","2:11960:31266","2:11963:31267","2:11966:21437","2:11969:22825","2:11972:31268","2:11975:31269","2:11978:31270","2:11981:31271","2:11983:22547","2:11984:22548","2:11985:22544","2:11986:22543","2:11987:31272","2:11989:3084","2:11990:31273"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11869:31249":{"id":"2:11869:31249","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11867:31248"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11983:22547":{"id":"2:11983:22547","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:31254":{"id":"2:11922:31254","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11565:8709","str::split":"2:11913:22812","prim@char":"1:11857:411","`DoubleEndedIterator`":"2:7174:120","str::rsplit_terminator":"2:11925:31255"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42636:8729","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:31926":{"id":"5:5331:31926","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:1644":{"id":"0:24:1644","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"1:1436:143","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11894:31253":{"id":"2:11894:31253","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42850:8723","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:31251":{"id":"2:11884:31251","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11863:1378","str::slice_mut_unchecked":"2:11885:31252","crate::ops::Index":"2:2989:3134"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11887:22805":{"id":"2:11887:22805","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11886:22804"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5323:31925":{"id":"5:5323:31925","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:31269":{"id":"2:11975:31269","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8187:3387-0:10:1626":{"id":"a:2:8187:3387-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8187:3387","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11937:31257":{"id":"2:11937:31257","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:22781":{"id":"2:11875:22781","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:2396":{"id":"2:11905:2396","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:31266":{"id":"2:11960:31266","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11590:8704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:22548":{"id":"2:11984:22548","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:31267":{"id":"2:11963:31267","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2574:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:10:1626":{"id":"b:2:2523-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2349"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11888:27828":{"id":"2:11888:27828","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42556:8716","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:31264":{"id":"2:11958:31264","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2536:127":{"id":"2:2536:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:2:2533-0:10:1626":{"id":"b:2:2533-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11949:31260":{"id":"2:11949:31260","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11565:8709","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::match_indices":"2:11946:31259"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42754:8725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:31261":{"id":"2:11952:31261","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2541:127":{"id":"2:2541:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31689:3424","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2234-0:10:1626":{"id":"b:2:2234-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2314","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:20524"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:19:1633":{"id":"0:19:1633","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:3267":{"id":"5:5333:3267","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:217-0:10:1626":{"id":"a:2:2668:217-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11873:31250":{"id":"2:11873:31250","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:16:1630":{"id":"0:16:1630","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:21437":{"id":"2:11966:21437","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11864:801":{"id":"2:11864:801","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11857:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3327-0:10:1626":{"id":"b:2:3327-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2314","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:18:1632":{"id":"0:18:1632","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8186:3388-0:10:1626":{"id":"a:2:8186:3388-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8186:3388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11899:22823":{"id":"2:11899:22823","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5320:31924":{"id":"5:5320:31924","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2682:225-0:10:1626":{"id":"a:2:2682:225-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11866:31247":{"id":"2:11866:31247","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:31927":{"id":"5:5332:31927","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:2322","`String`":"5:7180:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2322","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:27158":{"id":"2:11872:27158","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11133:8713"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315":{"id":"5:5315","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5316:31923","5:5317:3245","5:5320:31924","5:5323:31925","5:5331:31926","5:5332:31927","5:5333:3267","5:5334:22546","5:5335:22545"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11886:22804":{"id":"2:11886:22804","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11887:22805"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:14:59":{"id":"0:14:59","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:2356":{"id":"2:11865:2356","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:27838":{"id":"2:11892:27838","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11891:27822"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42869:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:2355":{"id":"2:11909:2355","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2231-0:10:1626":{"id":"b:2:2231-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2314","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2233:2260"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2542:1453":{"id":"2:2542:1453","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10:1626":{"id":"0:10:1626","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler‚ÄìNoll‚ÄìVo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:8187:3387-0:10:1626","a:2:2682:225-0:10:1626","a:2:8186:3388-0:10:1626","a:2:2732:2315-0:10:1626","a:2:2668:217-0:10:1626","b:2:2231-0:10:1626","b:2:3327-0:10:1626","b:2:2527-0:10:1626","b:2:2538-0:10:1626","b:2:2234-0:10:1626","b:2:2533-0:10:1626","b:2:2523-0:10:1626","0:17","0:13"]}},"2:11943:31258":{"id":"2:11943:31258","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11565:8709","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:2275"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42808:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:22825":{"id":"2:11969:22825","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:31273":{"id":"2:11990:31273","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4512:31273"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42903:8721","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11985:22544":{"id":"2:11985:22544","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2732:2315-0:10:1626":{"id":"a:2:2732:2315-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:2315","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11959:31265":{"id":"2:11959:31265","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:22818":{"id":"2:11928:22818","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709","str::rsplitn":"2:11931:22820"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42690:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:22820":{"id":"2:11931:22820","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11857:411","str::splitn":"2:11928:22818","self::pattern":"2:11565:8709"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42708:8696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_u128","write_u16","write_str","write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_i128","write_i16"],"trait":{"name":"Hasher","id":"2:9288:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1632","0:19:1633"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11885:31252":{"id":"2:11885:31252","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11863:1378","crate::ops::IndexMut":"2:2993:3135","str::slice_unchecked":"2:11884:31251"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:31262":{"id":"2:11954:31262","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:25026":{"id":"2:11893:25026","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42840:3242","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2233:2260":{"id":"2:2233:2260","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:1634":{"id":"2:11890:1634","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42572:2730","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:22814":{"id":"2:11916:22814","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11389:8700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:22822":{"id":"2:11896:22822","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:31259":{"id":"2:11946:31259","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11565:8709","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::rmatch_indices":"2:11949:31260"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42736:8724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2236:20524":{"id":"2:2236:20524","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:31272":{"id":"2:11987:31272","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4514:31272"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42885:8720","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5335:22545":{"id":"5:5335:22545","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11986:22543"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5334:22546":{"id":"5:5334:22546","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11985:22544"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1640":{"id":"0:21:1640","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:734:141","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:0:2057":{"id":"0:0:2057","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler‚ÄìNoll‚ÄìVo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall‚Äîa perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library‚Äôs\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library‚Äôs `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library‚Äôs `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:10:1626","0:20:1638","0:21:1640","0:24:1644"],"is_stripped":false}},"2:11902:22824":{"id":"2:11902:22824","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11956:31263":{"id":"2:11956:31263","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:31270":{"id":"2:11978:31270","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8709"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20:1638":{"id":"0:20:1638","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BuildHasherDefault","id":"2:9328:1621","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:11981:31271":{"id":"2:11981:31271","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11527:126","`FromStr`":"2:11526:3407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11526:3407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11526:3407","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2527-0:10:1626":{"id":"b:2:2527-0:10:1626","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11889:29240":{"id":"2:11889:29240","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42562:8715","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:22816":{"id":"2:11919:22816","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11565:8709","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split":"2:11913:22812"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42604:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:311":{"id":"2:11874:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11875:22781","`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5317:3245":{"id":"5:5317:3245","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:22780":{"id":"2:11882:22780","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2526:2349":{"id":"2:2526:2349","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2500:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:22778":{"id":"2:11878:22778","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:31255":{"id":"2:11925:31255","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11565:8709","str::split":"2:11913:22812","prim@char":"1:11857:411","str::split_terminator":"2:11922:31254"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42654:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:6282:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:561:9817":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:2579:15228":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:1604:10728":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:6743:3494":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:614:34174":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4786:15901":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:4564:21457":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:6628:14334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4820:13247":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:6757:14343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:5433:16137":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11125:18932":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"12:1872:3111":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:1520:10719":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10546:16289":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:8056:16210":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8397:3401":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:9107:3488":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:43086:8744":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4611:3300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:38834:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4828:13248":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:1514:10718":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:8181:3278":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12033:19464":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:7480:21620":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4781:13243":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:9118:34126":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:8252:3341":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:9328:1621":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"12:353:2510":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:42382:8686":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:6024:3578":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:9978:3151":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:4733:13237":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:1847:3157":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13184:20233":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:11338:9196":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8810:2361":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:45519:3548":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:40649:2897":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:8794:2897":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12073:19467":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5967:32649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:7452:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2367:15219":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9539:16334":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:9700:16358":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4408:13204":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:3528:2898":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:11001:3421":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:4232:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:12768:20198":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"11:0:2163":{"crate_id":11,"path":["adler"],"kind":"module"},"17:13436:20249":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4618:13223":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:40792:2361":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:13382:20245":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1030:32120":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:153:2503":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:567:9818":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:1988:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"12:387:33066":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:9070:8650":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:11461:2983":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:2075:30945":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:44995:29417":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12884:20205":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:5726:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:9947:16437":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:1712:9079":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:2574:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:1647:1073":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:5996:2811":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6161:16156":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:3665:3289":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:2282:15216":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:4358:2587":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10973:18928":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11315:18946":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12964:20212":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:41066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:42970:8739":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13327:20240":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:39210:8721":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10845:2741":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4805:13246":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:3713:2512":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:6376:16166":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:2971:8637":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:4084:3333":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:29712:3292":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:5491:3419":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10721:2747":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:3171:8798":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:3656:3121":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:42439:8673":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"12:815:3099":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:5839:16150":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10283:16450":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:10093:8694":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:3190:29978":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:10466:16483":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:2745:8633":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11528:16440":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:41348:8642":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:9820:16432":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:4:1000":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:9204:30621":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"12:300:33073":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:5761:16147":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12860:20203":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:5728:13905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:5793:2785":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:46607:8613":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:2771:9036":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:2605:15229":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:6359:16165":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:43393:9205":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:2209:3194":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:1704:10737":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8479:3404":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10476:16484":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:505:2540":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12265:19480":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"12:0:2164":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:3124:24649":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11356:18949":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9108:16285":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:21:671":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"12:1044:15139":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:6519:2369":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:13007:20215":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:9488:16336":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:44204:29415":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:5959:13923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:21651:29402":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11235:18940":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:9433:16313":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:11089:3455":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:43150:8746":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:7487:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10310:16478":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:2341:15218":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:2433:15222":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"12:822:3100":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:44805:3544":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:1564:2897":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:21697:29168":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:43605:8626":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:43329:9192":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:9831:16433":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:6931:2894":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:39921:8991":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:531:20296":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:1800:3124":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6079:13953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:9691:16359":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4451:13209":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12934:20209":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:4241:8803":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:621:3086":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:42894:3085":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:3371:3219":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12874:20204":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:5614:2810":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12225:19477":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:4635:15870":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:8781:2929":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:5664:16145":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4092:3334":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:3146:3108":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4994:13265":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:3640:2361":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:4298:2552":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:44536:29451":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:7298:16187":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:12147:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:8903:3439":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:42144:8676":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:9010:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13536:20256":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:1568:2361":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:2491:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:44681:3567":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10221:16475":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:7469:16269":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:3118:21245":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"12:2053:3104":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:11199:20673":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:2800:9040":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:5552:2623":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:40986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:45365:3553":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"0:0:2057":{"crate_id":0,"path":["fnv"],"kind":"module"},"16:6690:2837":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:2825:15238":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:967:16320":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6463:16167":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5910:13917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:6174:2623":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:41940:2954":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:3979:2898":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4468:13211":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11199:18938":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:6719:14340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11684:19442":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"12:98:33082":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6496:10657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:904:2547":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:45553:3530":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:1339:2897":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"12:1832:2897":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:355:3079":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7511:16194":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:3504:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:2894:15241":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:5203:2707":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4766:13241":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:21763:3294":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:41885:2302":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13114:20225":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:0:2169":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:11343:3289":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:35:2520":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4841:13249":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"12:834:3101":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6698:14339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:7059:3385":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11774:19448":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:11876:1473":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:39888:8988":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9857:16413":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:5628:16144":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:6773:14345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:5703:16146":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:42413:8675":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:8796:2709":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:1927:3173":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:2776:9035":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5772:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:11636:8733":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10774:16296":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:7319:16189":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5122:16117":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"12:861:3103":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:1021:16323":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4379:13200":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:4552:3306":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:11617:19439":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:4316:3332":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7929:16205":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"12:1029:3106":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:46569:8611":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:2411:15221":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:4164:3337":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:962:3103":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7267:16184":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10929:2648":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:2761:3489":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:44827:3547":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:719:20284":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12980:20214":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:1230:3107":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:10353:2645":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:2297:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12237:19478":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:1903:16372":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:5494:16141":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:8441:16280":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13279:20239":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:9631:16332":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:6571:10684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"12:659:2361":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:8917:2965":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:8176:3286":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:4689:15876":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:22786:2944":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:40784:2898":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4862:13251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:7099:8993":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:7869:2976":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:1583:10726":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:8293:8705":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:6506:2563":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:9115:21477":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:41226:2951":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:9544:2600":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:2867:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13214:20236":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:771:2526":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12674:20192":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:8666:2728":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:6524:3446":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:9018:2980":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:1392:2899":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10310:3420":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:10047:21555":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:4748:3316":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:1066:32121":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4224:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6668:2797":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:4236:8802":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:11579:8707":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4422:13206":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:6619:16172":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:2342:3198":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:6109:16154":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:1410:3098":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:31729:9101":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:1600:2524":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:8983:16179":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:5878:15188":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11909:19457":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:5418:2563":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:0:2159":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:42850:8723":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4237:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2612:3255":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:1589:10727":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:21624:3293":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:9293:16322":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:6922:2638":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:41621:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:11014:18930":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4301:13191":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:6107:2567":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:12972:20213":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:10650:21483":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:10412:3262":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"12:2205:2311":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:39542:9003":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5759:13908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:2455:8842":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:8776:29185":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4520:13216":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11368:18950":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:2868:15240":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:3854:15425":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"12:1866:3110":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:7704:25319":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:3428:3174":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:10845:21398":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6270:2832":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:10207:16465":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:10131:8695":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:594:9822":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:43175:8748":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12337:2741":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6186:2831":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:9981:8700":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:6059:13101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5945:13921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:2864:9052":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4929:13259":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:11823:2984":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4656:13227":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"12:725:2899":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:9873:16434":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11879:779":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:1216:3105":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10506:16453":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:7195:14715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:588:3083":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:5527:2923":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:3172:3111":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4795:13245":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:3402:15248":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:2370:3209":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:31738:2948":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:2676:8634":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:48504:3574":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:3325:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:2680:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:39533:2924":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8218:3282":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8296:3320":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:39241:8827":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:8835:3449":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:39391:2588":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11853:19454":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:10833:3417":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:9274:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6743:14342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12134:19471":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:1534:10721":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:939:3100":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:2548:2600":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:8997:20942":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:7440:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:7132:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:39643:8996":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:3281:3250":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:38856:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12955:20211":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10108:16393":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:8510:2708":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:2993:15243":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4346:13196":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:9746:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:44296:3538":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:7942:16206":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:3160:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:11565:8709":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:1899:10880":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:22090:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:43309:9188":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:6171:16157":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:12357:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:39158:29164":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:641:3089":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:5878:13914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11734:19445":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5843:13913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:4244:3338":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:44729:3552":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11485:19432":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:10528:16288":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:3983:3311":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:4627:3369":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13527:20255":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6123:2828":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:4218:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5510:2801":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:525:9812":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5981:33432":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7044:33487":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:46660:8616":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:6137:2830":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7659:16199":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:4749:15888":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:7518:2640":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:7386:14876":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:9059:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13126:20226":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:44499:29405":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5815:16149":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:43593:8628":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:2668:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:1185:3104":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"9:33:2863":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:45909:3573":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12816:2762":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6743:16175":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:48874:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:39584:9005":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:540:9814":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:7522:3113":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:668:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4757:13240":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:2572:3246":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4396:13202":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:22321:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:11872:734":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"18:582:2947":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:6702:8984":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:7197:2320":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:6222:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:11186:18937":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:40421:3279":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:11855:368":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:7434:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"12:1628:2517":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:546:9815":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:43317:9189":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:1771:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8134:2919":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:40540:3282":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:10645:21438":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:40527:3291":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"14:202:8750":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:21749:3295":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:41651:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:7949:3256":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:4357:15784":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:22024:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:1451:3120":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:9066:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:43337:9187":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5823:13912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10403:16295":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:7566:29186":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:39188:8833":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:22189:3072":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:5938:13920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:1597:3111":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11748:19446":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4725:2621":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:671:20288":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:208:2522":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:39865:8986":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:3644:2976":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:3689:15308":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12850:20202":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:3977:30485":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5698:13902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7970:16207":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:4630:3342":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"15:175:15167":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:8188:2927":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:505:9811":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6345:2834":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13459:20250":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:7483:2848":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:564:2698":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:3112:3109":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13082:20222":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:39551:9011":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:42402:8685":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:40866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2906:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:1788:3142":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:11869:735":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:8963:25296":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:2624:30935":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:43360:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"12:2080:3106":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4787:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:11087:2754":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13572:20258":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:44851:3529":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:6221:2524":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:7103:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5931:13919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:3932:2552":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:6294:2361":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"0:24:1644":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"2:1611:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:10415:3264":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:6623:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:29963:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:3264:2512":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:1731:10740":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8848:3452":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8244:3287":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"18:707:8707":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11841:19453":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:4968:2561":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2930:2316":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:21369:3318":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12485:20185":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7667:2963":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:41910:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:3515:2897":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:8212:16272":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:22255:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:1074:3106":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4945:13260":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6146:16155":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:40707:3386":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:929:2902":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2302:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:2500:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6654:16173":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2465:15223":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:20847:3318":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:9181:3157":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:7095:8994":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5751:2625":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:3314:3269":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11259:18942":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:7343:2842":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:7980:16208":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:4413:15792":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:2766:3491":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12748:20196":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:5472:16140":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:2475:3253":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4549:13218":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:9712:2734":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:755:20291":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:5559:2624":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:6667:2567":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"18:574:34158":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"9:956:14950":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:7788:3214":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:11479:21399":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:5411:16136":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:42373:8682":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:5780:16148":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12164:19473":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10332:16479":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10921:16491":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"18:491:34159":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:29935:8771":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12278:19481":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:8475:16254":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:5124:2524":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:5460:16139":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6865:33147":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2937:2318":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:46622:8614":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"12:738:2900":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9328:16317":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4496:3360":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:8329:3381":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:11343:18948":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11247:18941":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:39594:2925":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:3242:8636":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:4812:988":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7278:16185":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:7592:3070":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13059:20220":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12087:19468":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:10245:16477":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:6791:14346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:5010:25311":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11559:19435":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:38928:8784":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:39264:8828":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:7174:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:6877:16178":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13031:20217":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:20654:3318":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:6488:9858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:4092:2914":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:2487:15224":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:5172:8668":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:21775:3297":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:6538:2636":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:4921:15940":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:10200:8699":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:914:2512":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:2360:3204":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:7521:14905":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:40504:29084":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:2225:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:1652:10732":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:40640:2360":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:6611:10661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:39519:29452":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:4113:3336":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:6572:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:1771:16339":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:6359:3440":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:44481:3543":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:39879:3096":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10997:18929":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:39344:9122":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:5323:3413":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4501:13215":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:11878:1471":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:2808:9041":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:3899:3303":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:12148:19472":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:46637:8615":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:5786:13871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:4024:8632":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:8225:3339":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:123:9490":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:40575:3284":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4833:3367":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:5951:13922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:9288:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13506:20253":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:851:2531":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:43185:8749":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:11570:8705":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:7567:16196":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:2930:15242":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:43576:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9283:16324":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:9458:16351":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4439:13208":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:11166:3427":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9401:16319":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:6946:3112":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:2813:9045":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:11315:9199":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7028:2361":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10296:16449":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:39235:3085":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:5835:2552":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:4571:13220":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4673:13229":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9751:16360":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10434:16482":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:4979:25311":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7815:3213":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:2507:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:10385:16480":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:1710:10738":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:5995:2627":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:10233:16476":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:42878:8710":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8085:2926":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:8187:3387":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:361:3080":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:2841:9047":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:10186:8696":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:3937:2524":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"9:827:15049":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:45253:3565":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10668:21473":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:277:2322":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:1046:30981":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11661:19441":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"15:214:2854":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:9317:16318":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13393:20246":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:8110:16253":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:5000:13266":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:3437:22384":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:636:34171":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:951:2524":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:493:9809":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11174:18936":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"9:800:15080":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:22222:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:43313:9190":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:3151:32081":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:8596:2726":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7357:2843":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:8393:16278":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"9:505:2886":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:9051:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4429:13207":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6512:9690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:3199:3265":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11241:21432":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:10940:2649":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:6330:16164":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13354:20242":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:6000:13925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11070:2752":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6903:16179":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:7853:24644":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:44948:29374":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:6667:14338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:39198:8834":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:11585:8706":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:8162:16271":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12836:20201":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"12:1085:15140":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:8701:2729":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"12:1065:33076":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3770:3290":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:9263:16308":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:6071:2610":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:11875:1472":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:7469:2846":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:7793:3215":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:7798:3212":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:7117:33485":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:4671:3322":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:4139:2897":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:9658:16383":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6052:2796":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:420:15191":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:7001:2907":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:41612:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:39654:3243":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:46584:8612":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4637:13225":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:2177:2906":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:6535:2577":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:10321:16445":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:1687:10735":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"14:221:15160":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6200:16158":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"12:1138:3107":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:4262:15761":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:41606:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:4353:13197":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:860:2898":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:847:2897":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12349:19485":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:4387:2917":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8880:3453":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:11119:9150":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:42654:8728":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6034:16153":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:0:806":{"crate_id":6,"path":["libc"],"kind":"module"},"16:2509:15225":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:9362:2712":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1695:10736":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43305:9184":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:7677:2962":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:11813:19451":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:3907:2547":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:534:2783":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:39441:3132":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9897:16436":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:2497:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:8151:2730":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:891:2900":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11856:925":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:12399:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"5:6525:2575":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:40657:2898":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:39316:3179":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4900:13256":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:22288:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:44398:29418":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:5921:9012":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:1723:10739":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:41106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4583:13221":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:20744:2935":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:1065:3105":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:8241:16273":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:5488:3418":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13366:20243":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:3177:8797":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9155:16286":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8164:3242":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:3388:8780":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:9183:16287":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:43341:2934":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"14:160:15150":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:7529:8992":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:8137:16270":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6634:14335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2919:3118":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:50214:29455":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:46558:8610":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6252:16161":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:41639:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:21462:29313":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:7511:14904":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:36:33065":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:4402:3342":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:39311:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:572:9819":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:39633:9008":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:6593:16171":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:22156:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:50235:29469":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:43007:8741":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:9446:16325":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:4331:2555":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10497:16486":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:10455:16474":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:4847:2552":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9021:16284":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:31725:25319":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:10418:3260":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12550:20187":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:878:2899":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7211:2793":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:11526:3407":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:9722:2735":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:7525:3116":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10445:2741":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:2503:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12730:20194":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:6468:3443":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:4253:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:6963:2535":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:5168:8667":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:11405:3290":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:1747:10741":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:11103:9148":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5902:13916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4687:13231":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:3989:30483":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:13404:20247":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11536:16438":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:6087:2631":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"11:44:2860":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:3869:3301":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:5374:3416":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:7481:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:7618:2646":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:11504:15175":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:14:1633":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:5359:3415":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:4217:15740":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:43164:8747":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:4519:15850":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:22387:3296":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4489:13214":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:39328:29128":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12291:19482":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6472:15165":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5805:13910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:5168:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:8561:2725":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:6318:25285":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:8608:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:38690:8638":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:10257:16452":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:10205:3416":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:20428:29983":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11436:19431":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:4817:15908":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4952:13261":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11054:2748":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8236:3331":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:5813:13911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:41362:8651":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11288:18944":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:4297:15772":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:9422:16314":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:6764:14344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:7194:8751":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:9997:21575":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:20641:3507":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:11721:19444":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:2732:2315":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:43321:9193":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10682:16294":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:11278:9197":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:8489:2897":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:4369:13199":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"12:810:3098":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:6692:2581":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6241:16160":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4775:13242":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:5675:3437":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"18:521:20292":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:1401:2900":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:9323:2298":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:22123:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:11828:3094":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:4545:15852":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:38937:16209":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10854:16298":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"18:699:2701":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"12:2190:33078":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"12:274:33070":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:10824:21431":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:3446:3220":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:5428:3417":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"12:1836:2361":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"9:382:2871":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:10626:3371":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:6355:3096":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:1617:10730":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"12:669:2901":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:9889:2897":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:8802:3454":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:2719:9014":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:11874:1475":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:262:2524":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12617:20189":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:6548:3372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:3205:8635":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:690:20290":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:6955:2547":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:30035:29119":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:4681:13230":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:7135:33511":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11699:2657":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10159:16401":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:3010:15244":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:4268:2555":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:2358:3203":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:48926:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:4413:2918":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:39668:9009":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:1983:3121":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:2129:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6517:15164":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6842:33345":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7396:16191":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:113:20274":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:44274:3550":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10949:18927":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4662:13228":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6676:2836":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"9:649:14971":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:11791:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:42808:8727":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7249:16183":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:1575:2512":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:8970:2968":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12638:20191":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:8272:16274":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6094:13954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:386:16267":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:40674:3385":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:0:1370":{"crate_id":1,"path":["std"],"kind":"module"},"2:10699:8688":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:43555:3575":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:6704:2838":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:5541:16142":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:1931:16333":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10075:16396":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:39571:8995":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:8113:3221":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:46409:3549":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:42452:8674":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13557:20257":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:2825:9043":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:4888:15931":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:1120:15141":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:484:2612":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:20409:29944":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:41146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"7:32:14921":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11939:19458":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:7845:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:42992:8740":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:4742:29336":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:96:20273":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:7205:8752":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:6496:16168":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:4441:15796":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:621:30982":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:3376:8776":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"5:1704:2512":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:11161:18935":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:515:20295":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:9060:8642":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:3927:3306":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10894:16300":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:39257:8720":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:3150:9054":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:8055:16255":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11606:19438":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"9:188:2868":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:7093:16180":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:11873:730":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5912:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:6530:14332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9031:34135":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:11864:1457":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:11013:3422":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:5236:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:9885:16435":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:21742:29467":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:473:9806":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:48887:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11800:19450":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:4597:13222":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4389:13201":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:4574:15857":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8975:2978":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:8758:3421":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:41369:8652":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:2842:15239":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:11263:2653":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:9844:16392":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:8822:34128":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:1894:8639":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4361:13198":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:40776:2897":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:3138:3110":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:39297:8825":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:7075:2311":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:38752:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13148:20229":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"9:586:15017":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:46699:8617":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:6175:2547":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4850:13250":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:13024:20216":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:7537:2642":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:2865:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:11594:19437":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8772:3422":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:8774:2731":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:4100:3335":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:1580:3108":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:4303:2586":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:6541:14333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:3457:15249":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:45207:3561":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2782:9038":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10121:16394":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:9062:8651":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:7684:3160":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:43512:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:1677:10734":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:39491:2922":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10642:16293":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:1898:3172":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4313:13193":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:42885:8720":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"9:622:14970":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:8052:3216":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"14:165:15151":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:21636:29038":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"12:1840:2547":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:553:9816":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"14:7:15150":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:10139:2712":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:11025:21513":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:9627:16345":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:11590:8704":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4248:13188":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:22354:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:920:3098":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:39481:8999":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:3087:3136":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:11863:1378":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:21713:29044":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10088:16397":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:12233:8848":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:2894:32062":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5890:13915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:7201:14716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:44184:29408":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:2104:2903":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"9:19:2861":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:46485:3534":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11761:19447":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:4988:13264":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:7581:3081":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:4069:2552":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:652:34158":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"13:0:2158":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:7180:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:925:2901":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:20856:2935":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:0:2168":{"crate_id":17,"path":["object"],"kind":"module"},"2:12208:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:119:9489":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4882:13254":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:7150:3176":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:7030:26901":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10458:2646":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:11877:1474":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:5800:13909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:2847:9048":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10583:16290":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:8368:16277":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:2535:15226":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:4768:785":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:6735:16174":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:5949:16151":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:487:16268":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11160:2970":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:4476:13212":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:7166:16181":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"10:0:2162":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:7136:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:638:3088":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:9058:8643":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:12046:19465":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:40906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4921:13258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:8631:2727":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:39401:3193":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:11389:8700":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:2749:15235":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:6316:16163":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:4714:13234":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:11229:20667":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:40733:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:11547:16439":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:562:16269":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13176:20232":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:727:2703":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:42544:8719":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:10710:3217":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:7956:2852":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:48939:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3668:3288":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:8871:16281":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:20381:2947":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12948:20210":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:2916:16395":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:3121:24643":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10822:16297":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:5682:3438":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6528:16169":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:11133:8713":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:578:9820":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:5056:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12176:19474":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:3921:3305":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:46051:3542":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:10058:8701":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4457:13210":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12060:19466":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7543:2850":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:12739:20195":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:3344:2552":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:41901:2301":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11828:19452":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:41588:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:1824:3151":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:2771:15236":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12630:20190":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11997:19461":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2454:3318":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:44358:3559":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:9445:2596":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:2989:3134":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:12480:3137":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:9056:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"14:31:15150":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:1509:10717":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:7446:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:7288:16186":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:39358:3180":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:8170:3287":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:42903:8721":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:1609:10729":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"9:896:14953":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"12:762:2512":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:8494:2707":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:9088:3225":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:46503:8605":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2830:2620":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11870:732":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:534:2613":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:8186:3388":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:3975:3309":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:10720:21516":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:9064:8652":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3159:3263":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:40563:3283":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:3188:15246":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"14:215:15159":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:11881:1110":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:39278:8830":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:2830:9044":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:2657:15231":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:21263:2937":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11639:19440":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:2682:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:487:9808":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:21371:3500":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:9000:3174":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:5235:33430":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13518:20254":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:870:2361":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:2792:3490":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:21600:2939":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:39174:8831":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:1618:8975":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:45049:29416":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:43021:8742":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2339:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10946:2650":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:8506:3406":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"12:393:33067":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:1726:29372":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:9805:16431":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12896:20206":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:20703:3501":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:3595:2524":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3961:3307":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:6607:25285":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:9601:16338":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:40826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11974:19460":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:0:2167":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:10625:16292":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:44250:3558":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:1541:10722":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3238:3261":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:2389:15220":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:2851:9049":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:11214:20658":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:5762:9409":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:38958:8793":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:7277:2570":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"13:226:2858":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9223:16306":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11576:19436":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:2494:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:7637:16198":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:4721:15884":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:44873:3532":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:1559:10724":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:45129:3572":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:12425:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:43218:8731":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11515:19434":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:39218:8826":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:3863:3302":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:39619:9007":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:41355:8643":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:42392:8684":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:5708:2964":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11106:2761":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4307:13192":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:538:2696":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:9350:16315":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:40801:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:44583:3496":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:20695:3318":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"12:646:2898":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:42474:8693":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:8991:34136":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12756:20197":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:9064:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:7469:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:8981:16283":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4539:13217":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10420:2740":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:8230:3340":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:4721:3095":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:3026:15245":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:41709:9141":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:679:3091":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:6851:2926":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:10796:16256":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:6070:2825":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:6053:13952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11217:18939":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:6471:3444":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:22057:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:1051:3104":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:42754:8725":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12781:20199":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:43520:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"12:320:2508":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4720:13235":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10875:16299":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:21515:29307":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:4662:15873":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:21568:2938":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:4099:2552":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:6017:16152":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:7463:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12797:20200":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:6594:10658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"9:863:14952":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13340:20241":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:4751:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:42140:28784":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:7163:3177":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:44629:3560":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:2538:2617":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:8295:16275":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13413:20248":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:2705:15233":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:3263:15247":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:8418:16279":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:1716:3328":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"12:1518:15142":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:2333:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:7372:33382":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"12:1845:2512":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:12198:19475":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:10820:3161":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:7237:16182":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10062:16398":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:6521:14331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:2385:2175":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:10670:2744":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:21659:29088":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:21106:3502":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:39903:2594":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:9671:16352":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:20615:3506":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:2796:3492":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:44775:3540":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5752:13907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4697:13232":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:38951:8808":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:42465:8690":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:3249:16418":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:8420:3402":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:44659:3564":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"9:709:3401":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"14:0:2165":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:3971:3308":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11880:1528":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:10608:16291":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43563:3576":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:4062:26900":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:2679:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:6971:30962":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:10732:8689":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:11857:411":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:2940:2319":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11893:19456":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4559:13219":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:9193:34130":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11070:20674":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:46543:8609":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:3716:15311":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:2157:30970":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:80:20272":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:3566:15257":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:7426:16192":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4322:13194":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:38651:8796":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:9791:16386":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:10134:3426":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4962:13262":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9778:16361":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"9:592:14969":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"12:777:2516":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:7700:3161":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:41673:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:9303:2732":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46363:3531":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:6655:29753":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13134:20227":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:8526:2723":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:40725:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:5741:13906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:20426:29979":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:9475:16337":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:38878:2305":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:8274:3372":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:42484:8691":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:46512:8606":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:11320:2654":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13168:20231":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:39872:29414":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:6119:2969":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:2675:2314":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:7890:16203":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:868:2897":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:44380:3563":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:9913:2898":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:41725:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:3453:3240":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:38768:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:44328:3571":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:42736:8724":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2687:2913":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:4577:8819":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:7939:25281":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6790:16177":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:39894:3269":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"9:676:14961":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:12251:19479":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4628:13224":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2934:2317":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:11839:21491":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:5388:16135":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:956:3102":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:7218:14717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12008:19462":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"0:20:1638":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"9:0:2161":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:39421:8673":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:9371:16285":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11882:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:7388:16190":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:40398:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11034:18931":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"12:751:2547":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13580:20259":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:4667:3317":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:242:34127":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:11862:1348":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:1786:3141":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:3049:3270":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:1083:3107":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"7:79:14928":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:38910:9055":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:46161:3562":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13374:20244":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8495:3405":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"19:0:1017":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:247:34131":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8746:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:4424:3343":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:2900:31005":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:42125:9177":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:42562:8715":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11873:19455":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10394:16481":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:42530:8722":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:38737:9053":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3913:3304":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:30533:2947":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12926:20208":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:39562:9004":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11271:18943":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:8752:2730":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:9738:2720":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:8951:34134":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:9736:3318":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:1550:10723":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:42708:8696":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8347:3400":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:9553:2712":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:13492:20252":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5917:13918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4402:13203":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:4562:21455":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:1354:2898":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:9764:16385":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:586:9821":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13158:20230":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13071:20221":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10708:2745":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"12:632:2897":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:20447:29984":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:7861:3254":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:39146:8832":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:9526:16335":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:42790:8726":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:40438:3280":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:8928:3065":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11149:18934":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"12:2198:33080":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:20578:3505":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:42586:3244":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7909:16204":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:736:20285":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3197:3264":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:531:9813":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:40946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:39913:8989":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"12:119:2506":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:9250:16307":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:933:3099":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:8101:3217":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:40665:2361":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:1527:10720":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:44897:3533":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12211:19476":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:41922:3401":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:558:3067":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:2896:30932":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:6911:2626":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:1969:2976":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:9874:20560":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:21584:2908":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:481:20293":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:42572:2730":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:39137:8800":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4703:13233":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:40589:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"9:111:2864":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:39271:8829":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8144:3243":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:8014:16209":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:1735:9078":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:4367:8809":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:9559:2605":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:41186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4274:13190":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:45026:29464":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:7847:16201":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:11052:3225":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:40484:2950":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:13141:20228":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:7087:2312":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:8740:3420":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:12181:30489":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11330:18947":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:48861:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4328:13036":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"12:60:33075":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:5219:2708":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:42494:8692":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:2788:9037":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:44429:3551":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10182:16399":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:43038:8743":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"12:1003:3105":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:7646:3092":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:46447:3569":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:2683:15232":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:41932:2953":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:4877:13253":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:3236:3260":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:7603:16197":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:1442:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4910:13257":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:43325:9191":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:20697:3499":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40455:3281":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:2727:15234":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:9068:8649":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:43333:9186":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:2065:2540":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8437:3403":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:6373:2524":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10270:16451":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:9501:2732":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:10222:21568":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:7428:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:11354:9198":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"13:110:33129":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4890:13255":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:39682:9010":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10360:16446":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12609:20188":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:5545:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:11951:19459":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13231:20238":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:4313:8808":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:5737:2779":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4334:13195":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"15:193:15168":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:6993:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9644:16331":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:660:20287":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"12:2069:3105":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:11867:632":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:6649:14337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:11860:1035":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:10350:16296":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:3105:2897":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"12:1859:3109":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13192:20234":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:624:34169":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:9274:16309":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13091:20223":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"12:1534:15143":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10374:16448":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:39131:3085":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:2557:15227":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:9938:3244":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"9:977:14954":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"12:2184:29768":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:62:9435":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:20394:29944":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:5450:9002":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"9:920:14951":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:2793:15237":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"18:681:20289":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:10863:3423":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:39603:9006":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:5596:2806":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12514:20186":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:646:3090":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:3117:32087":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:7828:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:4849:15916":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:41893:2952":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:7944:2974":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:9930:16412":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:507:34158":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12361:19486":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:499:9810":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11300:18945":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:7252:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"12:2178:33079":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:8339:16276":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:2820:9042":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:39463:2920":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:9681:16384":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:7661:3093":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:8613:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5990:13924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:8911:34145":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:11511:15175":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:6059:33482":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:48913:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7805:2975":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:3632:15275":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:2804:9039":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:2588:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:7120:3178":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11247:21414":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"14:40:18929":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:48900:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:1962:16357":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2835:9046":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:43502:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4261:13189":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:7580:3318":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4649:13226":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:30141:29161":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:5746:2561":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:38944:30077":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:2757:9017":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:2631:15230":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:3505:2547":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:20449:29981":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7329:2841":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:9071:34146":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13203:20235":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:5640:2547":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:1586:3109":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:6395:2635":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:7145:2321":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:4566:21459":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:1431:2902":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:44228:3570":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:45703:3554":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:25596:2945":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:7557:16195":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:29977:29076":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:7134:29128":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4483:13213":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:9069:3455":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:10655:3212":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:8881:34140":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:4144:15691":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:9383:2644":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:6298:16162":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:43381:3493":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:7173:9767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:2212:2582":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:10020:8687":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:2578:115":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"17:9165:34129":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8786:3423":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:39501:9000":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5690:13901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:5343:3414":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:7498:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11868:633":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:7260:2512":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:2855:9050":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:44459:3539":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:42869:8711":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:6823:2653":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"16:5184:15187":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:46523:8607":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:40716:9132":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13221:20237":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4981:13263":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:653:9870":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:9382:16321":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:5574:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:4891:3377":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"0:21:1640":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"2:20823:3318":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9339:16316":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:42636:8729":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:1645:10731":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:5309:3412":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:4669:3321":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:1370:2361":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:1592:3110":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:46532:8608":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6210:16159":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:9378:3215":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:2216:3195":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:10490:16485":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:10214:8697":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:6940:2361":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:41026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:3157:3262":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:30516:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:12368:2610":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6719:33387":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13594:20260":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:10172:8698":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"12:1555:15144":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:609:34164":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:2395:30973":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:42313:30480":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:9048:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:950:3101":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:43113:8745":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:590:29412":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10520:16487":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:4842:3368":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:6643:14336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:7022:2361":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:7475:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13047:20219":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:644:34158":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:42604:8694":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7872:16202":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:2228:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:3599:15266":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:7497:2849":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4751:13239":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:39472:2921":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11384:3288":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:5447:16138":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:2207:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:8816:3451":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:38792:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:1201:3106":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:803:2529":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:1527:2552":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6781:16176":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:6880:21614":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8940:20980":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:45283:3568":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:2859:9051":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12022:19463":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:4327:15778":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:11033:2934":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:9527:2599":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:7271:27526":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:3603:3285":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:44518:3528":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:766:20286":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4727:13236":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:1663:10733":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:20828:3498":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:6284:2833":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:42840:3242":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:1849:3158":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:6985:2361":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:11858:1491":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:45489:3545":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12695:20193":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12322:19484":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:1571:2547":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13478:20251":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:7825:16200":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:3125:16400":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2993:3135":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:7435:16193":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"7:0:1518":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:39450:2919":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:2893:2418":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"15:0:2166":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:39510:9001":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11787:19449":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:21676:29056":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:8941:16282":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:5374:2800":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:5525:2804":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:4122:2915":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8270:3370":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:5558:16143":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:12160:8847":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:42556:8716":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:1571:10725":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:8157:3244":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:2904:31006":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:21275:29947":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:7597:3071":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"8:0:2160":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:5716:13903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:481:9807":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:46301:3566":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12118:19470":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"12:985:3104":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:29941:9028":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:42860:8712":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4416:13205":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:2320:15217":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:21111:3525":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:9061:2712":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"12:1852:3108":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:7309:16188":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:1420:2901":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11137:18933":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:3732:2524":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:29901:2946":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13100:20224":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:5163:16134":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:45443:3541":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:11871:733":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:4606:15865":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11708:19443":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:8092:2977":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:2344:3199":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:4385:15788":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:9909:2737":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"12:697:2902":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:5697:30370":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"12:853:3102":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:599:34177":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:6608:8998":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:46239:3546":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6829:33439":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6728:14341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:20854:3503":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:10752:16295":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:11861:309":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8864:3450":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:20666:3497":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:12909:20207":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4743:13238":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:43198:8730":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:42364:8683":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"0:10:1626":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"16:2261:15189":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:38812:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:5896:2623":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"14:187:15158":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11143:2651":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:5722:13904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12307:19483":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4871:13252":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:6816:33444":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:2300:2771":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:4164:2916":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6567:16170":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:3389:3218":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:13039:20218":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:42690:8698":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:5660:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11500:19433":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:9577:16340":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:10680:2975":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:31689:3424":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12103:19469":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}