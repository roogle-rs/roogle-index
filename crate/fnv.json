{"root":"0:0:1971","crate_version":"1.0.7","includes_private":false,"index":{"2:8580:2967":{"id":"2:8580:2967","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13119:3351":{"id":"2:13119:3351","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15669:2099"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:48983:3315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5762":{"id":"5:5762","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5582:1300","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5763:57445","5:5764:2415","5:5767:57446","5:5770:57447","5:5782:57448","5:5783:57449","5:5784:2437","5:5785:51554","5:5786:51555"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3080:141":{"id":"2:3080:141","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3082:2259"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12178:3516":{"id":"2:12178:3516","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12179:2270","2:12180:56668"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2780-0:20:1540":{"id":"b:2:2780-0:20:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:92","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:2169"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4602:2406":{"id":"1:4602:2406","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4603:52180","1:4604:36555","1:4605:52181","1:4606:52182"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10274:2209":{"id":"2:10274:2209","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10275:138","2:10276:29911","2:10277:53850"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10035:2924":{"id":"2:10035:2924","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10036:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13140:2265":{"id":"2:13140:2265","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15669:2099","`None`":"2:47055:158","self::pattern":"2:12731:2976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5681:2347":{"id":"1:5681:2347","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5682:52268"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13100:56789":{"id":"2:13100:56789","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15674:2104"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2865:159":{"id":"2:2865:159","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:388","2:2867:2255","2:2868:2256","2:2869:2257"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3276:2502":{"id":"2:3276:2502","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3278:242"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13209:56809":{"id":"2:13209:56809","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15669:2099","self::pattern":"2:12731:2976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3621:3406":{"id":"2:3621:3406","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3552:3405","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13156:56794":{"id":"2:13156:56794","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12731:2976","str::split":"1:15674:2104","str::split_terminator":"1:15674:2104","prim@char":"1:15669:2099"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49081:3321","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3908:1385":{"id":"2:3908:1385","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45621:2372","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13103:54020":{"id":"2:13103:54020","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12202:3474"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:27":{"id":"0:27","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_str","write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_i128","write_i16","write_u128","write_u16"],"trait":{"kind":"resolved_path","inner":{"name":"Hasher","id":"2:10239:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:28:622","0:29:1546"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13165:56795":{"id":"2:13165:56795","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13094":{"id":"2:13094","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12191:1300","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13095:761","2:13096:2266","2:13097:56787","2:13098:56788","2:13100:56789","2:13103:54020","2:13104:56790","2:13105:279","2:13106:50532","2:13107:50528","2:13109:50529","2:13111:50530","2:13113:50531","2:13115:2573","2:13116:56791","2:13117:50552","2:13118:50553","2:13119:3351","2:13120:3005","2:13121:1547","2:13122:28775","2:13123:28765","2:13124:3863","2:13125:56792","2:13126:28760","2:13127:50569","2:13130:50570","2:13133:50571","2:13136:2305","2:13140:2265","2:13144:50560","2:13147:28632","2:13150:50563","2:13153:56793","2:13156:56794","2:13159:50565","2:13162:50567","2:13165:56795","2:13168:56796","2:13171:2183","2:13174:56797","2:13177:56798","2:13180:56799","2:13183:56800","2:13185:56801","2:13187:56802","2:13189:56803","2:13190:56804","2:13191:56805","2:13194:56806","2:13197:11261","2:13200:50572","2:13203:56807","2:13206:56808","2:13209:56809","2:13212:3180","2:13214:3509","2:13215:50450","2:13216:50451","2:13217:50452","2:13218:56810","2:13220:2483","2:13221:56811"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:22692:12721":{"id":"2:22692:12721","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22693:56065","2:22694:56066","2:22695:56067"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22685:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13190:56804":{"id":"2:13190:56804","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2785:50425":{"id":"2:2785:50425","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3090:204":{"id":"2:3090:204","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3092:119","2:3093:1372"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3260:2877":{"id":"2:3260:2877","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3262:163","2:3263:529"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3481:2537":{"id":"2:3481:2537","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:163","2:3484:721"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:5518:3528":{"id":"5:5518:3528","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5520:163","5:5521:29752"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8066:2905":{"id":"2:8066:2905","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8068:2317"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6579:2345":{"id":"1:6579:2345","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6580:54024","1:6581:53893","1:6582:53894","1:6583:53896","1:6584:53895","1:6585:53897","1:6586:53898","1:6587:53900","1:6588:53901","1:6589:53904","1:6590:53905","1:6591:53906","1:6592:53907","1:6593:53908","1:6594:53909","1:6595:53902","1:6596:53903"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6755:2334":{"id":"1:6755:2334","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6756:53803"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7631:3096":{"id":"2:7631:3096","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7632:56204","2:7633:56205","2:7634:56202","2:7635:56200","2:7636:56206","2:7637:56203","2:7638:56201"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:98","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3331:2862":{"id":"2:3331:2862","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13118:50553":{"id":"2:13118:50553","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15674:2104"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3644:3019":{"id":"2:3644:3019","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3646:52996"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13106:50532":{"id":"2:13106:50532","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15683:2113"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3110-0:20:1540":{"id":"b:2:3110-0:20:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:651"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8116:2235":{"id":"2:8116:2235","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8118:2267","2:8120:2268","2:8121:2269"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13133:50571":{"id":"2:13133:50571","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15669:2099","self::pattern":"2:12731:2976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13197:11261":{"id":"2:13197:11261","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12731:2976","prim@char":"1:15669:2099"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:622":{"id":"0:28:622","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:1546":{"id":"0:29:1546","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4527:2361":{"id":"1:4527:2361","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4528:2717","1:4529:54782","1:4531:54783","1:4532:54784","1:4533:2403","1:4534:54785","1:4535:54671","1:4537:54786","1:4538:2294","1:4539:1547","1:4540:2277","1:4542:2289"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3716:2875":{"id":"2:3716:2875","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3185:198":{"id":"2:3185:198","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13189:56803":{"id":"2:13189:56803","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13130:50570":{"id":"2:13130:50570","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15669:2099","self::pattern":"2:12731:2976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22543:2382":{"id":"2:22543:2382","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22533:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13177:56798":{"id":"2:13177:56798","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15669:2099","str::rmatch_indices":"1:15674:2104","`DoubleEndedIterator`":"2:8151:112","self::pattern":"2:12731:2976"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49163:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13095:761":{"id":"2:13095:761","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15669:2099"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3124:119":{"id":"2:3124:119","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38398:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:3409:2416":{"id":"2:3409:2416","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:516"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2834:116":{"id":"2:2834:116","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13126:28760":{"id":"2:13126:28760","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49305:3332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3292:2895":{"id":"2:3292:2895","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3294:1072"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13127:50569":{"id":"2:13127:50569","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:12731:2976","prim@char":"1:15669:2099"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3177:192":{"id":"2:3177:192","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3182:2231":{"id":"2:3182:2231","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5543:2385":{"id":"1:5543:2385","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5544:54085","1:5545:3614"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13124:3863":{"id":"2:13124:3863","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49267:2414","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:2232-0:20:1540":{"id":"a:2:3218:2232-0:20:1540","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2232","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6090:202":{"id":"5:6090:202","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6091:2329"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3288:2893":{"id":"2:3288:2893","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3290:530"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5549:2387":{"id":"1:5549:2387","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5550:4259","1:5551:54020"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13125:56792":{"id":"2:13125:56792","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49277:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8302:149":{"id":"2:8302:149","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8303:2270","2:8304:890","2:8305:2272","2:8306:468","2:8308:2273","2:8311:2274","2:8312:2275","2:8313:2276","2:8314:2277","2:8316:2278","2:8318:2279","2:8319:2280","2:8321:809","2:8324:2281","2:8331:2282","2:8333:2283","2:8336:2284","2:8337:2285","2:8338:2286","2:8340:2287","2:8342:2288","2:8345:1268","2:8346:2289","2:8347:2290","2:8351:1563","2:8354:2291","2:8355:2292","2:8356:2293","2:8358:2294","2:8359:1565","2:8361:2295","2:8364:2296","2:8366:2297","2:8376:2298","2:8391:2299","2:8393:2300","2:8397:2301","2:8406:2302","2:8409:2303","2:8411:2304","2:8414:252","2:8421:269","2:8428:2305","2:8435:2306","2:8444:2307","2:8454:983","2:8461:2308","2:8468:2255","2:8469:2256","2:8470:2309","2:8482:2310","2:8489:2311","2:8501:2312","2:8508:2313","2:8509:2314","2:8514:2315","2:8517:1564","2:8520:2316","2:8521:2317","2:8523:2318","2:8525:388","2:8528:2319","2:8531:966","2:8534:2320","2:8537:575","2:8540:2321","2:8543:875","2:8545:794","2:8547:760","2:8549:683","2:8551:666","2:8553:2322","2:8554:2323","2:8562:2324"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13122:28775":{"id":"2:13122:28775","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15674:2104"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49287:3330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3335:2864":{"id":"2:3335:2864","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3337:328"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5786:51555":{"id":"5:5786:51555","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15674:2104"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6353:2476":{"id":"1:6353:2476","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6354:53827","1:6355:36703","1:6356:53828","1:6357:53829","1:6358:53830","1:6359:53831"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13174:56797":{"id":"2:13174:56797","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:15669:2099","`DoubleEndedIterator`":"2:8151:112","self::pattern":"2:12731:2976","str::matches":"1:15674:2104"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49235:3328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26:1544":{"id":"0:26:1544","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10037:2925":{"id":"2:10037:2925","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10038:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5671:2346":{"id":"1:5671:2346","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5672:54342","1:5673:54343","1:5674:54344","1:5675:54345"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13180:56799":{"id":"2:13180:56799","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8151:112","str::match_indices":"1:15674:2104","prim@char":"1:15669:2099","self::pattern":"2:12731:2976"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49181:3325","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3343:2868":{"id":"2:3343:2868","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1194"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13187:56802":{"id":"2:13187:56802","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5763:57445":{"id":"5:5763:57445","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2236","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7774:3532","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2236","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7774:3532","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3272:2887":{"id":"2:3272:2887","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:163","2:3274:881"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1075:2481":{"id":"1:1075:2481","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:2326","1:1077:3509","1:1078:51554","1:1079:51555","1:1080:50450","1:1081:50451","1:1082:50452"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13206:56808":{"id":"2:13206:56808","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12731:2976","prim@char":"1:15669:2099"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13203:56807":{"id":"2:13203:56807","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15669:2099","self::pattern":"2:12731:2976"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5514:3526":{"id":"5:5514:3526","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5516:163","5:5517:405"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3189:199":{"id":"2:3189:199","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6757:2338":{"id":"1:6757:2338","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6758:54598"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3304:2651":{"id":"2:3304:2651","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306:163","2:3307:325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5767:57446":{"id":"5:5767:57446","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13214:3509":{"id":"2:13214:3509","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2799:98":{"id":"2:2799:98","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2800:382","2:2801:384"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10016:103":{"id":"2:10016:103","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10017:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9036:2662":{"id":"2:9036:2662","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7669:2631":{"id":"1:7669:2631","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7670:53781"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13113:50531":{"id":"2:13113:50531","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:24:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13150:50563":{"id":"2:13150:50563","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:15669:2099","self::pattern":"2:12731:2976","`DoubleEndedIterator`":"2:8151:112","str::split":"1:15674:2104"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49031:3290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3325:2859":{"id":"2:3325:2859","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3327:163","2:3328:1196"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5615:2342":{"id":"1:5615:2342","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5616:53730","1:5617:53732","1:5618:53731","1:5619:53733"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1971":{"id":"0:0:1971","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:20:1540","0:30:1551","0:31:1553","0:34:1557"]}},"a:2:3189:199-0:20:1540":{"id":"a:2:3189:199-0:20:1540","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:199","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:9193:2379":{"id":"1:9193:2379","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9194:53785","1:9195:53786","1:9196:53787","1:9197:53788","1:9198:3362","1:9199:36076","1:9200:53784"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2565:119":{"id":"1:2565:119","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:53885","1:2568:2082","1:2569:54990","1:2570:54991"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10016:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10023:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:30:1551":{"id":"0:30:1551","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BuildHasherDefault","id":"2:10279:1535","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:3125:1372":{"id":"2:3125:1372","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47182:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13168:56796":{"id":"2:13168:56796","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3112:651":{"id":"2:3112:651","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10033:171":{"id":"2:10033:171","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10034:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3319:2856":{"id":"2:3319:2856","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3321:163","2:3322:1193"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13171:2183":{"id":"2:13171:2183","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15669:2099","self::pattern":"2:12731:2976","`DoubleEndedIterator`":"2:8151:112","str::matches":"1:15674:2104"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49217:3327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13136:2305":{"id":"2:13136:2305","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47055:158","prim@char":"1:15669:2099","self::pattern":"2:12731:2976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:123":{"id":"2:3426:123","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:351"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:124","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6681:2486":{"id":"1:6681:2486","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6682:52277","1:6683:52278"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2829:165":{"id":"2:2829:165","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2831:575","2:2832:875"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:24:59":{"id":"0:24:59","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3420:2233":{"id":"2:3420:2233","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4600:2969":{"id":"2:4600:2969","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4601:2270","2:4602:55690","2:4603:2272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3245:2501":{"id":"2:3245:2501","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:163","2:3248:241"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8107:143":{"id":"2:8107:143","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8108:2270","2:8109:2271","2:8110:736"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9966:2362":{"id":"2:9966:2362","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9967:1484","2:9968:56342","2:9970:52034"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4584:2362":{"id":"1:4584:2362","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4585:1546","1:4586:52030","1:4588:52031","1:4589:3785","1:4590:52032","1:4591:52033","1:4592:52034","1:4601:2294"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3119:119":{"id":"2:3119:119","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:3120:1373":{"id":"2:3120:1373","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47182:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13144:50560":{"id":"2:13144:50560","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:15669:2099","`DoubleEndedIterator`":"2:8151:112","self::pattern":"2:12731:2976","str::split_whitespace":"1:15674:2104","str::rsplit":"1:15674:2104"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49013:2413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3116-0:20:1540":{"id":"b:2:3116-0:20:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:119","2:3120:1373"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13162:50567":{"id":"2:13162:50567","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15669:2099","str::splitn":"1:15674:2104","self::pattern":"2:12731:2976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49135:3294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5770:57447":{"id":"5:5770:57447","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3121-0:20:1540":{"id":"b:2:3121-0:20:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:141","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:119","2:3125:1372"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3012:2974":{"id":"2:3012:2974","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3011:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3155:108":{"id":"2:3155:108","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13096:2266":{"id":"2:13096:2266","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10632:194":{"id":"2:10632:194","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10634:163","2:10635:50528","2:10636:50529","2:10637:50530","2:10638:50531","2:10639:721","2:10640:722"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10623:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5623:2343":{"id":"1:5623:2343","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5624:50430","1:5625:54522","1:5626:54523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3187:100":{"id":"2:3187:100","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:98","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3429:124":{"id":"2:3429:124","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3431:163","2:3432:352"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3423:122":{"id":"2:3423:122","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:350"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3426:123","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3109:2259":{"id":"2:3109:2259","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3083:127"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2875:166":{"id":"2:2875:166","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2877:966","2:2878:794","2:2879:760","2:2880:683","2:2881:666"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13185:56801":{"id":"2:13185:56801","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10239:138":{"id":"2:10239:138","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10240:622","2:10241:1546","2:10242:2242","2:10243:2243","2:10244:2244","2:10245:2245","2:10246:2246","2:10247:2247","2:10248:2248","2:10249:2249","2:10250:2250","2:10251:2251","2:10252:2252","2:10253:2253","2:10254:2254","2:10255:1484"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3266:2884":{"id":"2:3266:2884","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3268:163","2:3269:1071"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5693:2350":{"id":"1:5693:2350","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:50430"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3633:203":{"id":"2:3633:203","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:163","2:3635:3019","2:3636:656","2:3637:343"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3638:129","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:203","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13097:56787":{"id":"2:13097:56787","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3904:67":{"id":"2:3904:67","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3905:1385"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:4609:2409":{"id":"1:4609:2409","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4610:53599","1:4611:53600","1:4612:53601","1:4614:2408","1:4615:53602","1:4617:50560","1:4618:3863"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4527:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3177:192-0:20:1540":{"id":"a:2:3177:192-0:20:1540","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:192","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13444:130":{"id":"2:13444:130","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13445:163","2:13446:982"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10023:111":{"id":"2:10023:111","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10024:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6684:2477":{"id":"1:6684:2477","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6685:52164"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3077:72":{"id":"2:3077:72","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3079:2258"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10027:2922":{"id":"2:10027:2922","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10028:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12761:2980":{"id":"2:12761:2980","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8103:128":{"id":"2:8103:128","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8105:654"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:34:1557":{"id":"0:34:1557","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"1:2027:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:30:1551","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:3348:2871":{"id":"2:3348:2871","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3350:1197"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12741:2977":{"id":"2:12741:2977","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12743:2979","2:12744:56456","2:12745:56457","2:12746:56458","2:12747:56460","2:12748:56459","2:12749:56461"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13218:56810":{"id":"2:13218:56810","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15669:2099"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49312:3333","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3638:129":{"id":"2:3638:129","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3640:657"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:203","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3309:2652":{"id":"2:3309:2652","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3311:163","2:3312:327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13121:1547":{"id":"2:13121:1547","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:48999:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23386:3077":{"id":"2:23386:3077","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23387:3118"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23382:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5637:2345":{"id":"1:5637:2345","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5638:55073","1:5639:52268","1:5640:50430","1:5641:55074","1:5642:2782","1:5643:2783","1:5644:55075","1:5645:1264","1:5646:55076","1:5647:55077","1:5648:55078","1:5649:55079","1:5650:55080","1:5651:55081","1:5652:55082","1:5653:55083"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3255:2880":{"id":"2:3255:2880","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3257:163","2:3258:860"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13217:50452":{"id":"2:13217:50452","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13212:3180":{"id":"2:13212:3180","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12670:2600","`FromStr`":"2:12670:2600"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47182:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12670:2600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12670:2600","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3218:2232":{"id":"2:3218:2232","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8577:2536":{"id":"2:8577:2536","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8151:112":{"id":"2:8151:112","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8152:2260","2:8153:2261","2:8154:2262","2:8155:2263","2:8159:2264","2:8162:2265"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12756:2975":{"id":"2:12756:2975","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12758:2260","2:12759:55738","2:12760:55739"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12750:2979","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3086:205":{"id":"2:3086:205","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088:119","2:3089:1373"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13098:56788":{"id":"2:13098:56788","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3314:2653":{"id":"2:3314:2653","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3316:163","2:3317:330"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13183:56800":{"id":"2:13183:56800","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13153:56793":{"id":"2:13153:56793","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15674:2104","self::pattern":"2:12731:2976","prim@char":"1:15669:2099","`DoubleEndedIterator`":"2:8151:112","str::rsplit_terminator":"1:15674:2104"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49063:3320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9036:2662-0:20:1540":{"id":"a:2:9036:2662-0:20:1540","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9036:2662","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13111:50530":{"id":"2:13111:50530","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13109:50529":{"id":"2:13109:50529","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47055:158"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:26:1544"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12670:2600":{"id":"2:12670:2600","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12671:118","2:12672:54952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3074:73":{"id":"2:3074:73","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3076:280"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13915:2490":{"id":"2:13915:2490","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13916:54540","2:13917:54541","2:13918:54542","2:13919:54543","2:13920:54544","2:13921:54545","2:13922:2294"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3297:2851":{"id":"2:3297:2851","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3298:163","2:3299:921"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8176:2234":{"id":"2:8176:2234","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8177:761","2:8178:2266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13459:142":{"id":"2:13459:142","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13460:163","2:13461:142","2:13462:735"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9037:2661-0:20:1540":{"id":"a:2:9037:2661-0:20:1540","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9037:2661","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6753:2337":{"id":"1:6753:2337","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6754:55122"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13843:133":{"id":"2:13843:133","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13844:253","2:13845:491","2:13846:256","2:13847:1048"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13104:56790":{"id":"2:13104:56790","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5685:2348":{"id":"1:5685:2348","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5686:54774"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6451:2472":{"id":"1:6451:2472","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6452:54397","1:6453:54398"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8584:3095":{"id":"2:8584:3095","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7631:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9037:2661":{"id":"2:9037:2661","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5631:2344":{"id":"1:5631:2344","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5632:50430","1:5633:52169"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3485:3069":{"id":"2:3485:3069","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:722"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3481:2537","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3083:127":{"id":"2:3083:127","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3085:651"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22737:3119":{"id":"2:22737:3119","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23386:3077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22728:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5785:51554":{"id":"5:5785:51554","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15674:2104"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:772:201":{"id":"5:772:201","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:2326","5:774:2327","5:775:2328"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10031:2923":{"id":"2:10031:2923","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10032:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13221:56811":{"id":"2:13221:56811","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15669:2099"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49330:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13117:50552":{"id":"2:13117:50552","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15674:2104"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5783:57449":{"id":"5:5783:57449","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8069:196","`Box<str>`":"5:421:2236"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2236","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7774:3532","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2777:3017":{"id":"2:2777:3017","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2779:50425"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:92","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3552:3405":{"id":"2:3552:3405","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3554:55719","2:3555:55720","2:3556:50569"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13123:28765":{"id":"2:13123:28765","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15674:2104"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49296:3331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6845:2357":{"id":"1:6845:2357","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6846:52170"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3463:3097":{"id":"2:3463:3097","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:213","2:3466:188","2:3467:56386"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13215:50450":{"id":"2:13215:50450","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13200:50572":{"id":"2:13200:50572","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12731:2976","prim@char":"1:15669:2099"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10229:134":{"id":"2:10229:134","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10230:685","2:10232:54611"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13115:2573":{"id":"2:13115:2573","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3481:2537","`str`":"1:15674:2104","str::slice_mut_unchecked":"1:15674:2104"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13216:50451":{"id":"2:13216:50451","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13191:56805":{"id":"2:13191:56805","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12731:2976","prim@char":"1:15669:2099"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12761:2980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13116:56791":{"id":"2:13116:56791","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15674:2104","crate::ops::IndexMut":"2:3485:3069","str::slice_unchecked":"1:15674:2104"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2774:92":{"id":"2:2774:92","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2776:2169"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3339:2866":{"id":"2:3339:2866","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:331"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3186:197":{"id":"2:3186:197","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:20:1540":{"id":"0:20:1540","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:25","a:2:3218:2232-0:20:1540","a:2:3177:192-0:20:1540","a:2:9036:2662-0:20:1540","a:2:9037:2661-0:20:1540","a:2:3189:199-0:20:1540","b:2:3121-0:20:1540","b:2:2783-0:20:1540","b:2:3106-0:20:1540","b:2:3116-0:20:1540","b:2:3906-0:20:1540","b:2:3110-0:20:1540","b:2:2780-0:20:1540","0:23","0:27"]}},"2:3280:2504":{"id":"2:3280:2504","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3282:1316"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13159:50565":{"id":"2:13159:50565","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:12731:2976","prim@char":"1:15669:2099","str::rsplitn":"1:15674:2104"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49117:3293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13120:3005":{"id":"2:13120:3005","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15669:2099"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:48989:3316","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8070:2907":{"id":"2:8070:2907","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8072:2318"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13194:56806":{"id":"2:13194:56806","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15669:2099","self::pattern":"2:12731:2976"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2783-0:20:1540":{"id":"b:2:2783-0:20:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:3017","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:50425"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6331:2477":{"id":"1:6331:2477","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6332:2782","1:6333:2783","1:6334:52163","1:6335:54690","1:6337:54694","1:6339:54691","1:6340:54692","1:6342:54693"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3284:2891":{"id":"2:3284:2891","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3286:861"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3679:2874":{"id":"2:3679:2874","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13107:50528":{"id":"2:13107:50528","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47055:158"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13220:2483":{"id":"2:13220:2483","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15669:2099"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49321:2484","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3906-0:20:1540":{"id":"b:2:3906-0:20:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:67","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1385"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13147:28632":{"id":"2:13147:28632","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12731:2976","prim@char":"1:15669:2099"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12523:3287","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4887:2457":{"id":"1:4887:2457","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4888:2511","1:4889:54942"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2782:2169":{"id":"2:2782:2169","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3106-0:20:1540":{"id":"b:2:3106-0:20:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:141","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:2259"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5764:2415":{"id":"5:5764:2415","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3250:2503":{"id":"2:3250:2503","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3252:163","2:3253:1315"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10025:2921":{"id":"2:10025:2921","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10026:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:31:1553":{"id":"0:31:1553","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:1302:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:30:1551","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:13105:279":{"id":"2:13105:279","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15674:2104","`u8`":"1:15683:2113"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3396:109":{"id":"2:3396:109","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:200","2:3398:514"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5782:57448":{"id":"5:5782:57448","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10029:2915":{"id":"2:10029:2915","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10030:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12750:2979":{"id":"2:12750:2979","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12752:2998","2:12753:890","2:12754:56609","2:12755:56610"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5784:2437":{"id":"5:5784:2437","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:50698:3130":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10211:43750":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"12:2039:2649":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:49013:2413":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:1500:89":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:5580:4154":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:11153:2773":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:6176:3985":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11555:4594":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11816:4652":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:10140:4305":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:2159:2271":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:47812:2922":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:8070:2907":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4387:39861":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:4304:42534":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12442:48561":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:4120:39835":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:8580:2967":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:610:36836":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:48085:66":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:23715:3183":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:620:59746":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:3978:39818":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:14627:4530":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:6464:3928":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:9378:2789":{"crate_id":1,"path":["std","sys_common","condvar","Condvar"],"kind":"struct"},"2:46251:3038":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:47113:2271":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:7295:3933":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5292:40472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:14483:2388":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:49729:3344":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2866:4173":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:1518:2522":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2429:2970":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:10742:2643":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:11743:163":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:1438:2271":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:48189:71":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4066:39829":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:7999:3611":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:3077:72":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:3116:2403":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:10558:43895":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:10016:103":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:5864:2830":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"12:761:2512":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:7783:2271":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:6090:202":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:3249:2725":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:1547:37714":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:47156:3418":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"10:0:2072":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:7226:4011":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:5167:40462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7333:3934":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:49609:2994":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:5561:3967":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:10146:56446":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:46558:2440":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:10500:3646":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:6591:53906":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:3041:4177":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:47444:77":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:15685:2115":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:3918:39813":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:3155:108":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:45680:3226":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:3966:39817":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:4879:3241":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:1433:2528":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:8147:2516":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:50675:3142":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13637:49725":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:10369:2671":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:5360:3957":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:13459:142":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"9:469:4604":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"7:0:1435":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:3481:2512":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9839:4305":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:744:59737":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:22334:56665":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:14269:2355":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:11737:2624":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:46003:3499":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:3485:3069":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:3108:120":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6269:3989":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:15174:3843":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:14329:54083":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:632:36839":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3233:2720":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:3159:108":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"2:45943:3495":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:10623:2360":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:3195:2488":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:1219:3638":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:3488:4185":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:49757:113":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:24414:3381":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4494:39873":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:547:4156":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:48913:3306":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:13843:133":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13062:49165":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"12:866:2515":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:4350:42555":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:49733:3343":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:1522:37710":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:2183:2649":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:7981:96":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:1488:2517":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:8176:2234":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"9:686:3679":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"5:7310:3588":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:3255:2880":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:13446:49695":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12598:48572":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:13756:3355":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:6684:2477":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:5456:3962":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:4569:3065":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:5324:3114":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:4890:42695":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:12946:49109":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:22281:56629":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:6744:4211":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:10420:4329":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:2395:8539":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:31943:2492":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13154:49171":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:45960:2484":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:15671:2101":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:11798:53595":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:14295:121":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:53146:18275":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:32107:55394":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:3426:123":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:10941:2459":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"5:1000:2511":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11458:44091":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:14244:2487":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"18:782:59731":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"15:269:3839":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:8902:43672":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:8680:2665":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"17:10224:43756":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11030:119":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:8107:143":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:6095:2778":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"12:1118:2526":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9943:59225":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:8164:3583":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:9849:59649":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11406:44082":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"12:1100:2525":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:781:102":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:4:948":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:3650:3021":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12632:48635":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:3409:2416":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:3552:3405":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:6614:36783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:9799:43683":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:49277:3329":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6214:40891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:12195:48544":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:3591:2425":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:896:4371":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:50948:55284":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:12480:4527":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:900:2676":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:650:4372":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:3235:2721":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:4834:2933":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:537:36828":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6591:3997":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:8092:3522":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:4545:2404":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:8103:128":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13898:49799":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:47570:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11147:2829":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:1658:37724":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:23778:35739":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:12750:2979":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"14:216:41986":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:696:2670":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:9186:4279":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:1472:2515":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:3195:4179":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:49445:2987":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2113:31873":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:11849:2511":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:46321:3047":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"14:231:3524":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:48832:3300":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:53031:18270":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:23551:3372":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:3548:4471":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:2690:550":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:9038:2685":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:9528:2411":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7514:3935":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:5855:3978":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10128:4347":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:3772:42102":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4133:39837":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:50581:55285":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:13660:54642":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:4823:42678":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12051:48473":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:10037:2925":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:2108:549":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:4477:42582":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:14707:2627":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:3603:3654":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:2166:2516":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:55735:3066":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:12412:3319":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:46331:3048":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:5421:3960":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8356:2553":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:3172:4178":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13547:49710":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:24142:3376":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:55748:3066":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7279:4222":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:3284:2891":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:1157:7535":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8061:4502":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"12:1667:3826":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:3320:4236":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:13964:2434":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:5753:3974":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:599:36834":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7250:4013":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6718:4209":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:53005:18268":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:10479:8545":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:1396:2525":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:7867:55211":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"12:377:3819":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12582:48571":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"12:840:2513":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:6176:40888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:8014:3412":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:15687:2117":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:8151:112":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:7236:4012":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10468:4303":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:49181:3325":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11809:44597":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:10659:2423":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:3953:187":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:22533:2360":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:1604:176":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:7174:4006":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:4215:39843":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:9809:59660":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:23382:2360":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:2889:4192":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:4015:2512":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:4762:3235":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:2458:8557":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:9592:120":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:11756:2626":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5185:40463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:3241:4181":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:22537:2380":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11190:10857":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:5303:7538":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:3463:3097":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:11932:48363":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9574:4299":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:10033:171":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13497:49702":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:7492:4483":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:3113:2717":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:5295:42057":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5282:40471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6185:40889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:136:50170":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:50804:55396":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:6825:2339":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:7509:2620":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6126:3983":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7303:4014":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:49745:3346":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:9971:59644":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"12:949:2522":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"12:469:58856":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10331:4305":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:49321:2484":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:46219:55214":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"12:160:3816":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:5623:2343":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"12:1651:3825":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:10903:3287":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:4382:4474":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:2829:165":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:5848:2827":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:57005:55402":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:1665:37725":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:52970:18265":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13810:49768":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5548:40513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:7789:3603":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:3506:4184":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4410:39864":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:3392:4189":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:13640:56607":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:3218:4180":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:9296:4578":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:13520:49705":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"12:968:2523":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:1736:37732":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:52959:18264":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:644:4375":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:1619:2525":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:10855:2439":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:1744:37733":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:6227:3037":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:12756:2975":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"9:996:3747":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:3145:2647":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10081:4290":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6858:40000":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:11994:2497":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:13308:53540":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:670:36868":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:11407:2595":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:10448:4252":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:12523:3287":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:52892:3161":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:11087:2762":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12712:48641":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10950:43979":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:3011:2360":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13772:49764":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:9966:2362":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:4609:2409":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:48805:3297":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:49163:3324":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"14:194:41978":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:49972:150":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:4600:2969":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12275:48550":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:24244:3378":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:10095:4344":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:12982:49110":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:11108:3294":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:7543:2622":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:12478:2715":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:7158:4005":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:3287:4183":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:10632:194":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:53016:18269":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:421:2236":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10041:43738":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:8000:2703":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:49599:2993":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13377:49347":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10912:43968":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:1041:2475":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:8787:2795":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:2433:8550":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:11186:2485":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:2484:43784":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:510:43669":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:69:3582":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:50890:3135":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:10905:2366":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:5543:2385":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:14319:2405":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:10862:2441":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:9133:43678":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:5274:40470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:14871:2568":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:1527:37711":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"18:766:59742":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:24448:3382":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:0:766":{"crate_id":6,"path":["libc"],"kind":"module"},"5:3137:2649":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:2634:3642":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:11135:2459":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6577:3996":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:13682:2625":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:14042:2682":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4183:39840":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4478:39872":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:12034:2499":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:7669:2631":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:15667:2097":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4193:39841":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:23287:2381":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:3187:100":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:12956:36037":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"16:6731:4210":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:1558:2513":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:169:50172":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:5736:3973":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:6106:40885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:10871:2405":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:51636:3153":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:6845:2357":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10317:4296":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:5969:36705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:49235:3328":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12659:48637":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:46210:3034":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"12:2018:2516":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:5469:40485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:5522:3966":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:49537:2990":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:1149:7532":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:636:59731":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:10611:43898":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10611:2356":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:6681:2486":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7453:3916":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:10928:2413":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:48374:138":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:0:461":{"crate_id":2,"path":["core"],"kind":"module"},"17:12208:48545":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:5191:40464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:47819:2921":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:9440:4582":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8248:2703":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:11871:2554":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:8256:2590":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:11159:43690":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:8080:3521":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"12:0:2074":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:6155:40887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9769:59589":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:21:642":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:51452:55417":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:10472:2530":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:5029:42734":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:3348:2871":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"9:749:3683":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:1179:57594":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:9976:126":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:157:36515":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"18:610:4373":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:7360:176":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:46549:31292":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:3997:39820":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:9037:2661":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:7121:4471":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11199:4589":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:46242:3040":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:5472:3963":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:31768:3444":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13933:49807":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:9545:81":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"12:556:135":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13506:49703":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:52806:3123":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:2027:137":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10435:43795":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:1586:2518":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:1018:2703":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:14886:2569":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4023:39823":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:1428:2512":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4317:39852":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:616:36837":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:3529:2422":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:11094:3293":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:660:4376":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11665:44415":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:3266:2884":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:2912:4174":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11640:44413":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:10643:110":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:1199:3637":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:14479:8552":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:5567:3028":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:1302:135":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:1410:2527":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:9577:4521":{"crate_id":1,"path":["std","sys_common","rwlock","MovableRwLock"],"kind":"struct"},"6:3881:39810":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:23386:3077":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:4908:2563":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"19:0:963":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:3339:2866":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:829:4366":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"12:877:2516":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4425:39866":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:3276:2502":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:15676:2106":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13912:49805":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12040:48472":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:4417:42572":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:10458:43796":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:52990:18267":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:45935:3334":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:11835:44611":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:52853:3141":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10061:43755":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:2418:3643":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:13644:2623":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:5241:40447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:15026:2760":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:24278:2707":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:3679:2874":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"12:976:2524":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:783:4522":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:10922:2411":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6136:3955":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:3325:2859":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:375:3610":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:9516:2754":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:3110:2716":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:9128:2660":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"1:4293:2432":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:3420:2233":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"0:30:1551":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"2:3633:203":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:1236:43753":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9759:43682":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11767:44592":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:8929:43673":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:4492:2395":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:5350:747":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:3638:129":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:11257:2580":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:5384:3958":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:2171:2647":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13386:49664":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:9317:52349":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:543:36829":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:4922:42702":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13865:49775":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:51320:3125":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10673:43900":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:49905:29755":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:11093:2763":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"12:2013:2515":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1596:37719":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:51923:3137":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10864:43871":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:15004:2468":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5210:40466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:1311:4351":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:4887:2457":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"5:7964:2222":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6870:40002":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:3939:42219":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:45535:179":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:11572:44374":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:11073:10140":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"12:925:2517":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11588:44375":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:5407:40480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:48115:119":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:47612:80":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:6021:4171":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:3716:2875":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:23859:3396":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:15419:4532":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:38398:2369":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"12:2309:56065":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:12488:3326":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:3250:2503":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:11960:2794":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7119:3907":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10502:43797":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"18:774:59731":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:1075:2481":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4517:39876":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:14259:53921":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:13289:8550":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:8507:2786":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6636:3932":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:3083:127":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:6351:3539":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:161:36516":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:47276:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11714:44473":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12771:43692":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7195:4008":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:49779:2505":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"12:892:3804":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:45581:2215":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4145:39838":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4501:39874":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:3955:119":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:13494:56563":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11167:2781":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:8898:54674":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:14759:2497":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:10368:2360":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11239:10861":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:4535:42590":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:46022:3220":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12610:48586":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:912:3601":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:49574:2991":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:7804:3925":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:519:36825":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6068:37653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:3018:4176":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:49741:3345":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:4753:2673":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10028:43737":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:22596:3118":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:7971:119":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10395:2701":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:4334:2435":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12568:48570":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"0:0:1971":{"crate_id":0,"path":["fnv"],"kind":"module"},"6:6864:40001":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12028:48416":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:12741:2977":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:5554:4478":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:6348:56608":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:2834:116":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4040:39825":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10801:43867":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:6788:4483":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:8790:2616":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:2865:159":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:6910:40007":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11980:2798":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:3177:192":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11920:2557":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7146:4004":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:4164:39839":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:5221:40467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:5856:2828":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:5469:4471":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:11212:2479":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:10230:4523":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:52950:18263":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:56984:55437":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:11985:2657":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:9572:4520":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"16:7420:3936":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:45859:29248":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10477:4302":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"0:20:1540":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"2:23831:3449":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11915:48362":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"0:31:1553":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"1:11098:2764":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:4448:42578":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:11989:2658":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1602:37720":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:49330:3334":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:55670:3066":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4060:39828":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:4671:42651":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:55696:3066":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:48823:3299":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:2004:2395":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:2968:4175":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:51683:3157":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:1908:37869":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:6887:40004":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"9:603:4619":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12118:48481":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:49990:2371":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:7448:211":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:5394:2768":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:7798:2515":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:5877:2831":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13180:49215":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:12178:3516":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:49217:3327":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:6051:37650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:4824:3240":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12552:48569":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"9:234:3706":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:5693:2350":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11616:44377":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:3185:198":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:50650:3150":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:51420:55445":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13041:49111":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13788:49766":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:6644:41254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:13507:2634":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:7828:90":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11147:4586":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:48137:70":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:12373:48557":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:4593:53565":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:909:91":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:51954:3140":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:4584:2362":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13590:49715":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:7786:3926":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:10279:1535":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:5936:3587":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:2816:4191":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:49267:2414":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"12:1180:3813":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:10656:43881":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:3186:197":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:5568:4481":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:2512:4331":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:5131:3492":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:50762:3151":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:2456:5181":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:13828:4528":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:47234:2512":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4095:39832":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:48052:66":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:7387:111":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:3604:42060":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:9005:43674":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:11053:3291":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1567:2514":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12507:48566":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:47486:84":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"9:1056:3741":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4401:39863":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13394:49665":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7406:3919":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:50867:3131":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:12761:2980":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:52140:3146":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:47088:2270":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:10441:7530":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6768:4213":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:5685:2348":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:2852:162":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:6757:2338":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"19:117:59748":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"17:11847:44612":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:45558:181":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11750:44584":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12783:48712":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:8954:4281":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"0:34:1557":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"17:12155:48541":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:6579:2345":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:9158:2977":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:8349:2552":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:13746:2971":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:52347:3166":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:2202:3639":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:5815:3977":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5505:3965":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:4255:2745":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:1633:2526":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11519:44308":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:11605:3309":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13609:49717":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13465:49699":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7264:3931":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:14739:53596":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"12:1762:4469":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:3123:2511":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9551:4320":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:24380:2632":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:48076:125":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:3396:109":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5945:36746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:0:2069":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:2202:3103":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:11231:4323":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13205:49218":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:9664:4522":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:12961:36038":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:10594:2456":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:46201:3033":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11962:43903":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:1642:2527":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:6631:3533":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:7882:3558":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:31908:3404":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:6331:68":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:23738:35747":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8278:3653":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:9430:4517":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"12:2323:58860":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:1132:2373":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:0:2073":{"crate_id":11,"path":["adler"],"kind":"module"},"6:584:36832":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:1415:2511":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13477:49700":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:152:50171":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10844:4305":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:15163:3843":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"13:232:4603":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11936:2558":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4347:39856":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:5096:2395":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11628:44412":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"13:120:41932":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:55683:3066":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1651:2528":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:47174:170":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:10860:2413":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:9036:2662":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:6596:3039":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:51876:3133":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:3086:205":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12073:48474":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:7884:3923":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:13755:2624":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:47226:2511":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:14633:4531":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"12:784:2518":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:14:1546":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:11891:2555":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:46191:3032":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4073:39830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6028:37676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:3743:4271":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:23622:35723":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:6997:10860":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:48932:3308":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:14000:49850":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12645:48636":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:45853:2484":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:8652:54674":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:46567:31293":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:49393:2978":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:46280:3043":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12408:48559":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:48070:69":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:22268:2912":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:820:4522":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:11328:43692":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:10027:2922":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:2794:3903":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13348:49333":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:46072:3413":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:47105:2512":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"12:812:2519":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:3617:2424":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:7883:2666":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"12:2025:2647":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:10995:2466":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"12:112:58855":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4013:39822":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:50627:3162":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9649:43680":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:53054:18271":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11604:44376":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:45512:180":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13098:49166":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:23702:3182":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:4373:2431":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:22685:2360":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:3457:152":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:7042:4221":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:3990:39819":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13429:49694":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"12:2032:2648":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:3233:2516":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:15680:2110":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:1723:37731":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:10255:4525":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:5346:3914":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:51074:3156":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:50929:3120":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6101:3911":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:10667:2425":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"12:1200:3814":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12327:48553":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:47165:35998":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8514:2788":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:5978:40879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"13:0:2068":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:4161:2442":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:5672:3970":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:48349:2212":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:4500:2395":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7378:3920":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:10836:2512":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5975:3980":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:9368:4580":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:1422:2526":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:3272:2887":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:49462:2988":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:15651:53592":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13986:49816":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11794:44596":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:5269:40469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"14:11:41977":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13258:49262":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11045:43688":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:11030:4651":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:11434:44090":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"9:692:3681":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:49737:3347":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:9729:59213":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11993:48369":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:511:36824":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5717:3972":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11118:43689":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:14720:2498":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:6091:40883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:9245:4245":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:7951:2221":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:4995:42725":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:11865:2271":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:5488:3964":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13221:49219":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5359:40475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:3429:3904":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:10935:2414":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:2754:4165":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:8642:2664":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"1:4602:2406":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:6934:4471":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:10029:2915":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:10599:2715":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4293:39849":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:15682:2112":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:6605:3930":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:11678:44416":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:2887:58106":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:27663:2910":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:3080:141":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"12:1253:2528":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11082:4280":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:9476:4583":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:6221:40892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7870:3922":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11779:44593":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13924:49806":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:49063:3320":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:51224:3136":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:14899:2575":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12168:48542":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:13444:130":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:1617:37721":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11050:53582":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:3868:39809":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:4852:42682":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:32007:55403":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:4332:2434":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:1572:37717":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11738:44583":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10571:43896":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5953:37649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11726:44474":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:1524:2511":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:22737:3119":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6569:4206":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:10651:2738":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:49312:3333":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"9:900:41684":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:48404:4642":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:4545:3062":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:6085:40882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13760:49729":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11401:2511":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:10160:43754":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"9:963:3746":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:46163:3029":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:3549:42059":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:46262:3041":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:5433:3961":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:6366:3832":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:7810:2439":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:3423:122":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:1524:2523":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:10019:103":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:3972:39664":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:2075:4473":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:15675:2105":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:3297:2851":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:1080:4471":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2565:119":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"1:11794:53891":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:45466:176":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:1545:2271":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:48983:3315":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:11331:2591":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:13961:2432":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:7800:54638":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:51372:55434":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:15673:2103":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:50602:55413":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:11638:3310":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:11809:54678":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:49725:3342":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:294:59161":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:14496:2628":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"9:1020:3748":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:3644:3019":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"9:0:2071":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:15689:2119":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:5549:2387":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:3904:67":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"15:230:3834":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:1507:2521":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:48357:4640":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:4200:2271":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5996:3981":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10106:4345":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:5414:40481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13564:49712":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6935:41440":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:3309:2652":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:8116:2235":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:681:43671":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"9:27:3730":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:894:2675":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7549:3924":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:10968:2461":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:10529:43798":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:1493:2518":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:10462:2529":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:10403:4304":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:52979:18266":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:50002:2370":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:14611:4529":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13978:49814":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:7529:2621":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10266:4244":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12671:48638":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"7:38:41532":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:542:3891":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7342:3948":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:9961:43686":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:7738:4015":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:5400:40479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13282:49265":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:53069:18272":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"8:0:2070":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13119:49167":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:7795:2702":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:8616:154":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:14905:2576":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:1554:37715":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:12807:2983":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:605:36835":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:9065:43676":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6005:10857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:885:4370":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:46578:31295":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:49895:183":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"18:677:134":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:2155:2511":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"12:747:2511":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:3091:4235":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:2733:3887":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12431:48560":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:5978:2770":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6424:3992":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:5927:3979":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10117:4346":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4203:39842":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:3905:39812":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:2177:2648":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:49081:3321":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"12:2303:58862":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:45982:3333":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12343:48554":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12182:48543":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"12:1235:3815":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:4614:42644":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:52931:3126":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:10253:4241":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:10180:52353":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:1700:37728":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"12:1159:3812":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:12917:49108":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:51714:3160":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:7856:4018":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:13192:49217":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:4888:2934":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13942:49808":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:47318:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13799:49767":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:46181:3031":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:2182:3660":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:10938:43978":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:48173:2920":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:10179:43752":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:2723:2367":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:13598:49716":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:15139:4653":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:1497:2519":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4255:2780":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:5826:2825":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:49588:2992":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:2886:2326":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:4230:42485":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6014:3982":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:3264:4182":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13582:49714":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:5998:40881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6620:4204":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4005:39821":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:24482:3383":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:4688:2535":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"12:774:2271":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:6087:3913":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:15640:7537":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:7557:2623":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:5766:3975":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:2875:166":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:23730:35729":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:3343:2868":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:1690:37727":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6238:3918":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11822:44598":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:15684:2114":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"7:85:41539":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:88:36449":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11696:44417":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:7774:3532":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:12010:48372":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:7185:4007":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13842:49772":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:46172:3030":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:55722:3066":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3335:2864":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"18:0:2079":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7024:4220":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11026:43687":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:3183:2876":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:4157:4284":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:51043:3152":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:31955:55401":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:14282:53589":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"3:0:403":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:5269:2760":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:14264:53918":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:0:2078":{"crate_id":17,"path":["object"],"kind":"module"},"1:15668:2098":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"9:722:3682":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:3522:42058":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:46271:3042":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:5407:3959":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:837:2979":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4527:2361":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:6852:39999":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"14:189:41977":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:3365:4164":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2211:3104":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:5681:2347":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:48904:3305":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:1622:37722":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:7843:4502":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"17:12287:48551":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3074:73":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4272:39847":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11539:4590":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10827:4275":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:9567:4519":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"5:3679:4471":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13272:49264":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:9332:4297":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:5330:4574":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:5631:2344":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:13380:2609":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:2945:4197":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:7459:2956":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:22336:56661":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13884:49781":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12795:48715":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:45989:3497":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:15085:2768":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11348:2592":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:46540:2663":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4511:39875":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:15635:4654":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:7631:3096":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:15678:2108":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:3260:2877":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:4052:39827":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:53084:18273":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:45402:3098":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:12385:48558":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:48386:2590":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"9:41:3731":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:1459:2514":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4470:39871":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:5231:42911":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:5312:40473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:2318:2904":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:3012:2974":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:4224:3624":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:49958:3354":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:4152:2511":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"9:157:3698":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:7895:2703":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:49416:2981":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6636:41253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:23794:35750":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"3:300:187":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:46037:95":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5386:40478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3292:2895":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:55709:3066":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:809:2590":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:11308:2590":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:4734:42664":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:51146:3144":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:7866:3557":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:6755:2334":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:2843:4172":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"11:46:58851":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:14312:110":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:15672:2102":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:48891:3304":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:5217:3539":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12456:48562":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9896:59409":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:2134:3640":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13963:49809":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:8302:149":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:10543:43894":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:12731:2976":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:49296:3331":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:10965:2460":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"6:6124:40886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:1584:37718":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6219:3987":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:6893:40005":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:10390:2680":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:8031:3612":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6032:3906":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:1748:4471":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:1446:2513":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6072:3885":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6949:4217":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:6451:2472":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:2892:58041":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13240:49221":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:8045:3613":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:11857:2551":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:10988:43954":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:4386:42566":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:9404:4581":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:1837:2516":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"12:463:58859":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:5754:2822":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"5:3468:2511":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:12449:3322":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:22543:2382":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4377:39860":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13540:49709":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:13453:49698":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:7806:3604":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:9280:4574":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:3714:42069":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:45966:3496":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"18:857:4368":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6357:3990":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:47360:76":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:13570:29756":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11142:2826":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6999:4002":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:704:59731":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:7477:3937":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:15674:2104":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:563:36830":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7928:3951":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:49622:36039":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"17:10926:43977":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:624:36838":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:48956:3421":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6644:3998":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:11418:2596":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:46150:2366":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:12247:48548":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:9034:43675":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13780:49765":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10887:43869":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7216:4010":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12756:48649":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"12:354:58852":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9162:4322":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13331:49332":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:1530:2524":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5314:4573":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:6812:41413":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:9531:2755":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:0:1291":{"crate_id":1,"path":["std"],"kind":"module"},"2:3182:2231":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:983:3602":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:11122:3295":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10915:2410":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:46055:3412":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3251:2726":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:10031:2923":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:3481:2537":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:9193:2379":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11499:44307":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11001:43953":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4439:39868":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7571:3912":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5371:40476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:15148:53914":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:45922:3501":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:1595:2519":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:48365:2211":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6899:40006":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"9:927:41651":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10489:4306":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:578:9768":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13733:49727":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:1482:2516":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:6589:53904":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:51989:3122":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7894:3952":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:48596:3506":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:22313:56663":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:2314:4333":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:12014:2498":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6554:3995":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:3319:2856":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10304:4293":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:51272:3121":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:45450:178":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11001:2495":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:10814:4274":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:10980:3289":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:4762:42667":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13054:49163":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:37217:160":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"18:820:4365":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4331:39854":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:4008:43870":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:12471:120":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:49721:3339":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:12095:48480":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:47826:2915":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:51557:3165":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6691:3999":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6780:4000":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"12:2331:2221":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:4295:2433":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1708:37729":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:2582:52358":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"6:4371:39859":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:45897:3218":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:3539:4499":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:9600:59157":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:24312:3379":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:4641:42646":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"14:250:41985":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:7392:3921":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:23480:3370":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11391:2593":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:46533:31290":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2774:92":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:9698:3273":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:729:59734":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:50909:55406":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:8584:3095":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:7212:168":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:7517:4489":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13306:49329":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:12234:48547":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8157:2703":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:8342:184":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:7898:2271":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"14:244:41979":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:11015:3290":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:720:55414":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6964:3416":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:7612:2625":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:6252:3988":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:5228:40468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:9540:74":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:2773:4198":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:14800:2636":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:49949:3353":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:38461:2954":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"12:1855:137":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13819:49771":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:5273:4166":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:47055:158":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:9435:4518":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"5:6154:2515":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:10812:2511":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11337:4298":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:10229:134":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:12221:48546":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:12741:48648":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:46352:3049":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:10747:2426":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:2362:571":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:1533:37712":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10052:43739":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:6443:2395":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"9:1075:3749":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:3218:2232":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:1534:2512":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:10496:8552":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:3064:4234":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:46362:2958":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:3662:3022":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"12:853:2514":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:2188:3100":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2397:8540":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:5960:4161":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:2765:2368":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:4790:42670":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10407:4330":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:51247:3139":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:3152:2650":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:46042:3411":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:801:4363":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:4704:42659":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"12:2009:2271":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13532:49708":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:3951:4471":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:24210:2706":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:11975:2611":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:47402:83":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11277:43662":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:46290:3044":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:46130:9158":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:3800:42105":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:15669:2099":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:772:201":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:22296:56629":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:51097:3159":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7321:167":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:10971:2465":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:569:36831":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:7814:57641":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:49913:172":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4419:39865":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6110:3954":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:15686:2116":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:48103:101":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:10599:43897":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:6353:2476":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:3440:2421":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:45912:3500":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:23661:4628":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:14855:2567":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:47242:2271":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:2162:2515":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:739:59747":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:849:4367":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:15679:2109":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:6807:4001":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13746:49728":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:48852:3302":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:5632:3969":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4241:39845":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:8849:4319":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:6593:53908":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:13967:2430":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:7852:2271":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:46311:3046":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:46299:3045":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:4329:4474":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:10236:4250":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:23677:4634":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:47251:160":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:46120:4491":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:0:253":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:48922:3307":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:31949:3433":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:1190:7536":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:15688:2118":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:607:43670":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:24108:3375":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11015:43980":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:12537:48568":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13627:49724":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:2896:58042":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:1613:3635":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4395:39862":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:48999:2411":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:5514:3526":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:3621:3406":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:10604:2355":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12467:48563":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:9069:2659":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"17:10377:4332":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:10380:53927":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:4261:2747":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:8577:2536":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:1563:37716":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:3130:2648":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:13915:2490":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:24852:3205":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:51476:55404":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:45621:2372":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:45374:3024":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"15:248:3835":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:7858:176":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12142:48540":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:7050:2271":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:47528:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:22692:12721":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:49749:3340":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:50836:3143":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4341:39855":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5428:40483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:12670:2600":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13620:49723":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:5615:2342":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:6200:40890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5197:40465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:3892:39811":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:23824:35749":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:49510:2989":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12725:48647":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4033:39824":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:6215:2779":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:754:59741":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6491:3993":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:2093:3560":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:5459:40484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4227:39844":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:5595:3968":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12307:48552":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10071:4350":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:4281:39848":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13402:49692":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4127:39836":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:4506:42586":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:2188:2650":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:10737:2642":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:3245:2501":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:47182:187":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:46342:2410":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:1630:37723":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12494:48565":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"12:429:3817":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:48989:3316":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:9886:43684":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:48396:4641":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:4931:2935":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:4431:39867":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:10025:2921":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:24346:3380":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:4557:3064":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:51193:3132":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"14:0:2075":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9659:59169":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:7135:54672":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6208:3986":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:13574:49713":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5379:40477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7073:4003":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:48842:3301":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"12:1688:3827":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:3189:199":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7823:3927":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:8069:196":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:6682:3929":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:9933:43685":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:4258:2746":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:1729:2774":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:9423:54643":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"11:54:3802":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:7904:2271":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:15670:2100":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:6100:40884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4083:39831":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:7666:2629":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:6889:2515":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:48814:3298":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:22315:56666":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11981:43902":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12480:48564":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13172:49173":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:3118:4188":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:4371:2430":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:10023:111":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:5130:40419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:23846:3397":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9210:43679":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:8558:2789":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:3338:4163":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:48600:3507":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:3288:2893":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:3945:39814":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11653:44414":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:49431:2984":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:5707:3971":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"12:181:3820":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5159:40461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:52680:3138":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4325:39853":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:3314:2653":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"12:2315:58864":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13685:49726":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11947:48364":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:45614:3023":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:5941:171":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:51295:3124":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:3951:39815":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:51797:3145":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:8738:2806":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:3563:2417":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:7561:3113":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"14:56:44092":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:3331:2862":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:47833:2923":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11970:43901":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:10353:4334":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"12:937:2521":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"9:776:3728":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:4364:39858":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:12202:3474":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:45996:3498":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4046:39826":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4101:39833":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:866:4369":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5790:3976":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:13163:49172":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:2888:57647":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:811:4364":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:12472:3323":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:10456:7533":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:22728:2360":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:1576:2517":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:1152:7534":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46233:3035":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:5671:2346":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12521:48567":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4300:39850":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:3957:39816":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:45868:3215":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:53107:18274":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:48878:3303":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5522:40512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:6367:3552":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:49117:3293":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:11738:4497":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:11378:4276":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:2799:98":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:15683:2113":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:10239:138":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:7495:2619":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:4358:39857":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:15064:2761":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:1760:37734":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:525:36826":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:1676:37726":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12262:48549":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:49753:3341":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:15681:2111":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"18:667:4377":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:591:36833":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:49135:3294":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:50785:3155":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10505:2366":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"1:11161:2762":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11304:43691":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:9689:59352":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:12134:5181":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:24176:3377":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:10998:2467":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"6:6239:40893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:4314:212":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:7373:2278":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:7288:3587":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:48754:3292":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4112:39834":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:9703:3274":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13318:49331":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"12:1144:2527":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:5272:2761":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:10942:3288":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11358:4277":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:11254:4321":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:4459:39870":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:15691:2121":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:3261:2731":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:11904:2556":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:3205:2953":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"14:47:41977":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11786:2628":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:37241:2912":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:45881:3216":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:7166:54672":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:4998:182":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:6413:3831":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11482:44092":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:15677:2107":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:8863:2656":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:2543:4301":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:7467:3917":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:10883:2407":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"12:396:3818":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4523:39877":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:8066:2905":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:1501:2520":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:2855:161":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:299:59414":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5420:40482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6391:3991":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"15:0:2076":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:712:2912":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:50996:3164":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:8063:57670":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"12:2005:2511":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:0:2077":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:10584:4283":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:3660:2516":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:6923:41439":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:4757:3234":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5563:40514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:9719:43681":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11771:2627":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:2777:3017":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:6331:2477":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:47097:2511":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:5436:58681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:49031:3290":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:10035:2924":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:6154:3036":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:1717:37730":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12685:48639":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:5528:39724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5255:40448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13296:49267":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6152:3915":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:49287:3330":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6166:3984":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:7205:4009":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10975:43955":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:50731:3163":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:3280:2504":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:6881:40003":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4449:39869":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11186:4587":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:5637:2345":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:13807:183":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"16:7843:4017":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:15690:2120":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:9264:4573":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:4468:2440":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:47654:87":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:1540:37713":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10962:43956":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:48971:3016":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:10623:43899":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:3924:2515":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:6753:2337":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:10625:121":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:12699:48640":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"12:930:2520":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:14792:4647":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10200:43751":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4306:39851":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:14694:2626":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:3090:204":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7761:4016":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:23756:35748":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:790:4362":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:45491:177":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:2991:4186":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:22739:3118":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:5347:40474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:5518:3528":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:8721:2663":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:49792:3430":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:49305:3332":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13370:49335":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:13488:49701":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:4955:42710":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:3862:39808":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11100:4325":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13356:49334":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10635:4584":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:11136:3296":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10788:43868":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:3145:4187":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:52743:3158":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10516:4307":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6518:3994":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5987:40880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:10413:2682":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"12:2045:2650":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:13143:2775":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"18:694:4378":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9088:43677":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:23644:3187":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:10001:43736":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13554:49711":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:52601:3154":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:10279:4290":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:3304:2651":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:13535:169":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:3429:124":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:10274:2209":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:47122:3416":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:3908:2645":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:52490:3134":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:10169:43671":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:531:36827":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:55590:3073":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10149:43684":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4262:39846":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"}},"external_crates":{"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}