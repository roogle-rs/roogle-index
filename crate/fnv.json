{"root":"0:0:2228","crate_version":"1.0.7","includes_private":false,"index":{"2:12865:22392":{"id":"2:12865:22392","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39976:22350","Self::is_ascii":"2:12864:22391"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39976:22350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2426:2442":{"id":"2:2426:2442","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12769:27685":{"id":"2:12769:27685","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43899:9011","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12786:2582":{"id":"2:12786:2582","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42031:198","prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12800:22498":{"id":"2:12800:22498","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12441:9004","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::split":"2:12794:22494"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43947:8989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:3324":{"id":"2:12874:3324","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4672:3324"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44237:3325","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1803"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:10:1799":{"id":"0:10:1799","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:32527:2500-0:10:1799","a:2:42157:3337-0:10:1799","a:2:42158:3632-0:10:1799","a:2:2949:254-0:10:1799","a:2:32445:244-0:10:1799","b:2:2737-0:10:1799","b:2:2424-0:10:1799","b:2:2742-0:10:1799","b:2:3496-0:10:1799","b:2:2731-0:10:1799","b:2:2427-0:10:1799","b:2:2727-0:10:1799","0:17","0:13"]}}},"0:20:1811":{"id":"0:20:1811","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10141:1794","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12765:29734":{"id":"2:12765:29734","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12040:1537","str::slice_mut_unchecked":"2:12766:29735","crate::ops::Index":"2:39607:3376"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:29739":{"id":"2:12824:29739","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12441:9004","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::matches":"2:12821:2457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44151:9022","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2746:1618":{"id":"2:2746:1618","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2427-0:10:1799":{"id":"b:2:2427-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2421:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2429:21835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:16:1803":{"id":"0:16:1803","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32445:244-0:10:1799":{"id":"a:2:32445:244-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32445:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12812:22502":{"id":"2:12812:22502","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12034:452","str::splitn":"2:12809:22500","self::pattern":"2:12441:9004"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44051:8991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42157:3337-0:10:1799":{"id":"a:2:42157:3337-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42157:3337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12748:29731":{"id":"2:12748:29731","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:29741":{"id":"2:12830:29741","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12441:9004","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::match_indices":"2:12827:29740"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44097:9020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864:22391":{"id":"2:12864:22391","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:22395":{"id":"2:12867:22395","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2741:1620":{"id":"2:2741:1620","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12780:21876":{"id":"2:12780:21876","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32527:2500-0:10:1799":{"id":"a:2:32527:2500-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32527:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12776:27686":{"id":"2:12776:27686","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44221:9005","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2228":{"id":"0:0:2228","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1799","0:20:1811","0:21:1813","0:24:1817"],"is_stripped":false}}},"2:12809:22500":{"id":"2:12809:22500","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004","str::rsplitn":"2:12812:22502"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44033:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:2542":{"id":"2:12746:2542","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:29743":{"id":"2:12835:29743","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12853:29749":{"id":"2:12853:29749","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12872:29753":{"id":"2:12872:29753","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4671:29753"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44228:9015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:29754":{"id":"2:12875:29754","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4669:29754"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44246:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:9330":{"id":"5:5537:9330","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12761:22461":{"id":"2:12761:22461","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12770:28229":{"id":"2:12770:28229","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43905:9010","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:30428":{"id":"5:5540:30428","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:29742":{"id":"2:12833:29742","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:23745":{"id":"5:5554:23745","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12867:22395"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:29750":{"id":"2:12856:29750","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:22505":{"id":"2:12818:22505","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1813":{"id":"0:21:1813","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:723:151","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"5:5543:30429":{"id":"5:5543:30429","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:10:1799":{"id":"b:2:2727-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2730:2535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:30427","5:5537:9330","5:5540:30428","5:5543:30429","5:5551:30430","5:5552:30431","5:5553:3514","5:5554:23745","5:5555:23746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2778:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12763:22462":{"id":"2:12763:22462","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2949:254-0:10:1799":{"id":"a:2:2949:254-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2730:2535":{"id":"2:2730:2535","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2704:142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12771:1807":{"id":"2:12771:1807","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43915:2971","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12756:22463":{"id":"2:12756:22463","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12051:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:10:1799":{"id":"b:2:2737-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2707:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:135","2:2741:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12775:29736":{"id":"2:12775:29736","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44193:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12773:27687":{"id":"2:12773:27687","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12772:27676"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44212:9006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2745:135":{"id":"2:2745:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32375:3664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2429:21835":{"id":"2:2429:21835","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:29747":{"id":"2:12841:29747","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12466:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12772:27676":{"id":"2:12772:27676","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12773:27687"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44203:9007","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:29745":{"id":"2:12839:29745","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12827:29740":{"id":"2:12827:29740","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12441:9004","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::rmatch_indices":"2:12830:29741"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44079:9019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12797:22496":{"id":"2:12797:22496","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12257:8995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12850:22506":{"id":"2:12850:22506","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:22396":{"id":"2:12868:22396","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:30427":{"id":"5:5536:30427","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2504","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2504","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12757:21305":{"id":"2:12757:21305","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42031:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2742-0:10:1799":{"id":"b:2:2742-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2745:135","2:2746:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12766:29735":{"id":"2:12766:29735","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12040:1537","crate::ops::IndexMut":"2:3162:3377","str::slice_unchecked":"2:12765:29734"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:29746":{"id":"2:12840:29746","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:22394":{"id":"2:12866:22394","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12744":{"id":"2:12744","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12745:874","2:12746:2542","2:12747:29730","2:12748:29731","2:12750:29732","2:12753:22351","2:12754:29733","2:12755:340","2:12756:22463","2:12757:21305","2:12759:21310","2:12761:22461","2:12763:22462","2:12765:29734","2:12766:29735","2:12767:22486","2:12768:22487","2:12769:27685","2:12770:28229","2:12771:1807","2:12772:27676","2:12773:27687","2:12774:25844","2:12775:29736","2:12776:27686","2:12777:21671","2:12780:21876","2:12783:21878","2:12786:2582","2:12790:2541","2:12794:22494","2:12797:22496","2:12800:22498","2:12803:29737","2:12806:29738","2:12809:22500","2:12812:22502","2:12815:22504","2:12818:22505","2:12821:2457","2:12824:29739","2:12827:29740","2:12830:29741","2:12833:29742","2:12835:29743","2:12837:29744","2:12839:29745","2:12840:29746","2:12841:29747","2:12844:29748","2:12847:21874","2:12850:22506","2:12853:29749","2:12856:29750","2:12859:29751","2:12862:29752","2:12864:22391","2:12865:22392","2:12866:22394","2:12867:22395","2:12868:22396","2:12869:22398","2:12870:22399","2:12871:22400","2:12872:29753","2:12874:3324","2:12875:29754"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3498:1633":{"id":"2:3498:1633","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39789:9069","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:30431":{"id":"5:5552:30431","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2504","`String`":"5:7535:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2504","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12745:874":{"id":"2:12745:874","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12034:452"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:23746":{"id":"5:5555:23746","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12868:22396"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12803:29737":{"id":"2:12803:29737","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12441:9004","str::split":"2:12794:22494","prim@char":"1:12034:452","`DoubleEndedIterator`":"2:7827:128","str::rsplit_terminator":"2:12806:29738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43979:9024","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12847:21874":{"id":"2:12847:21874","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12806:29738":{"id":"2:12806:29738","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12441:9004","str::split":"2:12794:22494","prim@char":"1:12034:452","str::split_terminator":"2:12803:29737"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43997:9023","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:22398":{"id":"2:12869:22398","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34190"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2740:135":{"id":"2:2740:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12774:25844":{"id":"2:12774:25844","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44183:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12871:22400":{"id":"2:12871:22400","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34190"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12859:29751":{"id":"2:12859:29751","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_i128","write_i16","write_u128","write_u16","write_str","write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8","write_u64","write_u8"],"trait":{"name":"Hasher","id":"2:10101:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1805","0:19:1806"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:19:1806":{"id":"0:19:1806","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2731-0:10:1799":{"id":"b:2:2731-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2733:745"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42158:3632-0:10:1799":{"id":"a:2:42158:3632-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42158:3632","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12747:29730":{"id":"2:12747:29730","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12844:29748":{"id":"2:12844:29748","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12767:22486":{"id":"2:12767:22486","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12768:22487"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1805":{"id":"0:18:1805","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12862:29752":{"id":"2:12862:29752","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12402:134","`FromStr`":"2:12401:3650"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12401:3650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12401:3650","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:29744":{"id":"2:12837:29744","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3496-0:10:1799":{"id":"b:2:3496-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:1817":{"id":"0:24:1817","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1406:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12753:22351":{"id":"2:12753:22351","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11996:9008"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12754:29733":{"id":"2:12754:29733","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:21310":{"id":"2:12759:21310","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42031:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2424-0:10:1799":{"id":"b:2:2424-0:10:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2418:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2426:2442"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12755:340":{"id":"2:12755:340","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12756:22463","`u8`":"1:12051:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:22487":{"id":"2:12768:22487","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12767:22486"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:21878":{"id":"2:12783:21878","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12750:29732":{"id":"2:12750:29732","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12748:29731"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12790:2541":{"id":"2:12790:2541","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42031:198","prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:9001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12794:22494":{"id":"2:12794:22494","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12441:9004","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::split_whitespace":"2:12772:27676","str::rsplit":"2:12800:22498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43929:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:2457":{"id":"2:12821:2457","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12441:9004","`DoubleEndedIterator`":"2:7827:128","prim@char":"1:12034:452","str::rmatches":"2:12824:29739"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44133:9021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12777:21671":{"id":"2:12777:21671","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12441:9004"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:22504":{"id":"2:12815:22504","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2733:745":{"id":"2:2733:745","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:22399":{"id":"2:12870:22399","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34190"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:3514":{"id":"5:5553:3514","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:30430":{"id":"5:5551:30430","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:5969:14363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"15:0:2349":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:40436:9120":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:12672:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:13064:28302":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4488:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6047:14368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:5760:16538":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:1883:3132":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:4578:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4473:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:44246:9016":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:483:10108":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10471:33340":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:10674:3132":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11052:16685":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:7827:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3241:3512":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:5928:14362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:41817:3528":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:1734:11027":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:3966:3549":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:12029:16825":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:15287:20895":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:5992:2795":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:113:21103":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:2766:15625":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5612:16531":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:40839:9309":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:15631:20919":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:8239:3525":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4908:13672":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:7670:3312":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11027:16712":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:8253:9294":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"18:652:33356":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13026:16958":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:10172:2968":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12584:16920":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:14399:20144":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13365:19604":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:10766:8995":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:23095:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:2744:15624":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6332:3069":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:2993:9320":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11194:16740":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:6666:10963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:9890:8947":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:44858:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12335:2980":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:14021:20120":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:4169:9084":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:867:3134":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:4862:16267":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:15557:20915":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:40807:9297":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:2140:3347":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:34100:9348":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:42105:2546":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:12016:25113":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:10520:3465":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:3670:3532":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:2440:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:3081:8930":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:43504:9483":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:23788:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:41019:9312":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:7368:2546":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:1538:2546":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:43082:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4610:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"14:40:19594":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6401:3074":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:4053:15818":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6696:15552":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:22654:28182":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:9276:3397":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"11:1896:2800":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:46733:28055":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:4635:24645":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:48147:3762":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4038:3554":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:4955:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"15:327:3097":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"11:2369:15528":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:21562:3465":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:12035:1658":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:4115:28333":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4401:13619":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:21180:3182":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:23126:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:30715:28036":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:39664:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10580:2883":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:2695:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:7029:2817":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:7610:13859":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:43824:8985":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"11:2548:32157":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:3127:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:16170:19599":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:23281:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:15253:20892":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:6687:2759":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:6929:3081":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:6249:2867":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:4506:13629":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:1785:9274":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2352:3441":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:12047:796":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:12614:16689":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:3255:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:7917:24500":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:8072:16596":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11932:16822":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:6700:14787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:3239:3511":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:3251:16819":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:8050:16595":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:507:10112":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13056:16959":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:580:10121":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:1591:11014":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4902:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:9681:8936":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:548:10116":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12009:2948":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:7041:32549":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:3600:15640":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:10814:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:435:15581":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13235:2993":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:10569:33336":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:43915:2971":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:10957:8993":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:5753:3678":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:2659:9133":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13742:20102":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:8239:16604":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:7840:3457":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4428:13620":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:43997:9023":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8893:3691":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:11958:16821":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:6300:9315":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:8455:3644":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11321:2948":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:2383:3132":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:10137:2967":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:21219:28522":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:8228:3534":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:1160:3349":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:40587:3423":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:4150:8926":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"13:226:3101":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:0:2352":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:5111:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:9882:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:2487:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11426:16799":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"9:0:2344":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:32472:251":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:12230:16870":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:39750:2490":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:5625:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11372:24625":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:10141:1794":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:0:879":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11256:16752":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"9:450:15405":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:7568:3085":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:10530:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:1439:3133":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:32375:3664":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:44221:9005":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:11180:3172":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"11:1917:3352":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:15645:20920":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:1778:635":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:951:3345":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:9943:16659":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:3184:3132":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:614:33354":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:9877:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:13961:20116":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:47647:3778":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1507:11005":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:43264:2486":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:3099:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:8830:3663":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11243:16753":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7523:16582":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:8139:3164":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:46991:3789":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11536:16776":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:30645:3149":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:574:10120":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13121:19593":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:6467:16556":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5867:14356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:46635:3816":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:1054:3347":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10962:16723":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:12410:16913":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"9:237:3644":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13478:19612":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:8495:3646":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:6318:16549":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8283:3584":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:557:3307":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:41033:9313":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:9886:8938":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:22173:3863":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:14887:20865":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:42158:3632":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"14:221:15543":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:4920:28969":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:13042:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:2209:3438":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:10971:8991":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:11315:3667":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:9896:8945":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:6711:14788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:5388:8962":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6156:16546":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:16146:21088":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"9:486:15404":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:22602:3540":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:12596:16688":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:22493:28232":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5891:14358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6017:16544":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:12045:694":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:15689:20924":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:10740:3616":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"5:7498:3418":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:5688:2785":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:10716:16685":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11645:16808":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:43064:3149":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:1455:2546":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:10970:24741":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4180:3581":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9790:16676":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:3199:3509":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:7622:13861":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"14:7:15533":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:6490:28227":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:9536:28935":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:42661:3186":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4388:13618":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:22360:3856":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:7933:3212":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:7542:24762":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:710:3136":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:3358:28466":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:16049:21080":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:4461:13624":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:11160:3663":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:3737:2546":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13491:19613":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:3225:3350":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:6879:16568":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:10804:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:11384:25385":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:8922:3692":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:47181:3749":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:3065:15636":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:22741:3541":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:8202:3491":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:33613:3725":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4947:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:2596:15618":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:6811:3727":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4860:13666":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12784:2984":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"11:837:3341":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:660:21116":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:686:1795":{"crate_id":1,"path":["std","collections"],"kind":"module"},"2:41226:9288":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:34446:9351":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:7651:16587":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:1072:3349":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:212:2757":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"14:160:15533":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:48360:8907":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11675:16855":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:1131:31271":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8478:3645":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:12455:9002":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:2450:15612":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12972:16657":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:9050:24749":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"15:306:15558":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:40855:9310":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:4386:9088":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:43853:8987":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:15224:20889":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5829:14291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:44097:9020":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:364:2748":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:6682:9991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:8405:3643":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:14426:20146":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:2523:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:42542:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:4444:2788":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:44939:8921":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10769:3455":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:4556:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:44033:8993":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:12052:1639":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:6798:14789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:2944:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12380:16911":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:40:2755":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:32436:9407":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:23343:3543":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13754:20103":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:3278:3507":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40474:9015":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:13244:2848":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:1570:11012":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:11053:2887":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:33320:9343":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:9759:16675":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6968:16570":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:3818:2800":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:4865:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:7752:9295":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5121:16334":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:39684:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:755:21120":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:922:3341":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:482:2850":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:46219:3753":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:4127:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:7657:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:9730:16674":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10950:16729":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12850:16693":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:266:2759":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6263:14408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:42089:3132":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:12548:16916":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"10:44:3104":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:9071:3216":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"11:700:2546":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:15337:20901":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:14786:20861":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6764:11133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:14194:20130":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:11563:16777":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:504:2776":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:7451:2790":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:6960:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:3280:3508":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:6484:9298":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:1891:2779":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:39521:9080":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:7218:9301":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:22629:28183":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:2618:15619":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:10432:3662":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:9096:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8310:3586":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:1424:3132":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:4028:3553":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:4958:3517":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:45988:3780":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:6243:16548":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12701:16656":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:3980:3550":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:3732:3536":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:15301:20897":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11590:16773":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:13322:19601":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:7582:3086":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7015:16572":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:32447:252":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:13504:19614":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:12441:9004":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:7128:16574":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:7635:2804":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:2969:15633":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:7740:3400":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11657:16809":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:42269:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4847:13664":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:3191:3351":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:8134:16599":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:5673:16535":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:7028:2875":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:4789:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:1821:3398":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:1819:3397":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:44648:9493":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6248:14407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4676:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:44909:3869":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:3500:3463":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13285:19598":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:10136:2485":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8215:3492":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11199:3469":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:12445:16918":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:4031:2785":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:44664:9496":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:2949:254":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:1906:9379":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:10093:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13273:19597":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:4103:28373":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:15868:21073":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:2205:2818":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:39803:9077":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11168:16739":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:7867:3456":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:6600:16561":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6189:32552":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:14989:16719":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:1051:3348":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:48322:8905":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:7645:3465":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13882:20110":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"0:24:1817":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"17:13856:20108":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:15235:20890":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:4928:16929":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:2284:15579":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:1682:11022":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:13337:3355":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:6897:2874":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:15356:20903":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:30821:28143":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:2154:30828":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:46256:3808":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:11172:25110":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:5885:14357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:3930:3548":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:6944:32328":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:11614:15565":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:3425:3462":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:3232:15637":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4364:13616":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5052:13688":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:42219:3132":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:16032:21079":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:7665:3310":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12301:16907":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"11:1603:15527":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:15842:19592":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:4773:16923":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:11459:16801":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:6086:14372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12202:16904":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:7903:2484":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:4167:3580":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:4585:16182":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8553:3648":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:38253:9354":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:14087:20123":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:4377:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:5764:9305":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:8294:3576":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:893:2779":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:2707:265":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:5955:14320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:22134:3862":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:2711:264":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:9032:9000":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"19:0:1131":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13663:20099":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:48039:3790":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:123:9790":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:7880:2502":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:21891:28531":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13584:20096":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:14778:20860":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:7719:3334":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"11:2403:3133":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:4821:3562":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:1142:15524":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:41800:3527":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:9469:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:8276:3529":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4964:3622":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:6530:2759":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:5009:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13707:20100":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:849:3133":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11014:16713":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:9354:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:12055:1638":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"18:80:21101":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:5939:3018":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:3343:2800":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:10422:16681":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:7582:2877":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:13091:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:596:10123":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:4899:420":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:13395:19606":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"14:215:15542":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:5961:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:2423:2546":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:654:10170":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:15212:20888":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:12058:1247":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10315:2972":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:9149:3721":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:43905:9010":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4932:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12797:2986":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:10618:33328":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:11047:2886":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:3217:3352":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:42008:3531":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:5746:3677":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4584:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:23312:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:7621:16586":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"7:0:1687":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:8980:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:22727:3542":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:47291:3810":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:15367:20904":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:14896:20866":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:42766:8939":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:7511:3419":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:1887:2546":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4783:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:1537:11009":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6560:2744":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:12054:1641":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12115:16902":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:42464:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:15267:20893":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:10824:3460":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:7691:2883":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:44203:9007":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10067:2964":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4998:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:14878:20864":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:1789:2800":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:15013:20871":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:6741:11148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2504:15614":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:21464:3173":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15329:20900":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:2151:3348":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:7282:27709":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:32948:9341":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:2562:32162":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:599:33359":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:7756:3401":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:588:3323":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:3201:3510":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:7268:3129":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:281:2504":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:3460:16824":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:11727:16837":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:2031:16755":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:7004:2813":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:9188:25368":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:2380:15609":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:10942:3401":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:5117:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:2183:3138":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:6862:2810":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4830:13662":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:7560:9047":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9651:16673":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"8:0:2343":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:15612:20918":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:2062:3365":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:32445:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:13896:20111":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:21392:3734":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:46197:3747":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:1024:2759":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:1743:659":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:46945:3783":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:48261:8900":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:6499:3076":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12091:16900":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:2722:15623":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:12005:3336":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:8195:16602":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:8844:3199":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:21443:3465":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:10099:24822":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:13935:20114":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11395:16761":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7006:16571":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:13297:19599":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:10925:16705":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:2986:9318":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:7792:16591":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:31219:3182":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:8564:3649":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:4798:2858":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:4417:16134":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:6605:2546":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4808:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12560:16952":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:5830:16539":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:4411:2785":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:10608:16684":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10667:33329":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:2093:8933":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:886:2766":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4434:13621":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"11:2304:3346":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:10035:2943":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12418:16928":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:11369:16754":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:16098:21084":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:16076:21082":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:14266:20135":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:15943:19595":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:2359:15608":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:5568:3660":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:2518:3500":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1528:11008":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:3753:3365":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:48296:8903":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:3373:8929":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:43811:8969":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12718:16690":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11113:16711":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:46274:3814":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4724:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13202:2987":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12052:16823":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:7112:2554":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:11236:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:6222:14406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:44656:9494":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:1596:11015":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11991:16818":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:33672:9345":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:40727:3160":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:44425:9039":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:3494:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:9166:24765":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"2:43104:8937":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4764:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:4534:3154":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11215:16741":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:8171:3464":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:44660:9498":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13383:19605":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:569:10119":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"18:582:3182":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:8154:16600":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:1550:3350":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:4999:855":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:3251:3353":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:12512:9028":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:40540:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:2368:3446":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:41275:9293":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:11484:8983":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:40394:9119":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:12153:16874":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:2236:31225":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4824:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:14757:20858":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:3130:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:40869:9311":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:10097:24804":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:3830:15667":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:7598:13857":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:43899:9011":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:10312:2837":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:4460:9095":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:3049:15635":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12684:16655":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8547:3132":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:5415:3657":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:21451:3733":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:4151:3578":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:42308:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:47789:3750":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:2228:16774":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:12057:1697":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:42080:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:15903:21074":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:909:3340":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12264:16906":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11001:16714":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:21234:28533":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15177:20884":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:6927:14798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:40526:9113":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:15725:20926":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:7284:3630":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:5363:16528":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:44377:9038":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11714:16816":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:39640:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:5661:16534":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:2704:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:46611:3815":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"11:673:3132":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:7702:15360":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:6297:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:7651:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:42097:3133":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:5140:13697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:261:33335":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:43039:28205":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:42176:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:23188:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:11307:16750":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:2946:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:7531:16672":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:8097:16597":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:43843:8986":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:2202:3437":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:4516:13630":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2426:2358":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:1501:11004":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:4740:3563":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:48281:8902":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:2944:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6868:14794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:1674:11021":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:8148:3213":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:10782:24652":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:11539:3537":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4738:3546":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12356:16909":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:14921:20867":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:43929:3492":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:4774:16251":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:48270:8901":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:3837:3537":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:46096:3781":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14485:2980":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:621:3327":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:46565:3760":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:5033:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2586:2854":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:13832:20107":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:7925:3501":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:15294:20896":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:515:21124":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:44866:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12310:2979":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:44079:9019":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:6913:14797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:501:10111":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:5500:3659":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:1516:3137":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:3443:3461":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:588:10122":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"11:787:3135":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3166:24499":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:357:3320":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4523:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44724:3726":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:10896:16703":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:4889:16270":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:2469:2800":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:2370:3447":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:39607:3376":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:43761:8980":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:41989:3530":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6545:16559":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:7391:16576":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:6691:14786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:11342:21847":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:43289:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:1909:705":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:7660:16588":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7462:16577":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:44228:9015":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:2354:3442":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:15546:20914":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12474:2948":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:22440:28195":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:6658:10158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:14934:20868":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13162:19595":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:15079:20876":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7474:16578":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5419:2944":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:5650:2798":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:4949:16282":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:15855:19593":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:6079:14371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10881:16702":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"0:0:2228":{"crate_id":0,"path":["fnv"],"kind":"module"},"17:14439:20147":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:624:33364":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:328:32153":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:44699:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"13:0:2341":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:687:3133":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:32411:27571":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:10813:33332":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:5877:3161":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:4745:16246":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:40500:9116":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:22001:3465":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:30589:3181":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:15311:20898":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12921:2980":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9918:16679":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:40686:3156":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13309:19600":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:3655:15641":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:2780:123":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"1:12039:1504":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:2810:15627":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:1703:3573":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15671:20922":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12220:16693":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:363:3321":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13695:16863":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12536:16917":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:3735:3535":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:15535:20913":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:40466:3325":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:47103:3743":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6898:14796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:634:30817":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:5982:14365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:1063:3348":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:8192:3156":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:0:534":{"crate_id":2,"path":["core"],"kind":"module"},"3:0:479":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:12222:9503":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8860:3696":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:8816:3198":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:23064:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:7748:9296":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:10955:3659":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"18:481:21122":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11399:16748":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6915:3080":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13633:20097":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:5866:16540":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:6495:2830":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11485:16775":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:8328:3615":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:4375:13617":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4776:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6583:16560":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:15527:20912":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:12146:9502":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6100:14373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:23033:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:12366:16910":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:4841:13663":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:43772:8970":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:14057:20122":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:1883:9380":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:1873:3411":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:12034:452":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"11:2352:3348":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:40778:9306":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:15192:20886":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:9813:16677":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4914:13673":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:3323:3497":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:9888:8946":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:4383:3577":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:21190:28525":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:13116:9137":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10016:16649":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:8181:3095":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:40650:3459":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:47227:3755":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:39728:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15087:20877":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:6804:14790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:11141:16737":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:14221:20132":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:43027:28221":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:44151:9022":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:883:3345":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:511:16671":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:40545:3422":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:15279:20894":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:14969:3001":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:44193:9018":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:7645:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:9884:8939":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:6426:3680":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:16004:21077":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:6204:3051":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6268:32605":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:1545:2800":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:11217:24622":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:6569:3077":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:22212:3866":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:30629:9333":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:44668:9497":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:14950:20869":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:21879:3174":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:46543:3754":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:41760:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:536:3022":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:39706:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:46867:3777":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4698:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5322:16511":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:16087:21083":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:11621:15565":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12486:16924":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:7285:3354":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:4344:16085":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:44514:9043":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:4703:3587":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:40383:9085":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:1691:11023":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:4625:3552":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:3764:15649":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"15:394:15568":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:6128:14377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:7339:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:11041:2948":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:119:9789":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:10540:3507":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:11357:21845":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:30360:3539":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11126:16710":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6813:14791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"11:351:32148":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:3162:3377":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6169:14379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7535:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:10101:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:9111:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:4042:3555":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13922:20113":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:7679:13868":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:2983:30714":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8387:3626":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12324:16908":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:4505:2823":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:22224:27872":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:4884:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:22197:3465":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:6430:3681":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7492:16579":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:39782:9360":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:2200:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:7435:2497":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11065:16718":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13989:20118":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:880:3135":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:3510:3485":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"11:832:3340":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:12049:798":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:903:3132":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:11517:8984":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:12459:2960":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:7936:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:4613:16186":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10337:2945":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46118:3787":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:7798:2503":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:719:21113":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:39789:9069":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:4496:13628":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11755:16859":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:527:10113":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:4639:24649":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:6644:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:4921:16278":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"10:36:32147":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:595:16672":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:43301:3644":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:5816:3050":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4647:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:836:3132":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:10242:2970":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:5588:16530":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:15374:20905":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:32446:2499":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:3133:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2418:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2789:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:6415:16553":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:3936:3547":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:2326:3347":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:2703:31218":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:41953:3538":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7534:16583":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:10157:24656":{"crate_id":1,"path":["std","sys","pal","unix","os_str","Slice"],"kind":"struct"},"16:5905:16541":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10915:16704":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:13233:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"11:2569:2496":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:7908:2483":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:5435:32522":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"10:0:2345":{"crate_id":10,"path":["adler"],"kind":"module"},"16:7768:3093":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:12041:1623":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"11:800:2779":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11666:16810":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:10726:33324":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:1604:11016":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:945:3344":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:7482:28146":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:4309:3153":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:22562:3144":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:43672:27688":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:6357:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:5085:13691":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:33731:9344":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6425:16554":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:10988:16715":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:7138:27527":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:13083:16960":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:2339:3010":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:21248:28528":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:1541:2779":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11088:16716":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:10999:8992":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:609:33373":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:1514:11006":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:15027:20872":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6792:16565":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:15125:20881":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:43311:3188":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:1087:32164":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:22691:28180":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6361:16550":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:3888:15701":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:8938:3695":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:2548:15616":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:32560:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:9678:16660":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:7845:3458":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13419:19608":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:40507:9117":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:12183:9504":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:707:9002":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:9023:3204":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4854:13665":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:1566:15525":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:6934:14799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:15184:20885":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:15003:20870":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1718:11026":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:6540:3684":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:5395:3656":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:2622:3493":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:4252:3132":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:0:2342":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:22753:3544":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:7067:32325":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:43523:8971":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:46237:3759":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:32558:8927":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:22266:3867":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:2169:16788":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:47257:3761":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:10785:33323":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:42780:8947":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:4469:3587":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6120:14376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:42168:3313":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:12077:16889":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:3012:9342":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:47021:3795":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:10698:3133":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:44524:9044":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:699:2937":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:5431:3658":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:495:10110":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13407:19607":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:3607:3133":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:3366:3516":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:22089:3861":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:38198:9353":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5015:13684":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:40406:28052":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:5825:2860":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:7564:2861":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:6961:14801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:14001:20119":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:7318:16575":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:1406:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:6013:9709":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:12038:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:6610:2872":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:48185:3796":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:1286:3348":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12396:16877":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:9106:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:12037:1151":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:36322:9352":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:15566:20916":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:1692:2785":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:11690:16856":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:434:32167":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:6901:3079":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:15507:20910":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:7862:16593":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13765:20104":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:2788:15626":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:14099:20124":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5941:14319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:40820:9308":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:6943:14800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7436:3032":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:22546:3175":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:44848:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12758:16691":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:5696:16536":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13676:16864":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:12206:9501":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:21573:3173":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:0:1529":{"crate_id":1,"path":["std"],"kind":"module"},"17:12387:16912":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:2542:27995":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:1534:3132":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:4637:24647":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:40422:9118":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:44676:9492":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:1973:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:2144:2776":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:5727:3043":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:7639:13863":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:4050:2759":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:43833:8988":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:15733:20927":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:21571:3731":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13218:2991":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:1567:3353":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:41846:3185":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:9036:16574":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"11:0:2346":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:4878:13668":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:4744:3567":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2942:8928":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:7360:32594":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:15345:20902":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11497:2973":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:41248:3516":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4814:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:46367:3782":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:4129:27530":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:42425:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:15062:20875":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:14282:20136":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:48250:8899":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:40830:3163":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"11:844:3342":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:12040:1537":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:43280:2487":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4351:13615":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:491:33372":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4535:13633":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:14385:20143":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:7646:3322":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:7503:16580":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:636:33355":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6226:16547":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:7334:9286":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:9028:3214":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:7269:32586":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"18:736:21114":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:15049:20874":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7513:16581":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:4719:16244":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:7556:15331":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:3394:2785":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"18:531:21125":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:7782:16590":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:2658:3465":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8159:3460":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:7884:16594":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:41930:28064":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:4020:2779":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:26190:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:521:21121":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:4235:3151":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:2933:15632":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:811:2800":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:22637:28066":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:40755:27697":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:48307:8904":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:2881:15630":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:7504:3164":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:299:32159":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:42147:3631":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7054:32562":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12290:16898":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:7423:2496":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11036:2885":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:48437:8910":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:40458:9016":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:4549:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:39560:8931":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:1902:3412":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:14359:20141":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:2421:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:42622:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11292:2888":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:7708:3091":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:6136:31458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15680:20923":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:6228:13531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"14:165:15534":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:149:2741":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:914:3136":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:38308:9355":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6071:14370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:40737:9303":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:46419:3794":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:14156:20127":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10102:2966":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6456:16555":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12140:16875":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:1969:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7090:32526":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:2973:31294":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:637:3329":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:5877:2779":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:9860:16678":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:6543:3685":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:11767:16860":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12273:16692":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5104:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4666:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6346:3071":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:14346:20140":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:41219:27696":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:8291:28933":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:7524:2796":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:14312:20138":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6721:16563":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12659:16653":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:3123:2501":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:5308:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:1758:3381":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:13347:19603":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:5798:3045":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:1632:11017":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:3482:3413":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:42386:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:42157:3337":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:4159:3579":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:15037:20873":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:14904:20854":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13448:19610":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:23157:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"9:507:15408":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:590:28189":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10946:24535":{"crate_id":1,"path":["std","sys","pal","unix","os_str","Buf"],"kind":"struct"},"5:5004:2785":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:41242:9290":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:44922:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:4561:3155":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11617:16806":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:475:10107":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:16016:21078":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:4:1114":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:10246:2834":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:6107:14374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:3915:15704":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:2911:2857":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:15384:20906":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:12059:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:4641:16190":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:903:2800":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:5017:16302":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:40746:9304":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:14373:20142":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:40557:28146":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3988:3551":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8975:3201":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12127:16876":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:1562:3352":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:8906:3694":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11269:2960":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:9349:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:16160:21089":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:928:3342":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"0:10:1799":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"6:1710:11025":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:15980:21075":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:2662:3502":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:4616:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:43519:27812":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:62:9735":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:7619:2800":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:7616:13860":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:11155:16738":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:12572:16921":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:43798:8968":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:7343:10068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:22280:9369":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:16109:21085":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:4628:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:7668:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:32415:16604":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:33927:9347":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:14235:20133":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:44652:9495":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:6844:16567":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:2832:15628":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:43979:9024":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4686:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:12048:797":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:30623:9064":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:640:3330":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:12999:16957":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:875:3344":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:22355:3858":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:46397:3788":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:9476:3458":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:4738:9107":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8302:3534":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:5128:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:40798:9307":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:690:21119":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:14251:20134":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:1315:3349":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:1025:3347":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11476:3103":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12345:16899":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4922:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:5982:16543":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11507:2974":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:43319:3189":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:7347:3143":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:3410:8932":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:3318:9359":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10657:2948":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:5446:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:4266:3152":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:14208:20131":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:1094:16717":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:22720:28235":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:9973:24540":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:41966:3529":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:48345:8906":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:3461:15639":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:8921:3165":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:102:32161":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:10475:2882":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:10344:2843":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:1203:16724":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4529:13632":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"0:20:1811":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"18:681:21118":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:3160:26208":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:14497:20150":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:5987:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:46513:3748":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:45922:3774":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:9101:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6753:16564":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:31191:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"18:644:33356":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:44680:3172":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:5571:3661":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:43272:3187":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:15589:20917":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11412:16747":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:16134:21087":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:10432:33333":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:11455:2890":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:40620:2824":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11469:16802":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:5403:2943":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5130:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:564:2934":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:6819:14792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7722:3092":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:44346:9036":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6261:3035":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:22326:3857":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:4480:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6386:16552":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:645:3331":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:40573:3421":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:1796:3391":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13436:19609":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6531:16558":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:533:10114":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"9:357:15421":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:41783:3526":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:39611:9358":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:7549:9046":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:9892:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13097:19592":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11978:16817":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:46467:3742":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:1270:3346":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:9541:3167":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40879:9299":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:13787:20105":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:16180:19601":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:6059:14369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:2696:15622":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:5593:2785":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:4835:16264":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:40493:9115":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:40677:3374":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:48241:8898":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4566:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6485:3075":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:8961:3679":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:256:33342":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:23219:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:830:2764":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:1151:31298":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"9:330:15460":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"15:288:15557":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:47899:3784":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:10537:3511":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:3163:24487":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:542:10115":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12103:16901":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14698:20857":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:5082:24732":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8993:24792":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"11:2443:2779":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:4449:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13182:19596":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"9:177:3120":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:10764:25379":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:15101:20878":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:4906:3612":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:10759:24633":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:11983:24810":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:13809:20106":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11800:16836":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:14122:20125":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4977:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:5743:16537":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:15990:21076":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:15659:20921":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:33134:9340":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2997:3722":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:10329:2838":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:44360:9037":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12191:16869":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:12046:799":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:39976:22350":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:22614:28106":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:533:2851":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:46787:28164":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:1301:3347":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:48223:3817":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6742:15551":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10051:2944":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:5807:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:12166:16873":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:489:10109":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5023:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:3994:3552":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:7613:16585":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:1582:15526":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7554:3084":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:34273:9349":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:1496:11003":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:15432:20907":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"7:31:15376":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10833:25106":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:5152:13699":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11439:16768":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8986:3305":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2701:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:14822:20862":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:11817:16861":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:6012:14367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:44133:9021":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:4527:16172":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:42114:3630":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:7633:13862":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13684:16862":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5004:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:32429:9095":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12255:16905":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:40481:9114":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:5381:3655":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:8003:24733":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:43009:3149":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:44452:9040":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:14413:20145":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:3333:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:10852:16701":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:11518:3535":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:4092:3133":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11743:16858":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:6070:2862":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8209:2971":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:6159:14378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13334:19602":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:21236:28535":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"14:31:15533":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:2406:15610":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"14:187:15541":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:1650:11019":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:40717:9302":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6687:16562":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:2698:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:4455:13465":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:21217:28537":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:15493:20909":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11632:16807":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:6279:3066":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"12:0:2347":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:41267:9291":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:14181:20129":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:11294:16751":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:48375:8908":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:8288:3585":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:8281:16605":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:16062:21081":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:15:1806":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:45942:3739":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"9:52:3105":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:44489:9041":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12930:16695":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:32422:28980":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:40446:9121":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:7382:25074":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:12032:402":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:8247:3360":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13909:20112":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13724:20101":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:9481:2881":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:10207:2969":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4745:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:12898:16694":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:5146:13698":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:32527:2500":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:8008:3210":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"18:507:33356":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:4543:13634":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:6351:3871":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:2336:9370":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:4986:16295":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:46012:3740":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:3584:16842":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:8167:16601":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:7307:2770":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:6843:2798":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:0:2350":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:10988:3199":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"11:1923:3353":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:42029:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"11:2231:3103":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:15133:20882":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:41257:2832":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:7604:13858":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:21445:3730":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:41233:3680":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:9894:8944":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:2256:3141":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:41009:3491":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:40657:8968":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:7857:3211":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6818:16566":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:10985:8994":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:47977:3756":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:5971:2867":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"11:1903:3350":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:42759:8938":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:44237:3325":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:774:3134":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:12053:1640":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:3002:3724":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:1966:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5974:14364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:43723:8978":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:30657:28170":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:9016:24797":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:0:2351":{"crate_id":17,"path":["object"],"kind":"module"},"16:5574:3039":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:12033:1034":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11779:2976":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11549:16803":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:9198:25374":{"crate_id":1,"path":["std","sys","pal","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:742:3137":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:10805:8982":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11818:2893":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:12000:3220":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12432:16919":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:42503:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"7:78:15383":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:12401:3650":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:44672:9491":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:7388:15172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:15961:19596":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:4700:3614":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:42583:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:44331:9035":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:5995:3024":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"0:21:1813":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"17:14455:20148":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10510:16682":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:5344:2759":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:1697:11024":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6960:16569":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11345:16756":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:555:10117":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"11:2554:32156":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:7297:2779":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:9852:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:4497:16166":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:6872:2812":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:859:2546":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14765:20859":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7694:3089":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13869:20109":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:21849:3465":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:32528:3183":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:22003:3732":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:43732:8977":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:8234:3533":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8868:2546":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:39624:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:14145:20126":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:8205:16603":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:3687:2759":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:2474:31221":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:790:2761":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:5240:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:15160:20883":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:12257:8995":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44644:9490":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:9130:3469":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:14296:20137":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:3032:15634":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:6596:3687":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:2334:9369":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:22226:9369":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:8222:3490":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:3603:2779":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:6083:15578":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9968:16680":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:1546:11010":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"11:396:2750":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:1897:28242":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4755:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:10723:3492":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:9834:3413":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:4311:3583":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:1685:2759":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5897:14359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:10843:8996":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12872:16651":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:10078:3391":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:11558:8976":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:10775:16686":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:9559:16650":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:8852:3132":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:11576:16804":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:2979:30713":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:5384:16529":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:13282:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:23002:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"13:110:32218":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:5075:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8537:3647":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:2324:636":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:7277:2546":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11449:16800":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:46136:3793":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4800:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:2864:15629":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:7468:3420":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:1505:3136":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:10340:25667":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:2830:3416":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:3022:9350":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:15519:20911":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:5044:13687":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:401:16670":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:2305:15606":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:22675:28045":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7736:16589":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:1556:3351":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:2907:15631":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:1558:11011":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:11607:24774":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:918:3137":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:1576:11013":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:21202:28525":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:13648:20098":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6513:16557":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:2529:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"11:856:3343":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:5392:8963":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6376:16551":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:4514:9096":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:7880:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8332:3617":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11604:16805":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13976:20117":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:9624:16648":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:46066:3776":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:43887:9014":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:2197:16749":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:7376:2546":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:7734:3335":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:7789:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:46686:28054":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:2574:15617":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:6194:3205":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:44901:3868":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:42227:3133":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:40787:9314":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:40769:3162":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:22578:3176":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:1115:31297":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:6162:2866":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:40708:3159":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13145:19594":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6352:3073":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:12050:794":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:14662:20856":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:766:21115":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:7544:16584":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13948:20115":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:2472:15613":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4968:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:5088:16325":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:21390:3465":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"11:430:32171":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10293:2971":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:3196:30840":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:42244:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:1664:11020":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10323:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:4710:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12510:16922":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:40699:3157":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:15747:20928":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:46589:3809":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:12466:8999":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:8244:3356":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"11:2124:3346":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:38363:9356":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12244:16872":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11701:16857":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13516:19615":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:1913:11191":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11226:16767":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4893:13670":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:10249:3666":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:4440:13622":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:46764:28046":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:2321:15607":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:2954:3150":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:44212:9006":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:22311:3465":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:13463:19611":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:4381:9087":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:6466:2871":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:11390:25386":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:42235:2546":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:6985:26015":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5963:16542":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11146:3198":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:5068:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12828:16692":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:15321:20899":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:6484:2779":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:7365:15170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:44964:28220":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:7828:16592":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:43947:8989":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:538:2932":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4491:3588":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:4462:16155":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:10878:8989":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:2492:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"11:2536:32154":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:43055:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:5154:2795":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:5632:2867":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:10794:3211":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:15480:20908":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6893:3036":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:43873:9017":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4870:13667":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:6718:3617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:4915:3613":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:42773:8946":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:5634:16532":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:574:33356":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:44845:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:10534:3509":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:3112:3362":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4989:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:42159:9441":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:1536:3364":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:47441:3744":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:46034:3746":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:7317:30819":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:96:21102":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:3230:30835":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:15244:20891":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12953:16658":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7342:32582":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:33790:9346":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5921:14361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6837:14793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:3738:3212":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:15117:20880":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:123:2746":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:11309:3206":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:14843:20863":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:3797:15658":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:15710:20925":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11523:2957":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:4742:3566":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:7785:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"14:0:2348":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:5051:24732":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12051:1642":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"11:1676:2752":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:12044:692":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:10842:25115":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10520:33339":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:44736:9510":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:6781:11131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:14324:20139":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:48101:3811":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:3345:9081":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:4212:2785":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:7331:2546":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:4182:2785":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:1910:3351":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:1477:3134":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13254:3000":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:45966:3775":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:44537:9025":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:4569:3605":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11595:3219":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:14041:20121":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4939:1101":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:9891:16652":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:38942:9357":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:44951:8919":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:11982:9458":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:1007:3346":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:43751:8979":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:4231:3582":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"14:202:9045":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:11966:9456":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:6146:2848":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:44503:9042":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:43741:8981":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:8798:3662":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:1815:1188":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:3594:3132":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:40377:3325":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:5992:14366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:7850:3455":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:2600:2838":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:22:732":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:3339:9082":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:7692:15359":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:563:10118":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:5780:3200":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:6117:2785":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:6889:14795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:42347:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:5123:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:5639:3688":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:4050:3557":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:4806:16259":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:33554:3723":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:8115:16598":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:2380:3452":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:14509:20151":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:8874:3693":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12180:16903":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:21854:3736":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:1521:11007":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:14470:20149":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"9:426:15407":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11478:3536":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:2975:30712":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:3491:25187":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:1040:3346":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:44051:8991":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:15108:20879":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:2972:2605":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5859:14355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:1486:3135":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7102:16573":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2644:15620":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:7601:2879":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:8354:3565":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:5648:16533":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:2048:3212":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:44309:9034":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:4450:2822":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:4381:2788":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:10916:8990":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:4557:16178":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:2428:15611":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:12056:849":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:8013:3503":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:671:21117":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5712:3040":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:1107:15523":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:46167:3741":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:16123:21086":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:10559:16683":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:23250:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:8804:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:6041:16545":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:40630:3436":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:5049:16310":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:727:2939":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:42999:28194":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:7597:32450":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:2670:15621":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:2778:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"9:393:15406":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:11996:9008":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10941:16706":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:1495:3340":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:7371:15171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:48398:8909":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:3328:261":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10803:16687":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10974:2960":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:44183:3490":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:6114:14375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:1066:15522":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:14170:20128":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:15200:20887":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4603:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11945:16820":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5910:14360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12746:2983":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:12446:9000":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:7897:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:4595:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:46321:3729":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:2526:15615":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:1639:11018":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:14633:20855":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:3315:15638":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:939:3343":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:44557:9026":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:1760:3382":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:12461:9001":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}