{"root":"0:0:2832","crate_version":"1.0.7","includes_private":false,"index":{"b:2:3099-0:10:2404":{"id":"b:2:3099-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3114:1857":{"id":"2:3114:1857","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:32417","5:5713:9752","5:5715:32418","5:5717:32419","5:5725:32420","5:5726:32421","5:5727:4049","5:5728:23627","5:5729:23626"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13812:23889":{"id":"2:13812:23889","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13453:9880","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::split_whitespace":"2:13793:29435","str::rsplit":"2:13816:23893"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44734:4023","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:2404":{"id":"0:10:2404","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:32945:249-0:10:2404","a:2:3322:261-0:10:2404","a:2:3357:9742-0:10:2404","a:2:33003:3117-0:10:2404","a:2:42830:3851-0:10:2404","a:2:42831:4173-0:10:2404","b:2:2790-0:10:2404","b:2:2793-0:10:2404","b:2:3095-0:10:2404","b:2:3099-0:10:2404","b:2:3105-0:10:2404","b:2:3110-0:10:2404","b:2:3967-0:10:2404","0:13","0:17"]}}},"2:2795:23100":{"id":"2:2795:23100","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13884:25093":{"id":"2:13884:25093","crate_id":2,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"2:13812:23889","`str::find`":"2:13805:3202"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:40309:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3110-0:10:2404":{"id":"b:2:3110-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3113:150","2:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13802:23902":{"id":"2:13802:23902","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13872:23628":{"id":"2:13872:23628","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3969:1872":{"id":"2:3969:1872","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40446:9476","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13878:23807":{"id":"2:13878:23807","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38079"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13768:31683":{"id":"2:13768:31683","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13766:31682"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2832":{"id":"0:0:2832","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:2404","0:20:2416","0:21:2418","0:24:2422"],"is_stripped":false}}},"2:13867:31702":{"id":"2:13867:31702","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13880:31704":{"id":"2:13880:31704","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5068:31704"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45033:9528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13852:31698":{"id":"2:13852:31698","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13482:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:32420":{"id":"5:5725:32420","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13839:31691":{"id":"2:13839:31691","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13453:9880","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::rmatch_indices":"2:13841:31692"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44884:9897","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13859:23903":{"id":"2:13859:23903","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13797:29438":{"id":"2:13797:29438","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45026:9885","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13834:3075":{"id":"2:13834:3075","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13453:9880","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::rmatches":"2:13836:31690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44938:9899","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:23625":{"id":"2:13875:23625","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13798:22938":{"id":"2:13798:22938","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13882:3840":{"id":"2:13882:3840","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5069:3840"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45042:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:22567":{"id":"2:13775:22567","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:31684":{"id":"2:13772:31684","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13877:23806":{"id":"2:13877:23806","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38079"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:32419":{"id":"5:5717:32419","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:31695":{"id":"2:13848:31695","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13831:23900":{"id":"2:13831:23900","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:31686":{"id":"2:13784:31686","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12658:1772","crate::ops::IndexMut":"2:3628:3902","str::slice_unchecked":"2:13783:31685"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13870:31703":{"id":"2:13870:31703","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13412:149","`FromStr`":"2:13411:3962"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13411:3962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13411:3962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13857:23263":{"id":"2:13857:23263","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13836:31690":{"id":"2:13836:31690","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13453:9880","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::matches":"2:13834:3075"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44956:9900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:32418":{"id":"5:5715:32418","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13855:31699":{"id":"2:13855:31699","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_str","write_i128","write_i16","write_u128","write_u16","write_isize","write_i32","write_usize","write_u32"],"trait":{"name":"Hasher","id":"2:10884:169","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:2410","0:19:2411"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13844:31693":{"id":"2:13844:31693","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:352":{"id":"2:13773:352","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13774:23860","`u8`":"1:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13883:31705":{"id":"2:13883:31705","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5066:31705"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45051:9527","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:29446":{"id":"2:13791:29446","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44710:9890","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:4049":{"id":"5:5727:4049","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13816:23893":{"id":"2:13816:23893","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13453:9880","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::split":"2:13812:23889"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44752:9870","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13794:29436":{"id":"2:13794:29436","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13793:29435"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45017:9886","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13796:31687":{"id":"2:13796:31687","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44998:9896","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2790-0:10:2404":{"id":"b:2:2790-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:3063"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32945:249-0:10:2404":{"id":"a:2:32945:249-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13788:23888":{"id":"2:13788:23888","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13787:23887"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13850:31696":{"id":"2:13850:31696","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3113:150":{"id":"2:3113:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32869:4212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2792:3063":{"id":"2:2792:3063","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13786:23884":{"id":"2:13786:23884","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13785:23883","str::split_at_mut_checked":"2:13788:23888"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:31697":{"id":"2:13851:31697","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13819:31688":{"id":"2:13819:31688","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13453:9880","str::split":"2:13812:23889","prim@char":"1:12652:492","`DoubleEndedIterator`":"2:8394:134","str::rsplit_terminator":"2:13821:31689"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44784:9902","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13814:23891":{"id":"2:13814:23891","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13240:9876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:2408"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13783:31685":{"id":"2:13783:31685","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12658:1772","str::slice_mut_unchecked":"2:13784:31686","crate::ops::Index":"2:40277:3901"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:32421":{"id":"5:5726:32421","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:3123","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3123","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:2411":{"id":"0:19:2411","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2416":{"id":"0:20:2416","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10924:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:13779:23858":{"id":"2:13779:23858","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:23627":{"id":"5:5728:23627","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13875:23625"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:28165":{"id":"2:13795:28165","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44988:4021","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13829:23899":{"id":"2:13829:23899","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13841:31692":{"id":"2:13841:31692","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13453:9880","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::match_indices":"2:13839:31691"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44902:9898","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13874:23629":{"id":"2:13874:23629","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:32417":{"id":"5:5712:32417","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3123","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:3123","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13808:3160":{"id":"2:13808:3160","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42736:203","prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3357:9742-0:10:2404":{"id":"a:2:3357:9742-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3357:9742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13792:2412":{"id":"2:13792:2412","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44720:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2410":{"id":"0:18:2410","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13879:23808":{"id":"2:13879:23808","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38079"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13790:29437":{"id":"2:13790:29437","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44704:9891","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5713:9752":{"id":"5:5713:9752","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13821:31689":{"id":"2:13821:31689","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13453:9880","str::split":"2:13812:23889","prim@char":"1:12652:492","str::split_terminator":"2:13819:31688"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44802:9901","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13781:23859":{"id":"2:13781:23859","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:23860":{"id":"2:13774:23860","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:23624":{"id":"2:13876:23624","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3095-0:10:2404":{"id":"b:2:3095-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3098:3154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:2422":{"id":"0:24:2422","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1506:168","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:21:2418":{"id":"0:21:2418","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:789:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13765:31681":{"id":"2:13765:31681","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:1027":{"id":"2:13763:1027","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12652:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:23887":{"id":"2:13787:23887","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13788:23888"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2408":{"id":"0:16:2408","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13824:23895":{"id":"2:13824:23895","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880","str::rsplitn":"2:13826:23897"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44838:9874","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13865:31701":{"id":"2:13865:31701","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13826:23897":{"id":"2:13826:23897","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12652:492","str::splitn":"2:13824:23895","self::pattern":"2:13453:9880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44856:9872","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:23626":{"id":"5:5729:23626","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13876:23624"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:3161":{"id":"2:13764:3161","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13800:23901":{"id":"2:13800:23901","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13793:29435":{"id":"2:13793:29435","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13794:29436"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45008:9887","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3101:860":{"id":"2:3101:860","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13785:23883":{"id":"2:13785:23883","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13787:23887","str::split_at_mut":"2:13786:23884"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:23799":{"id":"2:13771:23799","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12976:9888"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13777:22572":{"id":"2:13777:22572","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:31682":{"id":"2:13766:31682","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42831:4173-0:10:2404":{"id":"a:2:42831:4173-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42831:4173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3109:1859":{"id":"2:3109:1859","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762":{"id":"2:13762","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13763:1027","2:13764:3161","2:13765:31681","2:13766:31682","2:13768:31683","2:13771:23799","2:13772:31684","2:13773:352","2:13774:23860","2:13775:22567","2:13777:22572","2:13779:23858","2:13781:23859","2:13783:31685","2:13784:31686","2:13785:23883","2:13786:23884","2:13787:23887","2:13788:23888","2:13790:29437","2:13791:29446","2:13792:2412","2:13793:29435","2:13794:29436","2:13795:28165","2:13796:31687","2:13797:29438","2:13798:22938","2:13800:23901","2:13802:23902","2:13805:3202","2:13808:3160","2:13812:23889","2:13814:23891","2:13816:23893","2:13819:31688","2:13821:31689","2:13824:23895","2:13826:23897","2:13829:23899","2:13831:23900","2:13834:3075","2:13836:31690","2:13839:31691","2:13841:31692","2:13844:31693","2:13846:31694","2:13848:31695","2:13850:31696","2:13851:31697","2:13852:31698","2:13855:31699","2:13857:23263","2:13859:23903","2:13862:31700","2:13865:31701","2:13867:31702","2:13870:31703","2:13872:23628","2:13873:23803","2:13874:23629","2:13875:23625","2:13876:23624","2:13877:23806","2:13878:23807","2:13879:23808","2:13880:31704","2:13882:3840","2:13883:31705","2:13884:25093"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3967-0:10:2404":{"id":"b:2:3967-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13862:31700":{"id":"2:13862:31700","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:10:2404":{"id":"b:2:3105-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:150","2:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:33003:3117-0:10:2404":{"id":"a:2:33003:3117-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33003:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2793-0:10:2404":{"id":"b:2:2793-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2795:23100"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3108:150":{"id":"2:3108:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:2:3322:261-0:10:2404":{"id":"a:2:3322:261-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13805:3202":{"id":"2:13805:3202","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42736:203","prim@char":"1:12652:492","self::pattern":"2:13453:9880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:9882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13846:31694":{"id":"2:13846:31694","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:23803":{"id":"2:13873:23803","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40630:3098","Self::is_ascii":"2:13872:23628"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40630:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42830:3851-0:10:2404":{"id":"a:2:42830:3851-0:10:2404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42830:3851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3098:3154":{"id":"2:3098:3154","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3072:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:10675:9830":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:3743:18018":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13093:3294":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:22188:30949":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:10605:3940":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:45772:4420":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:5630:14826":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:4692:17256":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:16021:22148":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10369:17851":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:3965:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:42496:4060":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:5301:14788":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43806:29410":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:12946:10025":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5664:14830":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:1011:3864":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:7915:23460":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:3874:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:14369:4424":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:4513:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:299:3123":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11161:3925":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:14690:21365":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:6695:15534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:5044:14763":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:41265:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:16573:22331":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:11174:4206":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:16315:22167":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:4071:3857":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:1500:11676":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:11145:23436":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:44089:3678":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:41333:3955":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"6:5640:14827":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:8315:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:41496:9719":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:23418:29102":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11423:17889":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:16269:22164":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"9:470:16573":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:41464:9717":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"14:164:16703":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:41117:9534":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:4182:16838":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:5505:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:12229:17999":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:5196:17438":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:485:17839":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:8965:4192":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:23385:4075":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:15746:22122":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:15792:22126":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:45485:10059":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:47241:29283":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:16177:22156":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:46886:4331":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:3596:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7027:17735":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:46771:4324":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14585:21357":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:10657:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:5550:14817":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:11090:23314":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:8666:17780":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:42927:10010":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"17:16766:22341":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:47613:29304":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:11629:17905":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:15569:22111":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:16068:22153":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6841:3421":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:8499:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6967:3423":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:2534:3984":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:41962:4051":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"11:718:3491":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:1866:3857":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:8806:4170":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:7956:17757":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"0:20:2416":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"2:45513:3535":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:45748:4423":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:23052:4417":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:2877:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:2638:16784":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:8231:14989":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:15144:21394":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:44106:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:6279:4237":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:47435:4293":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:1667:11692":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13892:3336":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:14624:21360":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:3517:4029":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:44591:9853":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:1885:3908":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:41473:29391":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:14322:21343":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5611:14823":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:2702:16787":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"15:306:16727":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:12670:914":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:562:3837":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1:8823:4187":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:43002:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1643:11690":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:9447:9999":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:3411:9764":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:6062:17702":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:15691:22117":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:12110:4070":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6237:3393":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:22265:4283":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:4963:4108":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:9484:3528":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8276:3988":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:8166:3849":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11770:17932":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:7551:17749":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4914:14747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12331:18010":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5019:14760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:4803:4153":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:6470:23564":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:32945:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:4363:4128":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:894:34001":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:12677:1967":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:544:3370":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:41353:3942":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:5732:4205":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:12007:23344":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:8090:3695":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:7220:17740":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:1582:3489":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:10669:9832":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:14443:21349":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:8106:3824":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"14:31:16702":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:1411:3868":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7966:17758":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11161:34398":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"0:10:2404":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"2:3396:4273":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:16838:20842":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:8433:3711":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:7459:17747":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:44334:29425":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:45505:10056":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40457:9486":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:42662:4059":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:6566:4419":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:6109:17705":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:12227:3721":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:4536:9494":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12201:17997":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:23277:29097":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:906:34003":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:45677:29457":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:15721:22120":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:5282:14785":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:23629:29127":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"11:2513:30955":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:5707:17700":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:34391:9766":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:47160:4304":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:1563:11683":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:44838:9874":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:9236:3691":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:3371:4044":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:8616:4022":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:2229:3971":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"17:13030:18073":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:12246:16734":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13509:17876":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"14:213:16711":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:41435:9715":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:7250:4277":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10965:17860":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:1558:16695":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:2787:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:5414:9844":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"2:7009:29395":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:1690:11695":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:2772:4026":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6736:34000":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:15159:21395":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:3797:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:5568:14819":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:45324:9920":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:357:33880":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:3628:3902":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5575:14820":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6096:17704":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:479:10775":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:1597:11687":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10733:3311":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10860:3314":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:7407:11802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:4247:4100":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:41395:3899":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40389:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:39618:9782":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:12969:3324":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:2043:4005":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:9225:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:7880:3380":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:41445:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:3426:4047":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:3576:9511":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:9569:3998":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:14985:21383":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:2784:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:5328:18125":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:4957:14752":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13819:20837":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13000:18106":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:15884:22134":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12711:18085":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:7284:10826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:4922:4157":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10975:34394":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:1136:3868":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6711:17722":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:41252:9526":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12263:18002":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:6792:17724":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:14598:21358":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:9309:4241":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:16717:22337":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"11:427:33885":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:9436:3716":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:6737:15539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:12272:18049":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:5802:4206":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:3679:3940":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"9:435:16574":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:47663:4294":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:45555:4272":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:1352:17917":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:45033:9528":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:33918:9765":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:41455:9716":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:15985:22144":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8764:4110":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:2129:9697":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:974:3490":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:4355:4127":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:718:22367":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:6670:15531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:5069:14766":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:14924:21379":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7334:17744":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:507:35050":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"13:110:33902":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:5325:14791":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13436:3330":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:23222:29096":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:22277:3536":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:42821:4163":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13120:17864":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:5136:9520":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8648:4067":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5241:14780":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:48036:4367":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12621:18012":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:48093:9455":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13771:20835":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14637:21361":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:10935:3822":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"14:219:16712":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:8595:17777":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"0:0:2832":{"crate_id":0,"path":["fnv"],"kind":"module"},"16:6254:3398":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11564:17916":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:47480:4299":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:42790:4172":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:3782:9786":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:45809:9472":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:11825:17959":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"11:344:33877":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:6197:9718":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:13411:3962":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:11752:3482":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:1247:32876":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:15:2411":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:3712:3485":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:11844:9876":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:4965:4111":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"14:7:16702":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:6810:9728":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:47308:29286":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"11:102:33871":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5117:14769":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:22373:3995":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:15908:22136":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:11494:17894":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:12619:3722":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:4967:4112":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5217:14777":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2548:16780":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11690:17909":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:9424:23294":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10431:17853":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"11:1652:33890":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:2568:2971":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:31062:4074":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:11801:4023":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:22881:4411":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:5323:30139":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8719:4126":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"3:2077:10198":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"2:33036:278":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"16:2682:16786":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"18:643:35050":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5357:14795":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:12671:1903":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:14152:20855":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6267:17710":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:16631:20839":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"18:481:22376":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:3322:261":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"14:201:9924":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:15919:22137":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:5539:14816":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11963:17947":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:46932:4291":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:16359:22171":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6390:15508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:43883:3511":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12924:18094":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:15971:22142":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:735:22368":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:7806:30313":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:10886:4044":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:22178:30948":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:8699:4134":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:8586:3994":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:8030:3527":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:12825:18065":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:40446:9476":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:14389:4421":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:6366:3366":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:15578:22112":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13608:17826":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:1996:3935":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"9:0:2957":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:2948:16798":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:2540:3108":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:7857:9729":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:9528:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:16684:22335":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:7421:17746":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:11206:3692":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:42734:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"11:1542:16694":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:16005:22146":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:6406:17714":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:12253:16734":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:3069:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:13471:9884":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5205:14776":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:47509:4305":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:7355:3427":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:33494:9763":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:11743:17930":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5349:14794":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:10667:9831":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:13186:10065":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:31332:9687":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11540:17897":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"17:13983:20843":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:3843:3713":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:7668:3108":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"11:292:33872":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2671:697":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5381:14798":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13465:17874":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"16:5647:17682":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6543:15520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"3:1785:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:16395:22173":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:4959:3518":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:22987:3995":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:1530:11680":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:1632:3482":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14454:21350":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11981:3707":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:6998:9713":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:7519:3166":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:23607:29125":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:15013:21385":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:519:16749":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:7292:11630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:8055:17761":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:2568:16781":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:4771:9498":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11346:17866":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:5575:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7055:17736":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:3693:16809":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6939:17731":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:1944:3922":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:22259:4280":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5477:14808":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:2493:3971":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:23137:4408":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:6513:10380":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:1639:3857":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:44623:9852":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:15198:21397":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:3063:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:43566:9823":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13219:18117":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:12944:3323":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:8264:17768":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:4371:4129":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:45740:4422":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:22790:4282":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:16230:22161":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:15809:22128":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:491:35049":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"11:686:3490":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:14346:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:3357:9742":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:12662:763":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"5:984:3875":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5395:14800":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:5447:17505":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:3934:4070":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:7074:9946":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:15978:22143":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:10880:3286":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5366:14796":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:8807:3882":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:9209:4198":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"17:12761:18072":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:10114:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:43431:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:42861:3827":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:8351:4036":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:3424:4046":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11266:23568":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:2099:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:16672:22334":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:10176:17845":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:39039:9781":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:45699:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12854:17876":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:41558:9722":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:7515:15956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:7408:23455":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"9:345:16590":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:6710:15536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:6142:17707":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:45566:10080":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"9:318:16629":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:47323:4327":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:3467:4042":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:38874:9778":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:45489:10058":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:45051:9527":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:41933:29399":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:3688:27472":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:10665:9823":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6438:17715":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:10919:3103":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:4255:4102":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5186:14774":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:41164:9529":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:6547:4418":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:41078:9533":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:6631:15526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:7553:15959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11151:17863":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:47192:4359":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:16417:22175":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:12547:9858":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:5652:14828":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6121:17706":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:7494:15955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8298:3986":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:6911:17730":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:7835:17752":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:11458:17891":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:3431:9771":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:10661:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:41517:9720":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:43833:29411":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:41526:9712":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:5932:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:4127:3857":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:41487:3525":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:5748:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:2663:4034":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:9219:4210":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:14396:21346":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:1892:3871":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:8438:4038":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:4838:4097":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:15324:22102":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:4565:31252":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:48210:9462":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:7439:15952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:4233:4098":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:42753:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:7527:3876":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:8272:14995":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5051:14764":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:11063:34396":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6157:3388":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:11994:9871":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:11412:3535":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:6826:3166":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:43580:9831":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12663:18019":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:953:3857":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:3090:31470":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:44551:9860":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:0:2963":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:11222:30152":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:9551:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:2810:31317":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:15448:22105":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:11269:17896":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:10876:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:47530:4311":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:13996:20844":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:909:3485":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:2156:3887":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4869:14742":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2914:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:6378:23559":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:22257:3995":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:5564:9848":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:15995:22145":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4976:14755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:22653:4286":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:316:34002":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:11050:4159":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:23066:9799":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:10623:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:7990:16331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:4517:4132":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:22206:4284":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:10388:25791":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:10892:4042":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:377:3834":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6335:17712":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"11:750:3487":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:40:3903":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:3337:31466":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:2344:31347":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:23548:3995":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:42474:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:10515:23322":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"11:676:3166":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:2818:16792":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:8304:14999":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:8343:23168":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:7505:34088":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:16802:22344":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:16288:22165":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8742:4161":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12146:17995":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:14072:9558":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:22:845":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:7369:3428":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"14:40:20837":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:7559:3889":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:12676:996":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:13243:17867":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:32947:258":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:14178:20857":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:5224:14778":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:44128:3679":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:14558:21355":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:1660:3871":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:8295:17769":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12344:18053":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:23015:9799":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:6774:4227":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:8086:3995":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3590:4005":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:8220:17766":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4964:14753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:12239:23350":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:15896:22135":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:41141:9527":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12608:18011":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:3097:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:1696:4120":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:5139:4155":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:44612:9711":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:41940:9731":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:13482:9881":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:15186:21396":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:14571:21356":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10479:17855":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:6638:15527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:7273:31309":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:5377:17481":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:6749:15541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:15174:3324":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:3042:3995":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:12665:761":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"16:2528:16779":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:3858:3887":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:40409:3115":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:1885:3858":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:5036:14762":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8636:4021":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:5222:4166":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:15115:21392":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:6678:17720":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"16:4265:16875":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:7108:9948":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:8172:3924":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:41371:3989":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:15587:22113":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:22686:30951":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:12635:23431":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:9533:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5488:14810":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:1521:11679":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"7:0:1957":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:983:3865":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:45477:10063":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:16700:22336":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:155:3363":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:3832:16810":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:12580:9859":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:40331:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:44802:9901":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:14730:21367":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:13460:9882":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:2340:16697":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:8277:9740":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:10109:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12889:18101":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:4519:4005":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:2206:3453":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:41505:9727":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:23662:29130":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:14611:21359":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7786:34140":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:7619:3166":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12907:17875":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:43058:3166":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5441:14804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:7072:17737":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:5658:14829":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4896:14578":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5482:14809":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7413:17745":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:1489:11674":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:3937:4069":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12864:18066":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:7248:31305":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:1654:3870":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6702:15535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:14258:21341":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:9262:3692":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:3837:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11447:23407":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:7539:34093":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:0:1764":{"crate_id":1,"path":["std"],"kind":"module"},"18:581:3545":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:8708:17781":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:7326:15948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:8317:17770":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5151:14772":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:15733:22121":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:8447:3121":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:4981:17361":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:41549:3526":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:6295:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:683:3842":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:8394:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:3699:3482":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:45026:9885":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:48108:9456":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11901:17943":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:9477:3718":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8909:4190":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:3719:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:14746:21368":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:23516:4076":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:2588:16782":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4875:14743":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7977:17759":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:4925:4135":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:6651:15529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12836:18100":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:7317:15947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:9286:3166":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:15928:22138":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6694:17721":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:2453:17966":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:559:10785":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9543:4236":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:5557:14818":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:10455:17854":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:45481:10057":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:4202:3485":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12397:18056":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12022:17991":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:5512:14813":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:6132:3694":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:45689:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:940:3489":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12173:17996":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:46833:4290":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:41127:9535":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:41378:9711":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:3423:9769":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:7518:34091":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6659:15530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:43096:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:43244:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:3061:23212":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:45017:9886":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10553:17857":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:7337:15949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:7856:3858":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:8148:3439":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:46918:4343":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:14055:29534":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:3149:127":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"17:13304:17869":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:1883:3907":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:538:10782":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:47740:4328":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:2509:3976":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:47817:4300":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5311:14789":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:40309:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:7635:3174":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:1584:11685":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:8152:3848":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:8949:4191":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:8326:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:699:3844":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:48053:9451":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:15785:22125":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:26660:283":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:42762:3482":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:726:3280":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:3524:18013":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:42909:10011":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:12659:1862":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:42528:4062":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:2495:3972":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3072:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:32911:23486":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:8176:17765":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:2115:3866":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:41947:4227":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:5343:23261":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"13:0:2954":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:3593:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:23410:29364":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:0:2964":{"crate_id":17,"path":["object"],"kind":"module"},"17:15513:22109":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:4171:3166":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:436:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:10810:23570":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:16058:22152":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13553:17878":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:43921:9822":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:2878:16795":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:12655:1352":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11842:17946":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:3012:16801":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:7004:29396":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:12679:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:47936:4340":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:8278:14996":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:11987:4214":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:43318:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:47209:4365":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:12672:1885":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:3298:3870":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:3358:3872":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5295:14787":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:3985:16812":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:11995:17941":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11328:34400":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:5312:23261":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:15595:22101":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11109:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:10889:4046":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"18:538:3273":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:3481:9775":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4984:14756":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12774:18071":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:14069:20849":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6082:17703":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:16341:22169":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:40369:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:41301:3957":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:5821:9946":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:11670:3963":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:4725:4136":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:8623:17778":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12562:18016":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:3469:4043":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:10766:4210":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:16040:22150":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:15801:22127":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:12667:921":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:16013:22147":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:706:9884":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7383:3429":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14122:20853":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:10656:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:40277:3901":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:48187:9461":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2258:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:3803:9492":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:8713:4068":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6873:17728":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:15353:22103":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:919:3166":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6460:17716":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:423:33884":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4039:4071":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:8237:14990":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:8093:17763":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:3291:3482":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:22176:30946":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"10:36:33863":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:9403:23293":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:47057:4332":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5494:14811":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:13489:17875":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:1579:16696":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:14057:20848":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:564:10786":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:43072:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:586:10789":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:7679:3109":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:6895:4231":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:14545:21354":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:3439:16807":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:4805:14738":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7804:34148":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11074:23403":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:14940:21380":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13014:18107":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8027:23586":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:4552:4005":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:12120:3301":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:46801:4325":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11868:3294":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:14859:21374":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11210:34399":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:7569:31341":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:22925:4412":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:8326:16530":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:3108:16803":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"18:563:3275":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:1636:3166":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13079:18114":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:45531:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:888:3873":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:45338:9921":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12160:17969":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:517:10779":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:15624:22115":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13360:17872":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:2834:9544":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"2:42556:3676":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:10202:17846":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:8102:17764":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:2618:16783":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:6864:17727":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:11380:3691":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:1862:3166":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:16191:22157":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"11:832:3862":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:12049:9872":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:43816:3511":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:508:23531":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:44570:9862":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:12214:17998":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:12976:9888":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:12438:23585":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:8230:17767":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12409:3320":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:23001:4416":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:3079:3225":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:7098:9947":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:1711:11697":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6186:17708":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1569:11684":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:3697:3993":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:1703:11696":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:23596:29124":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:5428:14803":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:34949:9774":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:7627:3166":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:12656:351":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:4488:31252":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:6792:15543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:23527:4072":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:42982:224":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"16:3139:16805":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:3877:18036":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:6590:15522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11616:17906":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:15876:22133":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:1083:16692":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:1612:3491":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:1643:3858":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:4193:4096":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3560:4051":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13795:20836":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:22963:4413":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:6428:15512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:4840:9506":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:34458:9768":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10062:17842":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:16848:20844":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:13108:3290":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:45682:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:45798:9474":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:6901:17729":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:12624:3850":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:12673:1891":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:14897:21377":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:44136:3680":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12357:18031":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:999:3862":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13700:18154":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:10671:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:9278:4246":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13876:3332":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:12653:1925":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"11:1118:16693":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:2228:9813":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"5:4292:4005":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:969:3859":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:13592:17884":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"16:5142:17430":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:2811:4037":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:41104:9541":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"9:49:3455":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"6:7580:15961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:6602:15523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:5356:454":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:13730:18155":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:10301:3530":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:10524:17856":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:6967:4234":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:2579:31312":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:31326:9488":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12385:18055":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:43281:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:963:3858":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:15817:22129":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:1919:3915":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:4413:4005":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:14350:21345":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:8606:3519":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:6816:3702":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:6398:15509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:9292:4243":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:47270:29284":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:6121:4005":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:11128:3990":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:14476:21351":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13630:17825":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:6700:3857":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:45782:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12065:17994":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:45821:29480":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:16350:22170":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:3809:9491":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:47397:4339":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:46818:4330":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:7762:17751":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:9457:23297":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:9538:4235":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:6756:15542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6645:15528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8653:4058":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:1507:11677":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:4621:3513":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:2394:3166":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:5415:17496":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:47547:4360":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:3792:268":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:5134:4005":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:7889:23458":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6747:3414":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:41286:9991":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:1632:3886":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:4118:16820":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:7750:3960":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12737:18097":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:23362:3539":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4902:14746":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:40439:9787":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:14081:20850":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:2770:16790":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:5515:31235":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12749:18098":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:8175:16493":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:7463:15954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:649:3482":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15035:21386":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13207:18148":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:1063:33893":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:14190:20858":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:11564:3995":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8101:3823":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5107:14768":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:41042:3841":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:23095:3995":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:16219:22160":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:8134:3437":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:44704:9891":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:15389:22104":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:8335:3101":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:4906:9509":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:2167:3888":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:16051:22151":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"15:288:16726":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:2448:16776":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:8025:3434":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4947:14751":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:4703:4135":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:1942:3921":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:11153:4158":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:751:2400":{"crate_id":1,"path":["std","collections"],"kind":"module"},"2:8804:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:680:22372":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:7430:15951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:1382:3867":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8091:3836":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"7:31:16546":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10601:3306":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:650:3838":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:15534:22110":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:2354:3482":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:1539:11681":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:33706:9762":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:6513:15518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11814:17934":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6026:3387":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:284:31235":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:12666:939":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:5375:4024":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:13163:10068":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:14165:20856":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:6557:4237":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:5687:17699":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11053:17861":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:33004:3674":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11259:17864":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:2025:3936":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:11430:3998":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:45008:9887":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:11917:4188":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"6:1657:11691":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:13688:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:14883:21376":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:45042:3841":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:15963:22141":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:7156:17738":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:532:10781":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:2988:16800":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6835:3419":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:44097:3105":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13836:20838":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11915:3290":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:9321:4244":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:896:3482":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"18:689:22373":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:47368:4333":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:16329:22168":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:7710:3961":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6623:33987":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:13126:10067":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:22165:30945":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:48119:9457":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:4384:4130":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13231:18116":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:13044:18109":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:4243:4099":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:16164:22155":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11356:34401":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:2908:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:13530:9907":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:5154:18119":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:15048:21387":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:5873:4209":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:14431:21348":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:9863:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:47028:4279":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:3599:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"3:0:527":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:8562:17775":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:8525:17773":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:1625:11688":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:10924:2399":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7165:16721":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:22385:3536":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:570:10787":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:0:585":{"crate_id":2,"path":["core"],"kind":"module"},"17:13909:3338":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:43207:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4881:14744":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10132:17843":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:12960:10027":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:11502:17895":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:33033:9667":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:12958:18104":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:4489:29509":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:5560:9847":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11485:17893":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"18:515:22378":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12935:18103":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:13648:17879":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:1506:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"11:820:3861":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:3792:31235":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:45359:9923":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:3075:272":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:4362:3482":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:2433:16775":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8976:4193":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:11359:30153":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"2:48157:9459":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:8330:3102":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:9372:4225":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:96:22358":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6617:15525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:6310:3524":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:36998:9777":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:48134:9458":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:523:10780":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:42640:29242":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:2898:16796":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:11956:9870":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:3086:31469":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5127:14770":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:4171:4094":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4997:14758":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:776:3857":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:7997:3432":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:40630:3098":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:44491:29532":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:47095:4344":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:8249:14992":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:670:22371":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12373:18054":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:48015:4346":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:7723:9991":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:4767:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:6419:3372":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12814:18099":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:46985:4309":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:12270:23583":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"2:2687:9800":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:1100:3865":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:5740:3285":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:10496:3915":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:8335:3122":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10634:3308":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:15771:22124":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:2291:3493":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:2261:31343":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10766:3312":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:8568:3715":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:5222:17441":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:14483:3878":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:8852:30708":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:389:33882":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:545:10783":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:8633:17779":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:8243:14991":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:2251:3810":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13959:20841":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:1123:3867":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12093:3317":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10674:25789":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:45497:10060":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:5196:14775":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:34190:4274":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:46953:4297":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:43875:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:8428:23171":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:4322:4005":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:5139:14771":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:40233:9784":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:11137:23433":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:7935:17755":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:15951:22140":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:7575:17750":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:42674:4063":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:23618:29126":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"11:2323:3867":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:15659:3346":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:23585:29123":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:6744:15540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"18:531:22379":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5025:14761":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:927:3487":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:41089:29224":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:8271:3987":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:2341:3966":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:2235:9811":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:4897:9508":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:8281:9739":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7904:17753":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:113:22359":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10333:17850":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:45139:9914":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:0:2959":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:47965:4361":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:6060:4224":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:8316:16529":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:11493:23410":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:2810:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"18:635:35063":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12725:18096":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:14870:21375":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5462:14806":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:6953:3703":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:12674:1897":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:5341:14793":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:24260:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:32929:9507":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:47568:29303":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:8359:3713":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:11165:4201":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:5417:1007":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:6148:3503":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:2099:3865":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10840:3313":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13387:3327":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:48082:9454":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:5604:14822":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:43900:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:44560:9864":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:31705:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:1001:3866":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:46850:4296":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:5503:14812":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:22152:30940":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:6360:15446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:3315:277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:44856:9872":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:38929:9779":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:14665:21363":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:16658:22333":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:7987:17760":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"9:412:16576":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:9500:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44988:4021":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:16525:20836":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:12447:18057":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:5230:14779":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:2364:3496":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:31294:3544":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:44902:9898":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:1042:16691":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:23469:29117":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10150:17844":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:2858:16794":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:14110:20852":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:45181:9917":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:8260:14993":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:8871:4188":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:11883:9865":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:8738:4158":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12898:18102":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:6719:15537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:31358:29205":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:4808:17326":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:4140:4092":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:8894:4189":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8577:3990":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:11603:17907":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:7694:3501":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:14650:21362":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:6523:15519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11989:3315":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:16828:22346":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"9:490:16577":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:16380:22172":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:4927:17353":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:34603:9772":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:47224:4366":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:8559:3527":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:3324:3871":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:7539:3857":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11888:17944":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13328:17870":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:9841:3988":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:7599:3505":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:41149:3841":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:3540:9783":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:4150:16829":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:912:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:5623:14825":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:8281:3985":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11318:17865":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:11069:23401":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:8543:17774":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:1632:11689":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:16029:22149":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12990:18105":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:521:22375":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:8959:3482":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:23640:29128":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:6300:17711":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:45761:29539":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:41747:9726":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:9444:17750":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:16211:22159":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:14776:21369":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:14307:21342":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:22134:3545":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:578:10788":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:2838:16793":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:8609:3443":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:2525:33868":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:15001:21384":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:2348:3968":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:5130:4154":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:1665:3872":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5265:14783":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:12150:4069":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11512:17896":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:10815:17858":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:12103:3318":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:6769:33667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:3332:3869":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:14910:21378":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:4185:4095":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:5289:3503":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:22204:3995":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:8642:4068":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:7445:15953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:214:9819":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1132:3868":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:44081:3104":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:12035:9874":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:11759:23572":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:5346:17473":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11438:17890":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:321:34003":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:3822:30385":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:12651:1208":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12318:18052":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:9214:4199":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"1:11272:23569":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:43133:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:1919:9665":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:14971:21382":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:13202:10066":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:15469:22107":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:2521:3982":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:5375:14797":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:44752:9870":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6679:15532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"11:763:3489":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6422:15511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:5316:17466":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:7539:15958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:8294:14998":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:23454:29115":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7916:17754":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12242:18000":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:14521:21353":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:7962:10733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"15:394:16737":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:41588:9724":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:6500:16746":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:3079:271":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:46903:4337":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:3585:16808":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:41598:9714":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:9846:23565":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:5471:14807":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:5529:14815":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:11577:252":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:3558:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:14365:18060":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:14095:3525":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:15763:22123":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:44118:4188":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:5088:14767":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:41989:9737":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:6454:4424":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:6486:15475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7347:3384":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5271:14784":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7492:34086":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:10663:9824":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:31347:3511":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:14427:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:44643:9869":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:1001:3482":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:7797:9926":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:5682:4202":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:6727:15538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:16744:22339":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:14710:21366":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:45509:10064":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13971:20842":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:16613:20838":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:6668:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11585:23416":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"2:44998:9896":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:4:1292":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:6605:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:41203:9530":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:702:3845":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:43587:9832":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5405:14801":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:44956:9900":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:45390:9904":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:2511:3977":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:13260:17868":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:596:17840":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:42831:4173":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:5165:14773":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11654:17864":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:6610:15524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:14678:21364":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:5939:4237":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:7984:16330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14008:20845":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12878:18068":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12187:17965":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:4591:4124":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:6915:31235":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:42830:3851":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:15861:22131":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4890:14745":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:1233:17910":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:7741:9540":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:5111:17422":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:3925:3858":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:11921:9877":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:16777:22342":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"11:2507:33864":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7946:17756":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:2303:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"10:0:2958":{"crate_id":10,"path":["adler"],"kind":"module"},"2:7740:9539":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:11776:3485":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:6806:3417":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:4816:14739":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11552:17922":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:1227:31468":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:22648:3995":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"18:623:35062":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:3448:3858":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:16301:22166":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10571:3284":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:3306:16806":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11590:17908":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:4653:3514":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:44580:9863":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6203:17709":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:3571:3884":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2736:4035":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:40294:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12643:3290":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:16650:22332":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"8:0:2956":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:15074:21389":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:2126:3867":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:12298:18051":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1:9336:4242":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6802:15544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:48249:9463":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:473:10774":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:7787:9925":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:1573:3487":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:608:35072":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11079:3985":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:12979:18095":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"11:2533:33869":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"11:2414:3857":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:4871:17343":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:0:2965":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:8162:3440":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:48073:9453":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:2422:17942":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13183:18113":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"3:2062:10199":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"7:78:16553":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"15:0:2962":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:619:3819":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:7569:27240":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:12087:23580":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5420:14802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11939:17949":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11395:17888":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:2344:3967":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"0:24:2422":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"2:34257:4276":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:3331:27943":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:8206:3441":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4333:27239":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:1551:3166":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:573:35050":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:7713:34139":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:4850:9507":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:4402:16989":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8694:4133":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:22163:30943":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:321:33875":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:4501:29511":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:4436:4131":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:1781:31235":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:1397:3866":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:14160:30758":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:3401:4275":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6950:17732":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10405:17852":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:6502:3700":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:707:3846":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:6687:15533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:9834:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:10586:3285":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:789:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:43042:3482":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:10517:23321":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:44653:9867":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:7501:23578":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:47907:4306":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:16203:22158":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:7344:4161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:15102:21391":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:13856:20839":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11102:17862":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:4852:23391":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:11112:34397":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:982:3860":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13157:18118":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:13399:17873":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:4764:17305":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7256:17741":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:1684:11694":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:15677:17912":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:978:3491":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:1878:3869":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:22675:3537":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12430:18030":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:1520:3482":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2820:9543":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:41157:9528":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:43845:29418":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6995:17733":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:3043:9553":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:12664:782":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6729:3383":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:47177:4310":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11757:17931":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:5755:33928":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:5387:14799":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:659:22370":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:2159:1397":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:15699:22118":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:5450:14805":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:2722:16788":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:38984:9780":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:32869:4212":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:3095:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:23347:3506":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:12063:9875":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:33003:3117":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:5585:14821":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:46970:4303":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:8500:17772":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:3707:4016":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:7510:3479":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:8011:3433":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:6778:4228":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"11:851:3863":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:14187:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3872:4066":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:754:22374":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:6472:15474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:7762:9845":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:41323:3956":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"16:7189:17739":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:8284:14997":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4970:14754":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"15:327:3445":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:41539:9721":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:123:3450":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:909:4073":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:11200:3290":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:7972:17841":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12055:17993":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:6500:15516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:6746:31235":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:15937:22139":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:4776:9499":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:9351:4245":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:44710:9890":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:11215:30151":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"6:4929:14749":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"9:168:3470":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:45349:9922":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3373:4045":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:45239:9918":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5255:14782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:41244:9532":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:14373:18058":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:2275:3865":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:6852:15571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:3066:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12686:18017":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:14413:21347":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:14498:21352":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:14212:9559":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:5280:17453":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:4954:17357":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:6893:15573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:23706:29134":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"11:808:3859":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:2685:9799":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:15477:22108":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:47862:4334":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:80:22357":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:9597:9882":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13575:3324":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:6169:10372":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11715:17904":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:44542:9861":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:23695:29133":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:11084:30149":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"6:1551:11682":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:7901:23459":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:12787:18070":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:5716:4204":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:42852:10007":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:4850:23389":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:41417:3520":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:45273:9919":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5521:14814":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:5170:17435":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:40197:9490":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:42961:226":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"11:813:3860":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:46786:4289":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6638:17719":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:8705:4123":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:14337:21344":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:8324:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:45685:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:45501:10061":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:15640:22116":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:5253:17449":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:14788:21370":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5007:14759":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:11251:23566":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:23332:3538":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:14384:18059":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:9587:4271":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8124:3822":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:42770:3485":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:41313:3313":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:724:31451":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:48172:9460":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:1211:32875":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"9:226:4188":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:44734:4023":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:40281:9785":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:6981:3424":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:42512:4061":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:43468:3677":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:5083:17417":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12081:17967":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:383:3835":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13928:3345":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:7308:10655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"14:0:2961":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:9390:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:5389:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:16250:22163":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4829:14740":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:16116:22154":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:7022:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11794:17933":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:11667:17911":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:1898:3872":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"11:2519:33866":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10821:34382":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:6586:17718":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:16730:22338":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:43050:3485":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"11:787:3858":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:32922:29505":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:44693:9894":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:12668:927":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5617:14824":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:43355:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7013:17734":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:9505:4226":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:2658:16785":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13052:18124":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:7982:23353":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11643:3290":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"12:0:2960":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:44720:3313":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:41971:9734":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:6030:3857":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:12038:23424":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:6878:15572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:10673:9829":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10700:3310":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:6274:4005":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:3334:27944":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:6053:4223":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:3328:27796":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:45118:9913":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:41981:9735":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:2142:3713":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:3364:9744":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:15128:21393":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:8063:17762":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:16755:22340":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:5249:14781":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:47110:4292":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:23109:4407":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:15088:21390":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:46865:4326":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:4900:17349":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10667:3309":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:14021:20846":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:1858:3482":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:8225:14988":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:7398:34073":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5179:4119":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:765:22369":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:2440:3858":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:46999:4358":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:41237:9531":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:16791:22343":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:4928:3517":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:12652:492":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13133:18120":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:40349:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:2032:813":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:14845:21373":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12072:3453":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"14:186:16710":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:2465:3355":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:491:10777":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:553:10784":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:14834:21372":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6820:17725":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:23651:29129":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"5:1535:3485":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:7549:3877":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:3199:3939":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:2746:16789":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:465:10773":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:537:3810":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:613:35059":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:497:10778":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14039:20847":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:4701:3515":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11728:17903":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:5058:17415":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:7302:17743":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:12657:1738":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:42869:10009":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"1:12603:23355":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"0:21:2418":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"2:23142:4406":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:7872:9943":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:2750:10042":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:11393:4211":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6171:3391":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12588:18015":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:1514:11678":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:5045:4107":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:41404:3519":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:8288:3712":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:3887:16811":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:42696:4064":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:6452:15514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:2964:16799":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13757:18156":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:45707:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:12077:9873":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:41723:4022":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:12650:436":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:7728:4172":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:23396:29101":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:7471:23576":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:3147:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:1601:3490":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:7390:11804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:8266:14994":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6387:17713":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13344:17871":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:13477:9883":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:1005:3863":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:43170:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:31732:3545":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11576:3294":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:10604:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:1675:11693":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11469:17892":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:5334:14792":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:16241:22162":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:3327:3512":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:12021:23346":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:7524:15957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:32915:17780":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"11:859:3864":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:23503:4077":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:8582:17776":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:41574:9723":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:2096:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:3303:31462":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:4157:31235":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:15456:22106":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:33035:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"17:13529:17877":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7468:17748":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:44338:9854":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:6578:15521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:6087:3693":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:47642:29305":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:13195:18112":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:901:34002":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:13240:9876":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:14955:21381":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:2424:9814":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"18:589:29448":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6779:17723":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13066:18115":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"10:44:3454":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:12675:1879":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:34776:9773":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:47014:4364":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:2122:696":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"14:159:16702":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11014:34395":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:12254:18001":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:6858:14652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:12619:9809":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"9:380:16575":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10311:17849":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:16512:20835":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:7738:3959":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:2297:3866":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:15713:22119":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:45372:9903":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:6416:15510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6656:3399":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:44663:9868":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:9396:3816":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:1494:11675":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:47418:4345":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4842:14741":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:5154:4156":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:8813:9738":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:1727:11698":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10830:17859":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"6:6441:15513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:12678:1460":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:44938:9899":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:4555:9495":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:7562:15960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:3124:16804":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:22142:30940":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:5870:4207":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13673:18153":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:3046:16802":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:485:10776":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:23013:31176":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"16:7279:17742":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:8187:3925":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13021:18108":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:48062:9452":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:14811:21371":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:43861:29420":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:13423:3328":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:3587:3118":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4937:14750":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5319:14790":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:23496:29365":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6459:15515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:5725:3284":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:16538:22330":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:11116:23319":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:988:3861":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4792:14737":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11465:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:7424:15950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:2504:16778":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:663:3485":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:3080:31471":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11099:3712":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:3317:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11993:23342":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:3082:31315":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:44680:9895":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:2918:16797":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:42714:4065":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:42778:3166":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:7041:3425":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:698:3278":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:7877:23456":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:44634:9866":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:7583:3166":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:8007:16332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14093:20851":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:1867:722":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10255:17847":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:10884:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:2413:16747":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12045:17992":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11404:23439":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:34324:9767":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:1122:31235":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10283:17848":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:41426:3523":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"18:598:35056":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:45493:10062":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:8040:34171":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:42937:222":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"11:2374:3485":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:12035:17960":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:3640:3991":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12800:18069":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5288:14786":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:4239:16872":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:15868:22132":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:1648:3869":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"11:1027:3867":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:8687:4063":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:595:3817":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:41048:9496":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:3622:3992":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:14137:20854":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8629:4023":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:10441:9821":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:1114:3866":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:2226:9812":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:41956:9733":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:8310:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4990:14757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11189:23331":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6850:17726":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:1885:3870":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:32946:251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:23684:29132":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:6898:4232":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:12575:18014":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:16814:22345":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:12287:18050":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:8797:4171":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:3426:9770":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:41733:9725":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:12032:23423":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:35122:9776":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11855:17945":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:16403:22174":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:44321:29423":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"2:47139:4298":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:8623:3313":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:651:35050":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:8480:17771":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:45168:9916":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:15062:21388":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"13:229:3449":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:4842:17337":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6887:3422":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:1871:3858":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:9674:3921":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:13453:9880":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:928:3874":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:32936:9983":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:23434:29112":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:15611:22114":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:12658:1772":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:43573:9824":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:0:2955":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:7819:25856":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:4848:23387":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:2872:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:12171:4071":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:2484:16777":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13947:20840":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:15844:22130":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:6571:17717":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:1366:3865":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:22383:4281":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:680:17841":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:9270:3482":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:5022:4113":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:6505:15517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:11604:3964":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:23673:29131":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:12669:933":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:9249:4211":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:5057:14765":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:47078:4338":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:2243:17948":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:4134:4093":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:44784:9902":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:47994:4312":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12133:17968":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:9431:3699":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:44884:9897":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:12008:17940":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13585:3331":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:2339:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:1591:3859":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:41275:3958":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:47291:29285":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:9385:3696":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:7367:11819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:3158:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22788:3995":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:43394:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:45154:9915":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:7209:16720":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:10296:30709":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4921:14748":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:1589:11686":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:2394:17980":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:12663:766":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:9513:4005":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:4199:4097":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:5946:4238":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:5696:4203":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6040:17701":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:2794:16791":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}