{"root":"0:0:2138","crate_version":"1.0.7","includes_private":false,"index":{"2:12423:28993":{"id":"2:12423:28993","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1721":{"id":"0:20:1721","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:9725:1704","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12448:29001":{"id":"2:12448:29001","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11993:127","`FromStr`":"2:11992:3555"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11992:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11992:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1713"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12362:27492":{"id":"2:12362:27492","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43652:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12436:23785":{"id":"2:12436:23785","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:9220":{"id":"5:5511:9220","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2581:1528":{"id":"2:2581:1528","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3409:1542":{"id":"2:3409:1542","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39245:8972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12413:28989":{"id":"2:12413:28989","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12032:8907","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::rmatch_indices":"2:12416:28990"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43510:8922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12343:23739":{"id":"2:12343:23739","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12330":{"id":"2:12330","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12331:836","2:12332:2451","2:12333:28977","2:12334:28978","2:12336:28979","2:12339:22845","2:12340:28980","2:12341:320","2:12342:319","2:12343:23739","2:12345:23740","2:12347:23741","2:12349:23742","2:12351:28981","2:12352:28982","2:12353:23764","2:12354:23765","2:12355:27491","2:12356:26941","2:12357:1717","2:12358:27517","2:12359:27529","2:12360:26587","2:12361:28983","2:12362:27492","2:12363:23782","2:12366:23783","2:12369:23784","2:12372:2492","2:12376:2450","2:12380:23772","2:12383:23774","2:12386:23776","2:12389:28984","2:12392:28985","2:12395:23778","2:12398:23780","2:12401:28986","2:12404:28987","2:12407:2367","2:12410:28988","2:12413:28989","2:12416:28990","2:12419:28991","2:12421:28992","2:12423:28993","2:12425:28994","2:12426:28995","2:12427:28996","2:12430:28997","2:12433:22417","2:12436:23785","2:12439:28998","2:12442:28999","2:12445:29000","2:12448:29001","2:12450:23377","2:12451:23681","2:12452:23378","2:12453:23374","2:12454:23373","2:12455:29002","2:12457:3233","2:12458:29003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5517:29662":{"id":"5:5517:29662","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:28996":{"id":"2:12427:28996","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12057:8902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2258:2353":{"id":"2:2258:2353","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1727":{"id":"0:24:1727","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1429:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12376:2450":{"id":"2:12376:2450","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41400:181","prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:22417":{"id":"2:12433:22417","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12454:23373":{"id":"2:12454:23373","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:10:1709":{"id":"b:2:2577-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:128","2:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2572-0:10:1709":{"id":"b:2:2572-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2575:128","2:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12334:28978":{"id":"2:12334:28978","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:28994":{"id":"2:12425:28994","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:23784":{"id":"2:12369:23784","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12331:836":{"id":"2:12331:836","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12038:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12426:28995":{"id":"2:12426:28995","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:10:1709":{"id":"b:2:2256-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2778:2405","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:2353"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12361:28983":{"id":"2:12361:28983","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43624:8921","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:29663":{"id":"5:5525:29663","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2261:20933":{"id":"2:2261:20933","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:27529":{"id":"2:12359:27529","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12358:27517"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43643:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12342:319":{"id":"2:12342:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8557:3537-0:10:1709":{"id":"a:2:8557:3537-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8557:3537","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12347:23741":{"id":"2:12347:23741","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12354:23765":{"id":"2:12354:23765","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12353:23764"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:23377":{"id":"2:12450:23377","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2613:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:18:1715":{"id":"0:18:1715","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12455:29002":{"id":"2:12455:29002","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4555:29002"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43659:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12458:29003":{"id":"2:12458:29003","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4553:29003"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43677:8919","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2828:2406-0:10:1709":{"id":"a:2:2828:2406-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2828:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:16:1713":{"id":"0:16:1713","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:27491":{"id":"2:12355:27491","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43330:8914","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:29664":{"id":"5:5526:29664","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2413","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2413","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:29660","5:5511:9220","5:5514:29661","5:5517:29662","5:5525:29663","5:5526:29664","5:5527:3420","5:5528:23376","5:5529:23375"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12419:28991":{"id":"2:12419:28991","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8556:3246-0:10:1709":{"id":"a:2:8556:3246-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8556:3246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12383:23774":{"id":"2:12383:23774","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11848:8898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12392:28985":{"id":"2:12392:28985","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12032:8907","str::split":"2:12380:23772","prim@char":"1:12038:428","str::split_terminator":"2:12389:28984"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43428:8926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1723":{"id":"0:21:1723","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:727:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12363:23782":{"id":"2:12363:23782","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2259-0:10:1709":{"id":"b:2:2259-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2778:2405","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2261:20933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12395:23778":{"id":"2:12395:23778","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907","str::rsplitn":"2:12398:23780"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43464:8896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:28987":{"id":"2:12404:28987","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12439:28998":{"id":"2:12439:28998","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2771:223-0:10:1709":{"id":"a:2:2771:223-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12360:26587":{"id":"2:12360:26587","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43614:3396","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12340:28980":{"id":"2:12340:28980","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12345:23740":{"id":"2:12345:23740","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12333:28977":{"id":"2:12333:28977","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:28990":{"id":"2:12416:28990","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12032:8907","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::match_indices":"2:12413:28989"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43528:8923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:23374":{"id":"2:12453:23374","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:29660":{"id":"5:5510:29660","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2413","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2413","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:3035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:28997":{"id":"2:12430:28997","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12421:28992":{"id":"2:12421:28992","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12353:23764":{"id":"2:12353:23764","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12354:23765"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12349:23742":{"id":"2:12349:23742","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2138":{"id":"0:0:2138","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1709","0:20:1721","0:21:1723","0:24:1727"],"is_stripped":false}}},"2:12351:28981":{"id":"2:12351:28981","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12044:1448","str::slice_mut_unchecked":"2:12352:28982","crate::ops::Index":"2:3068:3284"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2788:231-0:10:1709":{"id":"a:2:2788:231-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12356:26941":{"id":"2:12356:26941","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43336:8913","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12380:23772":{"id":"2:12380:23772","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12032:8907","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::split_whitespace":"2:12358:27517","str::rsplit":"2:12386:23776"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43360:3398","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2566-0:10:1709":{"id":"b:2:2566-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:19:1716":{"id":"0:19:1716","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:27517":{"id":"2:12358:27517","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12359:27529"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43634:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_usize","write_u32","write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_i128","write_i16","write_u128","write_u16","write_str","write_isize","write_i32"],"trait":{"name":"Hasher","id":"2:9685:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1715","0:19:1716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:10:1709":{"id":"0:10:1709","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:2788:231-0:10:1709","a:2:2828:2406-0:10:1709","a:2:8557:3537-0:10:1709","a:2:8556:3246-0:10:1709","a:2:2771:223-0:10:1709","b:2:2566-0:10:1709","b:2:2572-0:10:1709","b:2:2259-0:10:1709","b:2:2562-0:10:1709","b:2:2256-0:10:1709","b:2:2577-0:10:1709","b:2:3407-0:10:1709","0:17","0:13"]}}},"2:12357:1717":{"id":"2:12357:1717","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43346:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12332:2451":{"id":"2:12332:2451","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12352:28982":{"id":"2:12352:28982","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12044:1448","crate::ops::IndexMut":"2:3072:3285","str::slice_unchecked":"2:12351:28981"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2575:128":{"id":"2:2575:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:2565:2444":{"id":"2:2565:2444","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2539:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2580:128":{"id":"2:2580:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31903:3571","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2562-0:10:1709":{"id":"b:2:2562-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:2444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2576:1529":{"id":"2:2576:1529","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12336:28979":{"id":"2:12336:28979","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12334:28978"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2568:715":{"id":"2:2568:715","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3407-0:10:1709":{"id":"b:2:3407-0:10:1709","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2778:2405","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12366:23783":{"id":"2:12366:23783","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12372:2492":{"id":"2:12372:2492","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41400:181","prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12386:23776":{"id":"2:12386:23776","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12032:8907","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::split":"2:12380:23772"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43378:8892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12341:320":{"id":"2:12341:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12342:319","`u8`":"1:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12389:28984":{"id":"2:12389:28984","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12032:8907","str::split":"2:12380:23772","prim@char":"1:12038:428","`DoubleEndedIterator`":"2:7472:121","str::rsplit_terminator":"2:12392:28985"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43410:8927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12398:23780":{"id":"2:12398:23780","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12038:428","str::splitn":"2:12395:23778","self::pattern":"2:12032:8907"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43482:8894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12401:28986":{"id":"2:12401:28986","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:2367":{"id":"2:12407:2367","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12032:8907","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::rmatches":"2:12410:28988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43564:8924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12442:28999":{"id":"2:12442:28999","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12445:29000":{"id":"2:12445:29000","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8907"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12452:23378":{"id":"2:12452:23378","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12457:3233":{"id":"2:12457:3233","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4556:3233"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43668:3234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:29661":{"id":"5:5514:29661","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:3420":{"id":"5:5527:3420","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12410:28988":{"id":"2:12410:28988","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12032:8907","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::matches":"2:12407:2367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43582:8925","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:23376":{"id":"5:5528:23376","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12453:23374"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12339:22845":{"id":"2:12339:22845","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11592:8911"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:23375":{"id":"5:5529:23375","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12454:23373"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12451:23681":{"id":"2:12451:23681","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39432:23654","Self::is_ascii":"2:12450:23377"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39432:23654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:3655:15455":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:932:3250":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:47773:8810":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:943:3251":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3989:3455":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:41636:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4415:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:12051:764":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:14100:20672":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:40480:9203":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:149:2651":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:21447:3647":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:8665:8903":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:7425:3329":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2782:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:47217:3667":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:4806:16073":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:3212:3258":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:12043:1418":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:9148:27771":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12437:19872":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10097:16523":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:10903:16636":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:44167:9398":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11639:16504":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10366:16574":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12750:19890":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:7513:16395":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:5830:16353":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:3648:2456":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:46215:27292":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:8556:3246":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12172:19379":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:7523:16396":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:4176:3485":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:11221:22425":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:2665:3326":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:44079:9378":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13554:20633":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:39833:3234":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:12925:3263":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:1840:3306":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:10776:3365":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:44294:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:7430:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7090:31269":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:2598:3399":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5076:13527":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:43744:8937":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:805:3250":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"9:177:3026":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:44091:9382":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:2504:15428":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:12052:8904":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12983:19904":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:7526:13688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9564:16491":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8174:3374":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:12057:1549":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:1779:3290":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:5612:2707":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:1781:3291":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13244:19922":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:9650:2857":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:9752:16494":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:573:10008":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:3735:3272":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:10126:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6901:2986":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6720:14605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10520:16617":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:14420:20693":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2428:15425":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:5398:3561":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:12059:1547":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:8097:16411":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"14:31:15347":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:5866:16354":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:41831:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:6543:3592":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:7360:31597":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:22316:3449":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:7683:2792":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:21323:3641":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:3565:16656":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:11737:9390":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11407:16497":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12543:19877":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11053:2795":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:113:20717":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:10995:3570":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:7261:3049":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:6644:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:14033:20665":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:21052:3645":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"5:2966:30327":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:5363:16342":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:39912:8919":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:6811:3634":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:2536:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:119:9678":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:14282:20683":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:8978:16487":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11272:16721":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:2223:3348":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:7231:28826":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4465:13462":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:80:20715":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:7893:9184":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12024:2900":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:8925:3599":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:14469:20697":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11845:16734":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:4003:3457":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:6456:16369":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:41526:9329":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12086:19373":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:5982:16357":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:8408:3548":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:653:10058":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:8115:16412":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4881:1027":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13973:20659":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:1067:3256":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:40673:27503":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:5588:16344":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:3945:3452":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:2840:3629":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9328:2876":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:11813:9391":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:9921:16542":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12267:19386":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:8072:16410":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:1273:3256":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11226:16719":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:10540:3413":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:5781:3107":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:8807:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:9133:3379":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:7545:2713":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:4007:27457":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:30349:27153":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:3305:3414":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6352:2980":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:2576:2747":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:5085:25587":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4618:13478":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:8953:16486":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:7534:16397":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:3441:16638":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2831:8831":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:4347:8998":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:5905:16355":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:6195:3112":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:21421:3638":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:44286:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:9933:16536":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:1495:10891":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:358:3229":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2744:15438":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11934:19368":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:2938:9246":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:8313:3491":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11074:16715":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:42702:3094":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:723:3040":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4750:13490":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:8134:16413":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:554:10005":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:11612:25608":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:6929:2988":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2325:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:7525:2411":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:1750:27543":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:2305:15420":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:4743:3468":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:42028:3092":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:39860:27087":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9003:16488":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:1831:2709":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:4160:3483":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:629:28822":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12111:19375":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:1638:10906":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:7544:16398":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:44367:8825":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:1696:10912":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7462:16391":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13632:20637":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:1568:2709":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:9985:16526":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10916:16634":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11761:16508":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:45895:3659":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:43624:8921":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:20863:26983":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:14448:20695":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4856:13504":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:43226:8872":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:7732:3105":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:4002:2689":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:7595:13697":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5053:13524":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:8847:3570":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:2766:15439":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"15:306:15372":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:6680:11021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6600:16375":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:2855:9230":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12098:19374":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:562:10006":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:878:2676":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:40254:9187":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:46449:3712":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4608:13477":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10340:16567":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11316:16713":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:39848:9022":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:7848:3367":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:45370:3656":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"11:1611:2662":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12043:2907":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:40202:27493":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:41230:3432":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:10953:22593":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10397:16613":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4957:13515":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:10580:2792":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4889:13507":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:6627:14603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:12833:2757":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:11394:22342":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:7921:3407":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11710:2887":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13989:20661":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:35:2665":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13487:20631":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:3256:8985":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:21337:3078":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:6017:14189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:3797:15472":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:8205:3397":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:8567:3554":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:3229:9249":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6792:16379":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:14316:20686":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:8686:16478":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:43239:8888":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:4830:818":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:6485:2669":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:41483:3535":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:2788:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"18:736:20728":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:652:32269":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:9152:3628":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5017:13521":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:8205:16417":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:2321:15421":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:8713:16479":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:41909:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:11586:2893":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:40027:3331":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:6467:2780":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5027:13522":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:836:3252":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:7555:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13723:20642":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:12045:1532":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:40267:9198":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:11592:8911":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:481:20736":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:43972:8928":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:2049:3272":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:9481:3368":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"18:521:20735":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:4835:16078":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:12039:1567":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:42455:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12422:19871":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:400:16475":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:2539:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:39890:9023":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11822:2802":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:22796:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:46685:3678":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:1517:15341":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:14110:20673":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:2250:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:9488:32251":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:12237:19384":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:4032:2669":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:6769:2707":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:47826:8813":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6753:14608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11337:16724":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:6467:16370":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:30243:27156":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:21066:9261":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:4628:13479":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11719:16506":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43378:8892":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:7888:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"9:330:15275":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10240:2878":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:4164:2695":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:538:2841":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:8181:3002":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"9:0:2255":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:491:32291":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:5054:25587":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:587:10010":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:6880:9191":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12765:19891":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13202:19919":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:10831:3370":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:14296:20684":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:2943:9247":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:2875:3632":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:2562:2763":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:1442:2456":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:7396:27175":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3183:30005":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13422:20629":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:40104:8871":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:9486:2790":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:2696:15436":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:2368:3352":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:589:3232":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:9137:2871":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:43304:8920":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"9:237:3549":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:4264:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7436:2939":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:13922:20656":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:1561:2456":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12658:19883":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4783:13494":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4802:13497":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:47689:8804":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:40466:9202":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:47735:8808":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11098:16690":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12888:19898":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10534:16591":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:1257:3254":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:4557:15992":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:12044:1448":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:1506:10893":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:10557:8896":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:11578:9345":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:43949:8946":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6879:16382":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:40146:3062":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:9912:16519":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:403:31164":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:12870:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:9531:32258":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:4613:16000":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:46017:3726":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:9907:2746":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:1931:674":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:2596:15432":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:44083:9381":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4422:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:5634:16346":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:41516:3536":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:7199:3262":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:4745:3471":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4910:13509":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10370:16561":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10227:16565":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7613:16399":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6485:2982":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:5891:14180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:2384:3357":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:45993:3677":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:5322:16325":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:8926:16485":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5827:14176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:40041:3333":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:3266:3418":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:9762:32252":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:21317:3639":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:690:20733":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:43330:8914":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:11042:2794":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12184:19380":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:25777:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:11848:8898":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44155:3633":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:6818:16380":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:5760:16352":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:11235:16720":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:9472:8849":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:5435:31337":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:10383:16560":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:9099:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4652:13481":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:2781:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:22254:27181":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:9685:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:7524:16477":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:45494:3693":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:9725:1704":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13693:20628":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:43564:8924":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:5449:3564":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:45440:3657":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:4801:2767":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:2779:8832":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"11:1826:2689":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:2783:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:39900:9024":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9086:2853":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:4918:3518":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:5648:16347":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:4862:16081":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:4747:3472":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:4585:15996":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:6045:14193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:1302:3257":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:9051:16462":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:1817:3300":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:3166:3286":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:0:2257":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:12934:19900":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:10801:3118":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:6979:9176":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:5996:14187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:4967:3527":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:5633:2776":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:4053:15632":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:43781:8939":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:8050:16409":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:488:9997":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9102:2869":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:7584:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6204:2958":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13758:2908":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:8281:16419":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:43346:2876":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:43360:3398":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:45394:3692":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:3204:3260":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"14:202:8948":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:3594:3039":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:5572:3567":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11137:16687":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:44350:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:5384:16343":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11173:16718":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13611:20636":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:4189:3486":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:5964:14184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:31943:16418":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:11507:16501":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:7412:3328":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14173:20680":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:14434:20694":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:7209:2770":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:40689:9180":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:1492:3042":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:21670:3652":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4330:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:482:9996":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:40234:9204":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"7:0:1597":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:43482:8894":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:6531:16372":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:10811:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:782:2671":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10698:16651":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:10516:8893":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:474:9995":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:1058:3255":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8877:3600":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:39928:8918":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:507:32269":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:6163:2775":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:10323:3564":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:1649:10907":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:22631:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:12846:19896":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:1569:10900":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:6598:9880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:4572:3510":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:968:3254":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:40155:3064":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:39839:8988":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:5776:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:2864:15443":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:21315:3375":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:3244:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:14335:20688":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:46114:27325":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:10100:22320":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"7:32:15191":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:568:10007":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"9:426:15222":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4293:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:9104:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:1429:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12724:19888":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:44099:9384":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:47698:8805":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:22141:3082":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:21884:3375":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:45795:3699":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5929:14183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:10585:8897":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:4909:3517":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:4448:3060":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6279:2973":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:7764:23201":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:39961:9020":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10494:2866":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:3016:2409":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:12061:1607":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:40216:3067":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8863:3603":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12945:19901":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:918:3042":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:7999:25598":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:3504:3323":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:1986:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:506:10000":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:6079:2695":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:2638:3408":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:9172:2872":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11361:22493":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12621:19881":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"11:97:31159":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:3232:15451":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11191:16504":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:10616:16622":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12645:19882":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:4391:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8909:3601":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:5808:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:4774:16065":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4718:13486":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:853:3039":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:7657:3219":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"18:609:32294":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:4985:2695":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"11:1501:15340":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:1503:3043":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:1911:11078":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:3529:3394":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:10160:22583":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:4059:3462":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:4392:2732":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:3846:3443":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:9277:2875":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:1983:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41207:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:1520:10895":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:45462:3663":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:9169:25582":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:3264:3417":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:10102:25595":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"11:2186:31158":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:9478:8847":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:8195:3061":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:3217:30011":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:14145:20677":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:7884:16408":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:4031:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:21108:3650":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4545:13472":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:7828:16406":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:261:2669":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12252:19385":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13949:20657":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:12057:8902":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5814:14175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:1633:604":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:41264:3434":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:40680:3587":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:10962:3565":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:7722:2999":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:12056:1548":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"18:624:32273":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:7567:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4951:13514":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12293:19388":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:12046:8905":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:3232:16633":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:21255:3375":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:12452:19873":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:207:2667":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7492:16393":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:4697:13484":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6574:10046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7621:16400":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:505:2686":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:2926:9243":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:2828:2406":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4471:13463":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:8558:3070":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:22304:3447":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13298:19925":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:6829:14612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13567:20634":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6560:2654":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:9201:22594":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:1663:10908":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10250:3573":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:2380:15423":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:20878:26985":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:4054:8830":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:8297:3481":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:44103:9385":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:755:20734":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13802:20645":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:7211:2689":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:7711:3243":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:1921:8837":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:12052:765":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:45847:3711":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5046:13523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:22056:27223":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:2159:605":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:6024:14190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:12822:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:8895:16484":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:0:841":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10468:2880":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:6031:14191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"10:0:2256":{"crate_id":10,"path":["adler"],"kind":"module"},"2:43959:8947":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:14118:20674":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:5972:2776":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:4317:13448":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2793:3055":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:14221:20681":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:7535:22585":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:638:3238":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:41675:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8819:3106":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6332:2976":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:14536:20702":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:10366:8898":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:7637:3375":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10059:16529":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:6637:2669":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:4019:27456":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:13667:20638":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11240:3228":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:45524:3698":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:9114:3228":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:21199:9261":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:4430:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:4273:8991":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:536:2929":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5010:13520":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:9031:3121":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:43510:8922":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:12496:19874":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:12009:3245":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3050:8835":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:6017:16358":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8212:2876":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:4641:16004":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:11797:9389":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13914:20655":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:9720:2390":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:9281:3306":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:42430:27574":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:4320:3488":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43938:8945":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:7041:31434":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12154:19378":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:0:2263":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4680:3451":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11111:16689":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13851:20649":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"14:187:15355":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:2934:9245":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:1733:10915":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:4804:27470":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:14068:20668":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:11886:19366":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:9039:16388":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:6431:3588":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:7529:2709":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:10112:16550":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"10:36:31149":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:5131:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2362:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4946:13513":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:13890:20652":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:2169:9261":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:7006:16385":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6960:16383":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:3514:2689":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:43336:8913":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:30155:9223":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:7342:31574":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11788:16732":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:913:3248":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4343:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:2879:9235":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"8:0:2254":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:10023:16493":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4458:13461":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:11203:3379":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:32051:3089":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12531:19876":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:6139:14222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4706:13485":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:10977:22409":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:2542:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10456:16588":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:483:2759":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:840:3038":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:39184:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:2970:30326":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:0:2261":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:7538:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:7660:16402":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:3720:3119":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2861:9233":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:2618:15433":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11306:2887":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:41602:2456":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:9701:16493":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4537:13471":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10012:2857":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:1121:3257":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13676:20639":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:2871:3630":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9959:16528":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:6298:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:5858:14137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4558:13474":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13113:19913":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:6859:14615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5784:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:12037:8903":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:2168:31156":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7284:3535":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:12042:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2930:9244":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:22664:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:5551:9195":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10447:16589":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:43410:8927":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4731:13488":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10197:16580":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:47575:3679":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:39876:9021":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:41792:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6877:14616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:6041:16359":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10637:16624":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:8801:3568":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7568:2992":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13826:20647":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2406:15424":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6401:2981":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:44392:27560":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:3013:2408":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:42446:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:3315:15452":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:1138:28731":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:14042:20666":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:12058:1550":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:41594:3039":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:11296:2797":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12790:19893":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11215:16686":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13838:20648":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10126:16551":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:895:3038":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11872:16735":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:526:10001":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:2526:15429":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:6439:2689":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:1824:3275":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:2219:2727":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:3915:15518":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:5845:14178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:9470:8840":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:11059:2796":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"0:0:2138":{"crate_id":0,"path":["fnv"],"kind":"module"},"1:12063:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:12810:19894":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13055:19909":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:871:3040":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:1473:3041":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11971:19370":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:2131:2686":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:3669:2669":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:22217:27160":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:3226:3416":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12959:19902":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:11619:15379":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:45825:3705":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:7594:2788":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:45625:3664":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:1527:10896":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2494:9036":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:10432:3568":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:20848:26808":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:31957:8998":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12737:19889":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:10274:3038":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:7853:3368":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7597:31385":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:9823:16514":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:46609:3666":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5899:14181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"11:630:3038":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10766:22658":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:5491:2695":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:12465:16678":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:5640:3595":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:4138:22338":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:40277:3068":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:614:32278":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:11987:22418":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:416:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:7349:2403":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:6427:3587":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:4497:15980":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8305:3440":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4826:13500":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13739:20643":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:6928:27501":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:14083:20670":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13101:19912":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:31939:23201":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:3269:27795":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"0:21:1723":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"2:46063:3733":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6003:14188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:2959:2514":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:622:3236":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3513:26117":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:14460:20696":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:8291:3490":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:11617:16503":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:1595:10903":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:6610:2781":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4370:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:43248:8891":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10084:16524":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:30149:8967":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"13:226:3008":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9350:2877":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12554:19878":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6243:16362":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:1895:3321":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:22109:3081":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7474:16392":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:2450:15426":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:45350:3691":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:12060:812":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:43528:8923":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:40084:3346":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:6415:16367":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"15:327:3004":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:3019:2410":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:14499:20699":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:6076:14194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13148:19915":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11991:2894":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14076:20669":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2920:9242":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14401:20692":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:43318:8917":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13575:20635":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:40456:3397":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11151:16717":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:39432:23654":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:9461:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:5798:2952":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:671:20731":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:1184:16537":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6545:16373":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:364:3230":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:10298:3039":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:7015:16386":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12997:19905":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:11184:3077":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:4725:13487":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4589:13476":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:4949:16096":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:39120:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:2613:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:12062:1163":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:12054:762":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:2771:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:43677:8919":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:2833:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:22730:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:11176:25344":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:6188:9188":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:5403:2852":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5909:14182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:30115:3087":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4498:13467":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:10478:8892":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:14522:20701":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:22763:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12196:19381":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12373:19870":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:22565:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:7638:3231":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:667:3042":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:30171:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:6145:13363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:44329:3772":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:45416:3697":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:6714:14604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4382:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2356:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"11:2060:3256":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:43659:8918":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:6798:2721":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:7221:2680":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:311:31160":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:8550:3038":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:2382:3356":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:2546:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:4392:3482":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"11:798:3249":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:45665:3676":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"11:332:2658":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:7905:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:13010:19906":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:7503:16394":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:42663:3093":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:41449:2455":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7054:31367":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7269:31580":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:30747:3088":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:4526:13470":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:22165:3446":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:9436:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:45702:3731":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:45684:3725":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6318:16363":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:579:10009":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:9972:16527":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:2174:27823":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:3072:3285":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:660:20730":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:1075:16530":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:43924:8944":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4756:13491":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10962:16632":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:7858:3365":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:7708:2998":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:41543:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:13868:20650":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13174:19917":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:2933:15446":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:657:2456":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10714:16672":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:12041:1078":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11086:16716":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"11:986:3255":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:2394:3362":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10214:16566":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:9939:2752":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:6086:14195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7438:2705":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:2033:3254":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:2962:28830":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:9660:32257":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:5995:2931":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10507:16590":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:14013:20663":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:582:3088":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:5419:2853":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:41611:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:949:3252":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8231:3440":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:1426:3039":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4520:13469":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4640:13480":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2499:3406":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:822:2674":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:21014:3375":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:10840:25341":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:1924:3322":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:12628:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12970:19903":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:0:508":{"crate_id":2,"path":["core"],"kind":"module"},"6:5070:13526":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:10116:3375":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:719:20727":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:1076:3257":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:12103:8931":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:644:32269":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10661:16670":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:4051:3460":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11023:16637":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:4047:3459":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:9480:8848":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"11:1012:3256":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:8167:16415":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:13259:19923":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8941:3602":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10672:16671":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:30719:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4485:13465":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:7382:3330":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:2359:15422":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:6540:3591":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6165:14223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8335:3522":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:4921:16092":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11535:2890":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:0:1440":{"crate_id":1,"path":["std"],"kind":"module"},"1:727:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:5366:8866":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:6955:2726":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"14:165:15348":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:14090:20671":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:9998:16525":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12911:19899":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:7549:13691":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:12650:27402":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:5872:14138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:7443:2412":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:45647:3670":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:7304:14987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:40245:9197":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:1690:10911":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"14:160:15347":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4965:13516":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:2888:2766":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13710:20641":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:22192:27563":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:6729:14606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6687:16376":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:5826:2769":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:1464:3040":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13966:20658":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2832:15442":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10575:16619":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:4196:3058":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:1027:15337":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7287:14986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:42680:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:47709:8806":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:7875:3366":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:5954:2704":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:7282:2456":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12225:19383":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:42171:8850":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"9:52:3011":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:4426:2698":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:22177:27198":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:3049:15449":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11388:22349":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:5362:8865":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:760:2709":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:8004:3117":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:256:32240":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8989:3214":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:3447:3372":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:907:2709":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:8142:3069":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"9:357:15236":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:9852:16515":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:11661:16464":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:2881:15444":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:8162:3370":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:7532:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:11084:8886":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:6697:11019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:43428:8926":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:6147:2757":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:7397:9185":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:9466:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:40316:9201":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:3330:2709":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:10547:16618":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:14024:20664":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6844:16381":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:2670:15435":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:1545:10898":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:42495:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:40184:9193":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8964:3586":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:1513:10894":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:3239:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"9:507:15223":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:9070:2852":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5712:2947":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:7472:15146":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:9418:3323":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:4363:2698":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:41714:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:9455:32242":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:1603:10904":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:9474:8850":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4376:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:44095:9386":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:9924:2747":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:10440:16616":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:8594:16463":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:8825:16482":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:44115:3077":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:8765:16480":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:39065:9248":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:39245:8972":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:47651:3734":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12062:19371":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:1482:3248":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10186:16554":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:8794:16481":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:504:16476":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:1842:3307":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:9780:16495":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"14:0:2259":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:40074:2733":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:39947:9018":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3935:2695":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:5121:16148":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:13286:19924":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:7618:15175":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:46419:3706":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:39096:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:41349:3435":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12598:19880":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:8855:3038":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:766:20729":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:4344:15899":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:40133:3061":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:1702:3478":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:4835:13501":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:922:3043":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:727:2848":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:2960:30328":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:12055:1551":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:4477:13464":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6425:16368":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:1575:10901":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4897:13508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:43795:8940":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:44379:8823":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:7561:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6657:11036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:1557:10899":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:14163:20679":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:40011:27175":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4874:13506":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:40326:9189":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6376:16365":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11261:16712":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:6634:3522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:46039:3732":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8151:3120":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10036:16531":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:1288:3255":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:1670:1116":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13040:19908":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:14514:20700":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:11992:3555":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6499:2983":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4508:13468":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:5082:13528":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:11117:8887":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:6893:2943":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7554:2991":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12473:16676":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:1672:2669":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13876:20651":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13792:20644":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:22928:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4742:13489":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10726:16673":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5838:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:31964:9299":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:4975:13517":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:39999:3332":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7391:16390":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:10165:16553":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:4417:15948":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:2472:15427":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10561:16586":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:40722:9183":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:47788:8811":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:2223:28847":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:4240:3487":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12007:2898":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:12032:8907":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:12049:663":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:11164:3569":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:41247:3433":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:9026:3111":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11124:16688":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:9574:32265":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:8218:3398":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:21774:26813":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:3178:3259":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:9896:16518":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:2216:3347":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12305:19389":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:43992:8929":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:43652:8908":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:9207:2873":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:10475:2791":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:3939:3453":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13188:19918":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"11:1538:15342":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11544:3443":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:10849:25339":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11000:16639":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:47529:3728":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:44134:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:6180:14224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:39259:8981":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"0:24:1727":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"1:4703:3519":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:8996:22403":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:5088:16139":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:11600:3126":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:884:3041":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:5673:16349":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:47865:8814":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:1736:9273":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10949:16631":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:10771:22621":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:41474:2456":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:5696:16350":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:12038:428":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:5975:9598":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:5418:3562":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:12702:9040":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:5434:3563":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:4796:13496":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:14:1716":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:41989:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:6814:14611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12208:19382":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11327:16723":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:7393:9186":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:4074:3039":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:40666:9178":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10588:16620":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:5609:3066":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6189:31386":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:2904:9238":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6037:14192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14156:20678":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:4478:3492":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:6788:2719":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:2493:3375":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:47678:8803":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:14056:20667":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11295:16722":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:641:3239":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:42910:26947":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:13085:19911":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:3679:3438":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:1547:2695":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:1557:3038":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:21:702":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"14:215:15356":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:8659:16461":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"10:44:3010":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:5746:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7318:16389":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:8540:3552":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:1640:9166":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:43213:8871":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:9476:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:44107:9379":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:43643:8909":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:22829:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:13228:19921":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:7886:3264":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:22283:27539":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6805:14610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:6558:2456":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:2272:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:11626:15379":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:7760:3310":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:41313:27187":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:3348:3403":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40695:3422":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:20820:3088":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3997:3456":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:1845:3259":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:500:9999":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:2850:9231":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:595:10011":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:14134:20676":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:5569:3566":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:44337:3773":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4864:13505":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"14:221:15357":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:4638:22639":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:5839:2689":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:8871:2456":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:6194:27575":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:45595:3658":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:12048:661":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:4123:3056":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:2209:16587":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11351:16725":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:3744:3441":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4986:13518":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:7694:2996":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:42473:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8242:3431":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2836:9211":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"13:0:2252":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:3250:8986":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12136:19377":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11389:16496":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:42150:8840":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:8985:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:1573:3258":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:10478:2881":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:10410:16581":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:4889:16084":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:6199:2739":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"9:450:15220":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:6596:3594":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:41586:3038":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:4772:13493":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:2887:9236":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10420:16614":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:2253:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:11562:9343":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13546:20632":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:8848:16483":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:123:9679":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:6358:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:2049:3255":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:46373:3700":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2914:9241":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"15:288:15371":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:39980:9016":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"11:1103:15339":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:10534:3415":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:4421:3059":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11367:16691":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:3185:25536":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:42390:27538":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:12711:19887":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:1852:3260":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4820:13499":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:3065:15450":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:6896:2783":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:3068:3284":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:13274:2887":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:646:3240":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:13906:20654":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:22697:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:46295:3694":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:897:2689":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:21016:3643":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:8195:16416":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10980:2857":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:1579:3259":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:39994:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:3581:3038":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:9841:2743":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:21762:3080":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:14324:20687":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:4919:13510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:276:2413":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:43860:8942":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:10685:16630":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:5939:2925":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:14126:20675":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:7913:25615":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:47405:3673":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:955:3253":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:4986:16109":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:14478:20698":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:3303:3413":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:3284:8833":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:1102:28727":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"11:1048:31162":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:5988:14186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:10340:26155":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"18:681:20732":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13451:20630":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:7375:22536":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:43268:8890":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:14378:20691":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:4500:3493":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:39140:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:3171:3038":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11473:16499":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:41398:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:863:2456":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:7337:2402":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:22238:27165":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:29923:3445":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:8983:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:6968:16384":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:1838:3258":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:7102:16387":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:42400:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:3238:3261":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:3419:2695":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:12576:19879":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:6053:31000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:5318:2669":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:40302:9200":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:2339:2917":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:43812:8941":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2530:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:43614:3396":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:2214:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"18:590:27547":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:2548:15430":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:1044:3254":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:3830:15481":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:3224:3415":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:39080:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13816:20646":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6944:31389":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:10537:3417":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:4491:13466":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:2320:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:41336:3444":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6083:15392":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:4994:13519":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3191:26495":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:574:32269":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:9945:2878":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:41950:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:8154:16414":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6513:16371":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11490:16500":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6268:31584":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:547:10004":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:1411:3038":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:7281:14985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:531:20739":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:10789:22492":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13685:20640":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11687:16505":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12698:19886":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:21886:3640":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:11158:8879":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:5816:2957":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:7744:3309":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"18:96:20716":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"9:486:15219":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:7929:3119":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:8458:3549":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:2883:9234":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:39206:2396":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:7889:3267":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:14269:20682":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:2788:15440":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:817:3251":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4:1040":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6361:16364":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8357:3470":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:4706:3492":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:21665:3644":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:4403:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8225:3396":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:3032:15448":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:7520:13687":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4789:13495":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:7575:2786":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:3975:3454":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:3888:15515":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:9886:16517":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:41753:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:4337:2731":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:1673:10909":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:5311:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"15:394:15382":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:10821:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:4687:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:5661:16348":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:44111:9380":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:4234:3038":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:43258:8889":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:5743:16351":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6721:16377":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:6250:2776":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:47750:8809":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:62:9624":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:12074:19372":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:5612:16345":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:2409:2269":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:11281:2886":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:6981:22592":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:1500:10892":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:21064:27410":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:4154:3057":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:7474:8950":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:10323:3398":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:1681:10910":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6616:14602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:5128:2704":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:9677:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:7608:15174":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:119:2656":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:45941:3665":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:4462:15969":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"11:793:3248":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:9191:22656":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:40193:9194":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:7662:3221":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:8556:3553":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:10929:16635":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:21152:3651":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:1590:10902":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:8331:3520":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:8833:3569":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:4642:22643":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4812:13498":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:707:8905":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:47724:8807":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:2201:2402":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:42655:2393":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:47613:3713":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:4194:2695":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:9790:32256":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:2624:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:41466:3039":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:22895:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:1709:10913":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:2012:16568":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:47327:3701":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:9372:2854":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:10599:8895":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:564:2843":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:5503:3565":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:10747:3521":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:5403:2695":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:11482:3442":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:8279:3435":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13215:19920":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:40704:2741":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:7782:16404":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:10278:16563":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10628:16623":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:45749:3636":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"7:79:15198":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2899:9237":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:22290:3448":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:43766:8938":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:4745:16060":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:41870:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:8239:16418":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:4401:8999":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"11:2194:31150":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:3009:2407":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10316:16569":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10750:2883":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:2243:3047":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:7726:3244":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:21416:3375":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:7259:9956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:12053:766":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:39935:9017":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"11:365:2660":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6156:16360":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:43582:8925":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:4824:3467":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6843:14613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:2810:15441":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:644:3039":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:2461:28828":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:2035:3119":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:0:2262":{"crate_id":17,"path":["object"],"kind":"module"},"1:5988:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:40225:9196":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:9019:25617":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:7463:8949":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:599:32282":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:47467:3707":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:44276:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14308:20685":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:20861:26986":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10646:16669":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:7023:2784":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:40124:3282":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"11:1818:3038":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:4766:13492":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11448:16498":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:42157:8841":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:7581:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:6930:2722":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:261:32250":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:11319:3574":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:6071:2771":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:5574:2946":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:3321:8834":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:2533:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:30185:27168":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:22200:27069":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:23375:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:5243:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:12615:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"11:695:3043":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10139:16552":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:4850:13503":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:8481:3550":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:9242:2874":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:7737:3104":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:9474:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:43668:3234":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:41372:3436":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:42895:9371":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:9445:16489":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:41293:3091":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:42671:2392":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9521:16490":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11162:16683":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:749:2689":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6583:16374":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11313:3113":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:3115:3423":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12671:19884":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:5049:16124":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:3764:15463":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:12513:19875":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:45971:3671":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"11:1068:15338":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:1536:10897":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7067:31359":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13162:19916":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6915:2987":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11150:3106":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4719:16058":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:1764:628":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:6742:15365":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:4393:2695":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:43634:8910":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10788:16675":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13778:16532":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:2690:28823":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:46531:3660":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:9867:16516":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:434:15395":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7768:3000":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:46192:27291":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:7131:22321":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:9153:3072":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:20880:26981":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:40714:9181":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12123:19376":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:5754:3585":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:5626:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:22125:3050":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:31950:27790":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:9109:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:5747:3584":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:46719:3727":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:4168:3484":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:21271:3637":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:3800:2709":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:4931:13511":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:7865:3118":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:12036:379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:49671:3654":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:9053:22481":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:4268:8990":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9607:16492":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:1585:3260":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:10430:16615":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:6791:2464":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:21440:3375":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:515:20738":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8237:3439":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"14:40:19368":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:14001:20662":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:7573:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:3465:3371":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:6346:2978":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:20833:26808":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:2867:9232":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:12037:961":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12778:19892":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:7290:2456":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:9617:32253":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"14:7:15347":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:9977:22681":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:8980:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12280:19387":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:2170:3044":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"19:0:1058":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:12050:767":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:3391:3422":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:6306:3775":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:46655:3672":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:534:2760":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:39954:9019":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:10443:8899":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:46161:27293":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:47669:8802":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6784:14609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:4037:3458":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:39920:3234":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:39238:9250":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7128:16388":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11358:16726":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11815:16733":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:21185:3646":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:6261:2942":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:4640:22641":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:1564:2689":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:3461:15453":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:3405:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:7182:3035":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:1118:30321":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2892:9240":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5802:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:41384:3437":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13981:20660":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4570:13475":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"11:1858:3261":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:21449:3078":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11910:19367":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:45564:3710":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:42914:8874":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:43147:8880":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:2969:15447":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11201:16684":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:42710:3095":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:43166:8882":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:10949:3310":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4940:13512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:558:3216":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:47075:3695":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10265:16564":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:2180:31155":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4552:13473":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:5017:16116":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:43176:8883":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:7434:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:6582:10851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12484:16677":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:5976:14185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6696:15366":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:43087:27489":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2644:15434":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:7736:16403":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:1011:2669":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:636:32279":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:12677:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:22003:27219":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:2615:116":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"2:22862:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:43187:8873":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:9711:32249":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:14346:20689":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:7149:3069":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:1523:3271":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:2284:15393":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:532:10002":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:3600:15454":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11547:16502":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:42692:3549":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:2141:28837":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:43156:8884":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11244:16503":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"13:110:31215":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10771:16650":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:11951:19369":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:2998:3269":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"11:399:31163":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5727:2950":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:5384:3560":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:10571:8894":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:2178:16562":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:12004:3127":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:11376:22478":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:2574:15431":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:42164:8849":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:10405:8885":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4306:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"11:1822:2456":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11459:2799":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:9074:3123":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:43138:8881":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4844:13502":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8390:3531":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:1717:10914":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:9468:8841":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:10081:3300":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:6569:2984":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:31903:3571":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13024:19907":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:6010:9205":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:43464:8896":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:47803:8812":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:2907:15445":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:699:2846":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7862:16407":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:926:3249":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:4622:9010":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:22598:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:2985:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6386:16366":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:10292:2857":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:40286:9199":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:41458:3038":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:8557:3537":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"11:736:3041":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13135:19914":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11048:16703":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:42418:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:12258:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:2825:9208":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:6735:14607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:1776:2709":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:4448:13460":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:7472:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:4628:3457":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:0:2253":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"0:10:1709":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"1:3522:3373":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"12:0:2258":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:7930:27772":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:40174:3065":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:21238:3642":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:494:9998":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12876:19897":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10738:16674":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8286:3489":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:6607:14601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:39162:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:7245:2456":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:582:16477":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:2845:3631":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"0:20:1721":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"16:6226:16361":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4438:13459":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:5963:16356":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:541:10003":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7792:16405":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:2778:2405":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6850:14614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:2909:9239":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:1631:10905":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:3188:26494":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:8114:3369":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:12685:19885":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:285:31152":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:14355:20690":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:1590:3261":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"3:0:453":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:3741:3442":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:2171:9262":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:11381:16727":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:11062:16714":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8498:3551":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:11346:22414":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46869:3661":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:7191:2456":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:11774:9392":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:38979:8984":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:2366:3351":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4666:13482":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:45546:3704":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:5060:13525":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5886:14179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:11573:2891":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:7514:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:10603:16621":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:43887:8943":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:11523:3441":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:7651:16401":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12830:19895":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:12020:22387":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:4783:397":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:13071:19910":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6753:16378":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:8896:3598":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:2722:15437":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:4397:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:8009:3409":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:44087:9383":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"9:393:15221":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:41535:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"11:844:3253":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:1759:9272":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:7582:2993":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:8978:3108":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:40164:9192":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:39018:8836":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:2150:16602":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:4527:15986":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13897:20653":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11742:16507":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"15:0:2260":{"crate_id":15,"path":["addr2line"],"kind":"module"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}