{"root":"0:0:2235","crate_version":"1.0.7","includes_private":false,"index":{"2:12991:22427":{"id":"2:12991:22427","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5578:23889":{"id":"5:5578:23889","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13011:23892"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:30519":{"id":"2:12907:30519","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12078:1544","crate::ops::IndexMut":"2:3240:3389","str::slice_unchecked":"2:12906:30518"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13008:23887":{"id":"2:13008:23887","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12959:26520":{"id":"2:12959:26520","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:30538":{"id":"2:13019:30538","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4756:30538"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44429:9041","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2770:1626":{"id":"2:2770:1626","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:26506":{"id":"2:12909:26506","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12908:26505","str::split_at_mut_checked":"2:12911:26510"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:30528":{"id":"2:12981:30528","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13009:26284":{"id":"2:13009:26284","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40202:26418","Self::is_ascii":"2:13008:23887"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40202:26418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5577:3526":{"id":"5:5577:3526","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1820":{"id":"0:21:1820","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:723:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12934:2546":{"id":"2:12934:2546","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42231:191","prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:26512":{"id":"2:12941:26512","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12395:9020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:30514":{"id":"2:12888:30514","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:28447":{"id":"2:12917:28447","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12916:28671"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44395:9031","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:2587":{"id":"2:12930:2587","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42231:191","prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1813":{"id":"0:19:1813","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885":{"id":"2:12885","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12886:878","2:12887:2547","2:12888:30514","2:12889:30515","2:12891:30516","2:12894:22675","2:12895:30517","2:12896:333","2:12897:26483","2:12898:21876","2:12900:21881","2:12902:26481","2:12904:26482","2:12906:30518","2:12907:30519","2:12908:26505","2:12909:26506","2:12910:26509","2:12911:26510","2:12913:28472","2:12914:28317","2:12915:1814","2:12916:28671","2:12917:28447","2:12918:25760","2:12919:30520","2:12920:28473","2:12921:22242","2:12924:26522","2:12927:26523","2:12930:2587","2:12934:2546","2:12938:25759","2:12941:26512","2:12944:26514","2:12947:30521","2:12950:30522","2:12953:26516","2:12956:26518","2:12959:26520","2:12962:26521","2:12965:2462","2:12968:30523","2:12971:30524","2:12974:30525","2:12977:30526","2:12979:30527","2:12981:30528","2:12983:30529","2:12984:30530","2:12985:30531","2:12988:30532","2:12991:22427","2:12994:26524","2:12997:30533","2:13000:30534","2:13003:30535","2:13006:30536","2:13008:23887","2:13009:26284","2:13010:23891","2:13011:23892","2:13012:23893","2:13013:26287","2:13014:26288","2:13015:26289","2:13016:30537","2:13018:3334","2:13019:30538"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12979:30527":{"id":"2:12979:30527","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12916:28671":{"id":"2:12916:28671","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12917:28447"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44386:9032","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:30520":{"id":"2:12919:30520","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44376:9043","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12983:30529":{"id":"2:12983:30529","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:26518":{"id":"2:12956:26518","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12072:453","str::splitn":"2:12953:26516","self::pattern":"2:12579:9029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44234:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:30531":{"id":"2:12985:30531","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12604:9024","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2756-0:10:1806":{"id":"b:2:2756-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:2540"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12911:26510":{"id":"2:12911:26510","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12910:26509"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:25759":{"id":"2:12938:25759","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12579:9029","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::split_whitespace":"2:12916:28671","str::rsplit":"2:12944:26514"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44112:3504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2762:748":{"id":"2:2762:748","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2766-0:10:1806":{"id":"b:2:2766-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2769:138","2:2770:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42353:3347-0:10:1806":{"id":"a:2:42353:3347-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42353:3347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5559":{"id":"5:5559","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5560:31226","5:5561:9357","5:5564:31227","5:5567:31228","5:5575:31229","5:5576:31230","5:5577:3526","5:5578:23889","5:5579:23890"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2455:2447":{"id":"2:2455:2447","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:26522":{"id":"2:12924:26522","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:878":{"id":"2:12886:878","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:26287":{"id":"2:13013:26287","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:34958"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12914:28317":{"id":"2:12914:28317","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44088:9035","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2456-0:10:1806":{"id":"b:2:2456-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2458:22405"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5567:31228":{"id":"5:5567:31228","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1824":{"id":"0:24:1824","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1446:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:0:2235":{"id":"0:0:2235","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1806","0:20:1818","0:21:1820","0:24:1824"],"is_stripped":false}}},"5:5564:31227":{"id":"5:5564:31227","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_usize","write_u32","write_str","write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_i128","write_i16","write_u128","write_u16","write_isize","write_i32"],"trait":{"name":"Hasher","id":"2:10237:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1812","0:19:1813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32718:237-0:10:1806":{"id":"a:2:32718:237-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32718:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2978:246-0:10:1806":{"id":"a:2:2978:246-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:10:1806":{"id":"0:10:1806","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:42353:3347-0:10:1806","a:2:42354:3654-0:10:1806","a:2:32718:237-0:10:1806","a:2:32775:2505-0:10:1806","a:2:2978:246-0:10:1806","b:2:3578-0:10:1806","b:2:2456-0:10:1806","b:2:2760-0:10:1806","b:2:2756-0:10:1806","b:2:2766-0:10:1806","b:2:2771-0:10:1806","b:2:2453-0:10:1806","0:13","0:17"]}}},"2:2759:2540":{"id":"2:2759:2540","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2733:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5560:31226":{"id":"5:5560:31226","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2509","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:282:2509","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:30537":{"id":"2:13016:30537","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4758:30537"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44411:9040","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:30515":{"id":"2:12889:30515","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:22242":{"id":"2:12921:22242","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42354:3654-0:10:1806":{"id":"a:2:42354:3654-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42354:3654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3578-0:10:1806":{"id":"b:2:3578-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3576:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3580:1639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12944:26514":{"id":"2:12944:26514","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12579:9029","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::split":"2:12938:25759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44130:9014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:23891":{"id":"2:13010:23891","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:30523":{"id":"2:12968:30523","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12579:9029","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::matches":"2:12965:2462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44334:9047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2769:138":{"id":"2:2769:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:3580:1639":{"id":"2:3580:1639","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40016:9094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:25760":{"id":"2:12918:25760","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44366:3502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:30526":{"id":"2:12977:30526","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:23892":{"id":"2:13011:23892","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12997:30533":{"id":"2:12997:30533","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:26516":{"id":"2:12953:26516","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029","str::rsplitn":"2:12956:26518"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44216:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2774:138":{"id":"2:2774:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32648:3686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2775:1624":{"id":"2:2775:1624","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2458:22405":{"id":"2:2458:22405","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:30525":{"id":"2:12974:30525","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12579:9029","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::match_indices":"2:12971:30524"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44280:9045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12988:30532":{"id":"2:12988:30532","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:26505":{"id":"2:12908:26505","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12910:26509","str::split_at_mut":"2:12909:26506"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5579:23890":{"id":"5:5579:23890","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13012:23893"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2807:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12894:22675":{"id":"2:12894:22675","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12127:9033"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:28473":{"id":"2:12920:28473","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44404:9030","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:28472":{"id":"2:12913:28472","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44082:9036","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2760-0:10:1806":{"id":"b:2:2760-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:748"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12897:26483":{"id":"2:12897:26483","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13006:30536":{"id":"2:13006:30536","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12540:137","`FromStr`":"2:12539:3672"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12539:3672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12539:3672","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:21881":{"id":"2:12900:21881","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13003:30535":{"id":"2:13003:30535","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:1814":{"id":"2:12915:1814","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44098:2979","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5575:31229":{"id":"5:5575:31229","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:333":{"id":"2:12896:333","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12897:26483","`u8`":"1:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1812":{"id":"0:18:1812","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:2547":{"id":"2:12887:2547","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12971:30524":{"id":"2:12971:30524","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12579:9029","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::rmatch_indices":"2:12974:30525"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44262:9044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5561:9357":{"id":"5:5561:9357","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12984:30530":{"id":"2:12984:30530","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5576:31230":{"id":"5:5576:31230","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:282:2509","`String`":"5:7597:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2509","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:26524":{"id":"2:12994:26524","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12891:30516":{"id":"2:12891:30516","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12889:30515"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:30521":{"id":"2:12947:30521","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12579:9029","str::split":"2:12938:25759","prim@char":"1:12072:453","`DoubleEndedIterator`":"2:7960:131","str::rsplit_terminator":"2:12950:30522"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44162:9049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:30522":{"id":"2:12950:30522","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12579:9029","str::split":"2:12938:25759","prim@char":"1:12072:453","str::split_terminator":"2:12947:30521"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44180:9048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32775:2505-0:10:1806":{"id":"a:2:32775:2505-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32775:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2453-0:10:1806":{"id":"b:2:2453-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2455:2447"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13012:23893":{"id":"2:13012:23893","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:26481":{"id":"2:12902:26481","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:30518":{"id":"2:12906:30518","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12078:1544","str::slice_mut_unchecked":"2:12907:30519","crate::ops::Index":"2:39848:3388"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:26521":{"id":"2:12962:26521","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13014:26288":{"id":"2:13014:26288","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:34958"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:26509":{"id":"2:12910:26509","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12911:26510"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2771-0:10:1806":{"id":"b:2:2771-0:10:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:138","2:2775:1624"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13015:26289":{"id":"2:13015:26289","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:34958"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:3334":{"id":"2:13018:3334","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4759:3334"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44420:3335","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:26523":{"id":"2:12927:26523","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:21876":{"id":"2:12898:21876","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1818":{"id":"0:20:1818","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10277:1801","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:16:1810":{"id":"0:16:1810","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:26482":{"id":"2:12904:26482","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:30517":{"id":"2:12895:30517","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13000:30534":{"id":"2:13000:30534","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:9029"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12965:2462":{"id":"2:12965:2462","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12579:9029","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::rmatches":"2:12968:30523"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44316:9046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:9025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:12127:17347":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:40691:9041":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:46309:3775":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:6030:17067":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:7415:28318":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4909:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:8285:2979":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5643:14175":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:3029:3746":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6524:14869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6379:14795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:6438:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:44852:9511":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:5581:3681":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:1671:11043":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12659:17438":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:41012:9335":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:880:3143":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:12077:1511":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:2254:31855":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:13844:20662":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13375:20157":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:6698:14884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"11:1107:16043":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:4491:16699":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:12579:9029":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6441:14863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:12088:797":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:2274:3149":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:1445:3141":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:40733:9141":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:40759:9138":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:2271:2827":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:40:2760":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:12539:3672":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6929:33269":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13774:17384":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:7679:2805":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"14:160:16054":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8428:3587":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:43255:3157":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:3237:3362":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:9155:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:2172:31352":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:2304:3356":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:5580:17056":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:46226:3815":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:11624:9002":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:10317:2977":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:44824:9510":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"0:24:1824":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"1:12090:1645":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:10945:9009":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:7984:17122":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:15778:21484":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:5825:3026":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:15992:21645":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:10719:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:9041:3313":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11702:17327":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:11058:3685":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:9677:3175":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5624:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:7446:15302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:10729:3472":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:1975:708":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:38555:9382":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:2995:31321":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:837:3351":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11661:17299":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:13457:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:3208:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:43218:28454":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:2835:16151":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:15410:21459":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:10030:8969":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:2709:16145":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11095:3481":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:13814:20660":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:5413:8988":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6811:17091":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12089:17340":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13473:20164":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11812:17338":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:39959:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:357:3330":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:15521:21467":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12621:17444":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:12281:9522":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5598:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:11701:9001":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:7684:17114":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:1887:3410":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:39804:8956":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:9057:3173":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:3245:3360":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:96:21673":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:12251:17396":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:21359:30048":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:21561:3756":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:15799:21485":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:515:21695":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:46287:3769":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:5794:2790":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:4547:9120":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:46823:28666":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10573:34031":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:42656:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:42312:3652":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"18:613:34052":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:43921:9004":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:513:17193":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:7931:3467":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:4959:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:10028:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:4761:16785":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:2419:16132":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:6413:9343":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:635:34046":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:5025:2790":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:3411:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:14147:20681":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:5485:3047":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11595:2981":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:726:3555":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:16249:21660":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:5365:2764":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:22818:28639":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6188:17070":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11621:2965":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:14994:21414":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:44130:9014":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:6068:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:46186:3803":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:6505:14824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4069:3573":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:787:3143":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:44180:9048":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:5409:8987":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:46679:3831":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:5649:3682":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:16138:21651":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:5163:22669":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3436:29884":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:4011:3570":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:6657:2551":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:47989:3806":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"11:883:3355":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:14436:20699":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:11430:23879":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:5794:17062":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:5555:17054":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:570:10140":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:22:735":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8406:3639":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:5527:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:3237:23524":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:12072:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:8631:3671":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:6478:14867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:16069:21646":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:40772:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13412:20160":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:9737:17171":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:688:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:5020:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:5132:22669":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"9:501:15928":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:45144:28428":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:6979:2882":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:10013:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:2399:16131":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"11:2469:2805":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:9988:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:4190:30217":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:2355:16129":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:5919:17066":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:2032:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5457:14155":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6858:17093":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:40777:3434":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:43490:3666":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:7881:9324":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:261:34043":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:40950:9331":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:30930:9293":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:7620:9072":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:6636:14877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:42734:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:5674:2803":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:42372:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:41991:3538":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:9076:3212":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"11:2562:32846":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:5906:2868":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:1628:11039":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:15463:21465":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5617:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:7547:28491":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44013:9010":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:21633:3181":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15760:21482":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:3240:3389":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:13855:20663":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:14079:20677":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:7802:3344":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:12039:3228":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:725:3477":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:10524:17203":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10137:17170":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12213:17424":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:31467:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:44088:9035":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:32807:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:32805:8952":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:3234:26154":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2730:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:914:3144":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:7546:15309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:15324:21450":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:42157:3550":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:7754:3320":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12900:2994":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:44429:9041":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10661:17205":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:7485:15306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"18:698:2945":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:11518:3548":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"11:1917:3362":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:7574:3431":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:15418:21460":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8549:3667":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8224:3221":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:16165:21653":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:40714:9139":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:34347:9375":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:22495:3879":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:7461:15304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:48191:3833":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:40890:3386":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4824:14089":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:697:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:15281:21446":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:14933:21423":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:22258:3883":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:3741:16179":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10769:34022":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4924:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10044:17201":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:10612:17204":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:14372:20695":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:16050:20155":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:11865:17382":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5212:14126":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:8253:14338":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5477:14158":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11755:17331":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:14968:21424":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10444:3523":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"5:1522:3145":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:11688:17295":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:6243:2874":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"14:0:2353":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:11858:2901":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:8006:15682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:2304:16127":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:8298:3502":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:0:2356":{"crate_id":17,"path":["object"],"kind":"module"},"2:7960:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:9102:22415":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:573:34044":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:32719:2504":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:2657:2862":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:16105:21649":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:437:16102":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:31494:3190":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:7064:2822":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:16187:21655":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:1699:11046":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:482:2858":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:4545:16707":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:7492:2501":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:7926:3470":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:1910:3361":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13899:20665":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:13512:3365":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:267:2764":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:8402:3637":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:15102:21431":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15197:21439":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:12079:1629":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:3250:31351":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:7367:2775":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:44706:9069":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:41218:3503":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"14:165:16055":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:2617:16141":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:1717:2790":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:10449:2845":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"11:1087:32862":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12278:17425":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:6431:3085":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:12650:9053":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:2736:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:42617:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:15383:21456":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12043:17342":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:44492:9059":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:44542:9062":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:7452:15303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5601:17057":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:14489:20703":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:7575:15311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:46364:3836":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:14298:20690":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:5045:3644":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:40959:9332":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:5344:14143":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:5984:3169":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:13235:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:14788:21417":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:41053:9337":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:15368:21454":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:7982:2489":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:8937:3715":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:795:2766":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13325:3001":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:7602:15313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:8055:17125":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:836:3140":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4987:3634":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14986:21426":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:9150:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:1040:3356":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13877:20664":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:42500:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:5827:3699":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:2789:16149":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:2982:2865":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13455:20163":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:14752:21416":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:6038:9729":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:41457:3528":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12225:17398":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:282:2509":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:2819:16150":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:48450:8932":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:15138:21434":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:4112:3141":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12443:17421":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:10022:8963":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:11547:17322":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:791:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:4464:2793":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:15356:21453":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"0:20:1818":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"18:670:21688":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:939:3353":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:36569:9379":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:3522:3473":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:1578:2551":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:8387:9322":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:7565:17110":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:2162:2781":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:4261:3603":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11242:17259":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:45075:3892":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13015:2988":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:48237:3784":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11026:17227":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13753:20658":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:16212:21657":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:4996:3635":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:3838:2805":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:7429:33007":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:32684:24111":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:3354:3519":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10419:2980":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:7637:3172":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8620:3670":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:2641:16142":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:12087:801":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6759:3088":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:9755:17169":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:14977:21425":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11524:17321":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11405:17272":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:45083:3893":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10982:17224":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:11089:17237":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:12530:17441":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:14284:20689":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:44719:9050":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:15010:21427":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"7:0:1693":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:256:34026":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:3333:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:2054:3220":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:2529:16137":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:15176:21437":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:22172:3754":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:45021:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:3576:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:7516:15307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:2326:3357":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:6646:17086":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:3406:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:4518:16703":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5897:17065":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:3488:8957":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:6919:2815":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:4473:9113":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12328:17392":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:13363:20156":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:10032:8970":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:42814:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11825:17359":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3472:2790":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:10156:3688":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:6471:14866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10439:2953":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:10738:22458":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:2665:16143":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:6292:17075":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:4232:3600":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2733:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2809:126":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"1:8315:3537":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:46411:3751":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:44000:8994":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:33978:9371":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:41021:9325":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:700:2551":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:4716:22744":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:12175:17411":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:754:21691":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:43987:8993":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12408:2987":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:15957:21644":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:3177:16158":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:8341:15879":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:42951:8963":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:5390:14149":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:46725:3838":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:4572:3610":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11230:22643":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:5846:17063":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:1098:17239":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:7103:33282":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"13:0:2346":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:44262:9044":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:44316:9046":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:15092:21430":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:43940:9006":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15569:21468":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:1934:9410":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:43950:9007":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:7491:17109":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:13260:9162":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"15:288:16078":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:7976:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:5536:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6282:17074":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:15249:21443":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:14091:20678":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:1707:11047":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8870:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5528:14163":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:40016:9094":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:41044:3171":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:46701:3837":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:3601:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:7816:3345":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:5415:14151":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:5134:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:7020:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:44386:9032":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:363:3331":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7386:3092":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:13422:3891":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:2749:16147":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:557:3315":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:15814:21486":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:3024:3744":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:43272:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:46603:3770":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:44411:9040":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:7971:17121":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:3993:16339":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:1461:2551":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"9:356:15941":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8268:3164":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"11:742:3145":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:2001:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6435:14862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:1430:3140":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:10447:3519":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"18:680:21689":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:34693:9378":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:7595:3101":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"14:214:16063":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:48351:8925":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:1492:3143":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:34174:9374":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:44634:9065":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:12082:695":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:507:34044":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:5278:17049":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:10441:3521":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:46078:3802":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:39979:2495":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:7223:25673":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:42354:3654":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:10669:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6874:14923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"9:481:15924":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:10277:1801":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6460:14865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1593:11037":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:2553:16138":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:47111:3817":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:39852:9388":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:6803:17090":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:7918:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:12023:22442":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"8:0:2348":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2276:3450":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"9:237:3666":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:40833:2833":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:7359:15301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4312:3604":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:4621:3162":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13766:17386":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:7376:17105":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:5146:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13723:20656":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:1891:2784":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:7412:11154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:1307:3357":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10710:17206":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:16223:21658":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:15301:21448":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:21614:3752":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4800:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"9:52:3113":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:637:3339":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12238:17397":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:10935:2893":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:40991:9334":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:2375:16130":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:2689:16144":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:559:10138":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:2769:16148":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:8966:3716":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:14189:20683":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11112:22433":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:1485:11024":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11764:17332":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:10092:17202":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:22170:3477":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:7695:2809":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:14260:20687":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:643:34044":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:4706:3574":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:14575:2988":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:1590:3360":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:4202:2790":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:6739:2764":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:15:1813":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:4462:16693":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:3271:3363":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8351:3541":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13116:17480":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:523:10133":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13089:17479":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:473:10127":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12572:2956":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:5219:14127":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:586:10142":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:2422:3453":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11128:17234":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:40680:9146":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:44902:3748":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11115:17235":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:5496:3679":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:1603:16047":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11574:3111":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:844:3352":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"3:0:480":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:5043:3529":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:6882:33290":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:40657:9143":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:5445:14154":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:42412:3140":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:10915:34039":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:6575:2764":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:46102:3762":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:1292:3358":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:3204:3140":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:31013:28669":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:13187:20151":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8604:3669":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:10659:3477":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"14:31:16054":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11354:17274":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:1029:2764":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:3579:3475":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:1510:11028":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5336:14142":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:14402:20697":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:44878:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:41034:9336":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11557:17323":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:10870:22530":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:8864:3684":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:6447:14864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"10:44:3112":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"11:1883:3140":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:22769:3552":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:4871:16803":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:44098:2979":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:44112:3504":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"0:21:1820":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"17:11392:17273":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:46776:28640":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:15342:21452":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:3451:8954":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12508:17435":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5407:1108":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:22609:28457":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:6052:2875":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:3039:9369":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:15473:21466":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:2489:16135":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:7176:33289":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:3589:3497":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:22780:28642":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:2365:9401":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:44071:9039":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:5462:3677":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:44848:9517":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13986:20670":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:893:2784":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:102:32850":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:1804:637":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:44334:9047":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:47317:3777":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:33860:3747":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:2733:3514":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:9178:3481":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:7482:17108":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:48371:8927":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7537:3099":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:2516:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4952:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:44840:9518":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10818:17207":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:9817:8961":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:3600:16162":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10185:2972":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:7294:17098":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10068:17181":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:44828:9513":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4971:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:5122:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12056:17343":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:5713:2875":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:4650:3627":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:396:2755":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:4237:8951":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:14177:20682":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:1911:9411":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:8294:14344":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:48275:3818":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4916:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:33195:9368":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"9:329:15980":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:5499:17051":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:21620:3755":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:1925:28503":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:5314:14139":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:44513:9060":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6491:14823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6689:14883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:46854:28453":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:6215:3079":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:7330:10009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:34520:9376":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:364:2753":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:7774:2891":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:40921:3167":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:2521:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:1156:31928":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:213:2762":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11558:3547":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:1723:11048":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5200:14125":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:22911:3566":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:1585:2805":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:38445:9380":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5565:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5352:14144":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:7366:3639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:4984:421":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:7357:2784":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:6529:2784":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:15646:21475":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:22449:9400":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"11:328:32848":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:2037:17277":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:9490:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:5662:17059":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:39879:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"11:673:3140":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:40930:9330":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:22395:9400":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12647:17439":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:1574:3140":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:2383:3140":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:11227:17232":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12671:17474":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:6714:14886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:34037:9373":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:5861:3208":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:44280:9045":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:7328:3137":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13674:20655":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:43461:3195":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:7627:22591":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:42229:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"18:718:21684":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:497:10131":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:3211:3361":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:8029:15684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:15608:21471":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12887:2992":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:11097:9018":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:12357:9523":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:22880:28499":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:47879:3772":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4837:14090":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"11:1896:2805":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:42023:3540":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:42191:3542":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:11069:22480":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:4733:16780":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:7586:2801":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:2740:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:11077:3180":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:2424:3454":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:9145:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:7996:22640":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:14271:20688":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:2319:16128":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:1025:3357":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:13186:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:10855:3681":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:6691:2880":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:13402:2856":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:903:2805":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:12083:697":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:12597:17446":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:12792:17177":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:40940:3168":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:14516:20705":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:46346:3830":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:5005:28934":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:7960:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:4119:3576":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:16235:21659":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:3315:3523":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6221:3081":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4942:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:1862:3403":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:7534:3432":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12399:17429":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:7350:9328":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:2992:2610":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:2439:16133":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:1691:2764":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:10952:2895":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:41969:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:10230:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:5677:14179":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:6134:3043":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:5006:16846":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:7667:2885":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:1581:2784":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:3010:16157":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:48527:8935":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:6275:3213":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:563:2942":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:2687:3477":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:4821:17445":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:8278:3503":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:1602:3362":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15720:21479":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:8526:3666":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:13959:20668":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:5346:33280":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:8097:17126":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:6895:33253":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:5175:2800":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:6547:2879":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:40912:3165":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:47531:3766":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:3100:9377":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:10863:3504":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:15655:21476":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:6142:2790":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:44216:9018":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:1580:11035":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14025:20673":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:9035:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:1517:11029":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:3264:17341":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:44022:9013":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:6331:17077":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:2459:16134":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:21371:30048":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:40870:8993":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:2593:16140":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:5191:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:517:10132":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:30668:3551":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:1496:11026":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:42695:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:42343:3653":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13252:20154":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:47081:3811":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:8881:3206":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:8012:15683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1585:11036":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:2818:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:9938:17199":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:22662:28450":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:7467:9314":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:7537:15308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8981:3714":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:9472:2889":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:12094:853":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:4464:3599":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:12111:9478":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:6445:17081":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:44366:3502":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:5865:17064":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:32775:2505":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13738:20657":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:41428:28411":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:4937:16823":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9213:22638":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"17:14723:21415":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13999:20671":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"18:659:21687":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11605:2982":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:33801:3745":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8907:3207":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:2727:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:7686:2887":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:3190:3372":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:10906:9020":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:9984:17200":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12808:17178":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:5901:2784":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:4718:22746":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:47381:3832":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:2671:2846":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:1686:11045":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:6657:14879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:32688:17125":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:12824:17212":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:12395:9020":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:9672:30231":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:7562:3430":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:7339:15299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:4322:3159":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:40614:3335":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:14325:20692":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:2450:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:3417:9107":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:10339:3684":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:545:10136":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12969:17173":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:41435:9316":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:22018:3477":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:12095:9476":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:10487:2891":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:4885:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:10466:2846":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:4210:25672":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"0:0:2235":{"crate_id":0,"path":["fnv"],"kind":"module"},"17:13146:17481":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:8080:22596":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13922:20666":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:46012:3796":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:9299:3409":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:3017:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:9048:22459":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:15426:21461":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:7914:17118":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:3773:16188":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:15214:21441":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:4232:2790":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:13606:20174":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:43293:8962":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4979:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:31118:28624":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:4431:2790":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:11341:17275":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:15456:21464":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11567:17324":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5630:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:1321:3359":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:9467:3470":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:7518:2795":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5489:14160":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:6738:14889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:11510:17269":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:2469:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5361:14145":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:14111:20679":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:928:3352":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:4787:16788":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:6396:3896":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:15748:21481":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:6608:28392":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:10284:2976":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13211:20152":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:589:28395":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:22887:3554":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:6244:17072":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5244:14130":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:48067:3778":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:4968:16831":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:6849:17092":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:8306:14346":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:12070:403":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40815:3435":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:6811:14895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8358:3606":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:15445:21463":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:1663:11042":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:4601:9121":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43961:8995":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7869:17116":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:856:3353":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:14912:21422":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:43230:28663":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:5671:14178":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3814:3547":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11313:17263":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:10954:17223":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:6725:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12929:17214":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:3051:9385":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:45096:3890":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:48397:8929":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:774:3142":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:12093:1644":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"13:109:32910":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:12076:332":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:11661:16086":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"11:351:32853":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:12095:1703":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:15635:21474":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:11045:3206":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:5436:14153":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:47271:3771":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:40707:9040":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:8915:3140":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:5277:14134":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:5870:9333":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:12810:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:14463:20701":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:5630:3051":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5039:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5653:14176":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"5:4386:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:7885:9323":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14212:20684":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:1596:3361":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6546:17083":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:32718:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"12:0:2352":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:8894:3685":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:1923:3363":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:7619:17112":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7444:17106":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10155:2951":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:6507:3702":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7998:3103":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12557:2968":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:12264:17395":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5370:14146":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:11424:23886":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12683:17443":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:5726:17060":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:44836:9514":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:42355:9461":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:11139:9017":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:46257:3763":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:40631:9144":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:3205:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:6099:17068":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:2266:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6462:17082":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:608:34073":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:2724:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10671:34034":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12371:17214":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:4131:3579":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:9916:17198":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:3020:9348":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:4821:3585":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"11:1903:3360":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:532:10134":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:14311:20691":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:22838:28416":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11853:17381":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13344:3008":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:5174:3568":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"0:10:1806":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"14:202:9070":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:4283:16606":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:10847:3413":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:1826:3394":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:15582:21469":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:10018:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:3216:31345":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:5298:17050":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13424:20161":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:10710:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:1811:9302":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11051:17251":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:41083:9339":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:5331:2952":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:726:2947":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:22900:3553":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:4433:16687":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:12092:1647":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:44376:9043":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6542:14871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:32648:3686":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:909:3350":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:22715:3183":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:4109:3575":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:7306:17099":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:44404:9030":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:44395:9031":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:10983:9021":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:12341:9521":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:40620:9110":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:22381:3888":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"7:31:15896":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:7377:3377":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:13581:20172":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:1841:1195":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:6624:3707":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"11:2403:3141":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:7345:3364":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:8197:15843":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:15206:21440":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:41466:2841":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12422:17430":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11730:17329":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:38610:9383":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"13:226:3109":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:7324:17100":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:6721:14887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:15678:21477":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4787:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10350:2978":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5502:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:5038:16855":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:46957:3799":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:40788:28491":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:4272:3140":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:10229:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:45132:8944":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:14503:20704":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:46032:3761":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:6613:2839":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:4017:3569":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:1501:3350":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:43712:8996":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:13064:17179":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:44042:9012":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:12127:9033":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5266:14133":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:8012:17123":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:3159:8955":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:14560:20708":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:4392:3605":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:7922:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:9671:17172":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:9196:3743":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:1483:3142":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:621:3337":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:7610:9071":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:44162:9049":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11367:2968":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11674:17326":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"18:0:2357":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:891:2771":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"9:391:15926":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:8069:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6678:14882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5636:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:11125:9019":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4932:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:564:10139":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:14587:20709":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:12097:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:48331:8923":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:2121:8958":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:46557:3764":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:40699:3335":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:3177:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:7429:11152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12768:17175":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:5296:14137":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:8310:3545":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:12084:802":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"18:581:3190":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:8247:14337":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3561:3425":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:2284:16100":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:3396:9389":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:2558:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13509:20167":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:7070:23781":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:42007:3539":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11142:2956":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:6417:14861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:8478:3665":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:14356:20694":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8236:3472":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:46457:3804":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:40843:3448":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:4886:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:4844:16799":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:40029:9102":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:2440:3459":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:2729:16146":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:48340:8924":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6609:14874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:1795:2805":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:3442:3528":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:11657:9003":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:11743:17330":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12076:17339":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:42958:8964":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:42051:3193":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:11898:17358":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:12073:1664":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:4592:2832":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:6650:14878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:12055:22452":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:504:2781":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:38500:9381":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:43912:9005":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:1565:11034":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8614:3140":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:43191:28446":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:4464:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:6077:3059":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:4720:22748":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:5236:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:15058:3009":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6532:14870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6745:3087":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:7697:2869":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4870:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:15039:21429":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"14:220:16064":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:1692:3595":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"11:2124:3356":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:4902:3584":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:3356:3520":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:9460:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:32695:30042":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:11537:17290":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6670:14881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:15266:21444":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:3423:9106":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:14545:20707":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:2971:8953":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:32776:3191":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12464:17432":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11634:17298":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:10069:3403":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:9964:23544":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:5696:3053":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11493:17283":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:15836:21488":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:12091:1646":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:11018:9014":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"15:306:16079":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12150:17345":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"18:531:21696":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:1809:661":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8363:3607":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6201:3077":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:46877:28668":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6348:3083":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:6788:32238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13832:20661":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:40968:28271":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:8300:14345":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:2423:2551":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:908:3140":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:6729:14888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:4965:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:14246:20686":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12485:17434":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6555:16073":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13594:20173":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"18:521:21692":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:0:535":{"crate_id":2,"path":["core"],"kind":"module"},"15:327:3105":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:2447:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1542:3374":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13387:20158":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:39768:9105":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:7337:2551":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:4040:2784":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:8378:3366":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:4781:3636":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:3707:2764":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:538:2940":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:26344:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:5546:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"11:1887:2551":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11385:22463":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"11:2554:32852":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:39919:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:8381:3370":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:22529:3878":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:10997:17225":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:9160:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:41228:9340":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:735:21685":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:3545:16161":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7889:17117":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:42420:3141":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11293:17262":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:12044:3346":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:6941:17094":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:2552:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:3056:9386":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:2995:16156":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2973:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:4070:2764":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7409:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12724:17211":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:42972:8972":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:16032:20154":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:11467:17276":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11419:2956":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:4047:3571":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:41069:9338":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:42461:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:10382:2890":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:5260:14132":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11358:3689":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11877:2984":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:7749:3318":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"18:113:21674":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:6330:2875":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:15624:21473":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:4256:9109":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:42353:3347":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:6896:2803":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:32720:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:3175:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2688:9158":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:8215:3172":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"11:2542:29232":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10666:23584":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:6602:9326":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:5759:17061":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:15616:21472":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6965:17095":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5002:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:22853:28517":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:8923:3718":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:40670:9145":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:2978:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:7731:3332":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:3685:2784":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:4649:16765":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12201:17423":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:10814:3140":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:43508:3197":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:8931:2551":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"14:7:16054":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:10383:2843":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:11063:17245":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:5466:14156":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11189:17238":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:6116:17069":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:6621:3706":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:8004:3513":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5225:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:5238:17032":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:22802:28430":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5557:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:43453:2491":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:536:3030":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11799:17379":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:48360:8926":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:43930:9008":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:7366:17104":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5083:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:44832:9515":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:3061:9387":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:12085:799":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:5483:14159":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:11335:2896":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12478:17433":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:13538:20169":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:15944:20152":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:5014:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:6519:14868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:22023:3758":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"11:2536:32842":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:3273:3521":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:7921:3469":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:7400:3093":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:43478:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:12584:9025":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:33919:9372":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:10481:2851":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:5568:17055":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13526:20168":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:9030:3209":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:7584:15312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:3406:16160":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:42428:2551":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"18:765:21686":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6724:17089":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:48386:8928":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:22060:30056":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:7609:17111":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:8085:3218":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5160:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:46633:3776":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5290:14136":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:5112:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:2999:31820":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:12318:9524":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:465:10126":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:13384:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:8288:14343":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:5389:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:5713:3058":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7225:17097":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:12071:1040":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:21417:30051":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:12516:17450":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"11:123:2751":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10759:2956":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:15931:20151":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:6599:16072":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:15222:21442":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:3570:23843":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:645:3341":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:8271:14341":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:44844:9516":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:16151:21652":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:1072:3359":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:4:1121":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:5209:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:7270:3040":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11256:17260":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:5521:17052":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:48313:3839":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:21386:30043":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:5652:3683":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:9970:3425":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12353:17427":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:21559:3477":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:945:3354":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:8351:15880":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:3856:16225":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8248:3476":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:42965:8971":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:32702:9120":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:10251:2975":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11495:2898":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:3260:16159":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:46487:3810":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:5316:2951":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:6227:2856":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:44696:9068":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:13208:29348":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:2201:3146":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:2569:2501":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:7984:10086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13308:2999":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:11214:17233":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:30956:28571":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:6892:3749":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:3275:3522":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:7931:2508":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:42364:3323":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:7118:3652":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6422:2749":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:12604:9024":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:22435:3889":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:651:34044":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11841:17380":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"9:177:3128":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:4214:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:11269:17261":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:6254:17073":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:45034:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:7389:11169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:42295:3141":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:13553:20170":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:45105:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:1680:11044":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5376:14147":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:5834:3700":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:2450:3464":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:3240:23513":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2509:16136":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:9807:17182":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:7401:2551":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:485:10129":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:5541:17053":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:5423:14152":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11166:17240":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:4985:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:16198:21656":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:7551:3100":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:9235:22543":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"10:0:2350":{"crate_id":10,"path":["adler"],"kind":"module"},"1:533:2859":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:8090:3515":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13568:20171":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:40642:28674":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6362:3084":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:10676:3467":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:11016:17226":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:7987:2488":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:43861:29182":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:8265:14340":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:22393:29195":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:46056:3797":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:6746:14890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:6376:17078":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:859:2551":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"11:2140:3357":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:9089:17095":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:6151:2870":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:44420:3335":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:10088:22586":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:4674:16767":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:14235:20685":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:3597:17364":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"15:394:16089":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"18:491:34056":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:15190:21438":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:48129:3812":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:16079:21647":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:15078:17241":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"19:0:1138":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:15273:21445":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6141:33227":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:11579:3549":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:4907:16816":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:6677:3709":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:5084:859":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:8425:30229":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:12075:1158":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:7152:17096":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:6821:14896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:43469:2492":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:636:31325":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:15289:21447":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:5706:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7345:17102":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:14876:21421":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:33567:9370":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:42209:3543":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:2693:3505":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:16176:21654":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"11:832:3350":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:30892:3189":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:42539:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6915:14925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5329:14141":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:11647:22581":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:5382:14148":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:42169:3541":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:1207:17246":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:10399:2979":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"10:36:32839":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:21742:3181":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:40982:3170":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:14012:20672":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"14:40:20153":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:6706:14885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:1535:11031":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:32709:9438":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:3013:9346":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:11111:9016":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:10237:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8564:3668":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12388:17420":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:6017:2800":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:800:2784":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:14868:21420":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6394:17079":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:22480:3477":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"18:481:21693":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:9081:3222":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:44607:9064":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44685:9067":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8012:3220":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11153:17207":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:849:3141":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:42135:28636":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:30945:3157":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:41484:9321":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:4823:3588":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:5588:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12863:17213":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:4061:3572":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"7:78:15903":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:4396:3161":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:15400:21458":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:8385:3608":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:10747:22456":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:42578:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:7561:15310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"11:2231:3111":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:40009:9390":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:43693:9503":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:6788:33173":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:1160:3359":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:42853:3194":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:491:10130":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:9858:17196":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:689:21690":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:5645:17058":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:6378:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:44913:9530":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:2353:638":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:4401:2793":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7706:17115":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11443:17278":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:6597:14873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:1547:11032":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:41000:9342":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:43500:3196":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:44528:9061":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6737:3044":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:13437:20162":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:1885:3409":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:2548:32840":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:44032:9011":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:1511:3144":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:15390:21457":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:0:2355":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:5878:3032":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:3211:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:1676:2757":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:11056:9015":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:6756:14891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"11:2369:16048":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:6377:3895":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:6768:14893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:22524:3880":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:7452:17107":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:7445:2551":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:16093:21648":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:2035:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:6900:14924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:44860:3180":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:30924:9089":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:6775:14894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"5:1136:31816":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46156:3798":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:42775:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5400:14150":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2588:3512":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:21612:3477":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:6621:14875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:403:17192":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:45042:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:2983:3158":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:4468:9112":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:7822:3412":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:1939:3423":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:835:2769":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:11715:17328":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:6610:17085":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:11352:3214":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:44234:9016":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5320:14140":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:5959:16099":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:1607:3363":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10720:34028":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:1276:3356":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:7348:15300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:14414:20698":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:6664:14880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6320:17076":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:706:9027":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:11130:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:2573:16139":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:12949:17215":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6773:3089":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:12433:2988":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:7414:3094":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:1007:3356":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10689:22470":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:7314:10983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:2352:3358":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:14847:21418":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:3811:3548":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:7306:10179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:1653:11041":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:14386:20696":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:2979:16155":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:21349:3190":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:598:34055":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:22366:3477":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:5476:3678":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:12593:9027":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:2443:2784":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:2496:2363":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:21731:3477":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1063:3358":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:41093:9327":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:15116:21432":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:46509:3816":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11635:3227":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7932:17119":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:3830:16222":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:640:3340":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:7616:17194":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:8282:14342":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:2175:17310":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:11413:22417":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:2993:31828":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:14051:20675":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:16259:20158":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:5052:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:7597:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"9:423:15927":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:4399:16676":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:9122:3224":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:43708:28643":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:5515:14162":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"11:710:3144":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:10887:3207":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5581:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14038:20674":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:12454:17431":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:4355:16655":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10170:2952":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:3773:3375":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:623:34059":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:10700:3219":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"11:1066:16042":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4123:3577":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11042:17228":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"15:0:2354":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:10020:8964":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:6579:17084":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:9781:17195":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12584:17207":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:4784:3609":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:6562:14872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:4075:3574":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:5283:14135":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11647:17325":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:5321:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:5985:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:3614:3140":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:47193:3765":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:687:3141":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"14:187:16062":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:14131:20680":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11324:17289":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:4825:9132":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8291:3504":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:5512:3680":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:479:10128":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13785:17385":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13235:20153":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:40202:26418":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:22794:28452":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:3758:3220":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:2079:3376":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:12078:1544":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:4240:3601":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7653:17113":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:3749:3544":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:2917:16154":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:3317:3524":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:1968:3424":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:5699:2790":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:44559:9063":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2363:9400":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:867:3142":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14066:20676":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:0:2347":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:15126:21433":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11075:2968":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:4986:17451":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"11:434:32858":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:5306:14138":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6268:3082":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:2234:17296":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:4537:2831":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11497:17270":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12107:2956":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:8461:3648":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:42287:3140":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:8259:14339":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:41451:9318":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:7113:2883":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:5250:14131":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:46124:3768":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:8317:14347":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7335:17101":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:578:10141":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"11:875:3354":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:15376:21455":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:7467:15305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:4550:3609":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:3627:3141":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:43201:3157":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:6669:17087":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:3399:3509":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:39901:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:4572:16711":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:918:3145":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:42437:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11788:17378":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:3003:31821":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12300:17426":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10534:34038":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:40726:9140":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:6929:2817":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:2068:3375":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:5616:3048":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:686:1802":{"crate_id":1,"path":["std","collections"],"kind":"module"},"17:12030:17344":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:6511:3703":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:45024:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5472:14157":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:5720:3710":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:12599:9026":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"9:0:2349":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:15313:21449":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:14855:21419":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12318:17215":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:8013:2507":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:951:3355":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"9:446:15925":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11583:17297":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10877:17208":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4897:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6062:33272":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10218:2974":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:22303:3884":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:7355:17103":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:0:883":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11773:17377":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:4248:3602":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:10671:23882":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:47347:3783":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4992:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10622:34027":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:12096:1254":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:7351:9329":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:4648:3163":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4879:2866":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13292:2995":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:8328:14348":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:5181:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7951:17120":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:46327:3781":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:42278:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12851:2991":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:39189:9384":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:2268:3449":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:40803:3433":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:1490:11025":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12342:17394":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:7194:33248":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10018:17174":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:16269:20160":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:13046:17180":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:22048:3182":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:47737:3800":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:7503:2502":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12362:17428":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:2859:16152":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:4202:30216":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:41442:3702":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:48412:8930":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:4825:3589":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:1503:11027":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:46655:3782":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:588:3333":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6692:17088":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12494:17399":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14599:20710":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:2883:16153":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6908:33012":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11290:22587":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"11:1051:3358":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:41476:9319":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"11:0:2351":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:6629:14876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:430:32857":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3819:2551":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7089:2826":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2438:3458":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:15434:21462":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:2807:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:12289:17391":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:7387:31335":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:22342:3885":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"11:1566:16045":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:48465:8933":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:3473:17346":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:597:17194":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:12086:800":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:1559:11033":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11915:17383":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:48435:8931":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:2723:31316":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10828:34033":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:8369:3598":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:44671:9066":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:11399:22439":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:14529:20706":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:4113:2790":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:22730:3152":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:811:2805":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:3363:2805":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"11:1582:16046":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:7730:3477":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:10247:23655":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:10272:2490":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:10647:3638":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:15333:21451":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:3015:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5046:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:10026:8972":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8996:3717":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15023:21428":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:42303:2551":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:21388:30058":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:9069:22664":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12189:17422":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:538:10135":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9886:17197":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:40899:3164":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:5831:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:14341:20693":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6152:3074":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:8022:17124":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13173:17482":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:15701:21478":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6408:17080":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:39864:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:4813:16791":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:46208:3809":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11654:16086":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12695:17442":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:8377:3546":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:40740:9142":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:10090:22666":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:12543:17440":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:9168:9025":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:44856:9512":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:44082:9036":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:44737:9051":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:21403:30046":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:149:2746":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:7837:3413":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10887:34023":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:2336:3018":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:48488:8934":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:4702:16772":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:47035:3805":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:0:1536":{"crate_id":1,"path":["std"],"kind":"module"},"17:12993:17216":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:7938:3219":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:14449:20700":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:13485:20165":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:3916:3549":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:1142:16044":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:40863:3471":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:22746:3184":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13797:20659":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:14475:20702":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12707:17210":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:1120:31927":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:6409:14860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:3709:16170":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:39939:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:15596:21470":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:12089:1648":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:6880:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6763:14892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"5:7437:2551":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:16121:21650":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:922:3351":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4864:14091":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11102:17236":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:11160:22532":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:8304:3546":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:1533:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5665:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:4353:3160":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:4811:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:1393:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:1824:3393":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:5031:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:33381:9367":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:39848:3388":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:10905:17209":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:7467:23640":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:7523:3097":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"11:2151:3358":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:2203:17271":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:9017:3701":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:15769:21483":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:15822:21487":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13399:20159":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:2492:31319":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:5102:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8954:3713":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:10838:3141":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:45121:8946":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:7245:2559":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:21405:30055":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:1621:11038":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:9485:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6230:17071":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:7417:3151":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13972:20669":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:3504:3474":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13024:17217":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:13946:20667":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:15168:21436":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:15151:21435":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:1054:3357":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:43246:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4876:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:44058:9042":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1639:11040":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:23944:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13272:20155":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:2859:3428":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:10946:2894":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:299:32843":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"18:80:21672":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:553:10137":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:7948:3468":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:15734:21480":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:1526:11030":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:21740:3753":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13497:20166":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:10024:8971":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3201:2506":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4891:13927":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:41242:9341":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}