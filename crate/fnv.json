{"root":"0:0:2435","crate_version":"1.0.7","includes_private":false,"index":{"2:13202:22962":{"id":"2:13202:22962","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2912:1793":{"id":"2:2912:1793","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42013:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:2006":{"id":"0:10:2006","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:32171:2715-0:10:2006","a:2:3121:246-0:10:2006","a:2:41974:3441-0:10:2006","a:2:41975:3764-0:10:2006","a:2:3156:9469-0:10:2006","a:2:32112:236-0:10:2006","b:2:2628-0:10:2006","b:2:2902-0:10:2006","b:2:2908-0:10:2006","b:2:2625-0:10:2006","b:2:2913-0:10:2006","b:2:3737-0:10:2006","b:2:2898-0:10:2006","0:13","0:17"]}}},"2:13188:22948":{"id":"2:13188:22948","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13189:22949"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41880:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:10:2006":{"id":"b:2:2902-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13193:2014":{"id":"2:13193:2014","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43760:2908","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:30806":{"id":"2:13225:30806","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12854:9150","str::split":"2:13216:22950","prim@char":"1:12331:459","`DoubleEndedIterator`":"2:8237:129","str::rsplit_terminator":"2:13228:30807"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43824:9170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13290:22814":{"id":"2:13290:22814","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13249:30809":{"id":"2:13249:30809","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12854:9150","`DoubleEndedIterator`":"2:8237:129","prim@char":"1:12331:459","str::rmatch_indices":"2:13252:30810"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43924:9165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:22816":{"id":"2:13291:22816","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:37298"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:30818":{"id":"2:13275:30818","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12875:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:22961":{"id":"2:13240:22961","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41880:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12875:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13182:22920":{"id":"2:13182:22920","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10944:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10944:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13191:28575":{"id":"2:13191:28575","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12331:459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43744:9157","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2020":{"id":"0:21:2020","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:752:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13255:30811":{"id":"2:13255:30811","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:30817":{"id":"2:13266:30817","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:2013":{"id":"0:19:2013","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2630:22550":{"id":"2:2630:22550","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13189:22949":{"id":"2:13189:22949","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13188:22948"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41880:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:22388":{"id":"2:13199:22388","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13278:30819":{"id":"2:13278:30819","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:22810":{"id":"2:13287:22810","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39781:2695","Self::is_ascii":"2:13286:22809"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41880:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39781:2695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13263:30816":{"id":"2:13263:30816","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12880:9145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13269:22964":{"id":"2:13269:22964","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41880:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:22956":{"id":"2:13231:22956","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150","str::rsplitn":"2:13234:22958"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43878:9139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13296:3428":{"id":"2:13296:3428","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4926:3428"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44082:3429","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2916:136":{"id":"2:2916:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32036:3796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13219:22952":{"id":"2:13219:22952","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12669:9141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13175:22921":{"id":"2:13175:22921","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12350:1836"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13252:30810":{"id":"2:13252:30810","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12854:9150","`DoubleEndedIterator`":"2:8237:129","prim@char":"1:12331:459","str::match_indices":"2:13249:30809"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43942:9166","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12875:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13166:30799":{"id":"2:13166:30799","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2018":{"id":"0:20:2018","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10549:2001","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:13292:22817":{"id":"2:13292:22817","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:37298"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41974:3441-0:10:2006":{"id":"a:2:41974:3441-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41974:3441","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13261:30814":{"id":"2:13261:30814","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:22809":{"id":"2:13286:22809","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:30807":{"id":"2:13228:30807","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12854:9150","str::split":"2:13216:22950","prim@char":"1:12331:459","str::split_terminator":"2:13225:30806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43842:9169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12875:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13237:22960":{"id":"2:13237:22960","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41880:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13186:22944":{"id":"2:13186:22944","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13188:22948","str::split_at_mut":"2:13187:22945"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5628:31522":{"id":"5:5628:31522","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:10:2006":{"id":"b:2:2913-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1791"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:10:2006":{"id":"b:2:2898-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:2750"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13195:28579":{"id":"2:13195:28579","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13194:28570"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44057:9152","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:9479":{"id":"5:5614:9479","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2901:2750":{"id":"2:2901:2750","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2875:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_u64","write_u8","write_i128","write_i16","write_u128","write_u16","write_str","write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8"],"trait":{"name":"Hasher","id":"2:10509:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:2012","0:19:2013"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13165:2757":{"id":"2:13165:2757","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41975:3764-0:10:2006":{"id":"a:2:41975:3764-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41975:3764","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5613:31519":{"id":"5:5613:31519","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2719","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2719","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13185:30804":{"id":"2:13185:30804","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12337:1707","crate::ops::IndexMut":"2:3397:3490","str::slice_unchecked":"2:13184:30803"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13184:30803":{"id":"2:13184:30803","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12337:1707","str::slice_mut_unchecked":"2:13185:30804","crate::ops::Index":"2:39426:3489"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:31520":{"id":"5:5617:31520","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13176:22017":{"id":"2:13176:22017","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41882:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41880:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10944:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10944:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2904:818":{"id":"2:2904:818","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32112:236-0:10:2006":{"id":"a:2:32112:236-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32112:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13178:22022":{"id":"2:13178:22022","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41882:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41880:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10944:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10944:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13163":{"id":"2:13163","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13164:983","2:13165:2757","2:13166:30799","2:13167:30800","2:13169:30801","2:13172:22901","2:13173:30802","2:13174:334","2:13175:22921","2:13176:22017","2:13178:22022","2:13180:22919","2:13182:22920","2:13184:30803","2:13185:30804","2:13186:22944","2:13187:22945","2:13188:22948","2:13189:22949","2:13191:28575","2:13192:28931","2:13193:2014","2:13194:28570","2:13195:28579","2:13196:25446","2:13197:30805","2:13198:28576","2:13199:22388","2:13202:22962","2:13205:22963","2:13208:2797","2:13212:2756","2:13216:22950","2:13219:22952","2:13222:22954","2:13225:30806","2:13228:30807","2:13231:22956","2:13234:22958","2:13237:22960","2:13240:22961","2:13243:2669","2:13246:30808","2:13249:30809","2:13252:30810","2:13255:30811","2:13257:30812","2:13259:30813","2:13261:30814","2:13262:30815","2:13263:30816","2:13266:30817","2:13269:22964","2:13272:22965","2:13275:30818","2:13278:30819","2:13281:30820","2:13284:30821","2:13286:22809","2:13287:22810","2:13288:22812","2:13289:22813","2:13290:22814","2:13291:22816","2:13292:22817","2:13293:22818","2:13294:30822","2:13296:3428","2:13297:30823"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:2010"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13272:22965":{"id":"2:13272:22965","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41880:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12875:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13172:22901":{"id":"2:13172:22901","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12401:9154"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13174:334":{"id":"2:13174:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13175:22921","`u8`":"1:12350:1836"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:22813":{"id":"2:13289:22813","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13194:28570":{"id":"2:13194:28570","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13195:28579"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44048:9153","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2012":{"id":"0:18:2012","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:22950":{"id":"2:13216:22950","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12854:9150","`DoubleEndedIterator`":"2:8237:129","prim@char":"1:12331:459","str::split_whitespace":"2:13194:28570","str::rsplit":"2:13222:22954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43774:3613","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:10:2006":{"id":"b:2:2908-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1793"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13288:22812":{"id":"2:13288:22812","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13169:30801":{"id":"2:13169:30801","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13167:30800"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:10:2006":{"id":"b:2:2628-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32113:2714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:22550"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13212:2756":{"id":"2:13212:2756","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41882:190","prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41880:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12875:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:30821":{"id":"2:13284:30821","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12815:135","`FromStr`":"2:12814:3552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42013:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12814:3552","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12814:3552","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5630:3637":{"id":"5:5630:3637","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:30822":{"id":"2:13294:30822","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4925:30822"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44073:9161","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13164:983":{"id":"2:13164:983","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12331:459"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:10:2006":{"id":"b:2:3737-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32113:2714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2950:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13205:22963":{"id":"2:13205:22963","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12875:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5629:31523":{"id":"5:5629:31523","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2719","`String`":"5:7642:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2719","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13262:30815":{"id":"2:13262:30815","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2435":{"id":"0:0:2435","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:2006","0:20:2018","0:21:2020","0:24:2024"],"is_stripped":false}}},"2:13173:30802":{"id":"2:13173:30802","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13197:30805":{"id":"2:13197:30805","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44038:9164","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13180:22919":{"id":"2:13180:22919","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10944:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10944:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32171:2715-0:10:2006":{"id":"a:2:32171:2715-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32171:2715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13297:30823":{"id":"2:13297:30823","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4923:30823"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44091:9162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13198:28576":{"id":"2:13198:28576","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44066:9151","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9469-0:10:2006":{"id":"a:2:3156:9469-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2911:136":{"id":"2:2911:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:13192:28931":{"id":"2:13192:28931","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12331:459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43750:9156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:22818":{"id":"2:13293:22818","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:37298"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:24218":{"id":"5:5632:24218","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13290:22814"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612":{"id":"5:5612","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5613:31519","5:5614:9479","5:5617:31520","5:5620:31521","5:5628:31522","5:5629:31523","5:5630:3637","5:5631:24217","5:5632:24218"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3739:1806":{"id":"2:3739:1806","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39595:9219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13187:22945":{"id":"2:13187:22945","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13186:22944","str::split_at_mut_checked":"2:13189:22949"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5631:24217":{"id":"5:5631:24217","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13289:22813"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:2669":{"id":"2:13243:2669","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12854:9150","`DoubleEndedIterator`":"2:8237:129","prim@char":"1:12331:459","str::rmatches":"2:13246:30808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43978:9167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13257:30812":{"id":"2:13257:30812","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2627:2654":{"id":"2:2627:2654","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2917:1791":{"id":"2:2917:1791","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42013:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13259:30813":{"id":"2:13259:30813","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:10:2006":{"id":"a:2:3121:246-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2625-0:10:2006":{"id":"b:2:2625-0:10:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32113:2714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2654"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13167:30800":{"id":"2:13167:30800","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:22958":{"id":"2:13234:22958","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12331:459","str::splitn":"2:13231:22956","self::pattern":"2:12854:9150"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43896:9137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12875:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:31521":{"id":"5:5620:31521","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:22954":{"id":"2:13222:22954","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12854:9150","`DoubleEndedIterator`":"2:8237:129","prim@char":"1:12331:459","str::split":"2:13216:22950"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43792:9135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12875:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2010":{"id":"0:16:2010","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:2024":{"id":"0:24:2024","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1475:155","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13196:25446":{"id":"2:13196:25446","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44028:3611","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13208:2797":{"id":"2:13208:2797","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41882:190","prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41880:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13246:30808":{"id":"2:13246:30808","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12854:9150","`DoubleEndedIterator`":"2:8237:129","prim@char":"1:12331:459","str::matches":"2:13243:2669"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43996:9168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12875:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:30820":{"id":"2:13281:30820","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12331:459","self::pattern":"2:12854:9150"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12860:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12875:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:12949:17347":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:3197:9069":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"11:2304:3453":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:8300:14475":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:1984:1344":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:5320:14270":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:4587:16834":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46639:3885":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:6756:15021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"18:481:21825":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:6768:15023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:46904:9040":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:5031:14241":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13581:20304":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12485:17566":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:44488:9634":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:41127:9444":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:4510:3106":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:6775:15024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:10018:17306":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11755:17463":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:21614:3868":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5102:14247":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:7330:10137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:23060:29134":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:2872:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:2476:3567":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"18:754:21823":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:43774:3613":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"18:581:3139":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6300:17199":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:497:10260":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:22391:9520":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:1603:3074":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:9195:3826":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:10300:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:1200:31873":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4864:14221":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:5831:2983":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:43896:9137":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:15356:21585":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13844:20794":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:3053:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:12331:459":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5665:14307":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:43106:2701":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:11205:3795":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:10985:27292":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7633:33292":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:4502:16818":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:7348:15430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4811:14218":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:6447:14994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:13877:20796":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13089:17611":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5385:2879":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8558:3648":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2062:29135":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:11042:17360":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:6664:15010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:5952:3809":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:3669:16293":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:45688:3909":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:4158:3077":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13024:17349":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:4809:25305":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:7104:31923":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12043:17474":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:44516:9635":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:7604:3025":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:9330:17227":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:12349:870":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:12350:1836":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:3114:9067":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:15836:21620":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:1954:9426":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11341:17407":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:4785:3109":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:40444:3533":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:8151:9449":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:16187:21787":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:3381:3634":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12724:17343":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:44702:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:40229:9270":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:12869:9148":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"7:32:16028":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:16121:21782":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:8229:2699":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:4876:14223":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6813:17217":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:11672:22651":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:22444:9520":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:10955:25051":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:11913:16218":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:11352:3554":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:40494:3550":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:6024:3288":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:835:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:40550:3111":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:9737:17303":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:4909:14226":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5643:14305":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2306:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:943:3082":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:1336:3455":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:2869:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:5960:17192":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:5503:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10671:34359":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:5726:9214":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11256:17392":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:14212:20816":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:4321:3718":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:578:10270":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:2318:3088":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"9:482:16056":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:9310:25065":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:11081:27429":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:6870:9451":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:21489:29892":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:39518:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:11277:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:46915:9041":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:437:16233":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:4986:17583":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:5931:3445":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:4269:3595":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10769:34351":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:43824:9170":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13015:2917":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:2708:16275":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:8226:17256":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:3314:3460":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:41996:9583":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15102:21563":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11051:17383":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:6379:14925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:4771:16903":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:7351:28397":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:7799:3033":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:715:2002":{"crate_id":1,"path":["std","collections"],"kind":"module"},"14:0:2558":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6066:17195":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:5086:3745":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:15521:21599":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:1207:17378":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:44349:9188":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:2569:2711":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:8073:17248":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:13473:20296":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:7111:33521":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:426:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:8271:14471":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:41899:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:5914:2990":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13146:17613":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:15222:21574":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:15957:21776":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:865:3074":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11853:17513":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4959:14232":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:8188:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5598:14300":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:3014:16287":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:8553:3656":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:4352:16737":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:8610:3713":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:6782:17216":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14994:21546":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:9271:3290":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:32096:9246":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"5:4318:3074":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:1098:17371":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"11:883:3452":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:9111:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:16079:21779":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:4992:14237":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:23534:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:13749:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:40704:9460":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:4641:16842":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:15078:17373":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12408:2916":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:8049:3438":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:8168:3577":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8541:3611":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12264:17527":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:39346:9230":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:43131:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:45916:3943":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:680:31707":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:43659:9114":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:10828:34363":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:4882:16922":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:14147:20813":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:7984:10215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:3975:2761":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6620:17212":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:4992:3697":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6636:15007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:43701:9133":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:41908:3074":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13412:20292":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:7537:2711":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5020:14240":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"12:0:2557":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:5677:14309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:747:3666":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:6746:15020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"9:0:2554":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:22044:29900":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:4913:16930":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5382:14278":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:45902:3894":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13832:20793":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:4871:3747":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:586:10271":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:3358:2716":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:5927:17191":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:46012:3929":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:15058:2938":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:7967:3289":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:38767:9506":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:11019:25018":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11293:17394":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:5073:3595":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:13804:3466":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:15289:21579":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13774:17516":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6821:15026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:5226:3095":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:43346:9627":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:10170:2880":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:15582:21601":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11524:17453":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:7412:3465":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:5037:16962":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:9403:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:2521:9521":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:7618:3026":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:3575:9232":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:15214:21573":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:46464:3945":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:39538:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:12337:1707":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:1636:3460":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:2486:3572":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:45767:3881":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:11788:17510":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:45870:3882":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:11754:24755":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:752:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:4149:3686":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:10503:27284":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"11:1923:3460":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:1101:3456":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"14:31:16186":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:5407:1229":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:42842:3103":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:22707:3132":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:10325:3505":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:2878:16283":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"13:110:33222":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:44504:9642":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:3365:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:12344:720":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"18:698:2873":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:46884:9038":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:4097:3682":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:0:2561":{"crate_id":17,"path":["object"],"kind":"module"},"11:1160:3456":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:46240:3912":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:5323:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:43744:9157":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2225:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:11093:27386":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12900:2923":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:10661:17337":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:2846:9286":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:15324:21582":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:12669:9141":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:43114:3272":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:5228:3640":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:13088:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6621:15005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2323:16258":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:8701:29951":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12824:17344":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11493:17415":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:2258:9076":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6532:17208":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:11153:17339":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:40685:9459":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:22377:4001":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:10290:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:9135:3795":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:3194:9068":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"14:187:16194":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:15301:21580":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:12928:9174":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5617:14301":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12399:17561":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:5307:17163":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"11:434:33161":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11414:3553":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:14723:21547":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:800:3445":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:15400:21590":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13252:20286":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:3347:9074":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:11689:25288":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:44177:9181":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:6955:9215":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:44066:9151":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13173:17614":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:9435:9146":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11307:25270":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:7619:3536":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:1692:3710":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7590:3024":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:3172:3859":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:44383:9171":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5477:14288":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5400:14280":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:2112:3475":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:256:33594":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"0:0:2435":{"crate_id":0,"path":["fnv"],"kind":"module"},"16:6433:3013":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13485:20297":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7397:33611":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:43681:9134":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12659:17570":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:16105:21781":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:7648:17238":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:2788:16279":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12584:17339":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:7485:15436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"18:515:21827":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:14311:20823":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:6269:27435":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:41842:3653":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:38023:9502":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:485:10258":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12076:17471":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:2067:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:2771:3625":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:6278:2991":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:22165:3867":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:938:3447":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:12282:24998":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14271:20820":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:11220:9130":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:8647:3750":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"11:1910:3458":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:5686:2979":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:1545:3447":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:40610:9455":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4924:14228":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:41786:29021":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6849:17218":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:22389:28763":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:8253:14468":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:6763:15022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"18:635:34381":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:3801:3307":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"0:24:2024":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"17:10044:17333":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"18:659:21819":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8845:3779":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:6170:3822":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:2037:17409":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8481:3580":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:4915:3702":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:12683:17575":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:13946:20799":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"13:229:3041":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:6698:15014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:14977:21557":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:44028:3611":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"11:811:3446":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:46875:9037":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:40385:9267":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"11:774:3079":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:80:21804":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:0:2556":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:10241:3527":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:1735:31908":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:8006:15812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:10712:3634":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:4614:16838":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:4155:3687":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:8345:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5515:14292":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:11102:17368":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:21535:29898":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:15116:21564":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:2612:16271":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:13187:20283":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:43580:9125":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:45703:3874":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:11331:9136":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2711:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11715:17460":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:42592:9082":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:6931:9214":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:7619:9276":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:15383:21588":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:8197:15975":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:11414:9138":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:7355:17228":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:7735:9438":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:12341:722":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:7575:15441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:1997:3526":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:12347:883":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11915:17515":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:14489:20835":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11467:17408":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:856:3450":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:22257:3996":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:750:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:4996:9258":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:2234:17428":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:47032:9048":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6714:15016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:6411:4009":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:9755:17301":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:7602:15443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:10976:27289":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:15376:21587":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:41093:3812":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:7314:11112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11419:2885":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:10350:2907":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:10709:3632":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:15445:21595":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:40268:9271":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:6491:14953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:96:21805":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:974:3451":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:40289:9162":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:2355:2947":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12454:17563":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:14246:20818":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:32201:9066":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:12238:17529":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:39498:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:15701:21610":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:40651:9465":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11392:17405":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6026:2958":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:7876:25097":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:44271:9185":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:13492:28664":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:46141:3951":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:7584:15442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:7665:9193":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:45887:3888":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:3594:30241":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:564:10268":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:0:988":{"crate_id":6,"path":["libc"],"kind":"module"},"2:10501:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:11617:3799":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:5624:14302":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:9105:3794":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:6263:33558":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3121:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:888:2761":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:42494:3271":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:2536:33169":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:33607:9495":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7755:3032":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:1503:11156":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:11372:9139":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:15931:20283":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:4370:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:10996:3515":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:2675:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:6480:3014":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:11113:3077":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:2808:16280":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:5979:3287":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:2508:16266":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:1610:3445":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:46187:29197":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6962:3020":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:2418:16262":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6543:17209":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:1566:16177":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:12298:3316":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:16138:21783":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:15992:21777":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:11812:17470":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12251:17528":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:42908:3103":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:22475:3585":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:15678:21609":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6560:3015":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12887:2921":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:10720:34365":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:4358:29244":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:5897:2985":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:351:33154":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:45835:3928":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:15138:21566":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:5846:17189":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:9408:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:3564:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6427:3011":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:44710:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:40619:28565":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:666:3433":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:34098:9498":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12516:17582":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:12993:17348":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:491:10259":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:1164:31872":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:10346:25080":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:32172:3268":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4787:14216":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:14038:20806":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:9172:2761":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:3330:3633":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:30246:3662":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:7655:9192":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:2542:28540":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:21722:3585":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:7467:15435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:3778:16301":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:14414:20830":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:9945:3124":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40297:3429":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:289:31908":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:11405:17404":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:16249:21792":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:43750:9156":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:5536:14294":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5528:14293":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:4113:31908":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11166:17372":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:10595:3794":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:15434:21594":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13424:20293":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"18:113:21806":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8599:3723":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:21521:29894":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:44520:9636":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:40418:3532":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:9386:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:9938:17331":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7910:17247":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5134:14250":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:15190:21570":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5181:14253":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:12814:3552":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"14:202:9191":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"11:2469:3446":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:5590:3787":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:2460:3562":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:4628:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11877:2913":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8185:3306":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:8351:16012":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:12343:741":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:6173:3595":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:21626:3130":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:7998:3413":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:15126:21565":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:521:3401":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:2592:16270":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8767:3776":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"9:53:3047":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:2766:31750":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:46314:3924":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:7607:3535":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:9237:3830":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:40581:9453":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:11973:9121":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"11:875:3451":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:11258:9142":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11128:17366":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2315:3558":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:4637:9238":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:2619:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:6915:15055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:14560:20840":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:45931:3949":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:7714:25360":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:12385:9600":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:12342:17526":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:3329:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:4447:31907":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:12353:1830":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:14876:21553":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13738:20789":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10887:34350":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:7727:3029":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:40240:29210":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:589:29174":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:3342:3472":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:7429:11281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:23027:29127":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:40278:9272":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11799:17511":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:15418:21592":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:5146:14251":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"7:0:1887":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:16165:21785":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:2070:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:5641:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:559:10267":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:1565:11163":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:5838:3823":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:3475:16291":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:15778:21616":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:14131:20812":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:10938:3306":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:40:3491":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:13519:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:7394:24753":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:44298:9186":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:5981:3595":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:8234:2698":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:0:1699":{"crate_id":1,"path":["std"],"kind":"module"},"2:21506:29897":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:8250:3624":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:2952:123":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"2:43646:9113":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:15281:21578":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:10549:2001":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:16269:20292":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:968:3450":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7686:17240":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7379:33622":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:8547:3657":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:4800:14217":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15456:21596":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:12358:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:46225:29215":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12464:17564":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:40695:3119":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:12369:9598":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2684:16274":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:21608:3865":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:10302:9088":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:2866:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:7462:3097":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:22163:3585":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:718:21816":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:11600:25279":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"11:1087:33172":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:15760:21614":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:21553:3585":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:9753:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:13526:20300":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:5100:3746":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:6409:14990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5445:14284":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:7546:15439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4891:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:12854:9150":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:6749:17215":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:14968:21556":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:46109:3944":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:2478:16265":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:10934:3585":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:1475:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:6048:3095":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:43365:9116":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:4475:3722":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:2875:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:10085:9080":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:10997:17357":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12494:17531":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:4760:3743":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:15748:21613":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:5630:14303":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:12555:9646":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:22879:3665":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:7620:9277":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:40633:3118":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:4346:29252":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:44082:3429":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:5435:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:1437:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:1838:683":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:4756:9247":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7823:17244":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:7592:9568":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:40514:3579":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:4393:9065":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10092:17334":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:8855:3074":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8669:3700":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:14933:21555":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:687:3077":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:33752:9496":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:15720:21611":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:22301:3997":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:8604:3724":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12478:17565":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:1586:3474":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:15197:21571":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:1968:3525":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:14436:20831":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11621:2894":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:10755:3412":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:6361:27411":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:5722:17183":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:1180:31901":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:3291:28004":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:43143:3776":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:42832:29003":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:3829:3655":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:1621:11167":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:46027:3877":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:7470:27124":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:12355:952":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:13455:20295":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8063:3439":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:9714:3578":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:3491:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:23005:29217":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:46729:3891":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:2098:3307":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11063:17377":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:46056:3883":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:40879:9463":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:11259:22660":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:4477:3595":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:2140:3454":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3426:3631":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:5781:17187":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:4278:3595":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12768:17307":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:12352:1824":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:45820:3922":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:12880:9145":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:10638:27431":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:1607:2761":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:43571:9126":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12371:17346":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:1871:3595":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:4911:3698":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:15473:21598":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:15822:21619":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4952:14231":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10185:2901":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:8155:17252":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:5075:16977":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11189:17370":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:0:551":{"crate_id":2,"path":["core"],"kind":"module"},"2:40484:3551":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:6786:3817":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:43942:9166":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:11921:16218":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"3:0:493":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"11:430:33159":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12443:17553":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11557:17455":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:7452:15433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6948:3019":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:41620:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:22761:3663":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4971:14234":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:15168:21568":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:5122:14249":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:22872:29124":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6542:15001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:44206:9183":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:41108:3639":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"11:396:33148":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7132:33253":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:21555:3869":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:16259:20290":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:21606:3585":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:5314:14269":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:2123:3476":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:3029:16288":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:45782:3911":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:3397:3490":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:10251:2904":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7549:17234":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:650:3431":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6519:14998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:32855:9489":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"11:700:2761":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:12329:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:22:803":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:21734:3130":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:6788:33022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12621:17576":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:43760:2908":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6335:2975":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:2902:16284":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:14752:21548":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6721:15017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:6705:3296":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5565:14297":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5352:14274":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:2710:27419":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11443:17410":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4916:14227":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"14:214:16195":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:6562:15002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13497:20298":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11547:17454":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:3657:3074":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11510:17401":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:3547:3595":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:42219:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:38188:9505":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6678:15012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:2562:33170":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:10486:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:13674:20787":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:726:2875":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:15624:21605":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:3581:9231":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6574:3016":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:11825:17491":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:4660:3725":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:11838:3660":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6940:2976":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:22972:29216":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:8861:3780":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:1535:11160":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:4549:3714":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:517:10261":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:8259:17257":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:8463:3120":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:4701:9245":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:5462:9107":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13235:20285":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:16235:21791":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:14079:20809":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:1365:3456":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:5945:3808":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:1489:3077":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:7684:28577":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:1577:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:11683:25312":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6398:3009":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:1680:11173":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:41860:3654":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:46758:3925":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13363:20288":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:2878:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:5246:25046":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:44785:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:7129:31944":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:1628:11168":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:9324:3121":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4837:14220":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:9758:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7559:17235":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:4942:14230":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:15176:21569":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:16223:21790":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:14575:2917":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:33925:9497":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5415:14281":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:2505:660":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:42053:3074":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:46485:3879":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:3881:3446":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:6665:17214":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:1547:11161":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6505:14954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:10658:9611":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:30527:29097":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:8790:3777":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8511:3111":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13785:17517":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6231:17198":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:39781:2695":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:8663:9447":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:40456:2908":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:10524:17335":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:7570:17236":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:3899:16353":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:9984:17332":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:9418:3820":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:14516:20837":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12557:2897":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:40466:3537":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"14:160:16186":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:42599:9083":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:34271:9500":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6606:17211":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:32643:9490":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:9207:3829":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:4342:3720":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:4805:25301":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"18:613:34388":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10399:2908":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:219:9079":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6900:15054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8207:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:3329:16290":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:8472:3309":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11743:17462":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:5700:17182":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:11894:3315":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:2458:16264":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:465:10255":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:3996:3660":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:5457:14285":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:5191:14254":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:8199:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12422:17562":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:3406:3446":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:12863:17345":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"10:0:2555":{"crate_id":10,"path":["adler"],"kind":"module"},"10:44:3046":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:22830:29201":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:14599:20842":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:8301:17258":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:46426:3890":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:40429:9568":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:22517:3993":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:41086:9440":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:4189:3688":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:4874:3725":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13387:20290":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:3362:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7656:17239":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:10724:29887":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:10948:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:40199:9235":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:3614:16292":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:2548:16268":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11773:17509":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:9258:3810":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"14:40:20285":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:837:3448":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:15426:21593":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:10756:28881":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:3580:3582":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:9282:3406":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:39426:3489":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:43589:9129":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:563:2870":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:8341:16011":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:15342:21584":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:43978:9167":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:8188:17254":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12150:17477":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:532:10263":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:1653:11170":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11661:17431":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:11899:9123":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"11:102:33173":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5219:14257":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11583:17429":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:6783:3816":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:12314:25315":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:6448:3822":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11313:17395":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"11:1903:3457":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:14177:20814":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"11:2423:2761":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:11089:3074":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:12354:1812":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:1566:3083":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:12351:1818":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:922:3445":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:538:10264":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:2641:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11764:17464":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:2950:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:13064:17311":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:7563:3093":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:12860:9146":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:46858:3952":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7014:17223":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:867:33594":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:4211:3692":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:8242:25020":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:3036:32004":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:1916:3512":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:33067:9492":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:16093:21780":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:4979:14235":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:14912:21554":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7813:17243":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:10954:17355":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:44751:4006":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:46941:9043":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:1887:2761":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:14986:21558":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13922:20798":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"11:364:33151":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6412:17202":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"5:6016:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:3670:3077":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:3167:3857":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:8012:15813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:5418:31908":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:7390:3464":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:43792:9135":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:41974:3441":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:41702:3270":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:10612:17336":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:732:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:5212:14256":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4885:14224":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:11181:9141":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:9462:3856":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:3609:9071":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11115:17367":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12707:17342":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6342:33600":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:9343:25077":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"13:0:2551":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:2882:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"9:392:16058":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:14788:21549":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:7422:3477":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:11817:3658":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:12330:1160":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:12342:725":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13116:17612":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:10412:3798":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:10944:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:11293:9135":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:7979:3585":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6456:17204":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:1320:3453":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"18:643:34377":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:4248:3595":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:4743:16898":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13855:20795":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:8306:14476":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8069:3514":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:3182:9491":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:41135:9446":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:11026:17359":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11595:2910":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:7006:17222":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13594:20305":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13797:20791":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:1066:16174":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13723:20788":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:44073:9161":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5039:14242":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:46447:3896":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:9122:3285":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12647:17571":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:3383:3635":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:3285:25805":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:5671:14308":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:6689:15013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:41117:9443":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:3252:9499":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11367:2897":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:14847:21550":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:15390:21589":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:2532:2568":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:7888:17246":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:6345:4007":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:6069:9857":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:5077:3744":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:11142:2885":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:40255:9269":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:7052:17224":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5370:14276":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:6881:29110":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:12929:17346":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:4856:16919":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6991:33447":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:1069:3453":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:3735:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13308:2928":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:43733:9160":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:40413:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3517:3639":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:42606:9090":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:8216:17255":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13999:20803":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:42455:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:22738:3133":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:22924:3585":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:46787:3946":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:6872:17219":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:12278:17557":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10573:34360":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:10296:9090":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:40521:9113":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:11647:17457":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:11400:9140":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:5995:17193":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:5200:14255":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7085:33483":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:21477:29892":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:7490:2761":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:41658:3650":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:14025:20805":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:23016:29098":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"5:5466:9108":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:8294:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:573:34377":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:13544:9290":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1707:11176":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:12615:9645":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:6665:3812":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:14402:20829":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:25934:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:1896:3446":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:16212:21789":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:4558:3107":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:909:3081":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10155:2879":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15249:21575":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:2438:16263":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:1490:11154":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:44775:4003":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:3163:9471":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:40312:9265":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:8237:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:40591:3116":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:23038:29109":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:12346:877":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:403:17324":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:41924:2761":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3116:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:4830:16916":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:14463:20833":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:43620:9115":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:3038:31733":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:7446:15432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:491:34390":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:2206:3401":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:7306:10308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:4127:3684":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:10818:17339":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:4083:3445":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:3202:9070":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"11:1676:33165":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:22994:29204":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:8175:17253":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:45849:3876":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:6172:3117":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:3196:16289":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:735:21817":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:30501:9417":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:46285:3918":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:15:2013":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:9426:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:935:3463":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12808:17310":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:3842:3445":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:9222:3827":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:32114:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:6648:17213":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11537:17422":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:8155:9448":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5502:14291":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:7482:2761":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:2528:16267":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:33339:3858":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:1580:11164":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:7382:2761":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:22339:3998":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:1559:11162":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:4816:3110":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:2124:3453":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:5277:25046":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11702:17459":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:41964:3763":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5266:14263":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:8223:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:40392:9268":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"5:3035:2820":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11269:17393":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"18:608:34398":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:6588:17210":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11324:17421":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:42102:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:22363:3585":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:7516:15437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:42336:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12201:17555":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"9:238:3776":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:10344:25064":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"11:2443:3445":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:40193:3429":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:36147:9501":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:15313:21581":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:538:2868":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6353:3006":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:22654:29187":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:1839:3446":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:13814:20792":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10622:34354":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:1619:3457":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13972:20801":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12318:17347":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:15569:21600":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:7916:27424":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:8029:15814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:39595:9219":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:9399:3595":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:2338:16259":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:43924:9165":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7473:2972":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5296:14267":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:3810:16310":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:41102:9442":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"15:394:16221":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:11216:27287":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12388:17552":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:5190:29963":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:44038:9164":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:494:27422":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:43153:3273":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4795:3687":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3474:3617":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"15:0:2559":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:7454:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10918:3575":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:2936:16285":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:4291:27121":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5636:14304":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:3598:3581":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4932:14229":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:1603:16179":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:7497:17230":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:5756:17185":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:12597:17578":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:7695:17241":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13553:20302":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7137:3862":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:6597:15003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11674:17458":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11242:17391":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:13712:4004":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:2298:31739":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:22032:3131":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"0:10:2006":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"17:15039:21561":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:8657:3470":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5236:14259":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:952:3074":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:44500:9638":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:12225:17530":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:42013:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:21523:29896":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:10889:3749":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:12348:889":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:6460:14995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:6669:3813":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:7446:2761":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8021:3412":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6120:17197":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"0:21:2020":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"16:872:33595":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:41975:3764":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:22430:4002":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:44508:9640":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"11:1007:3453":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"9:330:16112":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:12303:3440":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:41642:3649":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11016:17358":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:2403:3077":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:3368:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2048:9531":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"0:20:2018":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"15:306:16211":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:40563:3112":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"11:2554:33168":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8521:3612":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:32036:3796":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:3280:3459":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7061:17225":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:6840:3297":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:12695:17574":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:6079:2964":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:5817:2980":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5367:17181":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:2748:16277":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:742:3083":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:12334:1300":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:896:3079":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4965:14233":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11841:17512":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:40642:9457":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:46837:3931":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:11906:24995":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:12338:1796":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:7359:15431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:4468:16807":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:15799:21617":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11497:17402":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12508:17567":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:2838:16281":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:570:10269":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:42297:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:14449:20832":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"9:424:16059":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8337:3305":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5546:14295":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:40744:9452":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:4:1242":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14587:20841":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5489:14290":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:10544:2700":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:5885:3595":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"8:0:2553":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:0:2562":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:44577:9658":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"11:1883:3074":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11634:17430":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:787:3081":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:1671:11172":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46895:9039":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:6442:17203":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:14545:20839":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:6657:15009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:123:3042":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12189:17554":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:6876:29198":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:2626:3622":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:2572:16269":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:46397:3884":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:42859:29202":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:33406:3860":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:11386:9137":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:5107:16986":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:5260:14262":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:2717:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11611:3301":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:42613:9091":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:42946:9081":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"19:0:1277":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5244:14260":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:14475:20834":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:42900:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:6609:31908":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:6880:14131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12543:17572":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:4807:25303":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:47071:9049":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:43878:9139":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:16032:20286":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"11:1025:3454":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:39458:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:1510:11157":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:14260:20819":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5336:14272":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:41916:3077":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:39382:9073":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:7461:15434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:14012:20804":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:5002:14238":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:7339:15429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:44401:9172":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:11192:3285":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:14341:20825":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7098:33571":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:16069:21778":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:46335:3930":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:878:3077":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:932:3446":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:43672:9131":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12362:17560":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:2394:16261":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:12357:1405":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:11224:3129":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:5466:14286":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:7724:3446":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:1625:3458":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:6393:3294":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:299:33145":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:2311:3557":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:7740:9211":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:9148:3286":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13766:17518":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11099:27418":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:0:2560":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:12117:24592":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:15151:21567":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:45750:3875":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13272:20287":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:15616:21604":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:14325:20824":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13211:20284":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5225:14258":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:598:34385":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5277:14264":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11567:17456":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5064:14245":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13568:20303":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:12401:9154":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5344:14273":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:12356:1897":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:41820:3652":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:14066:20808":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:617:3427":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:521:21824":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:3646:9075":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6811:15025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:44156:9180":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5083:14246":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:40893:9464":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:2151:3455":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:4199:3689":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:45974:3917":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:6058:9456":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:12332:1858":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5483:14289":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:22010:3871":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:46077:3889":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12353:17559":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:4432:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:10967:3580":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:44801:9060":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:14372:20827":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:6186:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:5014:14239":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:3328:3632":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:4062:16470":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:8202:3035":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:44688:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"11:1891:3445":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:4682:3726":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:9164:3831":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:3042:31898":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14111:20811":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:40351:9266":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:10285:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:5653:14306":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:10294:9082":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:367:3424":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:6524:14999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:2998:16286":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3665:3606":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:15596:21602":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11865:17514":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:6496:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:15410:21591":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5160:14252":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:4424:16786":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:44223:9184":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9413:3819":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:11214:17365":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:5290:14266":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:6772:31908":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6441:14993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:545:10265":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:741:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:14356:20826":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13399:20291":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12300:17558":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:15769:21615":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:16151:21784":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:5831:3822":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:9807:17314":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:3156:9469":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:7579:3534":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:4969:3703":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:2175:17442":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:2383:3074":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:1723:11177":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:4802:16911":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:14386:20828":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:1947:659":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:15368:21586":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3891:3659":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:7631:9103":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:2845:3585":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11578:25068":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"5:4511:31907":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:44685:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:2303:16231":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:1536:3081":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:542:2962":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:9736:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:13986:20802":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:41079:28598":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:41808:3661":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:8118:17250":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:22489:3992":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:10982:17356":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12530:17573":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:15010:21559":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:45718:3910":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:5626:3789":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8719:3775":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:4394:3721":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:12631:9647":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:42887:29206":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:3288:28016":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5376:14277":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:10298:9091":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:15646:21607":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:1517:11158":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:5347:17180":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:12592:9648":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:38078:9503":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10218:2903":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:879:3462":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"14:165:16187":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5423:14282":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:4985:14236":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11574:3045":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:1496:11155":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:39480:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6317:17200":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:44824:28997":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:2728:16276":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:15944:20284":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:2622:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:44370:9190":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:4765:9248":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:8208:2718":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6927:17221":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:765:21818":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:1585:11165":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5742:17184":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:46930:9042":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7580:17237":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"11:673:3074":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:7366:3750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5390:14279":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:7322:27427":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:45995:3923":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:12851:2920":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14855:21551":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:1914:3511":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12433:2917":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:14284:20821":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8624:3716":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"16:6504:17207":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:9156:3074":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6629:15006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:44360:9189":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:46094:3895":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:9363:3312":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:22961:29205":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:4718:16896":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:3254:3458":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"10:36:33144":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:2854:16282":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:7857:17245":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1686:11174":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12175:17543":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:674:3435":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11644:22656":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:8265:14470":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"7:79:16035":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:43720:9163":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:3925:16356":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:16176:21786":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:11605:2911":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12671:17606":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:839:3461":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5329:14271":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:6802:16204":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:8342:3626":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:9858:17328":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:5174:3709":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7168:17227":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:1614:3446":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:46816:3897":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:44091:9162":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:46208:29009":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13292:2924":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:15635:21606":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:4141:3685":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:10741:27419":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:22772:29212":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:15734:21612":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:30901:3139":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:8247:14467":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:6670:15011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:3473:17478":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13899:20797":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:3569:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:42258:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:4091:3683":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"11:1582:16178":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:8805:3778":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:12345:895":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:3247:3074":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6478:14997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:22005:3585":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:46684:3919":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11036:3286":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:8534:3613":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:8332:25047":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:7389:11298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:32203:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:3637:3527":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:4531:16824":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7741:3031":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:40672:9450":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:44496:9639":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:39608:9227":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:7769:17242":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"15:327:3037":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6874:15053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5588:14299":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:7432:31713":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:40305:9161":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:15333:21583":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:670:21820":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:5695:3790":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11075:2897":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8195:3576":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:6609:15004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:4632:9237":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:2231:3045":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:46126:3950":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:14235:20817":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:2203:17403":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:5863:17190":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:14529:20838":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:623:34380":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:2636:16272":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:44057:9152":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:10259:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6650:15008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:1699:11175":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:1631:3459":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:46994:9046":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1663:11171":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:15463:21597":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:9781:17327":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13509:20299":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:11004:3790":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"11:1051:3455":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:32082:17257":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:21732:3866":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:4203:3690":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:22983:29032":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:11777:3659":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6532:15000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4870:14222":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:706:9148":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:3597:17496":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"9:178:3062":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:10759:2885":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:3655:3583":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:43361:29221":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:6430:4010":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:42871:29195":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:9719:27283":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:42005:3417":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:7561:15440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:3259:31704":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:957:3449":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:16050:20287":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:6738:15019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:15273:21577":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:22892:3664":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:30495:9210":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:3644:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:10905:17341":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10710:17338":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:5610:3788":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:21504:29888":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7321:3762":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:2004:771":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"11:710:3082":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:7537:15438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:23049:29116":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:513:17325":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:951:3448":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:44335:9187":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10419:2909":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:44048:9153":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:4934:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:3293:31726":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:5861:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:46352:3878":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:44743:4005":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:1092:3455":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:523:10262":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:6690:2761":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:6729:15018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:12328:17524":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:41880:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:2458:3561":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"18:507:34377":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:2768:16278":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:5766:3793":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:473:10256":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9322:3310":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4824:14219":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:7373:3071":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:7514:2769":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:12127:17479":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:5006:16954":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"11:2326:3454":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:5361:14275":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:7509:17231":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:14189:20815":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:479:10257":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:7642:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:7935:27416":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:38133:9504":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:11138:3613":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:22522:3991":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:8592:3652":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:13692:4007":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:2216:31710":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10284:2905":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:40541:3487":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:39443:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:42061:3077":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:4711:9246":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:1917:3459":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:7402:3445":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:8491:3584":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:2137:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11354:17406":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:531:21828":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:2680:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3218:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:586:3409":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:7907:3120":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:3842:16319":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:5052:14244":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:9178:3828":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:1351:3454":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:7539:17233":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5557:14296":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:44192:9182":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:10292:9083":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:597:17326":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"11:328:33160":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"14:220:16196":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10218:22585":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:30463:3138":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:22601:29104":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13325:2930":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"18:680:21821":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:1527:3079":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5436:14283":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:8643:3748":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13375:20289":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:9289:25011":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:7412:11283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5581:14298":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:42069:2761":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:6681:9466":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:47009:9047":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:10317:2906":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:41674:3651":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:150:2955":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:1855:3496":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:9671:17304":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:8282:14472":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:4940:16934":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:15266:21576":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10137:17302":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6895:17220":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5283:14265":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5802:17188":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:8290:2717":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9916:17330":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:6758:16205":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"9:447:16057":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:12335:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:32103:9559":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:669:3434":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"11:2352:3455":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:23071:29128":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:1083:3454":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4313:3717":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:2696:3623":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:5112:14248":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:46562:3913":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:8528:2908":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:7548:2712":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:46956:9044":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:32089:28558":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:3816:3475":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:3288:3457":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:3750:31908":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:22786:29108":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13437:20294":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7306:33597":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:3020:25056":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:6559:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:8136:17251":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:1891:3505":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:11688:17427":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:5415:33476":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:5824:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8173:3578":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10068:17313":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:46979:9045":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12969:17305":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40720:9461":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:10304:9089":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:43599:9127":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:42416:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12030:17476":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:9391:3811":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:5306:14268":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44492:9637":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:4479:3105":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:8288:14473":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2519:9520":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:2660:16273":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:10534:34349":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"18:689:21822":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40734:9462":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:42180:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:5769:17186":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:8093:17249":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:5250:14261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:8618:3657":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:304:2719":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:10509:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:14503:20836":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:980:3452":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:562:3407":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9886:17329":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:2369:16180":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:13753:20790":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:43609:9128":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:4976:16947":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:45803:3916":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13606:20306":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12056:17475":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:6854:3821":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:23082:29023":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:11730:17461":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:13538:20301":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:8259:14469":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:42375:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:9544:3511":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:3126:3104":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:11242:3588":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:6563:3445":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5472:14287":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:33473:9494":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:8317:14477":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:4821:17577":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:3055:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:1593:11166":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:860:33603":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:10877:17340":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:10908:25286":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:3646:22802":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:832:3447":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:22722:3098":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:33540:9493":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:41933:3762":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:373:3425":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:44512:9641":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:2961:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:40572:3115":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:1505:2761":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:0:2552":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"15:288:16210":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:43161:3274":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:9317:3293":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:6471:14996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:8702:3758":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:7144:17226":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12336:1673":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:5270:963":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:5576:3786":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:6909:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:14051:20807":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:22903:3679":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:30516:3103":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:11658:22670":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:15206:21572":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11227:17364":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:42078:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6634:3017":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:5763:3791":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"11:2548:33158":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:32078:27693":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:32171:2715":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:14298:20822":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"9:357:16073":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13344:2937":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:6466:17205":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:7528:17232":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:11932:9124":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:44812:9058":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4897:14225":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11089:17369":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:15608:21603":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"11:1142:16176":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:1555:3082":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:12792:17309":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:40601:9454":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:7056:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12089:17472":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:5400:2880":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10915:34364":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2308:3556":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:3554:9508":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:9276:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:261:33595":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:40869:3612":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:8328:14478":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:9444:3588":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:6417:14991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:2071:9530":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:13669:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:30874:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:42141:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:43520:28569":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:44692:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:8084:3515":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12572:2885":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:4329:3719":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:553:10266":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"9:502:16060":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:6160:16230":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:651:34377":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:43122:2702":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:3002:3530":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:2732:3614":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:40663:9458":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:2374:16260":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:10913:25316":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6435:14992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:14868:21552":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:3424:3630":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:22845:29028":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:3894:3658":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:2535:31745":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:1073:31908":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12289:17523":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:3046:31899":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12107:2885":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:15023:21560":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8258:3307":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13046:17312":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13959:20800":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11898:17490":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:43842:9169":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12213:17556":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:40400:9264":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:22794:29182":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:46158:29218":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:45945:3864":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:22810:29114":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:4412:9234":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:15814:21618":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6706:15015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:5046:14243":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:10439:2881":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:947:3083":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:12875:9147":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:15092:21562":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:7428:17229":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8872:3781":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:39588:9509":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8178:3575":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:44764:29242":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"16:6385:17201":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:4913:3701":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:11504:27413":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:32113:2714":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6494:17206":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:42925:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:5169:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:9707:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"11:844:3449":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:8003:3415":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:44542:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:16198:21788":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:2474:3566":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:39558:2705":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:10715:3630":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:39430:9507":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:32112:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:1485:11153":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:43691:9132":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:1853:3495":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:2245:3085":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6047:17194":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6098:17196":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:7980:3426":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:14091:20810":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15655:21608":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:43996:9168":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:7866:17326":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6976:3021":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:44524:3129":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:45735:3915":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:3311:9072":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:5156:3754":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:21467:3139":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:1107:16175":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:6965:9216":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:4560:16830":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1639:11169":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:9940:29947":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:1526:11159":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:8654:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"14:7:16186":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:10929:24973":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:3264:17473":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:1474:3074":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:44566:3861":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}